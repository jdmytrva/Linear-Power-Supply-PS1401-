
LinearPowerSupply_PS1401mA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054d4  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000155c  080056a4  080056a4  000156a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c00  08006c00  00020294  2**0
                  CONTENTS
  4 .ARM          00000000  08006c00  08006c00  00020294  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c00  08006c00  00020294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c00  08006c00  00016c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c04  08006c04  00016c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000294  20000000  08006c08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000770  20000294  08006e9c  00020294  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a04  08006e9c  00020a04  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001217d  00000000  00000000  000202bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002814  00000000  00000000  0003243a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000532b  00000000  00000000  00034c4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000818  00000000  00000000  00039f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000e08  00000000  00000000  0003a798  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000d56d  00000000  00000000  0003b5a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000776d  00000000  00000000  00048b0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0004a2ef  00000000  00000000  0005027a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0009a569  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001774  00000000  00000000  0009a5e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000294 	.word	0x20000294
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800568c 	.word	0x0800568c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000298 	.word	0x20000298
 800020c:	0800568c 	.word	0x0800568c

08000210 <flash_erase_page>:
	return !(FLASH->SR & FLASH_SR_EOP);
}

void flash_erase_page(uint32_t address)
{
	while (FLASH->SR & FLASH_SR_BSY);
 8000210:	4a0e      	ldr	r2, [pc, #56]	; (800024c <flash_erase_page+0x3c>)
 8000212:	4613      	mov	r3, r2
 8000214:	68d1      	ldr	r1, [r2, #12]
 8000216:	07c9      	lsls	r1, r1, #31
 8000218:	d4fc      	bmi.n	8000214 <flash_erase_page+0x4>

		if (FLASH->SR & FLASH_SR_EOP) {
 800021a:	68d1      	ldr	r1, [r2, #12]
 800021c:	0689      	lsls	r1, r1, #26
			FLASH->SR = FLASH_SR_EOP;
 800021e:	bf44      	itt	mi
 8000220:	2120      	movmi	r1, #32
 8000222:	60d1      	strmi	r1, [r2, #12]
		}

		FLASH->CR |= FLASH_CR_PER;
 8000224:	691a      	ldr	r2, [r3, #16]
 8000226:	f042 0202 	orr.w	r2, r2, #2
 800022a:	611a      	str	r2, [r3, #16]
		FLASH->AR = address;
 800022c:	6158      	str	r0, [r3, #20]
		FLASH->CR |= FLASH_CR_STRT;
 800022e:	691a      	ldr	r2, [r3, #16]
 8000230:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000234:	611a      	str	r2, [r3, #16]
		while (!(FLASH->SR & FLASH_SR_EOP));
 8000236:	4b05      	ldr	r3, [pc, #20]	; (800024c <flash_erase_page+0x3c>)
 8000238:	68da      	ldr	r2, [r3, #12]
 800023a:	0692      	lsls	r2, r2, #26
 800023c:	d5fc      	bpl.n	8000238 <flash_erase_page+0x28>
		FLASH->SR = FLASH_SR_EOP;
 800023e:	2220      	movs	r2, #32
 8000240:	60da      	str	r2, [r3, #12]
		FLASH->CR &= ~FLASH_CR_PER;
 8000242:	691a      	ldr	r2, [r3, #16]
 8000244:	f022 0202 	bic.w	r2, r2, #2
 8000248:	611a      	str	r2, [r3, #16]
}
 800024a:	4770      	bx	lr
 800024c:	40022000 	.word	0x40022000

08000250 <flash_unlock>:


void flash_unlock(void)
{
	  FLASH->KEYR = FLASH_KEY1;
 8000250:	4b03      	ldr	r3, [pc, #12]	; (8000260 <flash_unlock+0x10>)
 8000252:	4a04      	ldr	r2, [pc, #16]	; (8000264 <flash_unlock+0x14>)
 8000254:	605a      	str	r2, [r3, #4]
	  FLASH->KEYR = FLASH_KEY2;
 8000256:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800025a:	605a      	str	r2, [r3, #4]
}
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	40022000 	.word	0x40022000
 8000264:	45670123 	.word	0x45670123

08000268 <flash_lock>:

void flash_lock()
{
	FLASH->CR |= FLASH_CR_LOCK;
 8000268:	4a02      	ldr	r2, [pc, #8]	; (8000274 <flash_lock+0xc>)
 800026a:	6913      	ldr	r3, [r2, #16]
 800026c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000270:	6113      	str	r3, [r2, #16]
}
 8000272:	4770      	bx	lr
 8000274:	40022000 	.word	0x40022000

08000278 <flash_write>:

void flash_write(uint32_t address,uint32_t data)
{


	while (FLASH->SR & FLASH_SR_BSY);
 8000278:	4b11      	ldr	r3, [pc, #68]	; (80002c0 <flash_write+0x48>)
{
 800027a:	b510      	push	{r4, lr}
 800027c:	461a      	mov	r2, r3
	while (FLASH->SR & FLASH_SR_BSY);
 800027e:	68dc      	ldr	r4, [r3, #12]
 8000280:	07e4      	lsls	r4, r4, #31
 8000282:	d4fc      	bmi.n	800027e <flash_write+0x6>
	if (FLASH->SR & FLASH_SR_EOP) {
 8000284:	68dc      	ldr	r4, [r3, #12]
 8000286:	06a4      	lsls	r4, r4, #26
		FLASH->SR = FLASH_SR_EOP;
 8000288:	bf44      	itt	mi
 800028a:	2420      	movmi	r4, #32
 800028c:	60dc      	strmi	r4, [r3, #12]
	}

	FLASH->CR |= FLASH_CR_PG;
 800028e:	6913      	ldr	r3, [r2, #16]
 8000290:	f043 0301 	orr.w	r3, r3, #1
 8000294:	6113      	str	r3, [r2, #16]


    *(__IO uint16_t*)address = (uint16_t)data;
    while (!(FLASH->SR & FLASH_SR_EOP));
 8000296:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <flash_write+0x48>)
    *(__IO uint16_t*)address = (uint16_t)data;
 8000298:	b28b      	uxth	r3, r1
 800029a:	8003      	strh	r3, [r0, #0]
 800029c:	4613      	mov	r3, r2
    while (!(FLASH->SR & FLASH_SR_EOP));
 800029e:	68d4      	ldr	r4, [r2, #12]
 80002a0:	06a4      	lsls	r4, r4, #26
 80002a2:	d5fc      	bpl.n	800029e <flash_write+0x26>
    		FLASH->SR = FLASH_SR_EOP;
 80002a4:	2420      	movs	r4, #32


	address+=2;
	data>>=16;
    *(__IO uint16_t*)address = (uint16_t)data;
 80002a6:	0c09      	lsrs	r1, r1, #16
    		FLASH->SR = FLASH_SR_EOP;
 80002a8:	60d4      	str	r4, [r2, #12]
    *(__IO uint16_t*)address = (uint16_t)data;
 80002aa:	8041      	strh	r1, [r0, #2]
    while (!(FLASH->SR & FLASH_SR_EOP));
 80002ac:	68da      	ldr	r2, [r3, #12]
 80002ae:	0692      	lsls	r2, r2, #26
 80002b0:	d5fc      	bpl.n	80002ac <flash_write+0x34>
    		FLASH->SR = FLASH_SR_EOP;
 80002b2:	2220      	movs	r2, #32
 80002b4:	60da      	str	r2, [r3, #12]

    FLASH->CR &= ~(FLASH_CR_PG);
 80002b6:	691a      	ldr	r2, [r3, #16]
 80002b8:	f022 0201 	bic.w	r2, r2, #1
 80002bc:	611a      	str	r2, [r3, #16]

}
 80002be:	bd10      	pop	{r4, pc}
 80002c0:	40022000 	.word	0x40022000

080002c4 <flash_write_block>:
#define ADDRESS_FLASH_LOG          FLASH_BASE+1024*121
void flash_write_block()
{
 80002c4:	b570      	push	{r4, r5, r6, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002c6:	b672      	cpsid	i
	__disable_irq();
	flash_unlock();
 80002c8:	f7ff ffc2 	bl	8000250 <flash_unlock>
	uint32_t pageAdr;
	pageAdr = ADDRESS_FLASH_LOG;
	uint32_t size =  (uint32_t)sizeof(LoggingData);
	uint32_t *source_adr = (void *)&LoggingData;

	logDebugD("size: ",size,0);
 80002cc:	4812      	ldr	r0, [pc, #72]	; (8000318 <flash_write_block+0x54>)
 80002ce:	f004 fe63 	bl	8004f98 <printToBufferWithoutEndUART1>
	logDebugD("val: ",*(source_adr + 0),0);
 80002d2:	4d12      	ldr	r5, [pc, #72]	; (800031c <flash_write_block+0x58>)
	logDebugD("size: ",size,0);
 80002d4:	2200      	movs	r2, #0
 80002d6:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 80002da:	4811      	ldr	r0, [pc, #68]	; (8000320 <flash_write_block+0x5c>)
 80002dc:	f004 fea0 	bl	8005020 <printToBufferUART1D>
	logDebugD("val: ",*(source_adr + 0),0);
 80002e0:	480d      	ldr	r0, [pc, #52]	; (8000318 <flash_write_block+0x54>)
 80002e2:	f004 fe59 	bl	8004f98 <printToBufferWithoutEndUART1>
 80002e6:	2200      	movs	r2, #0
 80002e8:	6829      	ldr	r1, [r5, #0]
 80002ea:	480e      	ldr	r0, [pc, #56]	; (8000324 <flash_write_block+0x60>)
 80002ec:	f004 fe98 	bl	8005020 <printToBufferUART1D>


	flash_erase_page(pageAdr );
 80002f0:	480d      	ldr	r0, [pc, #52]	; (8000328 <flash_write_block+0x64>)
 80002f2:	f7ff ff8d 	bl	8000210 <flash_erase_page>
 80002f6:	4c0c      	ldr	r4, [pc, #48]	; (8000328 <flash_write_block+0x64>)
	for (i = 0; i < size/4; ++i)
 80002f8:	4e0c      	ldr	r6, [pc, #48]	; (800032c <flash_write_block+0x68>)
	{
		flash_write((uint32_t)(pageAdr + i*4), *(source_adr + i));        // ������� ����� �������� ������
 80002fa:	f104 4378 	add.w	r3, r4, #4160749568	; 0xf8000000
 80002fe:	f5a3 33f2 	sub.w	r3, r3, #123904	; 0x1e400
 8000302:	4620      	mov	r0, r4
 8000304:	58e9      	ldr	r1, [r5, r3]
 8000306:	3404      	adds	r4, #4
 8000308:	f7ff ffb6 	bl	8000278 <flash_write>
	for (i = 0; i < size/4; ++i)
 800030c:	42b4      	cmp	r4, r6
 800030e:	d1f4      	bne.n	80002fa <flash_write_block+0x36>
    }

	flash_lock();
 8000310:	f7ff ffaa 	bl	8000268 <flash_lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000314:	b662      	cpsie	i
	__enable_irq();
	return 1;
}
 8000316:	bd70      	pop	{r4, r5, r6, pc}
 8000318:	08005a98 	.word	0x08005a98
 800031c:	20000858 	.word	0x20000858
 8000320:	08005aa0 	.word	0x08005aa0
 8000324:	08005aa7 	.word	0x08005aa7
 8000328:	0801e400 	.word	0x0801e400
 800032c:	0801e59c 	.word	0x0801e59c

08000330 <flash_read_block>:
uint8_t flash_read_block()
{
 8000330:	b510      	push	{r4, lr}
 8000332:	4b07      	ldr	r3, [pc, #28]	; (8000350 <flash_read_block+0x20>)
	uint32_t *source_adr = ADDRESS_FLASH_LOG;
	uint32_t *dest_adr = (void *)&LoggingData;

	for (i=0; i < size/4; ++i)
	{
		*(dest_adr + i) = *(__IO uint32_t*)(source_adr + i);
 8000334:	4807      	ldr	r0, [pc, #28]	; (8000354 <flash_read_block+0x24>)
	for (i=0; i < size/4; ++i)
 8000336:	4908      	ldr	r1, [pc, #32]	; (8000358 <flash_read_block+0x28>)
		*(dest_adr + i) = *(__IO uint32_t*)(source_adr + i);
 8000338:	681c      	ldr	r4, [r3, #0]
 800033a:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 800033e:	3304      	adds	r3, #4
 8000340:	f5a2 32f2 	sub.w	r2, r2, #123904	; 0x1e400
	for (i=0; i < size/4; ++i)
 8000344:	428b      	cmp	r3, r1
		*(dest_adr + i) = *(__IO uint32_t*)(source_adr + i);
 8000346:	5014      	str	r4, [r2, r0]
	for (i=0; i < size/4; ++i)
 8000348:	d1f6      	bne.n	8000338 <flash_read_block+0x8>
	}

	return 1;

}
 800034a:	2001      	movs	r0, #1
 800034c:	bd10      	pop	{r4, pc}
 800034e:	bf00      	nop
 8000350:	0801e400 	.word	0x0801e400
 8000354:	20000858 	.word	0x20000858
 8000358:	0801e59c 	.word	0x0801e59c

0800035c <flash_read>:

uint32_t flash_read(uint32_t address, uint32_t MinValue, uint32_t MaxValue)
{
 800035c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t EEpromValue;
	EEpromValue = (*(__IO uint32_t*) address);
 800035e:	6804      	ldr	r4, [r0, #0]
{
 8000360:	4607      	mov	r7, r0
	if ((EEpromValue>=MinValue) && (EEpromValue<=MaxValue))
 8000362:	428c      	cmp	r4, r1
{
 8000364:	460e      	mov	r6, r1
	if ((EEpromValue>=MinValue) && (EEpromValue<=MaxValue))
 8000366:	d301      	bcc.n	800036c <flash_read+0x10>
 8000368:	4294      	cmp	r4, r2
 800036a:	d91b      	bls.n	80003a4 <flash_read+0x48>
	{
		return EEpromValue;
	}
	else // fail to read
	{
		EEpromReadStatus = 0;
 800036c:	2500      	movs	r5, #0
 800036e:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <flash_read+0x4c>)
		logDebugD("Fail to read address: ",address,0);
 8000370:	480e      	ldr	r0, [pc, #56]	; (80003ac <flash_read+0x50>)
		EEpromReadStatus = 0;
 8000372:	701d      	strb	r5, [r3, #0]
		logDebugD("Fail to read address: ",address,0);
 8000374:	f004 fe10 	bl	8004f98 <printToBufferWithoutEndUART1>
 8000378:	462a      	mov	r2, r5
 800037a:	4639      	mov	r1, r7
 800037c:	480c      	ldr	r0, [pc, #48]	; (80003b0 <flash_read+0x54>)
 800037e:	f004 fe4f 	bl	8005020 <printToBufferUART1D>
		logDebugD("EEpromValue is : ",EEpromValue,0);
 8000382:	480a      	ldr	r0, [pc, #40]	; (80003ac <flash_read+0x50>)
 8000384:	f004 fe08 	bl	8004f98 <printToBufferWithoutEndUART1>
 8000388:	4621      	mov	r1, r4
 800038a:	462a      	mov	r2, r5
 800038c:	4809      	ldr	r0, [pc, #36]	; (80003b4 <flash_read+0x58>)
 800038e:	f004 fe47 	bl	8005020 <printToBufferUART1D>
		logDebugD("FLASH_BASE+1024*123 : ",FLASH_BASE+1024*123,0);
 8000392:	4806      	ldr	r0, [pc, #24]	; (80003ac <flash_read+0x50>)
 8000394:	f004 fe00 	bl	8004f98 <printToBufferWithoutEndUART1>
 8000398:	462a      	mov	r2, r5
 800039a:	4907      	ldr	r1, [pc, #28]	; (80003b8 <flash_read+0x5c>)
 800039c:	4807      	ldr	r0, [pc, #28]	; (80003bc <flash_read+0x60>)
 800039e:	f004 fe3f 	bl	8005020 <printToBufferUART1D>
		return MinValue;
 80003a2:	4634      	mov	r4, r6
	}
}
 80003a4:	4620      	mov	r0, r4
 80003a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80003a8:	20000000 	.word	0x20000000
 80003ac:	08005a98 	.word	0x08005a98
 80003b0:	08005a58 	.word	0x08005a58
 80003b4:	08005a6f 	.word	0x08005a6f
 80003b8:	0801ec00 	.word	0x0801ec00
 80003bc:	08005a81 	.word	0x08005a81

080003c0 <CalibrationWriteToFlash>:
	__enable_irq();

}

uint8_t CalibrationWriteToFlash(void)
{
 80003c0:	b510      	push	{r4, lr}
	flash_erase_page( CalibrationData.CRC_AddresInEEprom);
 80003c2:	4c19      	ldr	r4, [pc, #100]	; (8000428 <CalibrationWriteToFlash+0x68>)
 80003c4:	6860      	ldr	r0, [r4, #4]
 80003c6:	f7ff ff23 	bl	8000210 <flash_erase_page>
	flash_write( CalibrationData.CRC_AddresInEEprom, CalibrationData.CRC_data);
 80003ca:	e9d4 1000 	ldrd	r1, r0, [r4]
 80003ce:	f7ff ff53 	bl	8000278 <flash_write>
	flash_write( CalibrationData.Calibration0ValueForCurrent_AddresInEEprom, CalibrationData.Calibration0ValueForCurrent);
 80003d2:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 80003d6:	f7ff ff4f 	bl	8000278 <flash_write>
	flash_write( CalibrationData.Calibration0ValueForCurrent1_AddresInEEprom, CalibrationData.Calibration0ValueForCurrent1);
 80003da:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 80003de:	f7ff ff4b 	bl	8000278 <flash_write>
	flash_write( CalibrationData.CalibrationValueForCurrent_AddresInEEprom, CalibrationData.CalibrationValueForCurrent_x1);
 80003e2:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 80003e6:	f7ff ff47 	bl	8000278 <flash_write>
	flash_write( CalibrationData.CalibrationValueForCurrent1_AddresInEEprom, CalibrationData.CalibrationValueForCurrent_x50);
 80003ea:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 80003ee:	f7ff ff43 	bl	8000278 <flash_write>
	flash_write( CalibrationData.CalibrationValueForVoltage_AddresInEEprom, CalibrationData.CalibrationValueForTemperature);
 80003f2:	e9d4 100a 	ldrd	r1, r0, [r4, #40]	; 0x28
 80003f6:	f7ff ff3f 	bl	8000278 <flash_write>
	flash_write( CalibrationData.CalibrationValueForVoltage1_AddresInEEprom, CalibrationData.CalibrationValueForU_OUT);
 80003fa:	e9d4 100c 	ldrd	r1, r0, [r4, #48]	; 0x30
 80003fe:	f7ff ff3b 	bl	8000278 <flash_write>
	flash_write( CalibrationData.CalibrationValueForVoltage2_AddresInEEprom, CalibrationData.CalibrationValueForVoltage2);
 8000402:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
 8000406:	f7ff ff37 	bl	8000278 <flash_write>
	flash_write( CalibrationData.ResistanceComp_Ishunt_Wires_AddresInEEprom, CalibrationData.ResistanceComp_Ishunt_Wires);
 800040a:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
 800040e:	f7ff ff33 	bl	8000278 <flash_write>
	flash_write( CalibrationData.ResistanceComp_MOSFET_AddresInEEprom, CalibrationData.ResistanceComp_MOSFET);
 8000412:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
 8000416:	f7ff ff2f 	bl	8000278 <flash_write>
	logDebug("CalibrationWriteToFlash ");
 800041a:	4804      	ldr	r0, [pc, #16]	; (800042c <CalibrationWriteToFlash+0x6c>)
 800041c:	f004 fdbc 	bl	8004f98 <printToBufferWithoutEndUART1>
 8000420:	4803      	ldr	r0, [pc, #12]	; (8000430 <CalibrationWriteToFlash+0x70>)
 8000422:	f004 fd4f 	bl	8004ec4 <printToBufferUART1>

}
 8000426:	bd10      	pop	{r4, pc}
 8000428:	20000004 	.word	0x20000004
 800042c:	08005a98 	.word	0x08005a98
 8000430:	08005801 	.word	0x08005801

08000434 <CalibrationFactoryWriteToFlash>:
uint8_t CalibrationFactoryWriteToFlash(void)
{
 8000434:	b510      	push	{r4, lr}
	flash_erase_page( CalibrationDataFactory.CRC_AddresInEEprom);
 8000436:	4c19      	ldr	r4, [pc, #100]	; (800049c <CalibrationFactoryWriteToFlash+0x68>)
 8000438:	6860      	ldr	r0, [r4, #4]
 800043a:	f7ff fee9 	bl	8000210 <flash_erase_page>
	flash_write( CalibrationDataFactory.CRC_AddresInEEprom, CalibrationDataFactory.CRC_data);
 800043e:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000442:	f7ff ff19 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.Calibration0ValueForCurrent_AddresInEEprom, CalibrationDataFactory.Calibration0ValueForCurrent);
 8000446:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 800044a:	f7ff ff15 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.Calibration0ValueForCurrent1_AddresInEEprom, CalibrationDataFactory.Calibration0ValueForCurrent1);
 800044e:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 8000452:	f7ff ff11 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForCurrent_AddresInEEprom, CalibrationDataFactory.CalibrationValueForCurrent_x1);
 8000456:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 800045a:	f7ff ff0d 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForCurrent1_AddresInEEprom, CalibrationDataFactory.CalibrationValueForCurrent_x50);
 800045e:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 8000462:	f7ff ff09 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForVoltage_AddresInEEprom, CalibrationDataFactory.CalibrationValueForTemperature);
 8000466:	e9d4 100a 	ldrd	r1, r0, [r4, #40]	; 0x28
 800046a:	f7ff ff05 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForVoltage1_AddresInEEprom, CalibrationDataFactory.CalibrationValueForU_OUT);
 800046e:	e9d4 100c 	ldrd	r1, r0, [r4, #48]	; 0x30
 8000472:	f7ff ff01 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForVoltage2_AddresInEEprom, CalibrationDataFactory.CalibrationValueForVoltage2);
 8000476:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
 800047a:	f7ff fefd 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.ResistanceComp_Ishunt_Wires_AddresInEEprom, CalibrationDataFactory.ResistanceComp_Ishunt_Wires);
 800047e:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
 8000482:	f7ff fef9 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.ResistanceComp_MOSFET_AddresInEEprom, CalibrationDataFactory.ResistanceComp_MOSFET);
 8000486:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
 800048a:	f7ff fef5 	bl	8000278 <flash_write>
	logDebug("CalibrationFactoryWriteToFlash ");
 800048e:	4804      	ldr	r0, [pc, #16]	; (80004a0 <CalibrationFactoryWriteToFlash+0x6c>)
 8000490:	f004 fd82 	bl	8004f98 <printToBufferWithoutEndUART1>
 8000494:	4803      	ldr	r0, [pc, #12]	; (80004a4 <CalibrationFactoryWriteToFlash+0x70>)
 8000496:	f004 fd15 	bl	8004ec4 <printToBufferUART1>
}
 800049a:	bd10      	pop	{r4, pc}
 800049c:	20000054 	.word	0x20000054
 80004a0:	08005a98 	.word	0x08005a98
 80004a4:	080057a4 	.word	0x080057a4

080004a8 <CalibrationReadFromFlash>:
uint8_t CalibrationReadFromFlash(void)
{
 80004a8:	b538      	push	{r3, r4, r5, lr}
	CalibrationData.CRC_data = flash_read(CalibrationData.CRC_AddresInEEprom,0,256);
 80004aa:	4c24      	ldr	r4, [pc, #144]	; (800053c <CalibrationReadFromFlash+0x94>)
 80004ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004b0:	2100      	movs	r1, #0
 80004b2:	6860      	ldr	r0, [r4, #4]
 80004b4:	f7ff ff52 	bl	800035c <flash_read>
	CalibrationData.Calibration0ValueForCurrent = flash_read(CalibrationData.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 80004b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	CalibrationData.CRC_data = flash_read(CalibrationData.CRC_AddresInEEprom,0,256);
 80004bc:	6020      	str	r0, [r4, #0]
	CalibrationData.Calibration0ValueForCurrent = flash_read(CalibrationData.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 80004be:	2100      	movs	r1, #0
 80004c0:	68e0      	ldr	r0, [r4, #12]
 80004c2:	f7ff ff4b 	bl	800035c <flash_read>
	CalibrationData.Calibration0ValueForCurrent1 = flash_read(CalibrationData.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 80004c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	CalibrationData.Calibration0ValueForCurrent = flash_read(CalibrationData.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 80004ca:	60a0      	str	r0, [r4, #8]
	CalibrationData.Calibration0ValueForCurrent1 = flash_read(CalibrationData.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 80004cc:	2100      	movs	r1, #0
 80004ce:	6960      	ldr	r0, [r4, #20]
 80004d0:	f7ff ff44 	bl	800035c <flash_read>
	CalibrationData.CalibrationValueForCurrent_x1 = flash_read(CalibrationData.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 80004d4:	4d1a      	ldr	r5, [pc, #104]	; (8000540 <CalibrationReadFromFlash+0x98>)
	CalibrationData.Calibration0ValueForCurrent1 = flash_read(CalibrationData.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 80004d6:	6120      	str	r0, [r4, #16]
	CalibrationData.CalibrationValueForCurrent_x1 = flash_read(CalibrationData.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 80004d8:	462a      	mov	r2, r5
 80004da:	210a      	movs	r1, #10
 80004dc:	69e0      	ldr	r0, [r4, #28]
 80004de:	f7ff ff3d 	bl	800035c <flash_read>
	CalibrationData.CalibrationValueForCurrent_x50 = flash_read(CalibrationData.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 80004e2:	462a      	mov	r2, r5
	CalibrationData.CalibrationValueForCurrent_x1 = flash_read(CalibrationData.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 80004e4:	61a0      	str	r0, [r4, #24]
	CalibrationData.CalibrationValueForCurrent_x50 = flash_read(CalibrationData.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 80004e6:	210a      	movs	r1, #10
 80004e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80004ea:	f7ff ff37 	bl	800035c <flash_read>
	CalibrationData.CalibrationValueForTemperature = flash_read(CalibrationData.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 80004ee:	462a      	mov	r2, r5
	CalibrationData.CalibrationValueForCurrent_x50 = flash_read(CalibrationData.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 80004f0:	6220      	str	r0, [r4, #32]
	CalibrationData.CalibrationValueForTemperature = flash_read(CalibrationData.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 80004f2:	210a      	movs	r1, #10
 80004f4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80004f6:	f7ff ff31 	bl	800035c <flash_read>
	CalibrationData.CalibrationValueForU_OUT = flash_read(CalibrationData.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 80004fa:	462a      	mov	r2, r5
	CalibrationData.CalibrationValueForTemperature = flash_read(CalibrationData.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 80004fc:	62a0      	str	r0, [r4, #40]	; 0x28
	CalibrationData.CalibrationValueForU_OUT = flash_read(CalibrationData.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 80004fe:	210a      	movs	r1, #10
 8000500:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8000502:	f7ff ff2b 	bl	800035c <flash_read>
	CalibrationData.CalibrationValueForVoltage2 = flash_read(CalibrationData.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 8000506:	462a      	mov	r2, r5
	CalibrationData.CalibrationValueForU_OUT = flash_read(CalibrationData.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 8000508:	6320      	str	r0, [r4, #48]	; 0x30
	CalibrationData.CalibrationValueForVoltage2 = flash_read(CalibrationData.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 800050a:	210a      	movs	r1, #10
 800050c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800050e:	f7ff ff25 	bl	800035c <flash_read>
	CalibrationData.ResistanceComp_Ishunt_Wires = flash_read(CalibrationData.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,200);
 8000512:	22c8      	movs	r2, #200	; 0xc8
	CalibrationData.CalibrationValueForVoltage2 = flash_read(CalibrationData.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 8000514:	63a0      	str	r0, [r4, #56]	; 0x38
	CalibrationData.ResistanceComp_Ishunt_Wires = flash_read(CalibrationData.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,200);
 8000516:	2146      	movs	r1, #70	; 0x46
 8000518:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800051a:	f7ff ff1f 	bl	800035c <flash_read>
	CalibrationData.ResistanceComp_MOSFET = flash_read(CalibrationData.ResistanceComp_MOSFET_AddresInEEprom,10,200);
 800051e:	22c8      	movs	r2, #200	; 0xc8
	CalibrationData.ResistanceComp_Ishunt_Wires = flash_read(CalibrationData.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,200);
 8000520:	6420      	str	r0, [r4, #64]	; 0x40
	CalibrationData.ResistanceComp_MOSFET = flash_read(CalibrationData.ResistanceComp_MOSFET_AddresInEEprom,10,200);
 8000522:	210a      	movs	r1, #10
 8000524:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8000526:	f7ff ff19 	bl	800035c <flash_read>
 800052a:	64a0      	str	r0, [r4, #72]	; 0x48
	logDebug("CalibrationReadFromFlash ");
 800052c:	4805      	ldr	r0, [pc, #20]	; (8000544 <CalibrationReadFromFlash+0x9c>)
 800052e:	f004 fd33 	bl	8004f98 <printToBufferWithoutEndUART1>
 8000532:	4805      	ldr	r0, [pc, #20]	; (8000548 <CalibrationReadFromFlash+0xa0>)
 8000534:	f004 fcc6 	bl	8004ec4 <printToBufferUART1>
}
 8000538:	bd38      	pop	{r3, r4, r5, pc}
 800053a:	bf00      	nop
 800053c:	20000004 	.word	0x20000004
 8000540:	000186a0 	.word	0x000186a0
 8000544:	08005a98 	.word	0x08005a98
 8000548:	080057c4 	.word	0x080057c4

0800054c <CalibrationReadFromFlashForVerify>:
uint8_t CalibrationReadFromFlashForVerify(void)
{
 800054c:	b538      	push	{r3, r4, r5, lr}
	CalibrationDataForVerify.CRC_data = flash_read(CalibrationDataForVerify.CRC_AddresInEEprom,0,256);
 800054e:	4c24      	ldr	r4, [pc, #144]	; (80005e0 <CalibrationReadFromFlashForVerify+0x94>)
 8000550:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000554:	2100      	movs	r1, #0
 8000556:	6860      	ldr	r0, [r4, #4]
 8000558:	f7ff ff00 	bl	800035c <flash_read>
	CalibrationDataForVerify.Calibration0ValueForCurrent = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 800055c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	CalibrationDataForVerify.CRC_data = flash_read(CalibrationDataForVerify.CRC_AddresInEEprom,0,256);
 8000560:	6020      	str	r0, [r4, #0]
	CalibrationDataForVerify.Calibration0ValueForCurrent = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 8000562:	2100      	movs	r1, #0
 8000564:	68e0      	ldr	r0, [r4, #12]
 8000566:	f7ff fef9 	bl	800035c <flash_read>
	CalibrationDataForVerify.Calibration0ValueForCurrent1 = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 800056a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	CalibrationDataForVerify.Calibration0ValueForCurrent = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 800056e:	60a0      	str	r0, [r4, #8]
	CalibrationDataForVerify.Calibration0ValueForCurrent1 = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 8000570:	2100      	movs	r1, #0
 8000572:	6960      	ldr	r0, [r4, #20]
 8000574:	f7ff fef2 	bl	800035c <flash_read>
	CalibrationDataForVerify.CalibrationValueForCurrent_x1 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 8000578:	4d1a      	ldr	r5, [pc, #104]	; (80005e4 <CalibrationReadFromFlashForVerify+0x98>)
	CalibrationDataForVerify.Calibration0ValueForCurrent1 = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 800057a:	6120      	str	r0, [r4, #16]
	CalibrationDataForVerify.CalibrationValueForCurrent_x1 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 800057c:	462a      	mov	r2, r5
 800057e:	210a      	movs	r1, #10
 8000580:	69e0      	ldr	r0, [r4, #28]
 8000582:	f7ff feeb 	bl	800035c <flash_read>
	CalibrationDataForVerify.CalibrationValueForCurrent_x50 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 8000586:	462a      	mov	r2, r5
	CalibrationDataForVerify.CalibrationValueForCurrent_x1 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 8000588:	61a0      	str	r0, [r4, #24]
	CalibrationDataForVerify.CalibrationValueForCurrent_x50 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 800058a:	210a      	movs	r1, #10
 800058c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800058e:	f7ff fee5 	bl	800035c <flash_read>
	CalibrationDataForVerify.CalibrationValueForTemperature = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 8000592:	462a      	mov	r2, r5
	CalibrationDataForVerify.CalibrationValueForCurrent_x50 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 8000594:	6220      	str	r0, [r4, #32]
	CalibrationDataForVerify.CalibrationValueForTemperature = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 8000596:	210a      	movs	r1, #10
 8000598:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800059a:	f7ff fedf 	bl	800035c <flash_read>
	CalibrationDataForVerify.CalibrationValueForU_OUT = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 800059e:	462a      	mov	r2, r5
	CalibrationDataForVerify.CalibrationValueForTemperature = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 80005a0:	62a0      	str	r0, [r4, #40]	; 0x28
	CalibrationDataForVerify.CalibrationValueForU_OUT = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 80005a2:	210a      	movs	r1, #10
 80005a4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80005a6:	f7ff fed9 	bl	800035c <flash_read>
	CalibrationDataForVerify.CalibrationValueForVoltage2 = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 80005aa:	462a      	mov	r2, r5
	CalibrationDataForVerify.CalibrationValueForU_OUT = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 80005ac:	6320      	str	r0, [r4, #48]	; 0x30
	CalibrationDataForVerify.CalibrationValueForVoltage2 = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 80005ae:	210a      	movs	r1, #10
 80005b0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80005b2:	f7ff fed3 	bl	800035c <flash_read>
	CalibrationDataForVerify.ResistanceComp_Ishunt_Wires = flash_read(CalibrationDataForVerify.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,200);
 80005b6:	22c8      	movs	r2, #200	; 0xc8
	CalibrationDataForVerify.CalibrationValueForVoltage2 = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 80005b8:	63a0      	str	r0, [r4, #56]	; 0x38
	CalibrationDataForVerify.ResistanceComp_Ishunt_Wires = flash_read(CalibrationDataForVerify.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,200);
 80005ba:	2146      	movs	r1, #70	; 0x46
 80005bc:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80005be:	f7ff fecd 	bl	800035c <flash_read>
	CalibrationDataForVerify.ResistanceComp_MOSFET = flash_read(CalibrationDataForVerify.ResistanceComp_MOSFET_AddresInEEprom,10,200);
 80005c2:	22c8      	movs	r2, #200	; 0xc8
	CalibrationDataForVerify.ResistanceComp_Ishunt_Wires = flash_read(CalibrationDataForVerify.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,200);
 80005c4:	6420      	str	r0, [r4, #64]	; 0x40
	CalibrationDataForVerify.ResistanceComp_MOSFET = flash_read(CalibrationDataForVerify.ResistanceComp_MOSFET_AddresInEEprom,10,200);
 80005c6:	210a      	movs	r1, #10
 80005c8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80005ca:	f7ff fec7 	bl	800035c <flash_read>
 80005ce:	64a0      	str	r0, [r4, #72]	; 0x48
	logDebug("CalibrationReadFromFlashForVerify ");
 80005d0:	4805      	ldr	r0, [pc, #20]	; (80005e8 <CalibrationReadFromFlashForVerify+0x9c>)
 80005d2:	f004 fce1 	bl	8004f98 <printToBufferWithoutEndUART1>
 80005d6:	4805      	ldr	r0, [pc, #20]	; (80005ec <CalibrationReadFromFlashForVerify+0xa0>)
 80005d8:	f004 fc74 	bl	8004ec4 <printToBufferUART1>
}
 80005dc:	bd38      	pop	{r3, r4, r5, pc}
 80005de:	bf00      	nop
 80005e0:	200000a4 	.word	0x200000a4
 80005e4:	000186a0 	.word	0x000186a0
 80005e8:	08005a98 	.word	0x08005a98
 80005ec:	080057de 	.word	0x080057de

080005f0 <SettingsWriteToFlash>:
//==============
uint8_t SettingsWriteToFlash(void)
{
 80005f0:	b510      	push	{r4, lr}
	flash_erase_page( SettingsData.CRC_AddresInEEprom);
 80005f2:	4c17      	ldr	r4, [pc, #92]	; (8000650 <SettingsWriteToFlash+0x60>)
 80005f4:	6860      	ldr	r0, [r4, #4]
 80005f6:	f7ff fe0b 	bl	8000210 <flash_erase_page>
	flash_write( SettingsData.CRC_AddresInEEprom, SettingsData.CRC_data);
 80005fa:	e9d4 1000 	ldrd	r1, r0, [r4]
 80005fe:	f7ff fe3b 	bl	8000278 <flash_write>
	flash_write( SettingsData.Option1_AddresInEEprom, SettingsData.Option1);
 8000602:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 8000606:	f7ff fe37 	bl	8000278 <flash_write>
	flash_write( SettingsData.ChargeTime_AddresInEEprom, SettingsData.ChargeTime);
 800060a:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 800060e:	f7ff fe33 	bl	8000278 <flash_write>
	flash_write( SettingsData.LowVoltage_AddresInEEprom, SettingsData.LowVoltage);
 8000612:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 8000616:	f7ff fe2f 	bl	8000278 <flash_write>
	flash_write( SettingsData.MaxVoltage_AddresInEEprom, SettingsData.MaxVoltage);
 800061a:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 800061e:	f7ff fe2b 	bl	8000278 <flash_write>
	flash_write( SettingsData.Swing_Chrg_time_AddresInEEprom, SettingsData.Swing_Chrg_time);
 8000622:	e9d4 100a 	ldrd	r1, r0, [r4, #40]	; 0x28
 8000626:	f7ff fe27 	bl	8000278 <flash_write>
	flash_write( SettingsData.Swing_DChrg_time_AddresInEEprom, SettingsData.Swing_DChrg_time);
 800062a:	e9d4 100c 	ldrd	r1, r0, [r4, #48]	; 0x30
 800062e:	f7ff fe23 	bl	8000278 <flash_write>
	flash_write( SettingsData.ChargeAdapt_AddresInEEprom, SettingsData.ChargeAdapt);
 8000632:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
 8000636:	f7ff fe1f 	bl	8000278 <flash_write>
	flash_write( SettingsData.Option2_AddresInEEprom, SettingsData.Option2);
 800063a:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
 800063e:	f7ff fe1b 	bl	8000278 <flash_write>
	logDebug("SettingsWriteToFlash ");
 8000642:	4804      	ldr	r0, [pc, #16]	; (8000654 <SettingsWriteToFlash+0x64>)
 8000644:	f004 fca8 	bl	8004f98 <printToBufferWithoutEndUART1>
 8000648:	4803      	ldr	r0, [pc, #12]	; (8000658 <SettingsWriteToFlash+0x68>)
 800064a:	f004 fc3b 	bl	8004ec4 <printToBufferUART1>
}
 800064e:	bd10      	pop	{r4, pc}
 8000650:	20000154 	.word	0x20000154
 8000654:	08005a98 	.word	0x08005a98
 8000658:	08005a42 	.word	0x08005a42

0800065c <SettingsFactoryWriteToFlash>:
uint8_t SettingsFactoryWriteToFlash(void)
{
 800065c:	b510      	push	{r4, lr}
	flash_erase_page( SettingsDataFactory.CRC_AddresInEEprom);
 800065e:	4c17      	ldr	r4, [pc, #92]	; (80006bc <SettingsFactoryWriteToFlash+0x60>)
 8000660:	6860      	ldr	r0, [r4, #4]
 8000662:	f7ff fdd5 	bl	8000210 <flash_erase_page>
	flash_write( SettingsDataFactory.CRC_AddresInEEprom, SettingsDataFactory.CRC_data);
 8000666:	e9d4 1000 	ldrd	r1, r0, [r4]
 800066a:	f7ff fe05 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.Option1_AddresInEEprom, SettingsDataFactory.Option1);
 800066e:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 8000672:	f7ff fe01 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.ChargeTime_AddresInEEprom, SettingsDataFactory.ChargeTime);
 8000676:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 800067a:	f7ff fdfd 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.LowVoltage_AddresInEEprom, SettingsDataFactory.LowVoltage);
 800067e:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 8000682:	f7ff fdf9 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.MaxVoltage_AddresInEEprom, SettingsDataFactory.MaxVoltage);
 8000686:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 800068a:	f7ff fdf5 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.Swing_Chrg_time_AddresInEEprom, SettingsDataFactory.Swing_Chrg_time);
 800068e:	e9d4 100a 	ldrd	r1, r0, [r4, #40]	; 0x28
 8000692:	f7ff fdf1 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.Swing_DChrg_time_AddresInEEprom, SettingsDataFactory.Swing_DChrg_time);
 8000696:	e9d4 100c 	ldrd	r1, r0, [r4, #48]	; 0x30
 800069a:	f7ff fded 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.ChargeAdapt_AddresInEEprom, SettingsDataFactory.ChargeAdapt);
 800069e:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
 80006a2:	f7ff fde9 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.Option2_AddresInEEprom, SettingsDataFactory.Option2);
 80006a6:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
 80006aa:	f7ff fde5 	bl	8000278 <flash_write>
	logDebug("SettingsFactoryWriteToFlash ");
 80006ae:	4804      	ldr	r0, [pc, #16]	; (80006c0 <SettingsFactoryWriteToFlash+0x64>)
 80006b0:	f004 fc72 	bl	8004f98 <printToBufferWithoutEndUART1>
 80006b4:	4803      	ldr	r0, [pc, #12]	; (80006c4 <SettingsFactoryWriteToFlash+0x68>)
 80006b6:	f004 fc05 	bl	8004ec4 <printToBufferUART1>
}
 80006ba:	bd10      	pop	{r4, pc}
 80006bc:	2000019c 	.word	0x2000019c
 80006c0:	08005a98 	.word	0x08005a98
 80006c4:	080059ee 	.word	0x080059ee

080006c8 <SettingsReadFromFlash>:
uint8_t SettingsReadFromFlash(void)
{
 80006c8:	b510      	push	{r4, lr}
	SettingsData.CRC_data = flash_read(SettingsData.CRC_AddresInEEprom,0,256);
 80006ca:	4c22      	ldr	r4, [pc, #136]	; (8000754 <SettingsReadFromFlash+0x8c>)
 80006cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006d0:	2100      	movs	r1, #0
 80006d2:	6860      	ldr	r0, [r4, #4]
 80006d4:	f7ff fe42 	bl	800035c <flash_read>
	SettingsData.Option1 =  flash_read(SettingsData.Option1_AddresInEEprom,1,10);
 80006d8:	220a      	movs	r2, #10
	SettingsData.CRC_data = flash_read(SettingsData.CRC_AddresInEEprom,0,256);
 80006da:	6020      	str	r0, [r4, #0]
	SettingsData.Option1 =  flash_read(SettingsData.Option1_AddresInEEprom,1,10);
 80006dc:	2101      	movs	r1, #1
 80006de:	68e0      	ldr	r0, [r4, #12]
 80006e0:	f7ff fe3c 	bl	800035c <flash_read>
	SettingsData.ChargeTime =  flash_read(SettingsData.ChargeTime_AddresInEEprom,1,1000);
 80006e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	SettingsData.Option1 =  flash_read(SettingsData.Option1_AddresInEEprom,1,10);
 80006e8:	60a0      	str	r0, [r4, #8]
	SettingsData.ChargeTime =  flash_read(SettingsData.ChargeTime_AddresInEEprom,1,1000);
 80006ea:	2101      	movs	r1, #1
 80006ec:	6960      	ldr	r0, [r4, #20]
 80006ee:	f7ff fe35 	bl	800035c <flash_read>
	SettingsData.LowVoltage =  flash_read(SettingsData.LowVoltage_AddresInEEprom,1,4000);
 80006f2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
	SettingsData.ChargeTime =  flash_read(SettingsData.ChargeTime_AddresInEEprom,1,1000);
 80006f6:	6120      	str	r0, [r4, #16]
	SettingsData.LowVoltage =  flash_read(SettingsData.LowVoltage_AddresInEEprom,1,4000);
 80006f8:	2101      	movs	r1, #1
 80006fa:	69e0      	ldr	r0, [r4, #28]
 80006fc:	f7ff fe2e 	bl	800035c <flash_read>
	SettingsData.MaxVoltage =  flash_read(SettingsData.MaxVoltage_AddresInEEprom,1,4000);
 8000700:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
	SettingsData.LowVoltage =  flash_read(SettingsData.LowVoltage_AddresInEEprom,1,4000);
 8000704:	61a0      	str	r0, [r4, #24]
	SettingsData.MaxVoltage =  flash_read(SettingsData.MaxVoltage_AddresInEEprom,1,4000);
 8000706:	2101      	movs	r1, #1
 8000708:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800070a:	f7ff fe27 	bl	800035c <flash_read>
	SettingsData.Swing_Chrg_time =  flash_read(SettingsData.Swing_Chrg_time_AddresInEEprom,0,10000);
 800070e:	f242 7210 	movw	r2, #10000	; 0x2710
	SettingsData.MaxVoltage =  flash_read(SettingsData.MaxVoltage_AddresInEEprom,1,4000);
 8000712:	6220      	str	r0, [r4, #32]
	SettingsData.Swing_Chrg_time =  flash_read(SettingsData.Swing_Chrg_time_AddresInEEprom,0,10000);
 8000714:	2100      	movs	r1, #0
 8000716:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000718:	f7ff fe20 	bl	800035c <flash_read>
	SettingsData.Swing_DChrg_time =  flash_read(SettingsData.Swing_DChrg_time_AddresInEEprom,0,10000);
 800071c:	f242 7210 	movw	r2, #10000	; 0x2710
	SettingsData.Swing_Chrg_time =  flash_read(SettingsData.Swing_Chrg_time_AddresInEEprom,0,10000);
 8000720:	62a0      	str	r0, [r4, #40]	; 0x28
	SettingsData.Swing_DChrg_time =  flash_read(SettingsData.Swing_DChrg_time_AddresInEEprom,0,10000);
 8000722:	2100      	movs	r1, #0
 8000724:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8000726:	f7ff fe19 	bl	800035c <flash_read>
	SettingsData.ChargeAdapt = flash_read(SettingsData.ChargeAdapt_AddresInEEprom,0,100);
 800072a:	2264      	movs	r2, #100	; 0x64
	SettingsData.Swing_DChrg_time =  flash_read(SettingsData.Swing_DChrg_time_AddresInEEprom,0,10000);
 800072c:	6320      	str	r0, [r4, #48]	; 0x30
	SettingsData.ChargeAdapt = flash_read(SettingsData.ChargeAdapt_AddresInEEprom,0,100);
 800072e:	2100      	movs	r1, #0
 8000730:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000732:	f7ff fe13 	bl	800035c <flash_read>
	SettingsData.Option2 =  flash_read(SettingsData.Option2_AddresInEEprom,1,3);
 8000736:	2203      	movs	r2, #3
	SettingsData.ChargeAdapt = flash_read(SettingsData.ChargeAdapt_AddresInEEprom,0,100);
 8000738:	63a0      	str	r0, [r4, #56]	; 0x38
	SettingsData.Option2 =  flash_read(SettingsData.Option2_AddresInEEprom,1,3);
 800073a:	2101      	movs	r1, #1
 800073c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800073e:	f7ff fe0d 	bl	800035c <flash_read>
 8000742:	6420      	str	r0, [r4, #64]	; 0x40
	logDebug("SettingsReadFromFlash ");
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <SettingsReadFromFlash+0x90>)
 8000746:	f004 fc27 	bl	8004f98 <printToBufferWithoutEndUART1>
 800074a:	4804      	ldr	r0, [pc, #16]	; (800075c <SettingsReadFromFlash+0x94>)
 800074c:	f004 fbba 	bl	8004ec4 <printToBufferUART1>
}
 8000750:	bd10      	pop	{r4, pc}
 8000752:	bf00      	nop
 8000754:	20000154 	.word	0x20000154
 8000758:	08005a98 	.word	0x08005a98
 800075c:	08005a0b 	.word	0x08005a0b

08000760 <SettingsReadFromFlashForVerify>:
uint8_t SettingsReadFromFlashForVerify(void)
{
 8000760:	b510      	push	{r4, lr}
	SettingsDataForVerify.CRC_data = flash_read(SettingsDataForVerify.CRC_AddresInEEprom,0,256);
 8000762:	4c22      	ldr	r4, [pc, #136]	; (80007ec <SettingsReadFromFlashForVerify+0x8c>)
 8000764:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000768:	2100      	movs	r1, #0
 800076a:	6860      	ldr	r0, [r4, #4]
 800076c:	f7ff fdf6 	bl	800035c <flash_read>
	SettingsDataForVerify.Option1 =  flash_read(SettingsDataForVerify.Option1_AddresInEEprom,1,10);
 8000770:	220a      	movs	r2, #10
	SettingsDataForVerify.CRC_data = flash_read(SettingsDataForVerify.CRC_AddresInEEprom,0,256);
 8000772:	6020      	str	r0, [r4, #0]
	SettingsDataForVerify.Option1 =  flash_read(SettingsDataForVerify.Option1_AddresInEEprom,1,10);
 8000774:	2101      	movs	r1, #1
 8000776:	68e0      	ldr	r0, [r4, #12]
 8000778:	f7ff fdf0 	bl	800035c <flash_read>
	SettingsDataForVerify.ChargeTime =  flash_read(SettingsDataForVerify.ChargeTime_AddresInEEprom,1,1000);
 800077c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	SettingsDataForVerify.Option1 =  flash_read(SettingsDataForVerify.Option1_AddresInEEprom,1,10);
 8000780:	60a0      	str	r0, [r4, #8]
	SettingsDataForVerify.ChargeTime =  flash_read(SettingsDataForVerify.ChargeTime_AddresInEEprom,1,1000);
 8000782:	2101      	movs	r1, #1
 8000784:	6960      	ldr	r0, [r4, #20]
 8000786:	f7ff fde9 	bl	800035c <flash_read>
	SettingsDataForVerify.LowVoltage =  flash_read(SettingsDataForVerify.LowVoltage_AddresInEEprom,1,4000);
 800078a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
	SettingsDataForVerify.ChargeTime =  flash_read(SettingsDataForVerify.ChargeTime_AddresInEEprom,1,1000);
 800078e:	6120      	str	r0, [r4, #16]
	SettingsDataForVerify.LowVoltage =  flash_read(SettingsDataForVerify.LowVoltage_AddresInEEprom,1,4000);
 8000790:	2101      	movs	r1, #1
 8000792:	69e0      	ldr	r0, [r4, #28]
 8000794:	f7ff fde2 	bl	800035c <flash_read>
	SettingsDataForVerify.MaxVoltage =  flash_read(SettingsDataForVerify.MaxVoltage_AddresInEEprom,1,4000);
 8000798:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
	SettingsDataForVerify.LowVoltage =  flash_read(SettingsDataForVerify.LowVoltage_AddresInEEprom,1,4000);
 800079c:	61a0      	str	r0, [r4, #24]
	SettingsDataForVerify.MaxVoltage =  flash_read(SettingsDataForVerify.MaxVoltage_AddresInEEprom,1,4000);
 800079e:	2101      	movs	r1, #1
 80007a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80007a2:	f7ff fddb 	bl	800035c <flash_read>
	SettingsDataForVerify.Swing_Chrg_time =  flash_read(SettingsDataForVerify.Swing_Chrg_time_AddresInEEprom,0,10000);
 80007a6:	f242 7210 	movw	r2, #10000	; 0x2710
	SettingsDataForVerify.MaxVoltage =  flash_read(SettingsDataForVerify.MaxVoltage_AddresInEEprom,1,4000);
 80007aa:	6220      	str	r0, [r4, #32]
	SettingsDataForVerify.Swing_Chrg_time =  flash_read(SettingsDataForVerify.Swing_Chrg_time_AddresInEEprom,0,10000);
 80007ac:	2100      	movs	r1, #0
 80007ae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80007b0:	f7ff fdd4 	bl	800035c <flash_read>
	SettingsDataForVerify.Swing_DChrg_time =  flash_read(SettingsDataForVerify.Swing_DChrg_time_AddresInEEprom,0,10000);
 80007b4:	f242 7210 	movw	r2, #10000	; 0x2710
	SettingsDataForVerify.Swing_Chrg_time =  flash_read(SettingsDataForVerify.Swing_Chrg_time_AddresInEEprom,0,10000);
 80007b8:	62a0      	str	r0, [r4, #40]	; 0x28
	SettingsDataForVerify.Swing_DChrg_time =  flash_read(SettingsDataForVerify.Swing_DChrg_time_AddresInEEprom,0,10000);
 80007ba:	2100      	movs	r1, #0
 80007bc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80007be:	f7ff fdcd 	bl	800035c <flash_read>
	SettingsDataForVerify.ChargeAdapt = flash_read(SettingsDataForVerify.ChargeAdapt_AddresInEEprom,0,100);
 80007c2:	2264      	movs	r2, #100	; 0x64
	SettingsDataForVerify.Swing_DChrg_time =  flash_read(SettingsDataForVerify.Swing_DChrg_time_AddresInEEprom,0,10000);
 80007c4:	6320      	str	r0, [r4, #48]	; 0x30
	SettingsDataForVerify.ChargeAdapt = flash_read(SettingsDataForVerify.ChargeAdapt_AddresInEEprom,0,100);
 80007c6:	2100      	movs	r1, #0
 80007c8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80007ca:	f7ff fdc7 	bl	800035c <flash_read>
	SettingsDataForVerify.Option2 =  flash_read(SettingsDataForVerify.Option2_AddresInEEprom,1,3);
 80007ce:	2203      	movs	r2, #3
	SettingsDataForVerify.ChargeAdapt = flash_read(SettingsDataForVerify.ChargeAdapt_AddresInEEprom,0,100);
 80007d0:	63a0      	str	r0, [r4, #56]	; 0x38
	SettingsDataForVerify.Option2 =  flash_read(SettingsDataForVerify.Option2_AddresInEEprom,1,3);
 80007d2:	2101      	movs	r1, #1
 80007d4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80007d6:	f7ff fdc1 	bl	800035c <flash_read>
 80007da:	6420      	str	r0, [r4, #64]	; 0x40
	logDebug("SettingsReadFromFlashForVerify ");
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <SettingsReadFromFlashForVerify+0x90>)
 80007de:	f004 fbdb 	bl	8004f98 <printToBufferWithoutEndUART1>
 80007e2:	4804      	ldr	r0, [pc, #16]	; (80007f4 <SettingsReadFromFlashForVerify+0x94>)
 80007e4:	f004 fb6e 	bl	8004ec4 <printToBufferUART1>
}
 80007e8:	bd10      	pop	{r4, pc}
 80007ea:	bf00      	nop
 80007ec:	200001e4 	.word	0x200001e4
 80007f0:	08005a98 	.word	0x08005a98
 80007f4:	08005a22 	.word	0x08005a22

080007f8 <DataWhenPowerOff_Factory_WriteToFlash>:
	flash_write( SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent_AddresInEEprom, SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent);
	flash_write( SaveDataWhenPowerOff.OutState_AddresInEEprom, SaveDataWhenPowerOff.OutState);
	logDebug("DataWhenPowerOffWriteToFlash ");
}
uint8_t DataWhenPowerOff_Factory_WriteToFlash(void)
{
 80007f8:	b510      	push	{r4, lr}
	flash_erase_page( SaveDataWhenPowerOffFactory.CRC_AddresInEEprom);
 80007fa:	4c0d      	ldr	r4, [pc, #52]	; (8000830 <DataWhenPowerOff_Factory_WriteToFlash+0x38>)
 80007fc:	6860      	ldr	r0, [r4, #4]
 80007fe:	f7ff fd07 	bl	8000210 <flash_erase_page>
	flash_write( SaveDataWhenPowerOffFactory.CRC_AddresInEEprom, SaveDataWhenPowerOffFactory.CRC_data);
 8000802:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000806:	f7ff fd37 	bl	8000278 <flash_write>
	flash_write( SaveDataWhenPowerOffFactory.BatteryCapacityDischargePrevious_AddresInEEprom, SaveDataWhenPowerOffFactory.BatteryCapacityDischargePreviousValue);
 800080a:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 800080e:	f7ff fd33 	bl	8000278 <flash_write>
	flash_write( SaveDataWhenPowerOffFactory.BatteryCapacityDischargeCurrent_AddresInEEprom, SaveDataWhenPowerOffFactory.BatteryCapacityDischargeCurrent);
 8000812:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 8000816:	f7ff fd2f 	bl	8000278 <flash_write>
	flash_write( SaveDataWhenPowerOffFactory.OutState_AddresInEEprom, SaveDataWhenPowerOffFactory.OutState);
 800081a:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 800081e:	f7ff fd2b 	bl	8000278 <flash_write>
	logDebug("DataWhenPowerOff_Factory_WriteToFlash ");
 8000822:	4804      	ldr	r0, [pc, #16]	; (8000834 <DataWhenPowerOff_Factory_WriteToFlash+0x3c>)
 8000824:	f004 fbb8 	bl	8004f98 <printToBufferWithoutEndUART1>
 8000828:	4803      	ldr	r0, [pc, #12]	; (8000838 <DataWhenPowerOff_Factory_WriteToFlash+0x40>)
 800082a:	f004 fb4b 	bl	8004ec4 <printToBufferUART1>
}
 800082e:	bd10      	pop	{r4, pc}
 8000830:	20000114 	.word	0x20000114
 8000834:	08005a98 	.word	0x08005a98
 8000838:	08005861 	.word	0x08005861

0800083c <DataWhenPowerOffReadFromFlash>:
uint8_t DataWhenPowerOffReadFromFlash(void)
{
 800083c:	b538      	push	{r3, r4, r5, lr}
	SaveDataWhenPowerOff.CRC_data = flash_read(SaveDataWhenPowerOff.CRC_AddresInEEprom,0,256);
 800083e:	4c11      	ldr	r4, [pc, #68]	; (8000884 <DataWhenPowerOffReadFromFlash+0x48>)
 8000840:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000844:	2100      	movs	r1, #0
 8000846:	6860      	ldr	r0, [r4, #4]
 8000848:	f7ff fd88 	bl	800035c <flash_read>
	SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 800084c:	4d0e      	ldr	r5, [pc, #56]	; (8000888 <DataWhenPowerOffReadFromFlash+0x4c>)
	SaveDataWhenPowerOff.CRC_data = flash_read(SaveDataWhenPowerOff.CRC_AddresInEEprom,0,256);
 800084e:	6020      	str	r0, [r4, #0]
	SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 8000850:	462a      	mov	r2, r5
 8000852:	2100      	movs	r1, #0
 8000854:	68e0      	ldr	r0, [r4, #12]
 8000856:	f7ff fd81 	bl	800035c <flash_read>
	SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 800085a:	462a      	mov	r2, r5
	SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 800085c:	60a0      	str	r0, [r4, #8]
	SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 800085e:	2100      	movs	r1, #0
 8000860:	6960      	ldr	r0, [r4, #20]
 8000862:	f7ff fd7b 	bl	800035c <flash_read>
	SaveDataWhenPowerOff.OutState = flash_read(SaveDataWhenPowerOff.OutState_AddresInEEprom,0,1);
 8000866:	2201      	movs	r2, #1
	SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 8000868:	6120      	str	r0, [r4, #16]
	SaveDataWhenPowerOff.OutState = flash_read(SaveDataWhenPowerOff.OutState_AddresInEEprom,0,1);
 800086a:	2100      	movs	r1, #0
 800086c:	69e0      	ldr	r0, [r4, #28]
 800086e:	f7ff fd75 	bl	800035c <flash_read>
 8000872:	61a0      	str	r0, [r4, #24]
	logDebug("DataWhenPowerOffReadFromFlash ");
 8000874:	4805      	ldr	r0, [pc, #20]	; (800088c <DataWhenPowerOffReadFromFlash+0x50>)
 8000876:	f004 fb8f 	bl	8004f98 <printToBufferWithoutEndUART1>
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <DataWhenPowerOffReadFromFlash+0x54>)
 800087c:	f004 fb22 	bl	8004ec4 <printToBufferUART1>
}
 8000880:	bd38      	pop	{r3, r4, r5, pc}
 8000882:	bf00      	nop
 8000884:	200000f4 	.word	0x200000f4
 8000888:	ee6b2800 	.word	0xee6b2800
 800088c:	08005a98 	.word	0x08005a98
 8000890:	0800581a 	.word	0x0800581a

08000894 <DataWhenPowerOffReadFromFlashForVerify>:
uint8_t DataWhenPowerOffReadFromFlashForVerify(void)
{
 8000894:	b538      	push	{r3, r4, r5, lr}
	SaveDataWhenPowerOffForVerify.CRC_data = flash_read(SaveDataWhenPowerOffForVerify.CRC_AddresInEEprom,0,256);
 8000896:	4c11      	ldr	r4, [pc, #68]	; (80008dc <DataWhenPowerOffReadFromFlashForVerify+0x48>)
 8000898:	f44f 7280 	mov.w	r2, #256	; 0x100
 800089c:	2100      	movs	r1, #0
 800089e:	6860      	ldr	r0, [r4, #4]
 80008a0:	f7ff fd5c 	bl	800035c <flash_read>
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 80008a4:	4d0e      	ldr	r5, [pc, #56]	; (80008e0 <DataWhenPowerOffReadFromFlashForVerify+0x4c>)
	SaveDataWhenPowerOffForVerify.CRC_data = flash_read(SaveDataWhenPowerOffForVerify.CRC_AddresInEEprom,0,256);
 80008a6:	6020      	str	r0, [r4, #0]
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 80008a8:	462a      	mov	r2, r5
 80008aa:	2100      	movs	r1, #0
 80008ac:	68e0      	ldr	r0, [r4, #12]
 80008ae:	f7ff fd55 	bl	800035c <flash_read>
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 80008b2:	462a      	mov	r2, r5
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 80008b4:	60a0      	str	r0, [r4, #8]
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 80008b6:	2100      	movs	r1, #0
 80008b8:	6960      	ldr	r0, [r4, #20]
 80008ba:	f7ff fd4f 	bl	800035c <flash_read>
	SaveDataWhenPowerOffForVerify.OutState = flash_read(SaveDataWhenPowerOffForVerify.OutState_AddresInEEprom,0,1);
 80008be:	2201      	movs	r2, #1
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 80008c0:	6120      	str	r0, [r4, #16]
	SaveDataWhenPowerOffForVerify.OutState = flash_read(SaveDataWhenPowerOffForVerify.OutState_AddresInEEprom,0,1);
 80008c2:	2100      	movs	r1, #0
 80008c4:	69e0      	ldr	r0, [r4, #28]
 80008c6:	f7ff fd49 	bl	800035c <flash_read>
 80008ca:	61a0      	str	r0, [r4, #24]
	logDebug("DataWhenPowerOffReadFromFlashForVerify ");
 80008cc:	4805      	ldr	r0, [pc, #20]	; (80008e4 <DataWhenPowerOffReadFromFlashForVerify+0x50>)
 80008ce:	f004 fb63 	bl	8004f98 <printToBufferWithoutEndUART1>
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <DataWhenPowerOffReadFromFlashForVerify+0x54>)
 80008d4:	f004 faf6 	bl	8004ec4 <printToBufferUART1>
}
 80008d8:	bd38      	pop	{r3, r4, r5, pc}
 80008da:	bf00      	nop
 80008dc:	20000134 	.word	0x20000134
 80008e0:	ee6b2800 	.word	0xee6b2800
 80008e4:	08005a98 	.word	0x08005a98
 80008e8:	08005839 	.word	0x08005839

080008ec <ReadFromFlash>:




uint8_t ReadFromFlash(void)
{
 80008ec:	b570      	push	{r4, r5, r6, lr}
		EEpromReadStatus = 1;
 80008ee:	2401      	movs	r4, #1
 80008f0:	4d0e      	ldr	r5, [pc, #56]	; (800092c <ReadFromFlash+0x40>)
 80008f2:	702c      	strb	r4, [r5, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
	    __disable_irq();

	    DataWhenPowerOffReadFromFlash();
 80008f6:	f7ff ffa1 	bl	800083c <DataWhenPowerOffReadFromFlash>
	    SettingsReadFromFlash();
 80008fa:	f7ff fee5 	bl	80006c8 <SettingsReadFromFlash>
	    CalibrationReadFromFlash();
 80008fe:	f7ff fdd3 	bl	80004a8 <CalibrationReadFromFlash>
  __ASM volatile ("cpsie i" : : : "memory");
 8000902:	b662      	cpsie	i


		__enable_irq();
		if (EEpromReadStatus == 0)
 8000904:	782e      	ldrb	r6, [r5, #0]
		{
			logDebug("Read from EEprom - FAIL ");
 8000906:	480a      	ldr	r0, [pc, #40]	; (8000930 <ReadFromFlash+0x44>)
		if (EEpromReadStatus == 0)
 8000908:	b93e      	cbnz	r6, 800091a <ReadFromFlash+0x2e>
			logDebug("Read from EEprom - FAIL ");
 800090a:	f004 fb45 	bl	8004f98 <printToBufferWithoutEndUART1>
 800090e:	4809      	ldr	r0, [pc, #36]	; (8000934 <ReadFromFlash+0x48>)
 8000910:	f004 fad8 	bl	8004ec4 <printToBufferUART1>
			EEpromReadStatus = 1;
 8000914:	702c      	strb	r4, [r5, #0]
		{
			logDebug("Read from EEprom - SUCCESS");
			EEpromReadStatus = 1;
			return 1;
		}
}
 8000916:	4630      	mov	r0, r6
 8000918:	bd70      	pop	{r4, r5, r6, pc}
			logDebug("Read from EEprom - SUCCESS");
 800091a:	f004 fb3d 	bl	8004f98 <printToBufferWithoutEndUART1>
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <ReadFromFlash+0x4c>)
 8000920:	f004 fad0 	bl	8004ec4 <printToBufferUART1>
			return 1;
 8000924:	4626      	mov	r6, r4
			EEpromReadStatus = 1;
 8000926:	702c      	strb	r4, [r5, #0]
			return 1;
 8000928:	e7f5      	b.n	8000916 <ReadFromFlash+0x2a>
 800092a:	bf00      	nop
 800092c:	20000000 	.word	0x20000000
 8000930:	08005a98 	.word	0x08005a98
 8000934:	080059ba 	.word	0x080059ba
 8000938:	080059d3 	.word	0x080059d3

0800093c <CalcCRC8>:



char CalcCRC8(char *Ptr, char Num, char CRC1)
{
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	4615      	mov	r5, r2
 8000940:	460c      	mov	r4, r1
 8000942:	b0c0      	sub	sp, #256	; 0x100
 8000944:	4606      	mov	r6, r0
   const char CrcTable[256] = {
 8000946:	f44f 7280 	mov.w	r2, #256	; 0x100
 800094a:	4909      	ldr	r1, [pc, #36]	; (8000970 <CalcCRC8+0x34>)
 800094c:	4668      	mov	r0, sp
 800094e:	f004 fe89 	bl	8005664 <memcpy>
 8000952:	4628      	mov	r0, r5
 8000954:	3c01      	subs	r4, #1
 8000956:	b2e4      	uxtb	r4, r4
 8000958:	3401      	adds	r4, #1
 800095a:	4434      	add	r4, r6
    0xAE, 0xA9, 0xA0, 0xA7, 0xB2, 0xB5, 0xBC, 0xBB, // e0
    0x96, 0x91, 0x98, 0x9F, 0x8A, 0x8D, 0x84, 0x83, // e8
    0xDE, 0xD9, 0xD0, 0xD7, 0xC2, 0xC5, 0xCC, 0xCB, // f0
    0xE6, 0xE1, 0xE8, 0xEF, 0xFA, 0xFD, 0xF4, 0xF3 // f8
  };
  do  CRC1 = CrcTable[CRC1 ^ *Ptr++]; while (--Num);
 800095c:	f816 3b01 	ldrb.w	r3, [r6], #1
 8000960:	4058      	eors	r0, r3
 8000962:	42a6      	cmp	r6, r4
 8000964:	f81d 0000 	ldrb.w	r0, [sp, r0]
 8000968:	d1f8      	bne.n	800095c <CalcCRC8+0x20>
  return CRC1;
}
 800096a:	b040      	add	sp, #256	; 0x100
 800096c:	bd70      	pop	{r4, r5, r6, pc}
 800096e:	bf00      	nop
 8000970:	080056a4 	.word	0x080056a4

08000974 <CalibrationWriteToFlash_CRC>:
{
 8000974:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8000976:	b672      	cpsid	i
	CRC_Calibration = CalcCRC8(((unsigned char *) &CalibrationData)+4,((unsigned char)sizeof(CalibrationData))-4,0);
 8000978:	4d14      	ldr	r5, [pc, #80]	; (80009cc <CalibrationWriteToFlash_CRC+0x58>)
 800097a:	2200      	movs	r2, #0
 800097c:	214c      	movs	r1, #76	; 0x4c
 800097e:	4628      	mov	r0, r5
 8000980:	f7ff ffdc 	bl	800093c <CalcCRC8>
 8000984:	4604      	mov	r4, r0
	CalibrationData.CRC_data = CRC_Calibration;
 8000986:	f845 0c04 	str.w	r0, [r5, #-4]
	flash_unlock();
 800098a:	f7ff fc61 	bl	8000250 <flash_unlock>
	CalibrationWriteToFlash();
 800098e:	f7ff fd17 	bl	80003c0 <CalibrationWriteToFlash>
	CalibrationReadFromFlashForVerify();
 8000992:	f7ff fddb 	bl	800054c <CalibrationReadFromFlashForVerify>
	CRC_CalibrationVerify = CalcCRC8(((unsigned char *) &CalibrationDataForVerify)+4,((unsigned char)sizeof(CalibrationDataForVerify))-4,0);
 8000996:	2200      	movs	r2, #0
 8000998:	214c      	movs	r1, #76	; 0x4c
 800099a:	480d      	ldr	r0, [pc, #52]	; (80009d0 <CalibrationWriteToFlash_CRC+0x5c>)
 800099c:	f7ff ffce 	bl	800093c <CalcCRC8>
	if (CRC_Calibration == CRC_CalibrationVerify )
 80009a0:	4284      	cmp	r4, r0
		logDebug("Calibration write to Flash success ");
 80009a2:	480c      	ldr	r0, [pc, #48]	; (80009d4 <CalibrationWriteToFlash_CRC+0x60>)
	if (CRC_Calibration == CRC_CalibrationVerify )
 80009a4:	d109      	bne.n	80009ba <CalibrationWriteToFlash_CRC+0x46>
		logDebug("Calibration write to Flash success ");
 80009a6:	f004 faf7 	bl	8004f98 <printToBufferWithoutEndUART1>
 80009aa:	480b      	ldr	r0, [pc, #44]	; (80009d8 <CalibrationWriteToFlash_CRC+0x64>)
 80009ac:	f004 fa8a 	bl	8004ec4 <printToBufferUART1>
	flash_lock();
 80009b0:	f7ff fc5a 	bl	8000268 <flash_lock>
  __ASM volatile ("cpsie i" : : : "memory");
 80009b4:	b662      	cpsie	i
}
 80009b6:	2001      	movs	r0, #1
 80009b8:	bd38      	pop	{r3, r4, r5, pc}
		logDebug("Calibration write to Flash Fail, try again... ");
 80009ba:	f004 faed 	bl	8004f98 <printToBufferWithoutEndUART1>
 80009be:	4807      	ldr	r0, [pc, #28]	; (80009dc <CalibrationWriteToFlash_CRC+0x68>)
 80009c0:	f004 fa80 	bl	8004ec4 <printToBufferUART1>
		CalibrationWriteToFlash();
 80009c4:	f7ff fcfc 	bl	80003c0 <CalibrationWriteToFlash>
 80009c8:	e7f2      	b.n	80009b0 <CalibrationWriteToFlash_CRC+0x3c>
 80009ca:	bf00      	nop
 80009cc:	20000008 	.word	0x20000008
 80009d0:	200000a8 	.word	0x200000a8
 80009d4:	08005a98 	.word	0x08005a98
 80009d8:	080058a1 	.word	0x080058a1
 80009dc:	080058c6 	.word	0x080058c6

080009e0 <SettingsWriteToFlash_CRC>:
{
 80009e0:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 80009e2:	b672      	cpsid	i
	CRC_Settings = CalcCRC8(((unsigned char *) &SettingsData)+4,((unsigned char)sizeof(SettingsData))-4,0);
 80009e4:	4d24      	ldr	r5, [pc, #144]	; (8000a78 <SettingsWriteToFlash_CRC+0x98>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	2144      	movs	r1, #68	; 0x44
 80009ea:	4628      	mov	r0, r5
 80009ec:	f7ff ffa6 	bl	800093c <CalcCRC8>
 80009f0:	4604      	mov	r4, r0
	logDebugD("CRC is : ",CRC_Settings,0);
 80009f2:	4822      	ldr	r0, [pc, #136]	; (8000a7c <SettingsWriteToFlash_CRC+0x9c>)
 80009f4:	f004 fad0 	bl	8004f98 <printToBufferWithoutEndUART1>
 80009f8:	2200      	movs	r2, #0
 80009fa:	4621      	mov	r1, r4
 80009fc:	4820      	ldr	r0, [pc, #128]	; (8000a80 <SettingsWriteToFlash_CRC+0xa0>)
 80009fe:	f004 fb0f 	bl	8005020 <printToBufferUART1D>
	logDebugD("Size is : ",((unsigned char)sizeof(SettingsData))-4,0);
 8000a02:	481e      	ldr	r0, [pc, #120]	; (8000a7c <SettingsWriteToFlash_CRC+0x9c>)
 8000a04:	f004 fac8 	bl	8004f98 <printToBufferWithoutEndUART1>
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2144      	movs	r1, #68	; 0x44
 8000a0c:	481d      	ldr	r0, [pc, #116]	; (8000a84 <SettingsWriteToFlash_CRC+0xa4>)
 8000a0e:	f004 fb07 	bl	8005020 <printToBufferUART1D>
	SettingsData.CRC_data = CRC_Settings;
 8000a12:	f845 4c04 	str.w	r4, [r5, #-4]
	flash_unlock();
 8000a16:	f7ff fc1b 	bl	8000250 <flash_unlock>
	SettingsWriteToFlash();
 8000a1a:	f7ff fde9 	bl	80005f0 <SettingsWriteToFlash>
	SettingsReadFromFlashForVerify();
 8000a1e:	f7ff fe9f 	bl	8000760 <SettingsReadFromFlashForVerify>
	CRC_SettingsVerify = CalcCRC8(((unsigned char *) &SettingsDataForVerify)+4,((unsigned char)sizeof(SettingsDataForVerify))-4,0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2144      	movs	r1, #68	; 0x44
 8000a26:	4818      	ldr	r0, [pc, #96]	; (8000a88 <SettingsWriteToFlash_CRC+0xa8>)
 8000a28:	f7ff ff88 	bl	800093c <CalcCRC8>
 8000a2c:	4605      	mov	r5, r0
	logDebugD("CRC is : ",CRC_SettingsVerify,0);
 8000a2e:	4813      	ldr	r0, [pc, #76]	; (8000a7c <SettingsWriteToFlash_CRC+0x9c>)
 8000a30:	f004 fab2 	bl	8004f98 <printToBufferWithoutEndUART1>
 8000a34:	2200      	movs	r2, #0
 8000a36:	4629      	mov	r1, r5
 8000a38:	4811      	ldr	r0, [pc, #68]	; (8000a80 <SettingsWriteToFlash_CRC+0xa0>)
 8000a3a:	f004 faf1 	bl	8005020 <printToBufferUART1D>
	logDebugD("Size is : ",((unsigned char)sizeof(SettingsDataForVerify))-4,0);
 8000a3e:	480f      	ldr	r0, [pc, #60]	; (8000a7c <SettingsWriteToFlash_CRC+0x9c>)
 8000a40:	f004 faaa 	bl	8004f98 <printToBufferWithoutEndUART1>
 8000a44:	480f      	ldr	r0, [pc, #60]	; (8000a84 <SettingsWriteToFlash_CRC+0xa4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	2144      	movs	r1, #68	; 0x44
 8000a4a:	f004 fae9 	bl	8005020 <printToBufferUART1D>
	if (CRC_Settings == CRC_SettingsVerify )
 8000a4e:	42ac      	cmp	r4, r5
		logDebug("Settings write to Flash success ");
 8000a50:	480a      	ldr	r0, [pc, #40]	; (8000a7c <SettingsWriteToFlash_CRC+0x9c>)
	if (CRC_Settings == CRC_SettingsVerify )
 8000a52:	d109      	bne.n	8000a68 <SettingsWriteToFlash_CRC+0x88>
		logDebug("Settings write to Flash success ");
 8000a54:	f004 faa0 	bl	8004f98 <printToBufferWithoutEndUART1>
 8000a58:	480c      	ldr	r0, [pc, #48]	; (8000a8c <SettingsWriteToFlash_CRC+0xac>)
 8000a5a:	f004 fa33 	bl	8004ec4 <printToBufferUART1>
	flash_lock();
 8000a5e:	f7ff fc03 	bl	8000268 <flash_lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000a62:	b662      	cpsie	i
}
 8000a64:	2001      	movs	r0, #1
 8000a66:	bd38      	pop	{r3, r4, r5, pc}
		logDebug("Settings write to Flash Fail, try again... ");
 8000a68:	f004 fa96 	bl	8004f98 <printToBufferWithoutEndUART1>
 8000a6c:	4808      	ldr	r0, [pc, #32]	; (8000a90 <SettingsWriteToFlash_CRC+0xb0>)
 8000a6e:	f004 fa29 	bl	8004ec4 <printToBufferUART1>
		SettingsWriteToFlash();
 8000a72:	f7ff fdbd 	bl	80005f0 <SettingsWriteToFlash>
 8000a76:	e7f2      	b.n	8000a5e <SettingsWriteToFlash_CRC+0x7e>
 8000a78:	20000158 	.word	0x20000158
 8000a7c:	08005a98 	.word	0x08005a98
 8000a80:	080058f6 	.word	0x080058f6
 8000a84:	08005901 	.word	0x08005901
 8000a88:	200001e8 	.word	0x200001e8
 8000a8c:	0800590d 	.word	0x0800590d
 8000a90:	0800592f 	.word	0x0800592f

08000a94 <FactoryWriteToFlash_CRC>:
{
 8000a94:	b538      	push	{r3, r4, r5, lr}
	logDebug("FactoryWriteToFlash_CRC");
 8000a96:	484a      	ldr	r0, [pc, #296]	; (8000bc0 <FactoryWriteToFlash_CRC+0x12c>)
 8000a98:	f004 fa7e 	bl	8004f98 <printToBufferWithoutEndUART1>
 8000a9c:	4849      	ldr	r0, [pc, #292]	; (8000bc4 <FactoryWriteToFlash_CRC+0x130>)
 8000a9e:	f004 fa11 	bl	8004ec4 <printToBufferUART1>
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa2:	b672      	cpsid	i
	CRC_Calibration = CalcCRC8(((unsigned char *) &CalibrationDataFactory)+4,((unsigned char)sizeof(CalibrationDataFactory))-4,0);
 8000aa4:	4d48      	ldr	r5, [pc, #288]	; (8000bc8 <FactoryWriteToFlash_CRC+0x134>)
	flash_unlock();
 8000aa6:	f7ff fbd3 	bl	8000250 <flash_unlock>
	CRC_Calibration = CalcCRC8(((unsigned char *) &CalibrationDataFactory)+4,((unsigned char)sizeof(CalibrationDataFactory))-4,0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	214c      	movs	r1, #76	; 0x4c
 8000aae:	4628      	mov	r0, r5
 8000ab0:	f7ff ff44 	bl	800093c <CalcCRC8>
 8000ab4:	4604      	mov	r4, r0
	CalibrationDataFactory.CRC_data = CRC_Calibration;
 8000ab6:	f845 0c04 	str.w	r0, [r5, #-4]
	CalibrationFactoryWriteToFlash();
 8000aba:	f7ff fcbb 	bl	8000434 <CalibrationFactoryWriteToFlash>
	CalibrationReadFromFlashForVerify();
 8000abe:	f7ff fd45 	bl	800054c <CalibrationReadFromFlashForVerify>
	CRC_CalibrationVerify = CalcCRC8(((unsigned char *) &CalibrationDataForVerify)+4,((unsigned char)sizeof(CalibrationDataForVerify))-4,0);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	214c      	movs	r1, #76	; 0x4c
 8000ac6:	4841      	ldr	r0, [pc, #260]	; (8000bcc <FactoryWriteToFlash_CRC+0x138>)
 8000ac8:	f7ff ff38 	bl	800093c <CalcCRC8>
	if (CRC_Calibration == CRC_CalibrationVerify )
 8000acc:	4284      	cmp	r4, r0
		logDebug("FCalibration write to Flash success ");
 8000ace:	483c      	ldr	r0, [pc, #240]	; (8000bc0 <FactoryWriteToFlash_CRC+0x12c>)
	if (CRC_Calibration == CRC_CalibrationVerify )
 8000ad0:	d15d      	bne.n	8000b8e <FactoryWriteToFlash_CRC+0xfa>
		logDebug("FCalibration write to Flash success ");
 8000ad2:	f004 fa61 	bl	8004f98 <printToBufferWithoutEndUART1>
 8000ad6:	483e      	ldr	r0, [pc, #248]	; (8000bd0 <FactoryWriteToFlash_CRC+0x13c>)
 8000ad8:	f004 f9f4 	bl	8004ec4 <printToBufferUART1>
	CRC_Settings = CalcCRC8(((unsigned char *) &SettingsDataFactory)+4,((unsigned char)sizeof(SettingsDataFactory))-4,0);
 8000adc:	4d3d      	ldr	r5, [pc, #244]	; (8000bd4 <FactoryWriteToFlash_CRC+0x140>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2144      	movs	r1, #68	; 0x44
 8000ae2:	4628      	mov	r0, r5
 8000ae4:	f7ff ff2a 	bl	800093c <CalcCRC8>
 8000ae8:	4604      	mov	r4, r0
	logDebugD("FCRC is : ",CRC_Settings,0);
 8000aea:	4835      	ldr	r0, [pc, #212]	; (8000bc0 <FactoryWriteToFlash_CRC+0x12c>)
 8000aec:	f004 fa54 	bl	8004f98 <printToBufferWithoutEndUART1>
 8000af0:	2200      	movs	r2, #0
 8000af2:	4621      	mov	r1, r4
 8000af4:	4838      	ldr	r0, [pc, #224]	; (8000bd8 <FactoryWriteToFlash_CRC+0x144>)
 8000af6:	f004 fa93 	bl	8005020 <printToBufferUART1D>
	logDebugD("FSize is : ",((unsigned char)sizeof(SettingsDataFactory))-4,0);
 8000afa:	4831      	ldr	r0, [pc, #196]	; (8000bc0 <FactoryWriteToFlash_CRC+0x12c>)
 8000afc:	f004 fa4c 	bl	8004f98 <printToBufferWithoutEndUART1>
 8000b00:	2200      	movs	r2, #0
 8000b02:	2144      	movs	r1, #68	; 0x44
 8000b04:	4835      	ldr	r0, [pc, #212]	; (8000bdc <FactoryWriteToFlash_CRC+0x148>)
 8000b06:	f004 fa8b 	bl	8005020 <printToBufferUART1D>
	SettingsDataFactory.CRC_data = CRC_Settings;
 8000b0a:	f845 4c04 	str.w	r4, [r5, #-4]
	SettingsFactoryWriteToFlash();
 8000b0e:	f7ff fda5 	bl	800065c <SettingsFactoryWriteToFlash>
	SettingsReadFromFlashForVerify();
 8000b12:	f7ff fe25 	bl	8000760 <SettingsReadFromFlashForVerify>
	CRC_SettingsVerify = CalcCRC8(((unsigned char *) &SettingsDataForVerify)+4,((unsigned char)sizeof(SettingsDataForVerify))-4,0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2144      	movs	r1, #68	; 0x44
 8000b1a:	4831      	ldr	r0, [pc, #196]	; (8000be0 <FactoryWriteToFlash_CRC+0x14c>)
 8000b1c:	f7ff ff0e 	bl	800093c <CalcCRC8>
 8000b20:	4605      	mov	r5, r0
	logDebugD("FCRC is : ",CRC_SettingsVerify,0);
 8000b22:	4827      	ldr	r0, [pc, #156]	; (8000bc0 <FactoryWriteToFlash_CRC+0x12c>)
 8000b24:	f004 fa38 	bl	8004f98 <printToBufferWithoutEndUART1>
 8000b28:	2200      	movs	r2, #0
 8000b2a:	4629      	mov	r1, r5
 8000b2c:	482a      	ldr	r0, [pc, #168]	; (8000bd8 <FactoryWriteToFlash_CRC+0x144>)
 8000b2e:	f004 fa77 	bl	8005020 <printToBufferUART1D>
	logDebugD("FSize is : ",((unsigned char)sizeof(SettingsDataForVerify))-4,0);
 8000b32:	4823      	ldr	r0, [pc, #140]	; (8000bc0 <FactoryWriteToFlash_CRC+0x12c>)
 8000b34:	f004 fa30 	bl	8004f98 <printToBufferWithoutEndUART1>
 8000b38:	4828      	ldr	r0, [pc, #160]	; (8000bdc <FactoryWriteToFlash_CRC+0x148>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2144      	movs	r1, #68	; 0x44
 8000b3e:	f004 fa6f 	bl	8005020 <printToBufferUART1D>
	if (CRC_Settings == CRC_SettingsVerify )
 8000b42:	42ac      	cmp	r4, r5
		logDebug("FSettings write to Flash success ");
 8000b44:	481e      	ldr	r0, [pc, #120]	; (8000bc0 <FactoryWriteToFlash_CRC+0x12c>)
	if (CRC_Settings == CRC_SettingsVerify )
 8000b46:	d12a      	bne.n	8000b9e <FactoryWriteToFlash_CRC+0x10a>
		logDebug("FSettings write to Flash success ");
 8000b48:	f004 fa26 	bl	8004f98 <printToBufferWithoutEndUART1>
 8000b4c:	4825      	ldr	r0, [pc, #148]	; (8000be4 <FactoryWriteToFlash_CRC+0x150>)
 8000b4e:	f004 f9b9 	bl	8004ec4 <printToBufferUART1>
	CRC_DataWhenPowerOff = CalcCRC8(((unsigned char *) &SaveDataWhenPowerOffFactory)+4,((unsigned char)sizeof(SaveDataWhenPowerOffFactory))-4,0);
 8000b52:	4d25      	ldr	r5, [pc, #148]	; (8000be8 <FactoryWriteToFlash_CRC+0x154>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	211c      	movs	r1, #28
 8000b58:	4628      	mov	r0, r5
 8000b5a:	f7ff feef 	bl	800093c <CalcCRC8>
 8000b5e:	4604      	mov	r4, r0
	SaveDataWhenPowerOffFactory.CRC_data = CRC_DataWhenPowerOff;
 8000b60:	f845 0c04 	str.w	r0, [r5, #-4]
	DataWhenPowerOff_Factory_WriteToFlash();
 8000b64:	f7ff fe48 	bl	80007f8 <DataWhenPowerOff_Factory_WriteToFlash>
	DataWhenPowerOffReadFromFlashForVerify();
 8000b68:	f7ff fe94 	bl	8000894 <DataWhenPowerOffReadFromFlashForVerify>
	CRC_DataWhenPowerOffVerify = CalcCRC8(((unsigned char *) &SaveDataWhenPowerOffForVerify)+4,((unsigned char)sizeof(SaveDataWhenPowerOffForVerify))-4,0);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	211c      	movs	r1, #28
 8000b70:	481e      	ldr	r0, [pc, #120]	; (8000bec <FactoryWriteToFlash_CRC+0x158>)
 8000b72:	f7ff fee3 	bl	800093c <CalcCRC8>
	if (CRC_DataWhenPowerOff == CRC_DataWhenPowerOffVerify )
 8000b76:	4284      	cmp	r4, r0
		logDebug("FDataWhenPowerOff write to Flash success ");
 8000b78:	4811      	ldr	r0, [pc, #68]	; (8000bc0 <FactoryWriteToFlash_CRC+0x12c>)
	if (CRC_DataWhenPowerOff == CRC_DataWhenPowerOffVerify )
 8000b7a:	d118      	bne.n	8000bae <FactoryWriteToFlash_CRC+0x11a>
		logDebug("FDataWhenPowerOff write to Flash success ");
 8000b7c:	f004 fa0c 	bl	8004f98 <printToBufferWithoutEndUART1>
 8000b80:	481b      	ldr	r0, [pc, #108]	; (8000bf0 <FactoryWriteToFlash_CRC+0x15c>)
 8000b82:	f004 f99f 	bl	8004ec4 <printToBufferUART1>
	flash_lock();
 8000b86:	f7ff fb6f 	bl	8000268 <flash_lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b8a:	b662      	cpsie	i
}
 8000b8c:	bd38      	pop	{r3, r4, r5, pc}
		logDebug("FCalibration write to Flash Fail, try again... ");
 8000b8e:	f004 fa03 	bl	8004f98 <printToBufferWithoutEndUART1>
 8000b92:	4818      	ldr	r0, [pc, #96]	; (8000bf4 <FactoryWriteToFlash_CRC+0x160>)
 8000b94:	f004 f996 	bl	8004ec4 <printToBufferUART1>
		CalibrationFactoryWriteToFlash();
 8000b98:	f7ff fc4c 	bl	8000434 <CalibrationFactoryWriteToFlash>
 8000b9c:	e79e      	b.n	8000adc <FactoryWriteToFlash_CRC+0x48>
		logDebug("FSettings write to Flash Fail, try again... ");
 8000b9e:	f004 f9fb 	bl	8004f98 <printToBufferWithoutEndUART1>
 8000ba2:	4815      	ldr	r0, [pc, #84]	; (8000bf8 <FactoryWriteToFlash_CRC+0x164>)
 8000ba4:	f004 f98e 	bl	8004ec4 <printToBufferUART1>
		SettingsFactoryWriteToFlash();
 8000ba8:	f7ff fd58 	bl	800065c <SettingsFactoryWriteToFlash>
 8000bac:	e7d1      	b.n	8000b52 <FactoryWriteToFlash_CRC+0xbe>
		logDebug("FDataWhenPowerOff write to Flash Fail, try again... ");
 8000bae:	f004 f9f3 	bl	8004f98 <printToBufferWithoutEndUART1>
 8000bb2:	4812      	ldr	r0, [pc, #72]	; (8000bfc <FactoryWriteToFlash_CRC+0x168>)
 8000bb4:	f004 f986 	bl	8004ec4 <printToBufferUART1>
		DataWhenPowerOff_Factory_WriteToFlash();
 8000bb8:	f7ff fe1e 	bl	80007f8 <DataWhenPowerOff_Factory_WriteToFlash>
 8000bbc:	e7e3      	b.n	8000b86 <FactoryWriteToFlash_CRC+0xf2>
 8000bbe:	bf00      	nop
 8000bc0:	08005a98 	.word	0x08005a98
 8000bc4:	08005888 	.word	0x08005888
 8000bc8:	20000058 	.word	0x20000058
 8000bcc:	200000a8 	.word	0x200000a8
 8000bd0:	080058a0 	.word	0x080058a0
 8000bd4:	200001a0 	.word	0x200001a0
 8000bd8:	080058f5 	.word	0x080058f5
 8000bdc:	08005900 	.word	0x08005900
 8000be0:	200001e8 	.word	0x200001e8
 8000be4:	0800590c 	.word	0x0800590c
 8000be8:	20000118 	.word	0x20000118
 8000bec:	20000138 	.word	0x20000138
 8000bf0:	0800595b 	.word	0x0800595b
 8000bf4:	080058c5 	.word	0x080058c5
 8000bf8:	0800592e 	.word	0x0800592e
 8000bfc:	08005985 	.word	0x08005985

08000c00 <Generation_Coefficients_R_A_B>:
		{80,1950},
		{100,900},
		{150,500}
};
void Generation_Coefficients_R_A_B()
{
 8000c00:	4916      	ldr	r1, [pc, #88]	; (8000c5c <Generation_Coefficients_R_A_B+0x5c>)
 8000c02:	4817      	ldr	r0, [pc, #92]	; (8000c60 <Generation_Coefficients_R_A_B+0x60>)
 8000c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int8_t i;
	for (i=0;i<(TLT-1);i++)
	{
		Temp_R_A_B[i].R = T_Table[i].R;
		Temp_R_A_B[i].A10000 = (T_Table[i+1].T - T_Table[i].T)*10000/(T_Table[i+1].R - T_Table[i].R);
 8000c08:	f242 7c10 	movw	ip, #10000	; 0x2710
 8000c0c:	460d      	mov	r5, r1
 8000c0e:	4604      	mov	r4, r0
		Temp_R_A_B[i].B = T_Table[i].T - Temp_R_A_B[i].A10000 * T_Table[i].R/10000;
 8000c10:	4f14      	ldr	r7, [pc, #80]	; (8000c64 <Generation_Coefficients_R_A_B+0x64>)
 8000c12:	f101 061c 	add.w	r6, r1, #28
		Temp_R_A_B[i].A10000 = (T_Table[i+1].T - T_Table[i].T)*10000/(T_Table[i+1].R - T_Table[i].R);
 8000c16:	f9b1 e000 	ldrsh.w	lr, [r1]
 8000c1a:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
		Temp_R_A_B[i].R = T_Table[i].R;
 8000c1e:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
		Temp_R_A_B[i].A10000 = (T_Table[i+1].T - T_Table[i].T)*10000/(T_Table[i+1].R - T_Table[i].R);
 8000c22:	eba2 020e 	sub.w	r2, r2, lr
 8000c26:	fb0c f202 	mul.w	r2, ip, r2
 8000c2a:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8000c2e:	3104      	adds	r1, #4
 8000c30:	eba3 0308 	sub.w	r3, r3, r8
 8000c34:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c38:	6043      	str	r3, [r0, #4]
		Temp_R_A_B[i].B = T_Table[i].T - Temp_R_A_B[i].A10000 * T_Table[i].R/10000;
 8000c3a:	fb03 f308 	mul.w	r3, r3, r8
 8000c3e:	fb93 f3f7 	sdiv	r3, r3, r7
	for (i=0;i<(TLT-1);i++)
 8000c42:	428e      	cmp	r6, r1
		Temp_R_A_B[i].B = T_Table[i].T - Temp_R_A_B[i].A10000 * T_Table[i].R/10000;
 8000c44:	4473      	add	r3, lr
		Temp_R_A_B[i].R = T_Table[i].R;
 8000c46:	f8c0 8000 	str.w	r8, [r0]
		Temp_R_A_B[i].B = T_Table[i].T - Temp_R_A_B[i].A10000 * T_Table[i].R/10000;
 8000c4a:	6083      	str	r3, [r0, #8]
 8000c4c:	f100 000c 	add.w	r0, r0, #12
	for (i=0;i<(TLT-1);i++)
 8000c50:	d1e1      	bne.n	8000c16 <Generation_Coefficients_R_A_B+0x16>
	}
	Temp_R_A_B[i].R = T_Table[i].R;
 8000c52:	f9b5 301e 	ldrsh.w	r3, [r5, #30]
 8000c56:	6563      	str	r3, [r4, #84]	; 0x54
	    c=(Temp_R_A_B[i].R-Temp_R_A_B[i+1].R)/2+Temp_R_A_B[i+1].R;
	    Print_to_USART1_d(c,"c= ",0);
	    Print_to_USART1_d(Temp_R_A_B[i].A10000*c/10000+Temp_R_A_B[i].B,"T:",0);
	}
*/
}
 8000c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c5c:	2000022c 	.word	0x2000022c
 8000c60:	200007dc 	.word	0x200007dc
 8000c64:	ffffd8f0 	.word	0xffffd8f0

08000c68 <WriteInLOG>:
	}
	return 200;
}

void WriteInLOG(char  str [17])
{
 8000c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint16_t i_log=0;
	uint8_t i;
	uint8_t j;

	char *number;
	number = itoa(LoggingData.RecordsQuantity);
 8000c6c:	4c53      	ldr	r4, [pc, #332]	; (8000dbc <WriteInLOG+0x154>)
{
 8000c6e:	4607      	mov	r7, r0
	number = itoa(LoggingData.RecordsQuantity);
 8000c70:	6820      	ldr	r0, [r4, #0]
 8000c72:	f000 faaf 	bl	80011d4 <itoa>


	for(i=0;number[i]!='\0';i++)
 8000c76:	2300      	movs	r3, #0
	{
		LoggingData.Records[LoggingData.RecordsQuantity][i] = number[i];
 8000c78:	6826      	ldr	r6, [r4, #0]
 8000c7a:	0131      	lsls	r1, r6, #4
 8000c7c:	198a      	adds	r2, r1, r6
 8000c7e:	4422      	add	r2, r4
	for(i=0;number[i]!='\0';i++)
 8000c80:	f810 c003 	ldrb.w	ip, [r0, r3]
 8000c84:	461d      	mov	r5, r3
 8000c86:	3301      	adds	r3, #1
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	f1bc 0f00 	cmp.w	ip, #0
 8000c8e:	d116      	bne.n	8000cbe <WriteInLOG+0x56>
	}
	LoggingData.Records[LoggingData.RecordsQuantity][i] = ':';
 8000c90:	198a      	adds	r2, r1, r6
 8000c92:	18a0      	adds	r0, r4, r2
 8000c94:	4405      	add	r5, r0
 8000c96:	203a      	movs	r0, #58	; 0x3a
	i++;

	for(j=0;str[j]!='\0';i++,j++)
 8000c98:	1aff      	subs	r7, r7, r3
	LoggingData.Records[LoggingData.RecordsQuantity][i] = ':';
 8000c9a:	7128      	strb	r0, [r5, #4]
	for(j=0;str[j]!='\0';i++,j++)
 8000c9c:	f817 c003 	ldrb.w	ip, [r7, r3]
 8000ca0:	b2dd      	uxtb	r5, r3
 8000ca2:	f1bc 0f00 	cmp.w	ip, #0
 8000ca6:	d10e      	bne.n	8000cc6 <WriteInLOG+0x5e>
			break;
		}
	}
	for (;i<16;i++)
	{
		LoggingData.Records[LoggingData.RecordsQuantity][i] = ' ';
 8000ca8:	2320      	movs	r3, #32
 8000caa:	442a      	add	r2, r5
 8000cac:	3203      	adds	r2, #3
 8000cae:	4422      	add	r2, r4
	for (;i<16;i++)
 8000cb0:	2d0f      	cmp	r5, #15
 8000cb2:	d815      	bhi.n	8000ce0 <WriteInLOG+0x78>
 8000cb4:	3501      	adds	r5, #1
		LoggingData.Records[LoggingData.RecordsQuantity][i] = ' ';
 8000cb6:	f802 3f01 	strb.w	r3, [r2, #1]!
	for (;i<16;i++)
 8000cba:	b2ed      	uxtb	r5, r5
 8000cbc:	e7f8      	b.n	8000cb0 <WriteInLOG+0x48>
		LoggingData.Records[LoggingData.RecordsQuantity][i] = number[i];
 8000cbe:	4415      	add	r5, r2
 8000cc0:	f885 c004 	strb.w	ip, [r5, #4]
 8000cc4:	e7dc      	b.n	8000c80 <WriteInLOG+0x18>
		if (i<16) LoggingData.Records[LoggingData.RecordsQuantity][i] = str[j];
 8000cc6:	2d0f      	cmp	r5, #15
 8000cc8:	d805      	bhi.n	8000cd6 <WriteInLOG+0x6e>
 8000cca:	1898      	adds	r0, r3, r2
 8000ccc:	4420      	add	r0, r4
 8000cce:	f880 c004 	strb.w	ip, [r0, #4]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	e7e2      	b.n	8000c9c <WriteInLOG+0x34>
			LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	4431      	add	r1, r6
 8000cda:	4421      	add	r1, r4
 8000cdc:	440b      	add	r3, r1
 8000cde:	711a      	strb	r2, [r3, #4]
	}
	logDebugD("ii: ",i,0);
 8000ce0:	4837      	ldr	r0, [pc, #220]	; (8000dc0 <WriteInLOG+0x158>)
 8000ce2:	f004 f959 	bl	8004f98 <printToBufferWithoutEndUART1>
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	4629      	mov	r1, r5
 8000cea:	4836      	ldr	r0, [pc, #216]	; (8000dc4 <WriteInLOG+0x15c>)
 8000cec:	f004 f998 	bl	8005020 <printToBufferUART1D>
	LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000cf0:	6823      	ldr	r3, [r4, #0]
 8000cf2:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8000cf6:	4422      	add	r2, r4
 8000cf8:	442a      	add	r2, r5
 8000cfa:	2500      	movs	r5, #0

	LoggingData.RecordsQuantity++;
 8000cfc:	3301      	adds	r3, #1
	if (LoggingData.RecordsQuantity>=(MAX_LOG_ITEMS))
 8000cfe:	2b17      	cmp	r3, #23
	LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000d00:	7115      	strb	r5, [r2, #4]
	LoggingData.RecordsQuantity++;
 8000d02:	6023      	str	r3, [r4, #0]
	if (LoggingData.RecordsQuantity>=(MAX_LOG_ITEMS))
 8000d04:	d937      	bls.n	8000d76 <WriteInLOG+0x10e>
 8000d06:	260a      	movs	r6, #10
	{
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
		{
			number = itoa(i);
			uint8_t k;
			for(k=0;number[k]!='\0';k++)
 8000d08:	46a8      	mov	r8, r5
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
			}
			j--;
			for (;j<16;j++)
			{
				LoggingData.Records[i][j] = ' ';
 8000d0a:	f04f 0920 	mov.w	r9, #32
 8000d0e:	4f2b      	ldr	r7, [pc, #172]	; (8000dbc <WriteInLOG+0x154>)
			number = itoa(i);
 8000d10:	4628      	mov	r0, r5
 8000d12:	f000 fa5f 	bl	80011d4 <itoa>
			for(k=0;number[k]!='\0';k++)
 8000d16:	2300      	movs	r3, #0
 8000d18:	012a      	lsls	r2, r5, #4
				LoggingData.Records[i][k] = number[k];
 8000d1a:	eb02 0c05 	add.w	ip, r2, r5
 8000d1e:	44a4      	add	ip, r4
			for(k=0;number[k]!='\0';k++)
 8000d20:	f810 e003 	ldrb.w	lr, [r0, r3]
 8000d24:	4619      	mov	r1, r3
 8000d26:	3301      	adds	r3, #1
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	f1be 0f00 	cmp.w	lr, #0
 8000d2e:	d12e      	bne.n	8000d8e <WriteInLOG+0x126>
			LoggingData.Records[i][k] = ':';
 8000d30:	f04f 0c3a 	mov.w	ip, #58	; 0x3a
 8000d34:	1950      	adds	r0, r2, r5
 8000d36:	4420      	add	r0, r4
 8000d38:	4401      	add	r1, r0
 8000d3a:	f881 c004 	strb.w	ip, [r1, #4]
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 8000d3e:	eb06 1106 	add.w	r1, r6, r6, lsl #4
 8000d42:	4421      	add	r1, r4
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 8000d44:	eb00 0c03 	add.w	ip, r0, r3
 8000d48:	f89c e004 	ldrb.w	lr, [ip, #4]
 8000d4c:	f1be 0f00 	cmp.w	lr, #0
 8000d50:	d121      	bne.n	8000d96 <WriteInLOG+0x12e>
			j--;
 8000d52:	3b01      	subs	r3, #1
 8000d54:	b2db      	uxtb	r3, r3
			for (;j<16;j++)
 8000d56:	b2d9      	uxtb	r1, r3
 8000d58:	290f      	cmp	r1, #15
 8000d5a:	d929      	bls.n	8000db0 <WriteInLOG+0x148>
			}
			LoggingData.Records[i][j] = '\0';
 8000d5c:	442a      	add	r2, r5
 8000d5e:	4422      	add	r2, r4
 8000d60:	3501      	adds	r5, #1
 8000d62:	4413      	add	r3, r2
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 8000d64:	2d0e      	cmp	r5, #14
			LoggingData.Records[i][j] = '\0';
 8000d66:	f883 8004 	strb.w	r8, [r3, #4]
 8000d6a:	f107 0711 	add.w	r7, r7, #17
 8000d6e:	f106 0601 	add.w	r6, r6, #1
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 8000d72:	d1cd      	bne.n	8000d10 <WriteInLOG+0xa8>
		}

		LoggingData.RecordsQuantity=MAX_LOG_ITEMS-10;
 8000d74:	6025      	str	r5, [r4, #0]
	}
	flash_write_block();
 8000d76:	f7ff faa5 	bl	80002c4 <flash_write_block>
	logDebugD("Q: ",LoggingData.RecordsQuantity,0);
 8000d7a:	4811      	ldr	r0, [pc, #68]	; (8000dc0 <WriteInLOG+0x158>)
 8000d7c:	f004 f90c 	bl	8004f98 <printToBufferWithoutEndUART1>
 8000d80:	6821      	ldr	r1, [r4, #0]
 8000d82:	2200      	movs	r2, #0
}
 8000d84:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	logDebugD("Q: ",LoggingData.RecordsQuantity,0);
 8000d88:	480f      	ldr	r0, [pc, #60]	; (8000dc8 <WriteInLOG+0x160>)
 8000d8a:	f004 b949 	b.w	8005020 <printToBufferUART1D>
				LoggingData.Records[i][k] = number[k];
 8000d8e:	4461      	add	r1, ip
 8000d90:	f881 e004 	strb.w	lr, [r1, #4]
 8000d94:	e7c4      	b.n	8000d20 <WriteInLOG+0xb8>
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j];
 8000d96:	eb01 0e03 	add.w	lr, r1, r3
				if (i>=10)
 8000d9a:	2d09      	cmp	r5, #9
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j];
 8000d9c:	bf8c      	ite	hi
 8000d9e:	f89e e004 	ldrbhi.w	lr, [lr, #4]
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 8000da2:	f89e e005 	ldrbls.w	lr, [lr, #5]
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 8000da6:	3301      	adds	r3, #1
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 8000da8:	f88c e004 	strb.w	lr, [ip, #4]
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	e7c9      	b.n	8000d44 <WriteInLOG+0xdc>
				LoggingData.Records[i][j] = ' ';
 8000db0:	18f9      	adds	r1, r7, r3
 8000db2:	f881 9004 	strb.w	r9, [r1, #4]
 8000db6:	3301      	adds	r3, #1
 8000db8:	e7cd      	b.n	8000d56 <WriteInLOG+0xee>
 8000dba:	bf00      	nop
 8000dbc:	20000858 	.word	0x20000858
 8000dc0:	08005a98 	.word	0x08005a98
 8000dc4:	08005cfd 	.word	0x08005cfd
 8000dc8:	08005d02 	.word	0x08005d02

08000dcc <WriteInLOGc>:

void WriteInLOGc(char  str [17],char c)
{
 8000dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	static uint16_t i_log=0;
	uint8_t i;
	uint8_t j;

	char *number;
	number = itoa(LoggingData.RecordsQuantity);
 8000dd0:	4c53      	ldr	r4, [pc, #332]	; (8000f20 <WriteInLOGc+0x154>)
{
 8000dd2:	4680      	mov	r8, r0
	number = itoa(LoggingData.RecordsQuantity);
 8000dd4:	6820      	ldr	r0, [r4, #0]
{
 8000dd6:	460e      	mov	r6, r1
	number = itoa(LoggingData.RecordsQuantity);
 8000dd8:	f000 f9fc 	bl	80011d4 <itoa>


	for(i=0;number[i]!='\0';i++)
 8000ddc:	2300      	movs	r3, #0
	{
		LoggingData.Records[LoggingData.RecordsQuantity][i] = number[i];
 8000dde:	6827      	ldr	r7, [r4, #0]
 8000de0:	0139      	lsls	r1, r7, #4
 8000de2:	19ca      	adds	r2, r1, r7
 8000de4:	4422      	add	r2, r4
	for(i=0;number[i]!='\0';i++)
 8000de6:	f810 c003 	ldrb.w	ip, [r0, r3]
 8000dea:	461d      	mov	r5, r3
 8000dec:	3301      	adds	r3, #1
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	f1bc 0f00 	cmp.w	ip, #0
 8000df4:	d116      	bne.n	8000e24 <WriteInLOGc+0x58>
	}
	LoggingData.Records[LoggingData.RecordsQuantity][i] = c;
 8000df6:	19ca      	adds	r2, r1, r7
 8000df8:	18a0      	adds	r0, r4, r2
 8000dfa:	4405      	add	r5, r0
 8000dfc:	712e      	strb	r6, [r5, #4]
	i++;

	for(j=0;str[j]!='\0';i++,j++)
 8000dfe:	eba8 0803 	sub.w	r8, r8, r3
 8000e02:	f818 c003 	ldrb.w	ip, [r8, r3]
 8000e06:	b2dd      	uxtb	r5, r3
 8000e08:	f1bc 0f00 	cmp.w	ip, #0
 8000e0c:	d10e      	bne.n	8000e2c <WriteInLOGc+0x60>
			break;
		}
	}
	for (;i<16;i++)
	{
		LoggingData.Records[LoggingData.RecordsQuantity][i] = ' ';
 8000e0e:	2320      	movs	r3, #32
 8000e10:	442a      	add	r2, r5
 8000e12:	3203      	adds	r2, #3
 8000e14:	4422      	add	r2, r4
	for (;i<16;i++)
 8000e16:	2d0f      	cmp	r5, #15
 8000e18:	d815      	bhi.n	8000e46 <WriteInLOGc+0x7a>
 8000e1a:	3501      	adds	r5, #1
		LoggingData.Records[LoggingData.RecordsQuantity][i] = ' ';
 8000e1c:	f802 3f01 	strb.w	r3, [r2, #1]!
	for (;i<16;i++)
 8000e20:	b2ed      	uxtb	r5, r5
 8000e22:	e7f8      	b.n	8000e16 <WriteInLOGc+0x4a>
		LoggingData.Records[LoggingData.RecordsQuantity][i] = number[i];
 8000e24:	4415      	add	r5, r2
 8000e26:	f885 c004 	strb.w	ip, [r5, #4]
 8000e2a:	e7dc      	b.n	8000de6 <WriteInLOGc+0x1a>
		if (i<16) LoggingData.Records[LoggingData.RecordsQuantity][i] = str[j];
 8000e2c:	2d0f      	cmp	r5, #15
 8000e2e:	d805      	bhi.n	8000e3c <WriteInLOGc+0x70>
 8000e30:	1898      	adds	r0, r3, r2
 8000e32:	4420      	add	r0, r4
 8000e34:	f880 c004 	strb.w	ip, [r0, #4]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	e7e2      	b.n	8000e02 <WriteInLOGc+0x36>
			LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	4439      	add	r1, r7
 8000e40:	4421      	add	r1, r4
 8000e42:	440b      	add	r3, r1
 8000e44:	711a      	strb	r2, [r3, #4]
	}
	logDebugD("ii: ",i,0);
 8000e46:	4837      	ldr	r0, [pc, #220]	; (8000f24 <WriteInLOGc+0x158>)
 8000e48:	f004 f8a6 	bl	8004f98 <printToBufferWithoutEndUART1>
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	4629      	mov	r1, r5
 8000e50:	4835      	ldr	r0, [pc, #212]	; (8000f28 <WriteInLOGc+0x15c>)
 8000e52:	f004 f8e5 	bl	8005020 <printToBufferUART1D>
	LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000e56:	6823      	ldr	r3, [r4, #0]
 8000e58:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8000e5c:	4422      	add	r2, r4
 8000e5e:	442a      	add	r2, r5
 8000e60:	2500      	movs	r5, #0

	LoggingData.RecordsQuantity++;
 8000e62:	3301      	adds	r3, #1
	if (LoggingData.RecordsQuantity>=(MAX_LOG_ITEMS))
 8000e64:	2b17      	cmp	r3, #23
	LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000e66:	7115      	strb	r5, [r2, #4]
	LoggingData.RecordsQuantity++;
 8000e68:	6023      	str	r3, [r4, #0]
	if (LoggingData.RecordsQuantity>=(MAX_LOG_ITEMS))
 8000e6a:	d935      	bls.n	8000ed8 <WriteInLOGc+0x10c>
 8000e6c:	270a      	movs	r7, #10
	{
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
		{
			number = itoa(i);
			uint8_t k;
			for(k=0;number[k]!='\0';k++)
 8000e6e:	46a9      	mov	r9, r5
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
			}
			j--;
			for (;j<16;j++)
			{
				LoggingData.Records[i][j] = ' ';
 8000e70:	f04f 0a20 	mov.w	sl, #32
 8000e74:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8000f20 <WriteInLOGc+0x154>
			number = itoa(i);
 8000e78:	4628      	mov	r0, r5
 8000e7a:	f000 f9ab 	bl	80011d4 <itoa>
			for(k=0;number[k]!='\0';k++)
 8000e7e:	2300      	movs	r3, #0
 8000e80:	012a      	lsls	r2, r5, #4
				LoggingData.Records[i][k] = number[k];
 8000e82:	eb02 0c05 	add.w	ip, r2, r5
 8000e86:	44a4      	add	ip, r4
			for(k=0;number[k]!='\0';k++)
 8000e88:	f810 e003 	ldrb.w	lr, [r0, r3]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	3301      	adds	r3, #1
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	f1be 0f00 	cmp.w	lr, #0
 8000e96:	d12b      	bne.n	8000ef0 <WriteInLOGc+0x124>
			LoggingData.Records[i][k] = c;
 8000e98:	1950      	adds	r0, r2, r5
 8000e9a:	4420      	add	r0, r4
 8000e9c:	4401      	add	r1, r0
 8000e9e:	710e      	strb	r6, [r1, #4]
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 8000ea0:	eb07 1107 	add.w	r1, r7, r7, lsl #4
 8000ea4:	4421      	add	r1, r4
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 8000ea6:	eb00 0c03 	add.w	ip, r0, r3
 8000eaa:	f89c e004 	ldrb.w	lr, [ip, #4]
 8000eae:	f1be 0f00 	cmp.w	lr, #0
 8000eb2:	d121      	bne.n	8000ef8 <WriteInLOGc+0x12c>
			j--;
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	b2db      	uxtb	r3, r3
			for (;j<16;j++)
 8000eb8:	b2d9      	uxtb	r1, r3
 8000eba:	290f      	cmp	r1, #15
 8000ebc:	d929      	bls.n	8000f12 <WriteInLOGc+0x146>
			}
			LoggingData.Records[i][j] = '\0';
 8000ebe:	442a      	add	r2, r5
 8000ec0:	4422      	add	r2, r4
 8000ec2:	3501      	adds	r5, #1
 8000ec4:	4413      	add	r3, r2
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 8000ec6:	2d0e      	cmp	r5, #14
			LoggingData.Records[i][j] = '\0';
 8000ec8:	f883 9004 	strb.w	r9, [r3, #4]
 8000ecc:	f108 0811 	add.w	r8, r8, #17
 8000ed0:	f107 0701 	add.w	r7, r7, #1
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 8000ed4:	d1d0      	bne.n	8000e78 <WriteInLOGc+0xac>
		}

		LoggingData.RecordsQuantity=MAX_LOG_ITEMS-10;
 8000ed6:	6025      	str	r5, [r4, #0]
	}
	flash_write_block();
 8000ed8:	f7ff f9f4 	bl	80002c4 <flash_write_block>
	logDebugD("Q: ",LoggingData.RecordsQuantity,0);
 8000edc:	4811      	ldr	r0, [pc, #68]	; (8000f24 <WriteInLOGc+0x158>)
 8000ede:	f004 f85b 	bl	8004f98 <printToBufferWithoutEndUART1>
 8000ee2:	6821      	ldr	r1, [r4, #0]
 8000ee4:	2200      	movs	r2, #0
}
 8000ee6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	logDebugD("Q: ",LoggingData.RecordsQuantity,0);
 8000eea:	4810      	ldr	r0, [pc, #64]	; (8000f2c <WriteInLOGc+0x160>)
 8000eec:	f004 b898 	b.w	8005020 <printToBufferUART1D>
				LoggingData.Records[i][k] = number[k];
 8000ef0:	4461      	add	r1, ip
 8000ef2:	f881 e004 	strb.w	lr, [r1, #4]
 8000ef6:	e7c7      	b.n	8000e88 <WriteInLOGc+0xbc>
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j];
 8000ef8:	eb01 0e03 	add.w	lr, r1, r3
				if (i>=10)
 8000efc:	2d09      	cmp	r5, #9
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j];
 8000efe:	bf8c      	ite	hi
 8000f00:	f89e e004 	ldrbhi.w	lr, [lr, #4]
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 8000f04:	f89e e005 	ldrbls.w	lr, [lr, #5]
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 8000f08:	3301      	adds	r3, #1
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 8000f0a:	f88c e004 	strb.w	lr, [ip, #4]
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	e7c9      	b.n	8000ea6 <WriteInLOGc+0xda>
				LoggingData.Records[i][j] = ' ';
 8000f12:	eb08 0103 	add.w	r1, r8, r3
 8000f16:	f881 a004 	strb.w	sl, [r1, #4]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	e7cc      	b.n	8000eb8 <WriteInLOGc+0xec>
 8000f1e:	bf00      	nop
 8000f20:	20000858 	.word	0x20000858
 8000f24:	08005a98 	.word	0x08005a98
 8000f28:	08005cfd 	.word	0x08005cfd
 8000f2c:	08005d02 	.word	0x08005d02

08000f30 <delay_us>:
	logInfoD("SystemCoreClock: ", SystemCoreClock, 0);
	delay_ms(50);
}
void delay_us(uint32_t us)
{
	volatile uint32_t n = 0;
 8000f30:	2300      	movs	r3, #0
{
 8000f32:	b084      	sub	sp, #16
	if (us==1) n=1;//в тактах процесора
 8000f34:	2801      	cmp	r0, #1
	volatile uint32_t n = 0;
 8000f36:	9300      	str	r3, [sp, #0]
	if (us==1) n=1;//в тактах процесора
 8000f38:	d101      	bne.n	8000f3e <delay_us+0xe>
	if (us==2) n=2;//в тактах процесора
	if (us==3) n=18;//в тактах процесора
	if (us > 3)n=(SystemCoreClock/1000000)*(us-3);//в тактах процесора
 8000f3a:	9000      	str	r0, [sp, #0]
 8000f3c:	e005      	b.n	8000f4a <delay_us+0x1a>
	if (us==2) n=2;//в тактах процесора
 8000f3e:	2802      	cmp	r0, #2
 8000f40:	d0fb      	beq.n	8000f3a <delay_us+0xa>
	if (us==3) n=18;//в тактах процесора
 8000f42:	2803      	cmp	r0, #3
 8000f44:	d11b      	bne.n	8000f7e <delay_us+0x4e>
 8000f46:	2312      	movs	r3, #18
 8000f48:	9300      	str	r3, [sp, #0]
	//uint32_t n=(SystemCoreClock/1000000)*us;//в тактах процесора
    volatile  uint32_t n0=SysTick->VAL;// Начальное значение счётчика SysTick.
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <delay_us+0x60>)
 8000f4c:	689a      	ldr	r2, [r3, #8]
 8000f4e:	9201      	str	r2, [sp, #4]
    volatile uint32_t np=n0;  // Предыдущее значение счётчика.
 8000f50:	9a01      	ldr	r2, [sp, #4]
 8000f52:	9202      	str	r2, [sp, #8]
    volatile int32_t nc;// Текущее значение счётчика SysTick.

    // Выполняем цикл до тех пор, пока не пройдёт заданное количество тактов процессора.
    do{
    	nc=SysTick->VAL;
 8000f54:	689a      	ldr	r2, [r3, #8]
 8000f56:	9203      	str	r2, [sp, #12]
        // Проверка на переполнение, корректировка на модуль пересчёта в случае переполнения.
        if(nc>=np)
 8000f58:	9903      	ldr	r1, [sp, #12]
 8000f5a:	9a02      	ldr	r2, [sp, #8]
 8000f5c:	4291      	cmp	r1, r2
 8000f5e:	d304      	bcc.n	8000f6a <delay_us+0x3a>
            n0+=SysTick->LOAD+1;
 8000f60:	685a      	ldr	r2, [r3, #4]
 8000f62:	9901      	ldr	r1, [sp, #4]
 8000f64:	440a      	add	r2, r1
 8000f66:	3201      	adds	r2, #1
 8000f68:	9201      	str	r2, [sp, #4]
        np=nc;
 8000f6a:	9a03      	ldr	r2, [sp, #12]
 8000f6c:	9202      	str	r2, [sp, #8]
    }while(n0-nc<n);
 8000f6e:	9a01      	ldr	r2, [sp, #4]
 8000f70:	9803      	ldr	r0, [sp, #12]
 8000f72:	9900      	ldr	r1, [sp, #0]
 8000f74:	1a12      	subs	r2, r2, r0
 8000f76:	428a      	cmp	r2, r1
 8000f78:	d3ec      	bcc.n	8000f54 <delay_us+0x24>
}
 8000f7a:	b004      	add	sp, #16
 8000f7c:	4770      	bx	lr
	if (us > 3)n=(SystemCoreClock/1000000)*(us-3);//в тактах процесора
 8000f7e:	d9e4      	bls.n	8000f4a <delay_us+0x1a>
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <delay_us+0x64>)
 8000f82:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <delay_us+0x68>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	3803      	subs	r0, #3
 8000f88:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f8c:	4358      	muls	r0, r3
 8000f8e:	e7d4      	b.n	8000f3a <delay_us+0xa>
 8000f90:	e000e010 	.word	0xe000e010
 8000f94:	20000290 	.word	0x20000290
 8000f98:	000f4240 	.word	0x000f4240

08000f9c <delay_ms>:
// t1=SysTick->VAL;
// t2=SysTick->VAL;

void delay_ms(volatile uint32_t value)
{
 8000f9c:	b507      	push	{r0, r1, r2, lr}
 8000f9e:	9001      	str	r0, [sp, #4]
	while(value>0)
 8000fa0:	9b01      	ldr	r3, [sp, #4]
 8000fa2:	b913      	cbnz	r3, 8000faa <delay_ms+0xe>
	{
		delay_us(1000);
		value--;
	}
}
 8000fa4:	b003      	add	sp, #12
 8000fa6:	f85d fb04 	ldr.w	pc, [sp], #4
		delay_us(1000);
 8000faa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fae:	f7ff ffbf 	bl	8000f30 <delay_us>
		value--;
 8000fb2:	9b01      	ldr	r3, [sp, #4]
 8000fb4:	3b01      	subs	r3, #1
 8000fb6:	9301      	str	r3, [sp, #4]
 8000fb8:	e7f2      	b.n	8000fa0 <delay_ms+0x4>
	...

08000fbc <InfoToUARTBeforeStart>:
{
 8000fbc:	b538      	push	{r3, r4, r5, lr}
	logInfoD("CRC(Calibration) =",CalibrationData.CRC_data,0);
 8000fbe:	4c68      	ldr	r4, [pc, #416]	; (8001160 <InfoToUARTBeforeStart+0x1a4>)
 8000fc0:	4d68      	ldr	r5, [pc, #416]	; (8001164 <InfoToUARTBeforeStart+0x1a8>)
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	f003 ffe8 	bl	8004f98 <printToBufferWithoutEndUART1>
 8000fc8:	6829      	ldr	r1, [r5, #0]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	4866      	ldr	r0, [pc, #408]	; (8001168 <InfoToUARTBeforeStart+0x1ac>)
 8000fce:	f004 f827 	bl	8005020 <printToBufferUART1D>
	logInfoD("Calibration0ValueForCurrent =",CalibrationData.Calibration0ValueForCurrent ,0);
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	f003 ffe0 	bl	8004f98 <printToBufferWithoutEndUART1>
 8000fd8:	68a9      	ldr	r1, [r5, #8]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	4863      	ldr	r0, [pc, #396]	; (800116c <InfoToUARTBeforeStart+0x1b0>)
 8000fde:	f004 f81f 	bl	8005020 <printToBufferUART1D>
	logInfoD("Calibration0ValueForCurrent1 =",CalibrationData.Calibration0ValueForCurrent1 ,0);
 8000fe2:	4620      	mov	r0, r4
 8000fe4:	f003 ffd8 	bl	8004f98 <printToBufferWithoutEndUART1>
 8000fe8:	6929      	ldr	r1, [r5, #16]
 8000fea:	2200      	movs	r2, #0
 8000fec:	4860      	ldr	r0, [pc, #384]	; (8001170 <InfoToUARTBeforeStart+0x1b4>)
 8000fee:	f004 f817 	bl	8005020 <printToBufferUART1D>
	logInfoD("CalibrationValueForCurrent_x1 =",CalibrationData.CalibrationValueForCurrent_x1 ,0);
 8000ff2:	4620      	mov	r0, r4
 8000ff4:	f003 ffd0 	bl	8004f98 <printToBufferWithoutEndUART1>
 8000ff8:	69a9      	ldr	r1, [r5, #24]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	485d      	ldr	r0, [pc, #372]	; (8001174 <InfoToUARTBeforeStart+0x1b8>)
 8000ffe:	f004 f80f 	bl	8005020 <printToBufferUART1D>
	logInfoD("CalibrationValueForCurrent_x50 =",CalibrationData.CalibrationValueForCurrent_x50 ,0);
 8001002:	4620      	mov	r0, r4
 8001004:	f003 ffc8 	bl	8004f98 <printToBufferWithoutEndUART1>
 8001008:	6a29      	ldr	r1, [r5, #32]
 800100a:	2200      	movs	r2, #0
 800100c:	485a      	ldr	r0, [pc, #360]	; (8001178 <InfoToUARTBeforeStart+0x1bc>)
 800100e:	f004 f807 	bl	8005020 <printToBufferUART1D>
	logInfoD("CalibrationValueForTemperature =",CalibrationData.CalibrationValueForTemperature ,0);
 8001012:	4620      	mov	r0, r4
 8001014:	f003 ffc0 	bl	8004f98 <printToBufferWithoutEndUART1>
 8001018:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800101a:	2200      	movs	r2, #0
 800101c:	4857      	ldr	r0, [pc, #348]	; (800117c <InfoToUARTBeforeStart+0x1c0>)
 800101e:	f003 ffff 	bl	8005020 <printToBufferUART1D>
	logInfoD("CalibrationValueForU_OUT =",CalibrationData.CalibrationValueForU_OUT ,0);
 8001022:	4620      	mov	r0, r4
 8001024:	f003 ffb8 	bl	8004f98 <printToBufferWithoutEndUART1>
 8001028:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800102a:	2200      	movs	r2, #0
 800102c:	4854      	ldr	r0, [pc, #336]	; (8001180 <InfoToUARTBeforeStart+0x1c4>)
 800102e:	f003 fff7 	bl	8005020 <printToBufferUART1D>
	logInfoD("CalibrationValueForVoltage2 =",CalibrationData.CalibrationValueForVoltage2 ,0);
 8001032:	4620      	mov	r0, r4
 8001034:	f003 ffb0 	bl	8004f98 <printToBufferWithoutEndUART1>
 8001038:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800103a:	2200      	movs	r2, #0
 800103c:	4851      	ldr	r0, [pc, #324]	; (8001184 <InfoToUARTBeforeStart+0x1c8>)
 800103e:	f003 ffef 	bl	8005020 <printToBufferUART1D>
	logInfoD("ResistanceComp_Ishunt_Wires =",CalibrationData.ResistanceComp_Ishunt_Wires ,0) ;
 8001042:	4620      	mov	r0, r4
 8001044:	f003 ffa8 	bl	8004f98 <printToBufferWithoutEndUART1>
 8001048:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800104a:	2200      	movs	r2, #0
 800104c:	484e      	ldr	r0, [pc, #312]	; (8001188 <InfoToUARTBeforeStart+0x1cc>)
 800104e:	f003 ffe7 	bl	8005020 <printToBufferUART1D>
	logInfoD("ResistanceComp_MOSFET =",CalibrationData.ResistanceComp_MOSFET ,0) ;
 8001052:	4620      	mov	r0, r4
 8001054:	f003 ffa0 	bl	8004f98 <printToBufferWithoutEndUART1>
 8001058:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800105a:	2200      	movs	r2, #0
 800105c:	484b      	ldr	r0, [pc, #300]	; (800118c <InfoToUARTBeforeStart+0x1d0>)
	logInfoD("CRC(SettingsData) =",SettingsData.CRC_data,0);
 800105e:	4d4c      	ldr	r5, [pc, #304]	; (8001190 <InfoToUARTBeforeStart+0x1d4>)
	logInfoD("ResistanceComp_MOSFET =",CalibrationData.ResistanceComp_MOSFET ,0) ;
 8001060:	f003 ffde 	bl	8005020 <printToBufferUART1D>
	delay_ms(50);
 8001064:	2032      	movs	r0, #50	; 0x32
 8001066:	f7ff ff99 	bl	8000f9c <delay_ms>
	logInfoD("CRC(SettingsData) =",SettingsData.CRC_data,0);
 800106a:	4620      	mov	r0, r4
 800106c:	f003 ff94 	bl	8004f98 <printToBufferWithoutEndUART1>
 8001070:	6829      	ldr	r1, [r5, #0]
 8001072:	2200      	movs	r2, #0
 8001074:	4847      	ldr	r0, [pc, #284]	; (8001194 <InfoToUARTBeforeStart+0x1d8>)
 8001076:	f003 ffd3 	bl	8005020 <printToBufferUART1D>
	logInfoD("Option1(menu position) =",SettingsData.Option1 ,0);
 800107a:	4620      	mov	r0, r4
 800107c:	f003 ff8c 	bl	8004f98 <printToBufferWithoutEndUART1>
 8001080:	68a9      	ldr	r1, [r5, #8]
 8001082:	2200      	movs	r2, #0
 8001084:	4844      	ldr	r0, [pc, #272]	; (8001198 <InfoToUARTBeforeStart+0x1dc>)
 8001086:	f003 ffcb 	bl	8005020 <printToBufferUART1D>
	logInfoD("ChargeTime =",SettingsData.ChargeTime ,0);
 800108a:	4620      	mov	r0, r4
 800108c:	f003 ff84 	bl	8004f98 <printToBufferWithoutEndUART1>
 8001090:	6929      	ldr	r1, [r5, #16]
 8001092:	2200      	movs	r2, #0
 8001094:	4841      	ldr	r0, [pc, #260]	; (800119c <InfoToUARTBeforeStart+0x1e0>)
 8001096:	f003 ffc3 	bl	8005020 <printToBufferUART1D>
	logInfoD("LowVoltage =",SettingsData.LowVoltage ,0);
 800109a:	4620      	mov	r0, r4
 800109c:	f003 ff7c 	bl	8004f98 <printToBufferWithoutEndUART1>
 80010a0:	69a9      	ldr	r1, [r5, #24]
 80010a2:	2200      	movs	r2, #0
 80010a4:	483e      	ldr	r0, [pc, #248]	; (80011a0 <InfoToUARTBeforeStart+0x1e4>)
 80010a6:	f003 ffbb 	bl	8005020 <printToBufferUART1D>
	logInfoD("MaxVoltage =",SettingsData.MaxVoltage ,0);
 80010aa:	4620      	mov	r0, r4
 80010ac:	f003 ff74 	bl	8004f98 <printToBufferWithoutEndUART1>
 80010b0:	6a29      	ldr	r1, [r5, #32]
 80010b2:	2200      	movs	r2, #0
 80010b4:	483b      	ldr	r0, [pc, #236]	; (80011a4 <InfoToUARTBeforeStart+0x1e8>)
 80010b6:	f003 ffb3 	bl	8005020 <printToBufferUART1D>
	logInfoD("ChargeAdapt =",SettingsData.ChargeAdapt ,0);
 80010ba:	4620      	mov	r0, r4
 80010bc:	f003 ff6c 	bl	8004f98 <printToBufferWithoutEndUART1>
 80010c0:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80010c2:	2200      	movs	r2, #0
 80010c4:	4838      	ldr	r0, [pc, #224]	; (80011a8 <InfoToUARTBeforeStart+0x1ec>)
 80010c6:	f003 ffab 	bl	8005020 <printToBufferUART1D>
	logInfoD("Swing_Chrg_time =",SettingsData.Swing_Chrg_time ,0);
 80010ca:	4620      	mov	r0, r4
 80010cc:	f003 ff64 	bl	8004f98 <printToBufferWithoutEndUART1>
 80010d0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80010d2:	2200      	movs	r2, #0
 80010d4:	4835      	ldr	r0, [pc, #212]	; (80011ac <InfoToUARTBeforeStart+0x1f0>)
 80010d6:	f003 ffa3 	bl	8005020 <printToBufferUART1D>
	logInfoD("Swing_DChrg_time =",SettingsData.Swing_DChrg_time ,0);
 80010da:	4620      	mov	r0, r4
 80010dc:	f003 ff5c 	bl	8004f98 <printToBufferWithoutEndUART1>
 80010e0:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80010e2:	2200      	movs	r2, #0
 80010e4:	4832      	ldr	r0, [pc, #200]	; (80011b0 <InfoToUARTBeforeStart+0x1f4>)
 80010e6:	f003 ff9b 	bl	8005020 <printToBufferUART1D>
	logInfoD("Option2(OUT after powerUp) =",SettingsData.Option2 ,0);
 80010ea:	4620      	mov	r0, r4
 80010ec:	f003 ff54 	bl	8004f98 <printToBufferWithoutEndUART1>
 80010f0:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80010f2:	2200      	movs	r2, #0
 80010f4:	482f      	ldr	r0, [pc, #188]	; (80011b4 <InfoToUARTBeforeStart+0x1f8>)
 80010f6:	f003 ff93 	bl	8005020 <printToBufferUART1D>
	logInfoD("CRC(SaveDataWhenPowerOff) =",SaveDataWhenPowerOff.CRC_data,0);
 80010fa:	4d2f      	ldr	r5, [pc, #188]	; (80011b8 <InfoToUARTBeforeStart+0x1fc>)
	delay_ms(50);
 80010fc:	2032      	movs	r0, #50	; 0x32
 80010fe:	f7ff ff4d 	bl	8000f9c <delay_ms>
	logInfoD("CRC(SaveDataWhenPowerOff) =",SaveDataWhenPowerOff.CRC_data,0);
 8001102:	4620      	mov	r0, r4
 8001104:	f003 ff48 	bl	8004f98 <printToBufferWithoutEndUART1>
 8001108:	6829      	ldr	r1, [r5, #0]
 800110a:	2200      	movs	r2, #0
 800110c:	482b      	ldr	r0, [pc, #172]	; (80011bc <InfoToUARTBeforeStart+0x200>)
 800110e:	f003 ff87 	bl	8005020 <printToBufferUART1D>
	logInfoD("BatteryCapacityDischargePreviousValue =",SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue ,0);
 8001112:	4620      	mov	r0, r4
 8001114:	f003 ff40 	bl	8004f98 <printToBufferWithoutEndUART1>
 8001118:	68a9      	ldr	r1, [r5, #8]
 800111a:	2200      	movs	r2, #0
 800111c:	4828      	ldr	r0, [pc, #160]	; (80011c0 <InfoToUARTBeforeStart+0x204>)
 800111e:	f003 ff7f 	bl	8005020 <printToBufferUART1D>
	logInfoD("BatteryCapacityDischargeCurrent =",SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent ,0);
 8001122:	4620      	mov	r0, r4
 8001124:	f003 ff38 	bl	8004f98 <printToBufferWithoutEndUART1>
 8001128:	6929      	ldr	r1, [r5, #16]
 800112a:	2200      	movs	r2, #0
 800112c:	4825      	ldr	r0, [pc, #148]	; (80011c4 <InfoToUARTBeforeStart+0x208>)
 800112e:	f003 ff77 	bl	8005020 <printToBufferUART1D>
	logInfoD("OutState = ",SaveDataWhenPowerOff.OutState ,0);
 8001132:	4620      	mov	r0, r4
 8001134:	f003 ff30 	bl	8004f98 <printToBufferWithoutEndUART1>
 8001138:	69a9      	ldr	r1, [r5, #24]
 800113a:	2200      	movs	r2, #0
 800113c:	4822      	ldr	r0, [pc, #136]	; (80011c8 <InfoToUARTBeforeStart+0x20c>)
 800113e:	f003 ff6f 	bl	8005020 <printToBufferUART1D>
	logInfoD("SystemCoreClock: ", SystemCoreClock, 0);
 8001142:	4620      	mov	r0, r4
 8001144:	f003 ff28 	bl	8004f98 <printToBufferWithoutEndUART1>
 8001148:	4b20      	ldr	r3, [pc, #128]	; (80011cc <InfoToUARTBeforeStart+0x210>)
 800114a:	4821      	ldr	r0, [pc, #132]	; (80011d0 <InfoToUARTBeforeStart+0x214>)
 800114c:	6819      	ldr	r1, [r3, #0]
 800114e:	2200      	movs	r2, #0
 8001150:	f003 ff66 	bl	8005020 <printToBufferUART1D>
}
 8001154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delay_ms(50);
 8001158:	2032      	movs	r0, #50	; 0x32
 800115a:	f7ff bf1f 	b.w	8000f9c <delay_ms>
 800115e:	bf00      	nop
 8001160:	08005aad 	.word	0x08005aad
 8001164:	20000004 	.word	0x20000004
 8001168:	08005ab4 	.word	0x08005ab4
 800116c:	08005ac7 	.word	0x08005ac7
 8001170:	08005ae5 	.word	0x08005ae5
 8001174:	08005b04 	.word	0x08005b04
 8001178:	08005b24 	.word	0x08005b24
 800117c:	08005b45 	.word	0x08005b45
 8001180:	08005b66 	.word	0x08005b66
 8001184:	08005b81 	.word	0x08005b81
 8001188:	08005b9f 	.word	0x08005b9f
 800118c:	08005bbd 	.word	0x08005bbd
 8001190:	20000154 	.word	0x20000154
 8001194:	08005bd5 	.word	0x08005bd5
 8001198:	08005be9 	.word	0x08005be9
 800119c:	08005c02 	.word	0x08005c02
 80011a0:	08005c0f 	.word	0x08005c0f
 80011a4:	08005c1c 	.word	0x08005c1c
 80011a8:	08005c29 	.word	0x08005c29
 80011ac:	08005c37 	.word	0x08005c37
 80011b0:	08005c49 	.word	0x08005c49
 80011b4:	08005c5c 	.word	0x08005c5c
 80011b8:	200000f4 	.word	0x200000f4
 80011bc:	08005c79 	.word	0x08005c79
 80011c0:	08005c95 	.word	0x08005c95
 80011c4:	08005cbd 	.word	0x08005cbd
 80011c8:	08005cdf 	.word	0x08005cdf
 80011cc:	20000290 	.word	0x20000290
 80011d0:	08005ceb 	.word	0x08005ceb

080011d4 <itoa>:
#include "Lib.h"
char * itoa(int32_t n)
{
 80011d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80011d6:	2200      	movs	r2, #0
	static char s1[16];
     if ((sign = n) < 0)
         n = -n;
     i = 0;
     do {
         s[i++] = n % 10 + '0';
 80011d8:	260a      	movs	r6, #10
 80011da:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
 80011de:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
 80011e2:	ad04      	add	r5, sp, #16
 80011e4:	b2d4      	uxtb	r4, r2
 80011e6:	442a      	add	r2, r5
 80011e8:	fb91 f5f6 	sdiv	r5, r1, r6
 80011ec:	fb06 1115 	mls	r1, r6, r5, r1
 80011f0:	1c63      	adds	r3, r4, #1
 80011f2:	3130      	adds	r1, #48	; 0x30
 80011f4:	f802 1c10 	strb.w	r1, [r2, #-16]
 80011f8:	b25b      	sxtb	r3, r3
     } while ((n /= 10) > 0);
 80011fa:	1e29      	subs	r1, r5, #0
 80011fc:	461a      	mov	r2, r3
 80011fe:	dcf0      	bgt.n	80011e2 <itoa+0xe>
     if (sign < 0)
 8001200:	2800      	cmp	r0, #0
 8001202:	da06      	bge.n	8001212 <itoa+0x3e>
         s[i++] = '-';
 8001204:	a904      	add	r1, sp, #16
 8001206:	440a      	add	r2, r1
 8001208:	212d      	movs	r1, #45	; 0x2d
 800120a:	1ca3      	adds	r3, r4, #2
 800120c:	f802 1c10 	strb.w	r1, [r2, #-16]
 8001210:	b25b      	sxtb	r3, r3
     s[i] = '\0';
 8001212:	2200      	movs	r2, #0
 8001214:	a904      	add	r1, sp, #16
 8001216:	4419      	add	r1, r3
 8001218:	4c0a      	ldr	r4, [pc, #40]	; (8001244 <itoa+0x70>)
 800121a:	f801 2c10 	strb.w	r2, [r1, #-16]
 800121e:	b2d0      	uxtb	r0, r2
 8001220:	1a19      	subs	r1, r3, r0

     k=0;
     while (i)
 8001222:	4293      	cmp	r3, r2
 8001224:	b249      	sxtb	r1, r1
 8001226:	d104      	bne.n	8001232 <itoa+0x5e>
     {
    	s1[k]=s[i-1];
    	i--;
    	k++;
     }
     s1[k] = '\0';
 8001228:	2200      	movs	r2, #0
     return s1;
}
 800122a:	4806      	ldr	r0, [pc, #24]	; (8001244 <itoa+0x70>)
     s1[k] = '\0';
 800122c:	54e2      	strb	r2, [r4, r3]
}
 800122e:	b004      	add	sp, #16
 8001230:	bd70      	pop	{r4, r5, r6, pc}
    	s1[k]=s[i-1];
 8001232:	ad04      	add	r5, sp, #16
 8001234:	4429      	add	r1, r5
 8001236:	f811 1c11 	ldrb.w	r1, [r1, #-17]
 800123a:	54a1      	strb	r1, [r4, r2]
    	k++;
 800123c:	1c42      	adds	r2, r0, #1
 800123e:	b252      	sxtb	r2, r2
 8001240:	e7ed      	b.n	800121e <itoa+0x4a>
 8001242:	bf00      	nop
 8001244:	20000744 	.word	0x20000744

08001248 <itoaP>:

char * itoaP(int32_t n,char *s1)
{
 8001248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124a:	2300      	movs	r3, #0

     if ((sign = n) < 0)
         n = -n;
     i = 0;
     do {
         s[i++] = n % 10 + '0';
 800124c:	270a      	movs	r7, #10
 800124e:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
{
 8001252:	b085      	sub	sp, #20
 8001254:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
         s[i++] = n % 10 + '0';
 8001258:	ae04      	add	r6, sp, #16
 800125a:	b2dd      	uxtb	r5, r3
 800125c:	4433      	add	r3, r6
 800125e:	fb94 f6f7 	sdiv	r6, r4, r7
 8001262:	fb07 4416 	mls	r4, r7, r6, r4
 8001266:	1c6a      	adds	r2, r5, #1
 8001268:	3430      	adds	r4, #48	; 0x30
 800126a:	f803 4c10 	strb.w	r4, [r3, #-16]
 800126e:	b252      	sxtb	r2, r2
     } while ((n /= 10) > 0);
 8001270:	1e34      	subs	r4, r6, #0
 8001272:	4613      	mov	r3, r2
 8001274:	dcf0      	bgt.n	8001258 <itoaP+0x10>
     if (sign < 0)
 8001276:	2800      	cmp	r0, #0
 8001278:	da06      	bge.n	8001288 <itoaP+0x40>
         s[i++] = '-';
 800127a:	a804      	add	r0, sp, #16
 800127c:	4403      	add	r3, r0
 800127e:	202d      	movs	r0, #45	; 0x2d
 8001280:	1caa      	adds	r2, r5, #2
 8001282:	f803 0c10 	strb.w	r0, [r3, #-16]
 8001286:	b252      	sxtb	r2, r2
     s[i] = '\0';
 8001288:	2300      	movs	r3, #0
 800128a:	a804      	add	r0, sp, #16
 800128c:	4410      	add	r0, r2
 800128e:	f800 3c10 	strb.w	r3, [r0, #-16]
 8001292:	b2dd      	uxtb	r5, r3
 8001294:	1b54      	subs	r4, r2, r5

     k=0;
     while (i)
 8001296:	429a      	cmp	r2, r3
 8001298:	b264      	sxtb	r4, r4
 800129a:	eb01 0003 	add.w	r0, r1, r3
 800129e:	d104      	bne.n	80012aa <itoaP+0x62>
     {
    	s1[k]=s[i-1];
    	i--;
    	k++;
     }
     s1[k] = '\0';
 80012a0:	2300      	movs	r3, #0
 80012a2:	7003      	strb	r3, [r0, #0]
     return s1;
}
 80012a4:	4608      	mov	r0, r1
 80012a6:	b005      	add	sp, #20
 80012a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	s1[k]=s[i-1];
 80012aa:	a804      	add	r0, sp, #16
 80012ac:	4404      	add	r4, r0
 80012ae:	f814 0c11 	ldrb.w	r0, [r4, #-17]
 80012b2:	54c8      	strb	r0, [r1, r3]
    	k++;
 80012b4:	1c6b      	adds	r3, r5, #1
 80012b6:	b25b      	sxtb	r3, r3
 80012b8:	e7eb      	b.n	8001292 <itoaP+0x4a>
	...

080012bc <itoa_koma>:

char * itoa_koma(int32_t n,uint8_t koma)
{
 80012bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012be:	2300      	movs	r3, #0
    if ((sign = n) < 0)
    	n = -n;
     i = 0;
     do
     {
         s[i++] = n % 10 + '0';
 80012c0:	270a      	movs	r7, #10
 80012c2:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
{
 80012c6:	b08b      	sub	sp, #44	; 0x2c
 80012c8:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
         s[i++] = n % 10 + '0';
 80012cc:	ae0a      	add	r6, sp, #40	; 0x28
 80012ce:	b2dd      	uxtb	r5, r3
 80012d0:	4433      	add	r3, r6
 80012d2:	fb94 f6f7 	sdiv	r6, r4, r7
 80012d6:	fb07 4416 	mls	r4, r7, r6, r4
 80012da:	1c6a      	adds	r2, r5, #1
 80012dc:	3430      	adds	r4, #48	; 0x30
 80012de:	f803 4c28 	strb.w	r4, [r3, #-40]
 80012e2:	b252      	sxtb	r2, r2
     } while ((n /= 10) > 0);
 80012e4:	1e34      	subs	r4, r6, #0
 80012e6:	4613      	mov	r3, r2
 80012e8:	dcf0      	bgt.n	80012cc <itoa_koma+0x10>
     s[i] = '\0';
     if (i<=1)
 80012ea:	2a01      	cmp	r2, #1
     {
       	 s[i] = '0';
 80012ec:	bfd8      	it	le
 80012ee:	2230      	movle	r2, #48	; 0x30
 80012f0:	ac0a      	add	r4, sp, #40	; 0x28
 80012f2:	4423      	add	r3, r4
     s[i] = '\0';
 80012f4:	bfcf      	iteee	gt
 80012f6:	2400      	movgt	r4, #0
       	 s[i] = '0';
 80012f8:	f803 2c28 	strble.w	r2, [r3, #-40]
       	 i++;
 80012fc:	1caa      	addle	r2, r5, #2
 80012fe:	b252      	sxtble	r2, r2
     s[i] = '\0';
 8001300:	bfc8      	it	gt
 8001302:	f803 4c28 	strbgt.w	r4, [r3, #-40]
     }
     if (i<=2&&koma>1)
 8001306:	2a02      	cmp	r2, #2
 8001308:	dc08      	bgt.n	800131c <itoa_koma+0x60>
 800130a:	2901      	cmp	r1, #1
 800130c:	d906      	bls.n	800131c <itoa_koma+0x60>
     {
    	 s[i] = '0';
 800130e:	2430      	movs	r4, #48	; 0x30
 8001310:	ab0a      	add	r3, sp, #40	; 0x28
 8001312:	4413      	add	r3, r2
    	 i++;
 8001314:	3201      	adds	r2, #1
    	 s[i] = '0';
 8001316:	f803 4c28 	strb.w	r4, [r3, #-40]
    	 i++;
 800131a:	b252      	sxtb	r2, r2
     }
     k=0;
     j=0;
     while (j<i)
 800131c:	2400      	movs	r4, #0
     {
    	 if (k==koma)
         {
         	 sKoma[k]='.';
 800131e:	262e      	movs	r6, #46	; 0x2e
     k=0;
 8001320:	4623      	mov	r3, r4
     while (j<i)
 8001322:	b265      	sxtb	r5, r4
 8001324:	42aa      	cmp	r2, r5
 8001326:	dc0b      	bgt.n	8001340 <itoa_koma+0x84>
         }
    	 sKoma[k]=s[j];
         j++;
         k++;
      }
     if (sign < 0) sKoma[k++] = '-';
 8001328:	2800      	cmp	r0, #0
 800132a:	da06      	bge.n	800133a <itoa_koma+0x7e>
 800132c:	a90a      	add	r1, sp, #40	; 0x28
 800132e:	1c5a      	adds	r2, r3, #1
 8001330:	440b      	add	r3, r1
 8001332:	212d      	movs	r1, #45	; 0x2d
 8001334:	f803 1c14 	strb.w	r1, [r3, #-20]
 8001338:	b253      	sxtb	r3, r2
 800133a:	2200      	movs	r2, #0
 800133c:	4c12      	ldr	r4, [pc, #72]	; (8001388 <itoa_koma+0xcc>)
 800133e:	e019      	b.n	8001374 <itoa_koma+0xb8>
    	 if (k==koma)
 8001340:	428b      	cmp	r3, r1
 8001342:	461d      	mov	r5, r3
 8001344:	d105      	bne.n	8001352 <itoa_koma+0x96>
         	 sKoma[k]='.';
 8001346:	af0a      	add	r7, sp, #40	; 0x28
 8001348:	3301      	adds	r3, #1
 800134a:	443d      	add	r5, r7
 800134c:	b25b      	sxtb	r3, r3
 800134e:	f805 6c14 	strb.w	r6, [r5, #-20]
    	 sKoma[k]=s[j];
 8001352:	f81d 7004 	ldrb.w	r7, [sp, r4]
 8001356:	ad0a      	add	r5, sp, #40	; 0x28
 8001358:	441d      	add	r5, r3
         k++;
 800135a:	3301      	adds	r3, #1
    	 sKoma[k]=s[j];
 800135c:	f805 7c14 	strb.w	r7, [r5, #-20]
         k++;
 8001360:	b25b      	sxtb	r3, r3
 8001362:	3401      	adds	r4, #1
 8001364:	e7dd      	b.n	8001322 <itoa_koma+0x66>
     i=0;
     while (k)
     {
    	s1[i]=sKoma[k-1];
 8001366:	ad0a      	add	r5, sp, #40	; 0x28
 8001368:	4429      	add	r1, r5
 800136a:	f811 1c15 	ldrb.w	r1, [r1, #-21]
 800136e:	54a1      	strb	r1, [r4, r2]
    	k--;
    	i++;
 8001370:	1c42      	adds	r2, r0, #1
 8001372:	b252      	sxtb	r2, r2
 8001374:	b2d0      	uxtb	r0, r2
 8001376:	1a19      	subs	r1, r3, r0
     while (k)
 8001378:	429a      	cmp	r2, r3
 800137a:	b249      	sxtb	r1, r1
 800137c:	d1f3      	bne.n	8001366 <itoa_koma+0xaa>
     }
     s1[i] = '\0';
 800137e:	2300      	movs	r3, #0
     return s1;
}
 8001380:	4801      	ldr	r0, [pc, #4]	; (8001388 <itoa_koma+0xcc>)
     s1[i] = '\0';
 8001382:	54a3      	strb	r3, [r4, r2]
}
 8001384:	b00b      	add	sp, #44	; 0x2c
 8001386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001388:	20000754 	.word	0x20000754

0800138c <Module16>:
     s1[i] = '\0';
     return s1;
}
int16_t Module16 (int16_t value)
{
	if (value == 0) return 0;
 800138c:	2800      	cmp	r0, #0
 800138e:	d002      	beq.n	8001396 <Module16+0xa>
	if (value > 0) return value;
	if (value < 0) return (-1)*value;
 8001390:	bfdc      	itt	le
 8001392:	4240      	negle	r0, r0
 8001394:	b200      	sxthle	r0, r0
}
 8001396:	4770      	bx	lr

08001398 <strlen1>:
}

uint8_t strlen1(char string[])
{
	uint8_t i=0;
	while(string[i]!='\0')
 8001398:	2300      	movs	r3, #0
 800139a:	b2da      	uxtb	r2, r3
 800139c:	5c81      	ldrb	r1, [r0, r2]
 800139e:	3301      	adds	r3, #1
 80013a0:	2900      	cmp	r1, #0
 80013a2:	d1fa      	bne.n	800139a <strlen1+0x2>
		i++;
	return i;
}
 80013a4:	4610      	mov	r0, r2
 80013a6:	4770      	bx	lr

080013a8 <Merge2Strings>:

char * Merge2Strings(char * str1in, char * str2in, char * strout)
{
 80013a8:	b570      	push	{r4, r5, r6, lr}
	int8_t i, j;
	for (i=0; str1in[i]!='\0'; i++)
 80013aa:	2400      	movs	r4, #0
 80013ac:	b265      	sxtb	r5, r4
 80013ae:	5d43      	ldrb	r3, [r0, r5]
 80013b0:	1c66      	adds	r6, r4, #1
 80013b2:	b94b      	cbnz	r3, 80013c8 <Merge2Strings+0x20>
	{
		strout[i] = str1in[i];
	}
	for (j=0; str2in[j]!='\0'; j++,i++)
 80013b4:	b258      	sxtb	r0, r3
 80013b6:	5c0d      	ldrb	r5, [r1, r0]
 80013b8:	1918      	adds	r0, r3, r4
 80013ba:	b240      	sxtb	r0, r0
 80013bc:	1816      	adds	r6, r2, r0
 80013be:	3301      	adds	r3, #1
 80013c0:	b92d      	cbnz	r5, 80013ce <Merge2Strings+0x26>
	{
		strout[i] = str2in[j];
	}
	strout[i] = '\0';
 80013c2:	7035      	strb	r5, [r6, #0]
	return strout;
}
 80013c4:	4610      	mov	r0, r2
 80013c6:	bd70      	pop	{r4, r5, r6, pc}
		strout[i] = str1in[i];
 80013c8:	5553      	strb	r3, [r2, r5]
 80013ca:	4634      	mov	r4, r6
 80013cc:	e7ee      	b.n	80013ac <Merge2Strings+0x4>
		strout[i] = str2in[j];
 80013ce:	5415      	strb	r5, [r2, r0]
 80013d0:	e7f0      	b.n	80013b4 <Merge2Strings+0xc>

080013d2 <Merge3Strings>:
char * Merge3Strings(char * str1in, char * str2in,char * str3in, char * strout)
{
 80013d2:	b5f0      	push	{r4, r5, r6, r7, lr}
	int8_t i, j,k;
	for (i=0; str1in[i]!='\0'; i++)
 80013d4:	2700      	movs	r7, #0
 80013d6:	b27c      	sxtb	r4, r7
 80013d8:	5d05      	ldrb	r5, [r0, r4]
 80013da:	1c7e      	adds	r6, r7, #1
 80013dc:	b98d      	cbnz	r5, 8001402 <Merge3Strings+0x30>
	{
		strout[i] = str1in[i];
	}
	for (j=0; str2in[j]!='\0'; j++,i++)
 80013de:	b268      	sxtb	r0, r5
 80013e0:	197e      	adds	r6, r7, r5
 80013e2:	5c0c      	ldrb	r4, [r1, r0]
 80013e4:	b2f6      	uxtb	r6, r6
 80013e6:	b270      	sxtb	r0, r6
 80013e8:	3501      	adds	r5, #1
 80013ea:	b96c      	cbnz	r4, 8001408 <Merge3Strings+0x36>
 80013ec:	4621      	mov	r1, r4
	{
		strout[i] = str2in[j];
	}
	for (k=0; str3in[k]!='\0'; k++,i++)
 80013ee:	b248      	sxtb	r0, r1
 80013f0:	5c14      	ldrb	r4, [r2, r0]
 80013f2:	1870      	adds	r0, r6, r1
 80013f4:	b240      	sxtb	r0, r0
 80013f6:	181d      	adds	r5, r3, r0
 80013f8:	3101      	adds	r1, #1
 80013fa:	b93c      	cbnz	r4, 800140c <Merge3Strings+0x3a>
	{
		strout[i] = str3in[k];
	}
	strout[i] = '\0';
 80013fc:	702c      	strb	r4, [r5, #0]
	return strout;
}
 80013fe:	4618      	mov	r0, r3
 8001400:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strout[i] = str1in[i];
 8001402:	551d      	strb	r5, [r3, r4]
 8001404:	4637      	mov	r7, r6
 8001406:	e7e6      	b.n	80013d6 <Merge3Strings+0x4>
		strout[i] = str2in[j];
 8001408:	541c      	strb	r4, [r3, r0]
 800140a:	e7e8      	b.n	80013de <Merge3Strings+0xc>
		strout[i] = str3in[k];
 800140c:	541c      	strb	r4, [r3, r0]
 800140e:	e7ee      	b.n	80013ee <Merge3Strings+0x1c>

08001410 <ClockStringWithSec>:

char *ClockStringWithSec(uint32_t time, char *OutStr)
{
 8001410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001414:	4680      	mov	r8, r0
	int8_t i, j,k;
	char s[17];
	itoaP(time/3600,s);
 8001416:	f44f 6061 	mov.w	r0, #3600	; 0xe10
{
 800141a:	b086      	sub	sp, #24
 800141c:	460d      	mov	r5, r1
	itoaP(time/3600,s);
 800141e:	fbb8 f0f0 	udiv	r0, r8, r0
 8001422:	a901      	add	r1, sp, #4
 8001424:	f7ff ff10 	bl	8001248 <itoaP>
	i=0;
	if (strlen1(s)<2)
 8001428:	a801      	add	r0, sp, #4
 800142a:	f7ff ffb5 	bl	8001398 <strlen1>
 800142e:	2801      	cmp	r0, #1
	{
		OutStr[i] = '0';
		i++;
 8001430:	bf96      	itet	ls
 8001432:	2201      	movls	r2, #1
	i=0;
 8001434:	2200      	movhi	r2, #0
		OutStr[i] = '0';
 8001436:	2330      	movls	r3, #48	; 0x30
	i=0;
 8001438:	4614      	mov	r4, r2
		OutStr[i] = '0';
 800143a:	bf98      	it	ls
 800143c:	702b      	strbls	r3, [r5, #0]
 800143e:	b2e6      	uxtb	r6, r4
	}

	for (k=0; s[k]!='\0';k++, i++)
 8001440:	1ab3      	subs	r3, r6, r2
 8001442:	a906      	add	r1, sp, #24
 8001444:	b25b      	sxtb	r3, r3
 8001446:	440b      	add	r3, r1
 8001448:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 800144c:	192b      	adds	r3, r5, r4
 800144e:	1c74      	adds	r4, r6, #1
 8001450:	b264      	sxtb	r4, r4
 8001452:	2900      	cmp	r1, #0
 8001454:	d145      	bne.n	80014e2 <ClockStringWithSec+0xd2>
	{
		OutStr[i] = s[k];
	}

	OutStr[i] = ':';
 8001456:	223a      	movs	r2, #58	; 0x3a
 8001458:	701a      	strb	r2, [r3, #0]
	i++;
	itoaP((time/60)%60,s);
 800145a:	233c      	movs	r3, #60	; 0x3c
 800145c:	fbb8 f2f3 	udiv	r2, r8, r3
 8001460:	fbb2 f0f3 	udiv	r0, r2, r3
 8001464:	a901      	add	r1, sp, #4
 8001466:	fb03 2010 	mls	r0, r3, r0, r2
 800146a:	f7ff feed 	bl	8001248 <itoaP>
	if (strlen1(s)<2)
 800146e:	a801      	add	r0, sp, #4
 8001470:	f7ff ff92 	bl	8001398 <strlen1>
 8001474:	2801      	cmp	r0, #1
	{
		OutStr[i] = '0';
 8001476:	bf9f      	itttt	ls
 8001478:	2330      	movls	r3, #48	; 0x30
 800147a:	552b      	strbls	r3, [r5, r4]
		i++;
 800147c:	1cb4      	addls	r4, r6, #2
 800147e:	b264      	sxtbls	r4, r4
	i=0;
 8001480:	4626      	mov	r6, r4
 8001482:	b2f7      	uxtb	r7, r6
	}
	for (j=0; s[j]!='\0'; i++,j++)
 8001484:	1b3b      	subs	r3, r7, r4
 8001486:	aa06      	add	r2, sp, #24
 8001488:	b25b      	sxtb	r3, r3
 800148a:	4413      	add	r3, r2
 800148c:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8001490:	19ab      	adds	r3, r5, r6
 8001492:	1c7e      	adds	r6, r7, #1
 8001494:	b276      	sxtb	r6, r6
 8001496:	bb32      	cbnz	r2, 80014e6 <ClockStringWithSec+0xd6>
	{
		OutStr[i] = s[j];
	}

	OutStr[i] = ':';
 8001498:	223a      	movs	r2, #58	; 0x3a
 800149a:	701a      	strb	r2, [r3, #0]
	i++;

	itoaP(time%60,s);
 800149c:	233c      	movs	r3, #60	; 0x3c
 800149e:	fbb8 f0f3 	udiv	r0, r8, r3
 80014a2:	a901      	add	r1, sp, #4
 80014a4:	fb03 8010 	mls	r0, r3, r0, r8
 80014a8:	f7ff fece 	bl	8001248 <itoaP>
	if (strlen1(s)<2)
 80014ac:	a801      	add	r0, sp, #4
 80014ae:	f7ff ff73 	bl	8001398 <strlen1>
 80014b2:	2801      	cmp	r0, #1
	{
		OutStr[i] = '0';
 80014b4:	bf9c      	itt	ls
 80014b6:	2330      	movls	r3, #48	; 0x30
 80014b8:	55ab      	strbls	r3, [r5, r6]
	i=0;
 80014ba:	f04f 0300 	mov.w	r3, #0
		i++;
 80014be:	bf9c      	itt	ls
 80014c0:	1cbe      	addls	r6, r7, #2
 80014c2:	b276      	sxtbls	r6, r6
	}
	for (j=0; s[j]!='\0'; i++,j++)
 80014c4:	b25a      	sxtb	r2, r3
 80014c6:	a906      	add	r1, sp, #24
 80014c8:	440a      	add	r2, r1
 80014ca:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 80014ce:	18f2      	adds	r2, r6, r3
 80014d0:	b252      	sxtb	r2, r2
 80014d2:	18a8      	adds	r0, r5, r2
 80014d4:	3301      	adds	r3, #1
 80014d6:	b941      	cbnz	r1, 80014ea <ClockStringWithSec+0xda>
	{
		OutStr[i] = s[j];
	}

	OutStr[i] = '\0';
 80014d8:	7001      	strb	r1, [r0, #0]
	return OutStr;
}
 80014da:	4628      	mov	r0, r5
 80014dc:	b006      	add	sp, #24
 80014de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		OutStr[i] = s[k];
 80014e2:	7019      	strb	r1, [r3, #0]
 80014e4:	e7ab      	b.n	800143e <ClockStringWithSec+0x2e>
		OutStr[i] = s[j];
 80014e6:	701a      	strb	r2, [r3, #0]
 80014e8:	e7cb      	b.n	8001482 <ClockStringWithSec+0x72>
		OutStr[i] = s[j];
 80014ea:	54a9      	strb	r1, [r5, r2]
 80014ec:	e7ea      	b.n	80014c4 <ClockStringWithSec+0xb4>

080014ee <ClockStringNoSec>:

char *ClockStringNoSec(uint32_t time, char *OutStr)
{
 80014ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f0:	4607      	mov	r7, r0

	int8_t i, j,k;
	char s[17];
	itoaP(time/3600,s);
 80014f2:	f44f 6061 	mov.w	r0, #3600	; 0xe10
{
 80014f6:	b087      	sub	sp, #28
 80014f8:	460d      	mov	r5, r1
	itoaP(time/3600,s);
 80014fa:	fbb7 f0f0 	udiv	r0, r7, r0
 80014fe:	a901      	add	r1, sp, #4
 8001500:	f7ff fea2 	bl	8001248 <itoaP>
	i=0;
	if (strlen1(s)<2)
 8001504:	a801      	add	r0, sp, #4
 8001506:	f7ff ff47 	bl	8001398 <strlen1>
 800150a:	2801      	cmp	r0, #1
	{
		OutStr[i] = '0';
		i++;
 800150c:	bf96      	itet	ls
 800150e:	2201      	movls	r2, #1
	i=0;
 8001510:	2200      	movhi	r2, #0
		OutStr[i] = '0';
 8001512:	2330      	movls	r3, #48	; 0x30
	i=0;
 8001514:	4614      	mov	r4, r2
		OutStr[i] = '0';
 8001516:	bf98      	it	ls
 8001518:	702b      	strbls	r3, [r5, #0]
 800151a:	b2e6      	uxtb	r6, r4
	}

	for (k=0; s[k]!='\0';k++, i++)
 800151c:	1ab3      	subs	r3, r6, r2
 800151e:	a906      	add	r1, sp, #24
 8001520:	b25b      	sxtb	r3, r3
 8001522:	440b      	add	r3, r1
 8001524:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 8001528:	192b      	adds	r3, r5, r4
 800152a:	1c74      	adds	r4, r6, #1
 800152c:	b264      	sxtb	r4, r4
 800152e:	bb29      	cbnz	r1, 800157c <ClockStringNoSec+0x8e>
	{
		OutStr[i] = s[k];
	}

	OutStr[i] = ':';
 8001530:	223a      	movs	r2, #58	; 0x3a
 8001532:	701a      	strb	r2, [r3, #0]
	i++;
	itoaP((time/60)%60,s);
 8001534:	233c      	movs	r3, #60	; 0x3c
 8001536:	fbb7 f7f3 	udiv	r7, r7, r3
 800153a:	fbb7 f0f3 	udiv	r0, r7, r3
 800153e:	a901      	add	r1, sp, #4
 8001540:	fb03 7010 	mls	r0, r3, r0, r7
 8001544:	f7ff fe80 	bl	8001248 <itoaP>
	if (strlen1(s)<2)
 8001548:	a801      	add	r0, sp, #4
 800154a:	f7ff ff25 	bl	8001398 <strlen1>
 800154e:	2801      	cmp	r0, #1
	{
		OutStr[i] = '0';
 8001550:	bf9c      	itt	ls
 8001552:	2330      	movls	r3, #48	; 0x30
 8001554:	552b      	strbls	r3, [r5, r4]
	i=0;
 8001556:	f04f 0300 	mov.w	r3, #0
		i++;
 800155a:	bf9c      	itt	ls
 800155c:	1cb4      	addls	r4, r6, #2
 800155e:	b264      	sxtbls	r4, r4
	}
	for (j=0; s[j]!='\0'; i++,j++)
 8001560:	b25a      	sxtb	r2, r3
 8001562:	a906      	add	r1, sp, #24
 8001564:	440a      	add	r2, r1
 8001566:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 800156a:	18e2      	adds	r2, r4, r3
 800156c:	b252      	sxtb	r2, r2
 800156e:	18a8      	adds	r0, r5, r2
 8001570:	3301      	adds	r3, #1
 8001572:	b929      	cbnz	r1, 8001580 <ClockStringNoSec+0x92>
	{
		OutStr[i] = s[j];
	}


	OutStr[i] = '\0';
 8001574:	7001      	strb	r1, [r0, #0]
	return OutStr;
}
 8001576:	4628      	mov	r0, r5
 8001578:	b007      	add	sp, #28
 800157a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		OutStr[i] = s[k];
 800157c:	7019      	strb	r1, [r3, #0]
 800157e:	e7cc      	b.n	800151a <ClockStringNoSec+0x2c>
		OutStr[i] = s[j];
 8001580:	54a9      	strb	r1, [r5, r2]
 8001582:	e7ed      	b.n	8001560 <ClockStringNoSec+0x72>

08001584 <middle_of_3Imax1>:


int32_t middle_of_3Imax1(int32_t value)
{
 8001584:	4602      	mov	r2, r0
   static int32_t InputValueI1[3]={0,0,0};
   int32_t middle,a,b,c;
   InputValueI1[2] = InputValueI1[1];
 8001586:	490d      	ldr	r1, [pc, #52]	; (80015bc <middle_of_3Imax1+0x38>)
 8001588:	684b      	ldr	r3, [r1, #4]
   InputValueI1[1] = InputValueI1[0];
 800158a:	6808      	ldr	r0, [r1, #0]
   InputValueI1[2] = InputValueI1[1];
 800158c:	608b      	str	r3, [r1, #8]
   InputValueI1[0] = value;
   a = InputValueI1[2];
   b = InputValueI1[1];
   c = InputValueI1[0];
   if ((a <= b) && (a <= c)){
 800158e:	4283      	cmp	r3, r0
   InputValueI1[0] = value;
 8001590:	e9c1 2000 	strd	r2, r0, [r1]
   if ((a <= b) && (a <= c)){
 8001594:	dc07      	bgt.n	80015a6 <middle_of_3Imax1+0x22>
 8001596:	4293      	cmp	r3, r2
 8001598:	dc03      	bgt.n	80015a2 <middle_of_3Imax1+0x1e>
      middle = (b <= c) ? b : c;
 800159a:	4290      	cmp	r0, r2
 800159c:	bfa8      	it	ge
 800159e:	4610      	movge	r0, r2
 80015a0:	4770      	bx	lr
   }
   else{
      if ((b <= a) && (b <= c)){
 80015a2:	4283      	cmp	r3, r0
 80015a4:	db06      	blt.n	80015b4 <middle_of_3Imax1+0x30>
 80015a6:	4290      	cmp	r0, r2
 80015a8:	dc04      	bgt.n	80015b4 <middle_of_3Imax1+0x30>
         middle = (a <= c) ? a : c;
 80015aa:	4293      	cmp	r3, r2
 80015ac:	bfa8      	it	ge
 80015ae:	4613      	movge	r3, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	4770      	bx	lr
      }
      else{
         middle = (a <= b) ? a : b;
 80015b4:	4298      	cmp	r0, r3
 80015b6:	bfa8      	it	ge
 80015b8:	4618      	movge	r0, r3
      }
   }

   return middle;
}
 80015ba:	4770      	bx	lr
 80015bc:	20000720 	.word	0x20000720

080015c0 <middle_of_3Imax2>:

int32_t middle_of_3Imax2(int32_t value)
{
 80015c0:	4602      	mov	r2, r0
   static int32_t InputValueI2[3]={0,0,0};
   int32_t middle,a,b,c;
   InputValueI2[2] = InputValueI2[1];
 80015c2:	490d      	ldr	r1, [pc, #52]	; (80015f8 <middle_of_3Imax2+0x38>)
 80015c4:	684b      	ldr	r3, [r1, #4]
   InputValueI2[1] = InputValueI2[0];
 80015c6:	6808      	ldr	r0, [r1, #0]
   InputValueI2[2] = InputValueI2[1];
 80015c8:	608b      	str	r3, [r1, #8]
   InputValueI2[0] = value;
   a = InputValueI2[2];
   b = InputValueI2[1];
   c = InputValueI2[0];
   if ((a <= b) && (a <= c)){
 80015ca:	4283      	cmp	r3, r0
   InputValueI2[0] = value;
 80015cc:	e9c1 2000 	strd	r2, r0, [r1]
   if ((a <= b) && (a <= c)){
 80015d0:	dc07      	bgt.n	80015e2 <middle_of_3Imax2+0x22>
 80015d2:	4293      	cmp	r3, r2
 80015d4:	dc03      	bgt.n	80015de <middle_of_3Imax2+0x1e>
      middle = (b <= c) ? b : c;
 80015d6:	4290      	cmp	r0, r2
 80015d8:	bfa8      	it	ge
 80015da:	4610      	movge	r0, r2
 80015dc:	4770      	bx	lr
   }
   else{
      if ((b <= a) && (b <= c)){
 80015de:	4283      	cmp	r3, r0
 80015e0:	db06      	blt.n	80015f0 <middle_of_3Imax2+0x30>
 80015e2:	4290      	cmp	r0, r2
 80015e4:	dc04      	bgt.n	80015f0 <middle_of_3Imax2+0x30>
         middle = (a <= c) ? a : c;
 80015e6:	4293      	cmp	r3, r2
 80015e8:	bfa8      	it	ge
 80015ea:	4613      	movge	r3, r2
 80015ec:	4618      	mov	r0, r3
 80015ee:	4770      	bx	lr
      }
      else{
         middle = (a <= b) ? a : b;
 80015f0:	4298      	cmp	r0, r3
 80015f2:	bfa8      	it	ge
 80015f4:	4618      	movge	r0, r3
      }
   }

   return middle;
}
 80015f6:	4770      	bx	lr
 80015f8:	2000072c 	.word	0x2000072c

080015fc <middle_of_3Umax1>:

int32_t middle_of_3Umax1(int32_t value)
{
 80015fc:	4602      	mov	r2, r0
   static int32_t InputValueU1[3]={0,0,0};
   int32_t middle,a,b,c;
   InputValueU1[2] = InputValueU1[1];
 80015fe:	490d      	ldr	r1, [pc, #52]	; (8001634 <middle_of_3Umax1+0x38>)
 8001600:	684b      	ldr	r3, [r1, #4]
   InputValueU1[1] = InputValueU1[0];
 8001602:	6808      	ldr	r0, [r1, #0]
   InputValueU1[2] = InputValueU1[1];
 8001604:	608b      	str	r3, [r1, #8]
   InputValueU1[0] = value;
   a = InputValueU1[2];
   b = InputValueU1[1];
   c = InputValueU1[0];
   if ((a <= b) && (a <= c)){
 8001606:	4283      	cmp	r3, r0
   InputValueU1[0] = value;
 8001608:	e9c1 2000 	strd	r2, r0, [r1]
   if ((a <= b) && (a <= c)){
 800160c:	dc07      	bgt.n	800161e <middle_of_3Umax1+0x22>
 800160e:	4293      	cmp	r3, r2
 8001610:	dc03      	bgt.n	800161a <middle_of_3Umax1+0x1e>
      middle = (b <= c) ? b : c;
 8001612:	4290      	cmp	r0, r2
 8001614:	bfa8      	it	ge
 8001616:	4610      	movge	r0, r2
 8001618:	4770      	bx	lr
   }
   else{
      if ((b <= a) && (b <= c)){
 800161a:	4283      	cmp	r3, r0
 800161c:	db06      	blt.n	800162c <middle_of_3Umax1+0x30>
 800161e:	4290      	cmp	r0, r2
 8001620:	dc04      	bgt.n	800162c <middle_of_3Umax1+0x30>
         middle = (a <= c) ? a : c;
 8001622:	4293      	cmp	r3, r2
 8001624:	bfa8      	it	ge
 8001626:	4613      	movge	r3, r2
 8001628:	4618      	mov	r0, r3
 800162a:	4770      	bx	lr
      }
      else{
         middle = (a <= b) ? a : b;
 800162c:	4298      	cmp	r0, r3
 800162e:	bfa8      	it	ge
 8001630:	4618      	movge	r0, r3
      }
   }

   return middle;
}
 8001632:	4770      	bx	lr
 8001634:	20000738 	.word	0x20000738

08001638 <RunningAverageI1>:
	int8_t k = 1;  // 1 - 10
	newValue = newValue*10;
	static int32_t filteredlValueI1 = 0;
	filteredlValueI1 += (newValue - filteredlValueI1) * k;
	return filteredlValueI1/10;
}
 8001638:	4770      	bx	lr

0800163a <RunningAverageI2>:
	int8_t k = 1;  // 1 - 10
	newValue = newValue*10;
	static int32_t filteredlValueI2 = 0;
	filteredlValueI2 += (newValue - filteredlValueI2) * k;
	return filteredlValueI2/10;
}
 800163a:	4770      	bx	lr

0800163c <RunningAverageU1>:
	int8_t k = 1;  // 1 - 10
	newValue = newValue*10;
	static int32_t filteredlValueU1 = 0;
	filteredlValueU1 += (newValue - filteredlValueU1) * k;
	return filteredlValueU1/10;
}
 800163c:	4770      	bx	lr
	...

08001640 <Menu_GetCurrentMenu>:


Menu_Item_t* Menu_GetCurrentMenu(void)
{
 return CurrentMenuItem;
}
 8001640:	4b01      	ldr	r3, [pc, #4]	; (8001648 <Menu_GetCurrentMenu+0x8>)
 8001642:	6818      	ldr	r0, [r3, #0]
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	2000024c 	.word	0x2000024c

0800164c <Menu_Navigate>:

void Menu_Navigate(Menu_Item_t* const NewMenu)
{
 if ((NewMenu == &NULL_MENU) || (NewMenu == NULL))
 800164c:	4b09      	ldr	r3, [pc, #36]	; (8001674 <Menu_Navigate+0x28>)
{
 800164e:	b510      	push	{r4, lr}
 if ((NewMenu == &NULL_MENU) || (NewMenu == NULL))
 8001650:	4298      	cmp	r0, r3
 8001652:	d00d      	beq.n	8001670 <Menu_Navigate+0x24>
 8001654:	b160      	cbz	r0, 8001670 <Menu_Navigate+0x24>
  return;

 CurrentMenuItem = NewMenu;

 if (MenuWriteFunc)
 8001656:	4a08      	ldr	r2, [pc, #32]	; (8001678 <Menu_Navigate+0x2c>)
 CurrentMenuItem = NewMenu;
 8001658:	4c08      	ldr	r4, [pc, #32]	; (800167c <Menu_Navigate+0x30>)
 if (MenuWriteFunc)
 800165a:	6812      	ldr	r2, [r2, #0]
 CurrentMenuItem = NewMenu;
 800165c:	6020      	str	r0, [r4, #0]
 if (MenuWriteFunc)
 800165e:	b10a      	cbz	r2, 8001664 <Menu_Navigate+0x18>
  MenuWriteFunc(CurrentMenuItem->Text);
 8001660:	3018      	adds	r0, #24
 8001662:	4790      	blx	r2

 void (*EnterCallback)(void) = CurrentMenuItem->EnterCallback;
 8001664:	6823      	ldr	r3, [r4, #0]
 8001666:	691b      	ldr	r3, [r3, #16]

 if (EnterCallback)
 8001668:	b113      	cbz	r3, 8001670 <Menu_Navigate+0x24>
  EnterCallback();
}
 800166a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  EnterCallback();
 800166e:	4718      	bx	r3
}
 8001670:	bd10      	pop	{r4, pc}
 8001672:	bf00      	nop
 8001674:	08005d08 	.word	0x08005d08
 8001678:	20000768 	.word	0x20000768
 800167c:	2000024c 	.word	0x2000024c

08001680 <Menu_SetGenericWriteCallback>:

void Menu_SetGenericWriteCallback(void (*WriteFunc)( char* Text))
{
 MenuWriteFunc = WriteFunc;
 8001680:	4b02      	ldr	r3, [pc, #8]	; (800168c <Menu_SetGenericWriteCallback+0xc>)
 8001682:	6018      	str	r0, [r3, #0]
 Menu_Navigate(CurrentMenuItem);
 8001684:	4b02      	ldr	r3, [pc, #8]	; (8001690 <Menu_SetGenericWriteCallback+0x10>)
 8001686:	6818      	ldr	r0, [r3, #0]
 8001688:	f7ff bfe0 	b.w	800164c <Menu_Navigate>
 800168c:	20000768 	.word	0x20000768
 8001690:	2000024c 	.word	0x2000024c

08001694 <Menu_SelectItem>:
}

void Menu_SelectItem(Key_Pressed_t key)
{
 if ((CurrentMenuItem == &NULL_MENU) || (CurrentMenuItem == NULL))
 8001694:	4b04      	ldr	r3, [pc, #16]	; (80016a8 <Menu_SelectItem+0x14>)
 8001696:	4a05      	ldr	r2, [pc, #20]	; (80016ac <Menu_SelectItem+0x18>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4293      	cmp	r3, r2
 800169c:	d003      	beq.n	80016a6 <Menu_SelectItem+0x12>
 800169e:	b113      	cbz	r3, 80016a6 <Menu_SelectItem+0x12>
  return;

 void (*SelectCallback)(Key_Pressed_t) = CurrentMenuItem->SelectCallback;
 80016a0:	695b      	ldr	r3, [r3, #20]

 if (SelectCallback)
 80016a2:	b103      	cbz	r3, 80016a6 <Menu_SelectItem+0x12>
  SelectCallback(key);
 80016a4:	4718      	bx	r3
}
 80016a6:	4770      	bx	lr
 80016a8:	2000024c 	.word	0x2000024c
 80016ac:	08005d08 	.word	0x08005d08

080016b0 <strobe>:
uint8_t pos_x = 0;
uint8_t pos_y = 0;

void strobe(void)
{
	LCD_PORT->BSRR=LCD_EN_BS;
 80016b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
{
 80016b4:	b510      	push	{r4, lr}
	LCD_PORT->BSRR=LCD_EN_BS;
 80016b6:	4c06      	ldr	r4, [pc, #24]	; (80016d0 <strobe+0x20>)
	delay_us(2);
 80016b8:	2002      	movs	r0, #2
	LCD_PORT->BSRR=LCD_EN_BS;
 80016ba:	6123      	str	r3, [r4, #16]
	delay_us(2);
 80016bc:	f7ff fc38 	bl	8000f30 <delay_us>
	LCD_PORT->BSRR=LCD_EN_BC;
 80016c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	delay_us(2);
 80016c4:	2002      	movs	r0, #2
	LCD_PORT->BSRR=LCD_EN_BC;
 80016c6:	6123      	str	r3, [r4, #16]
}
 80016c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delay_us(2);
 80016cc:	f7ff bc30 	b.w	8000f30 <delay_us>
 80016d0:	40010c00 	.word	0x40010c00

080016d4 <lcd_set_4bit_mode>:
			}
		}
	}
}

void lcd_set_4bit_mode(void) {
 80016d4:	b570      	push	{r4, r5, r6, lr}


	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 80016d6:	f04f 457c 	mov.w	r5, #4227858432	; 0xfc000000
	LCD_PORT->BSRR=(LCD_DB5_BS);
 80016da:	f44f 5680 	mov.w	r6, #4096	; 0x1000
	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 80016de:	4c0d      	ldr	r4, [pc, #52]	; (8001714 <lcd_set_4bit_mode+0x40>)
 80016e0:	6125      	str	r5, [r4, #16]
	LCD_PORT->BSRR=(LCD_DB5_BS);
 80016e2:	6126      	str	r6, [r4, #16]

	//LCD_PORT->BSRR=LCD_EN_BS;
	//delay_ms(1);
	//LCD_PORT->BSRR=LCD_EN_BC;

	strobe();
 80016e4:	f7ff ffe4 	bl	80016b0 <strobe>
	delay_ms(1);
 80016e8:	2001      	movs	r0, #1
 80016ea:	f7ff fc57 	bl	8000f9c <delay_ms>

	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 80016ee:	6125      	str	r5, [r4, #16]
	LCD_PORT->BSRR=(LCD_DB5_BS);
 80016f0:	6126      	str	r6, [r4, #16]

	strobe();
 80016f2:	f7ff ffdd 	bl	80016b0 <strobe>
	delay_ms(1);
 80016f6:	2001      	movs	r0, #1
 80016f8:	f7ff fc50 	bl	8000f9c <delay_ms>

	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
	LCD_PORT->BSRR=(LCD_DB7_BS);
 80016fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 8001700:	6125      	str	r5, [r4, #16]
	LCD_PORT->BSRR=(LCD_DB7_BS);
 8001702:	6123      	str	r3, [r4, #16]

	strobe();
 8001704:	f7ff ffd4 	bl	80016b0 <strobe>
	delay_ms(1);

}
 8001708:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	delay_ms(1);
 800170c:	2001      	movs	r0, #1
 800170e:	f7ff bc45 	b.w	8000f9c <delay_ms>
 8001712:	bf00      	nop
 8001714:	40010c00 	.word	0x40010c00

08001718 <lcd_send>:

void lcd_send(uint8_t byte, dat_or_comm dc)  {

	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 8001718:	f04f 427c 	mov.w	r2, #4227858432	; 0xfc000000
 800171c:	4b24      	ldr	r3, [pc, #144]	; (80017b0 <lcd_send+0x98>)
void lcd_send(uint8_t byte, dat_or_comm dc)  {
 800171e:	b570      	push	{r4, r5, r6, lr}
 8001720:	4604      	mov	r4, r0
	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 8001722:	611a      	str	r2, [r3, #16]

	if (dc) {
 8001724:	460e      	mov	r6, r1
 8001726:	b111      	cbz	r1, 800172e <lcd_send+0x16>
		LCD_PORT->BSRR=LCD_CD_BS;
 8001728:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800172c:	611a      	str	r2, [r3, #16]
	}

	if (byte & 0x10) {
 800172e:	06e2      	lsls	r2, r4, #27
		LCD_PORT->BSRR=LCD_DB4_BS;
 8001730:	bf44      	itt	mi
 8001732:	f44f 5200 	movmi.w	r2, #8192	; 0x2000
 8001736:	611a      	strmi	r2, [r3, #16]
	}
	if (byte & 0x20) {
 8001738:	f014 0f20 	tst.w	r4, #32
		LCD_PORT->BSRR=LCD_DB5_BS;
 800173c:	bf18      	it	ne
 800173e:	f44f 5280 	movne.w	r2, #4096	; 0x1000
 8001742:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <lcd_send+0x98>)
 8001744:	bf18      	it	ne
 8001746:	611a      	strne	r2, [r3, #16]
	}
	if (byte & 0x40) {
 8001748:	0665      	lsls	r5, r4, #25
		LCD_PORT->BSRR=LCD_DB6_BS;
 800174a:	bf44      	itt	mi
 800174c:	f44f 6200 	movmi.w	r2, #2048	; 0x800
 8001750:	611a      	strmi	r2, [r3, #16]
	}
	if (byte & 0x80) {
 8001752:	f014 0f80 	tst.w	r4, #128	; 0x80
		LCD_PORT->BSRR=LCD_DB7_BS;
 8001756:	bf18      	it	ne
 8001758:	f44f 6380 	movne.w	r3, #1024	; 0x400
 800175c:	4d14      	ldr	r5, [pc, #80]	; (80017b0 <lcd_send+0x98>)
 800175e:	bf18      	it	ne
 8001760:	612b      	strne	r3, [r5, #16]
	}

	strobe();
 8001762:	f7ff ffa5 	bl	80016b0 <strobe>


	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC );
 8001766:	f04f 5370 	mov.w	r3, #1006632960	; 0x3c000000

	if (byte & 0x01) {
 800176a:	07e0      	lsls	r0, r4, #31
	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC );
 800176c:	612b      	str	r3, [r5, #16]
		LCD_PORT->BSRR=LCD_DB4_BS;
 800176e:	bf44      	itt	mi
 8001770:	f44f 5300 	movmi.w	r3, #8192	; 0x2000
 8001774:	612b      	strmi	r3, [r5, #16]
	}
	if (byte & 0x02) {
 8001776:	07a1      	lsls	r1, r4, #30
		LCD_PORT->BSRR=LCD_DB5_BS;
 8001778:	bf42      	ittt	mi
 800177a:	f44f 5280 	movmi.w	r2, #4096	; 0x1000
 800177e:	4b0c      	ldrmi	r3, [pc, #48]	; (80017b0 <lcd_send+0x98>)
 8001780:	611a      	strmi	r2, [r3, #16]
	}
	if (byte & 0x04) {
 8001782:	0762      	lsls	r2, r4, #29
		LCD_PORT->BSRR=LCD_DB6_BS;
 8001784:	bf42      	ittt	mi
 8001786:	f44f 6200 	movmi.w	r2, #2048	; 0x800
 800178a:	4b09      	ldrmi	r3, [pc, #36]	; (80017b0 <lcd_send+0x98>)
 800178c:	611a      	strmi	r2, [r3, #16]
	}
	if (byte & 0x08) {
 800178e:	0723      	lsls	r3, r4, #28
		LCD_PORT->BSRR=LCD_DB7_BS;
 8001790:	bf42      	ittt	mi
 8001792:	f44f 6280 	movmi.w	r2, #1024	; 0x400
 8001796:	4b06      	ldrmi	r3, [pc, #24]	; (80017b0 <lcd_send+0x98>)
 8001798:	611a      	strmi	r2, [r3, #16]
	}



	strobe();
 800179a:	f7ff ff89 	bl	80016b0 <strobe>
	delay_ms(2);
 800179e:	2002      	movs	r0, #2
 80017a0:	f7ff fbfc 	bl	8000f9c <delay_ms>
	if (dc) {
 80017a4:	b11e      	cbz	r6, 80017ae <lcd_send+0x96>
			LCD_PORT->BSRR=LCD_CD_BC;
 80017a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017aa:	4b01      	ldr	r3, [pc, #4]	; (80017b0 <lcd_send+0x98>)
 80017ac:	611a      	str	r2, [r3, #16]
		}

}
 80017ae:	bd70      	pop	{r4, r5, r6, pc}
 80017b0:	40010c00 	.word	0x40010c00

080017b4 <lcd_set_user_char>:
	lcd_send(((1<<6) | (char_num * 8) ), COMMAND);
 80017b4:	00c0      	lsls	r0, r0, #3
 80017b6:	f040 0040 	orr.w	r0, r0, #64	; 0x40
void lcd_set_user_char(uint8_t char_num, char * char_data) {
 80017ba:	b538      	push	{r3, r4, r5, lr}
	lcd_send(((1<<6) | (char_num * 8) ), COMMAND);
 80017bc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
void lcd_set_user_char(uint8_t char_num, char * char_data) {
 80017c0:	460c      	mov	r4, r1
	lcd_send(((1<<6) | (char_num * 8) ), COMMAND);
 80017c2:	2100      	movs	r1, #0
 80017c4:	f7ff ffa8 	bl	8001718 <lcd_send>
 80017c8:	1e65      	subs	r5, r4, #1
 80017ca:	3407      	adds	r4, #7
		lcd_send(char_data[i],DATA);
 80017cc:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80017d0:	2101      	movs	r1, #1
 80017d2:	f7ff ffa1 	bl	8001718 <lcd_send>
	for (i=0;i<=7;i++) {
 80017d6:	42a5      	cmp	r5, r4
 80017d8:	d1f8      	bne.n	80017cc <lcd_set_user_char+0x18>
}
 80017da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lcd_send((1<<7), COMMAND);
 80017de:	2100      	movs	r1, #0
 80017e0:	2080      	movs	r0, #128	; 0x80
 80017e2:	f7ff bf99 	b.w	8001718 <lcd_send>
	...

080017e8 <SetSymbols>:
{
 80017e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	sym[3]=0b00100;
 80017ea:	4c1f      	ldr	r4, [pc, #124]	; (8001868 <SetSymbols+0x80>)
 80017ec:	4d1f      	ldr	r5, [pc, #124]	; (800186c <SetSymbols+0x84>)
	lcd_set_user_char(0,sym);//charge
 80017ee:	4669      	mov	r1, sp
 80017f0:	2000      	movs	r0, #0
	sym[3]=0b00100;
 80017f2:	e9cd 4500 	strd	r4, r5, [sp]
	sym[3]=0b00000;
 80017f6:	4e1e      	ldr	r6, [pc, #120]	; (8001870 <SetSymbols+0x88>)
	lcd_set_user_char(0,sym);//charge
 80017f8:	f7ff ffdc 	bl	80017b4 <lcd_set_user_char>
	sym[3]=0b00000;
 80017fc:	4b1d      	ldr	r3, [pc, #116]	; (8001874 <SetSymbols+0x8c>)
	lcd_set_user_char(1,sym);//charge
 80017fe:	4669      	mov	r1, sp
 8001800:	2001      	movs	r0, #1
	sym[3]=0b00000;
 8001802:	e9cd 3600 	strd	r3, r6, [sp]
	lcd_set_user_char(1,sym);//charge
 8001806:	f7ff ffd5 	bl	80017b4 <lcd_set_user_char>
	sym[0]=0b00000;
 800180a:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <SetSymbols+0x90>)
	lcd_set_user_char(2,sym);//discharge
 800180c:	4669      	mov	r1, sp
	sym[3]=0b10101;
 800180e:	e9cd 3500 	strd	r3, r5, [sp]
	lcd_set_user_char(2,sym);//discharge
 8001812:	2002      	movs	r0, #2
	sym[0]=0b00100;
 8001814:	4d19      	ldr	r5, [pc, #100]	; (800187c <SetSymbols+0x94>)
	lcd_set_user_char(2,sym);//discharge
 8001816:	f7ff ffcd 	bl	80017b4 <lcd_set_user_char>
	lcd_set_user_char(3,sym);//discharge
 800181a:	4669      	mov	r1, sp
 800181c:	2003      	movs	r0, #3
	sym[3]=0b00100;
 800181e:	e9cd 5600 	strd	r5, r6, [sp]
	lcd_set_user_char(3,sym);//discharge
 8001822:	f7ff ffc7 	bl	80017b4 <lcd_set_user_char>
	lcd_set_user_char(4,sym);//training
 8001826:	4669      	mov	r1, sp
 8001828:	2004      	movs	r0, #4
	sym[3]=0b00100;
 800182a:	e9cd 5400 	strd	r5, r4, [sp]
	lcd_set_user_char(4,sym);//training
 800182e:	f7ff ffc1 	bl	80017b4 <lcd_set_user_char>
	sym[3]=0b01010;
 8001832:	4a13      	ldr	r2, [pc, #76]	; (8001880 <SetSymbols+0x98>)
 8001834:	4b13      	ldr	r3, [pc, #76]	; (8001884 <SetSymbols+0x9c>)
	lcd_set_user_char(5,sym);//swing
 8001836:	4669      	mov	r1, sp
 8001838:	2005      	movs	r0, #5
	sym[3]=0b01010;
 800183a:	e9cd 2300 	strd	r2, r3, [sp]
	lcd_set_user_char(5,sym);//swing
 800183e:	f7ff ffb9 	bl	80017b4 <lcd_set_user_char>
	sym[3]=0b00101;
 8001842:	4b11      	ldr	r3, [pc, #68]	; (8001888 <SetSymbols+0xa0>)
 8001844:	4911      	ldr	r1, [pc, #68]	; (800188c <SetSymbols+0xa4>)
	lcd_set_user_char(6,sym);//Л
 8001846:	2006      	movs	r0, #6
	sym[3]=0b00101;
 8001848:	e9cd 1300 	strd	r1, r3, [sp]
	lcd_set_user_char(6,sym);//Л
 800184c:	4669      	mov	r1, sp
 800184e:	f7ff ffb1 	bl	80017b4 <lcd_set_user_char>
	sym[3]=0b11111;
 8001852:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <SetSymbols+0xa8>)
 8001854:	480f      	ldr	r0, [pc, #60]	; (8001894 <SetSymbols+0xac>)
	lcd_set_user_char(7,sym);//Ч
 8001856:	4669      	mov	r1, sp
	sym[3]=0b11111;
 8001858:	e9cd 0300 	strd	r0, r3, [sp]
	lcd_set_user_char(7,sym);//Ч
 800185c:	2007      	movs	r0, #7
 800185e:	f7ff ffa9 	bl	80017b4 <lcd_set_user_char>
}
 8001862:	b002      	add	sp, #8
 8001864:	bd70      	pop	{r4, r5, r6, pc}
 8001866:	bf00      	nop
 8001868:	040e1504 	.word	0x040e1504
 800186c:	1f1f0400 	.word	0x1f1f0400
 8001870:	1f040000 	.word	0x1f040000
 8001874:	00040e15 	.word	0x00040e15
 8001878:	150e0400 	.word	0x150e0400
 800187c:	04150e04 	.word	0x04150e04
 8001880:	0a070702 	.word	0x0a070702
 8001884:	081c1c0a 	.word	0x081c1c0a
 8001888:	00091505 	.word	0x00091505
 800188c:	0505050f 	.word	0x0505050f
 8001890:	00010101 	.word	0x00010101
 8001894:	1f111111 	.word	0x1f111111

08001898 <lcd_set_xy>:
	pos_x = x;
 8001898:	4a06      	ldr	r2, [pc, #24]	; (80018b4 <lcd_set_xy+0x1c>)
 800189a:	7010      	strb	r0, [r2, #0]
	pos_y = y;
 800189c:	4a06      	ldr	r2, [pc, #24]	; (80018b8 <lcd_set_xy+0x20>)
 800189e:	7011      	strb	r1, [r2, #0]
	if (y==0) {
 80018a0:	b919      	cbnz	r1, 80018aa <lcd_set_xy+0x12>
		lcd_send( ((1<<7) | (x)),COMMAND);
 80018a2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
		lcd_send( ((3<<6) | (x)),COMMAND);
 80018a6:	f7ff bf37 	b.w	8001718 <lcd_send>
 80018aa:	2100      	movs	r1, #0
 80018ac:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 80018b0:	e7f9      	b.n	80018a6 <lcd_set_xy+0xe>
 80018b2:	bf00      	nop
 80018b4:	2000076c 	.word	0x2000076c
 80018b8:	2000076d 	.word	0x2000076d

080018bc <lcd_out>:
void lcd_out(char * txt,uint8_t TypeOfLCD) {
 80018bc:	b570      	push	{r4, r5, r6, lr}
 80018be:	460d      	mov	r5, r1
	while(*txt)
 80018c0:	4604      	mov	r4, r0
		if ((TypeOfLCD ==1)&&(i==7) )
 80018c2:	43c6      	mvns	r6, r0
	while(*txt)
 80018c4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80018c8:	b900      	cbnz	r0, 80018cc <lcd_out+0x10>
}
 80018ca:	bd70      	pop	{r4, r5, r6, pc}
		lcd_send(*txt,DATA);
 80018cc:	2101      	movs	r1, #1
 80018ce:	f7ff ff23 	bl	8001718 <lcd_send>
		if ((TypeOfLCD ==1)&&(i==7) )
 80018d2:	2d01      	cmp	r5, #1
 80018d4:	d1f6      	bne.n	80018c4 <lcd_out+0x8>
 80018d6:	1933      	adds	r3, r6, r4
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b07      	cmp	r3, #7
 80018dc:	d1f2      	bne.n	80018c4 <lcd_out+0x8>
			lcd_set_xy(0,1);
 80018de:	4629      	mov	r1, r5
 80018e0:	2000      	movs	r0, #0
 80018e2:	f7ff ffd9 	bl	8001898 <lcd_set_xy>
 80018e6:	e7ed      	b.n	80018c4 <lcd_out+0x8>

080018e8 <LcdOutbyNumber>:
	lcd_send(num,DATA);
 80018e8:	2101      	movs	r1, #1
 80018ea:	b2c0      	uxtb	r0, r0
 80018ec:	f7ff bf14 	b.w	8001718 <lcd_send>

080018f0 <LcdOut>:
{
 80018f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018f4:	460f      	mov	r7, r1
			lcd_send(russ[*txt-192],DATA);
 80018f6:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8001970 <LcdOut+0x80>
		pos_x++;
 80018fa:	4c1b      	ldr	r4, [pc, #108]	; (8001968 <LcdOut+0x78>)
		if ((pos_y == 0 )&&(pos_x == 8) &&(Line ==2))
 80018fc:	4e1b      	ldr	r6, [pc, #108]	; (800196c <LcdOut+0x7c>)
 80018fe:	1e45      	subs	r5, r0, #1
	while(*txt)
 8001900:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8001904:	b908      	cbnz	r0, 800190a <LcdOut+0x1a>
}
 8001906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if(*txt==178)//І
 800190a:	28b2      	cmp	r0, #178	; 0xb2
 800190c:	d119      	bne.n	8001942 <LcdOut+0x52>
			lcd_send(73,DATA);
 800190e:	2101      	movs	r1, #1
 8001910:	2049      	movs	r0, #73	; 0x49
			lcd_send(russ[*txt-192],DATA);
 8001912:	f7ff ff01 	bl	8001718 <lcd_send>
		pos_x++;
 8001916:	7823      	ldrb	r3, [r4, #0]
		if ((pos_y == 0 )&&(pos_x == 8) &&(Line ==2))
 8001918:	f896 9000 	ldrb.w	r9, [r6]
		pos_x++;
 800191c:	3301      	adds	r3, #1
 800191e:	b2db      	uxtb	r3, r3
 8001920:	7023      	strb	r3, [r4, #0]
		if ((pos_y == 0 )&&(pos_x == 8) &&(Line ==2))
 8001922:	f1b9 0f00 	cmp.w	r9, #0
 8001926:	d1eb      	bne.n	8001900 <LcdOut+0x10>
 8001928:	2b08      	cmp	r3, #8
 800192a:	d1e9      	bne.n	8001900 <LcdOut+0x10>
 800192c:	2f02      	cmp	r7, #2
 800192e:	d1e7      	bne.n	8001900 <LcdOut+0x10>
			lcd_set_xy(0,1);
 8001930:	2101      	movs	r1, #1
 8001932:	4648      	mov	r0, r9
 8001934:	f7ff ffb0 	bl	8001898 <lcd_set_xy>
			pos_y = 1;
 8001938:	2301      	movs	r3, #1
			pos_x = 0;
 800193a:	f884 9000 	strb.w	r9, [r4]
			pos_y = 1;
 800193e:	7033      	strb	r3, [r6, #0]
 8001940:	e7de      	b.n	8001900 <LcdOut+0x10>
		}else if(*txt==175)//Ї
 8001942:	28af      	cmp	r0, #175	; 0xaf
 8001944:	d102      	bne.n	800194c <LcdOut+0x5c>
			lcd_send(3,DATA);
 8001946:	2101      	movs	r1, #1
 8001948:	2003      	movs	r0, #3
 800194a:	e7e2      	b.n	8001912 <LcdOut+0x22>
		}else if(*txt==170)//Є
 800194c:	28aa      	cmp	r0, #170	; 0xaa
 800194e:	d102      	bne.n	8001956 <LcdOut+0x66>
			lcd_send(2,DATA);
 8001950:	2101      	movs	r1, #1
 8001952:	2002      	movs	r0, #2
 8001954:	e7dd      	b.n	8001912 <LcdOut+0x22>
		}else if(*txt<192)
 8001956:	28bf      	cmp	r0, #191	; 0xbf
			lcd_send(russ[*txt-192],DATA);
 8001958:	bf89      	itett	hi
 800195a:	4440      	addhi	r0, r8
			lcd_send(*txt,DATA);
 800195c:	2101      	movls	r1, #1
			lcd_send(russ[*txt-192],DATA);
 800195e:	2101      	movhi	r1, #1
 8001960:	f810 0cc0 	ldrbhi.w	r0, [r0, #-192]
 8001964:	e7d5      	b.n	8001912 <LcdOut+0x22>
 8001966:	bf00      	nop
 8001968:	2000076c 	.word	0x2000076c
 800196c:	2000076d 	.word	0x2000076d
 8001970:	20000250 	.word	0x20000250

08001974 <lcd_clear>:
	lcd_send(0x01,COMMAND);
 8001974:	2100      	movs	r1, #0
 8001976:	2001      	movs	r0, #1
 8001978:	f7ff bece 	b.w	8001718 <lcd_send>

0800197c <lcd_init>:
void lcd_init() {
 800197c:	b508      	push	{r3, lr}
	delay_ms(100);
 800197e:	2064      	movs	r0, #100	; 0x64
 8001980:	f7ff fb0c 	bl	8000f9c <delay_ms>
	lcd_set_4bit_mode();
 8001984:	f7ff fea6 	bl	80016d4 <lcd_set_4bit_mode>
				lcd_send(0x0E,COMMAND);
 8001988:	2100      	movs	r1, #0
 800198a:	200e      	movs	r0, #14
 800198c:	f7ff fec4 	bl	8001718 <lcd_send>
}
 8001990:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lcd_clear();
 8001994:	f7ff bfee 	b.w	8001974 <lcd_clear>

08001998 <PrintToLCD>:


void PrintToLCD(char* str )
{
	LcdOut(str,2);
 8001998:	2102      	movs	r1, #2
 800199a:	f7ff bfa9 	b.w	80018f0 <LcdOut>

0800199e <PrintToLCD_xy>:
	//Send_String_to_UART(str);
}

void PrintToLCD_xy(char* str ,uint8_t x, uint8_t y)
{
 800199e:	b510      	push	{r4, lr}
 80019a0:	4604      	mov	r4, r0
 80019a2:	4608      	mov	r0, r1
	lcd_set_xy(x,y);
 80019a4:	4611      	mov	r1, r2
 80019a6:	f7ff ff77 	bl	8001898 <lcd_set_xy>

	LcdOut(str,2);
 80019aa:	4620      	mov	r0, r4
	//Send_String_to_UART(str);
}
 80019ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LcdOut(str,2);
 80019b0:	2102      	movs	r1, #2
 80019b2:	f7ff bf9d 	b.w	80018f0 <LcdOut>

080019b6 <InitLCD>:

{
	PrintToLCD(itoa_koma(x,k));
}
void InitLCD()
{
 80019b6:	b508      	push	{r3, lr}



	lcd_init();
 80019b8:	f7ff ffe0 	bl	800197c <lcd_init>
	lcd_clear();
 80019bc:	f7ff ffda 	bl	8001974 <lcd_clear>
	lcd_set_state(LCD_ENABLE, CURSOR_DISABLE, NO_BLINK);
}
 80019c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				lcd_send(0x0C,COMMAND);
 80019c4:	2100      	movs	r1, #0
 80019c6:	200c      	movs	r0, #12
 80019c8:	f7ff bea6 	b.w	8001718 <lcd_send>

080019cc <LL_APB1_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <LL_APB1_GRP1_EnableClock+0x18>)
{
 80019ce:	b082      	sub	sp, #8
  SET_BIT(RCC->APB1ENR, Periphs);
 80019d0:	69da      	ldr	r2, [r3, #28]
 80019d2:	4302      	orrs	r2, r0
 80019d4:	61da      	str	r2, [r3, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	4018      	ands	r0, r3
 80019da:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 80019dc:	9b01      	ldr	r3, [sp, #4]
}
 80019de:	b002      	add	sp, #8
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40021000 	.word	0x40021000

080019e8 <LL_APB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <LL_APB2_GRP1_EnableClock+0x18>)
{
 80019ea:	b082      	sub	sp, #8
  SET_BIT(RCC->APB2ENR, Periphs);
 80019ec:	699a      	ldr	r2, [r3, #24]
 80019ee:	4302      	orrs	r2, r0
 80019f0:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	4018      	ands	r0, r3
 80019f6:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 80019f8:	9b01      	ldr	r3, [sp, #4]
}
 80019fa:	b002      	add	sp, #8
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	40021000 	.word	0x40021000

08001a04 <MenuLog_Enter>:
			ClockOnLCD_noSec(DischargeTimeSec);
		}
}
void MenuLog_Enter()
{
	i_LogItems = 0;
 8001a04:	2200      	movs	r2, #0
 8001a06:	4b01      	ldr	r3, [pc, #4]	; (8001a0c <MenuLog_Enter+0x8>)
 8001a08:	801a      	strh	r2, [r3, #0]
}
 8001a0a:	4770      	bx	lr
 8001a0c:	200007c8 	.word	0x200007c8

08001a10 <MenuCalibrationWriteToFlash_Enter>:
			break;
	}
}

void MenuCalibrationWriteToFlash_Enter(Key_Pressed_t key)
{
 8001a10:	b508      	push	{r3, lr}
	CalibrationWriteToFlash_CRC();
 8001a12:	f7fe ffaf 	bl	8000974 <CalibrationWriteToFlash_CRC>
	WriteInLOG("Calibration");
}
 8001a16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	WriteInLOG("Calibration");
 8001a1a:	4801      	ldr	r0, [pc, #4]	; (8001a20 <MenuCalibrationWriteToFlash_Enter+0x10>)
 8001a1c:	f7ff b924 	b.w	8000c68 <WriteInLOG>
 8001a20:	08005d32 	.word	0x08005d32

08001a24 <MenuSettingsBatteryType_Enter>:
{
 8001a24:	b510      	push	{r4, lr}
	if(CountShowBT == 0)
 8001a26:	4c3b      	ldr	r4, [pc, #236]	; (8001b14 <MenuSettingsBatteryType_Enter+0xf0>)
 8001a28:	f994 1000 	ldrsb.w	r1, [r4]
 8001a2c:	b961      	cbnz	r1, 8001a48 <MenuSettingsBatteryType_Enter+0x24>
		lcd_set_xy(0,0);
 8001a2e:	4608      	mov	r0, r1
 8001a30:	f7ff ff32 	bl	8001898 <lcd_set_xy>
		PrintToLCD(" 10.8V  14.6V   ");
 8001a34:	4838      	ldr	r0, [pc, #224]	; (8001b18 <MenuSettingsBatteryType_Enter+0xf4>)
 8001a36:	f7ff ffaf 	bl	8001998 <PrintToLCD>
		SettingsData.LowVoltage = 1080;
 8001a3a:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8001a3e:	4b37      	ldr	r3, [pc, #220]	; (8001b1c <MenuSettingsBatteryType_Enter+0xf8>)
 8001a40:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 1460;
 8001a42:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8001a46:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 1)
 8001a48:	f994 3000 	ldrsb.w	r3, [r4]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d10d      	bne.n	8001a6c <MenuSettingsBatteryType_Enter+0x48>
		lcd_set_xy(0,0);
 8001a50:	2100      	movs	r1, #0
 8001a52:	4608      	mov	r0, r1
 8001a54:	f7ff ff20 	bl	8001898 <lcd_set_xy>
		PrintToLCD("  3.0V   4.2V   ");
 8001a58:	4831      	ldr	r0, [pc, #196]	; (8001b20 <MenuSettingsBatteryType_Enter+0xfc>)
 8001a5a:	f7ff ff9d 	bl	8001998 <PrintToLCD>
		SettingsData.LowVoltage = 300;
 8001a5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a62:	4b2e      	ldr	r3, [pc, #184]	; (8001b1c <MenuSettingsBatteryType_Enter+0xf8>)
 8001a64:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 420;
 8001a66:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001a6a:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 2)
 8001a6c:	f994 3000 	ldrsb.w	r3, [r4]
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d10d      	bne.n	8001a90 <MenuSettingsBatteryType_Enter+0x6c>
		lcd_set_xy(0,0);
 8001a74:	2100      	movs	r1, #0
 8001a76:	4608      	mov	r0, r1
 8001a78:	f7ff ff0e 	bl	8001898 <lcd_set_xy>
		PrintToLCD("  2.8V   3.7V   ");
 8001a7c:	4829      	ldr	r0, [pc, #164]	; (8001b24 <MenuSettingsBatteryType_Enter+0x100>)
 8001a7e:	f7ff ff8b 	bl	8001998 <PrintToLCD>
		SettingsData.LowVoltage = 280;
 8001a82:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001a86:	4b25      	ldr	r3, [pc, #148]	; (8001b1c <MenuSettingsBatteryType_Enter+0xf8>)
 8001a88:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 370;
 8001a8a:	f44f 72b9 	mov.w	r2, #370	; 0x172
 8001a8e:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 3)
 8001a90:	f994 3000 	ldrsb.w	r3, [r4]
 8001a94:	2b03      	cmp	r3, #3
 8001a96:	d10c      	bne.n	8001ab2 <MenuSettingsBatteryType_Enter+0x8e>
		lcd_set_xy(0,0);
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4608      	mov	r0, r1
 8001a9c:	f7ff fefc 	bl	8001898 <lcd_set_xy>
		PrintToLCD("  1.6V   2.8V   ");
 8001aa0:	4821      	ldr	r0, [pc, #132]	; (8001b28 <MenuSettingsBatteryType_Enter+0x104>)
 8001aa2:	f7ff ff79 	bl	8001998 <PrintToLCD>
		SettingsData.LowVoltage = 160;
 8001aa6:	22a0      	movs	r2, #160	; 0xa0
 8001aa8:	4b1c      	ldr	r3, [pc, #112]	; (8001b1c <MenuSettingsBatteryType_Enter+0xf8>)
 8001aaa:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 280;
 8001aac:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001ab0:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 4)
 8001ab2:	f994 3000 	ldrsb.w	r3, [r4]
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	d10d      	bne.n	8001ad6 <MenuSettingsBatteryType_Enter+0xb2>
		lcd_set_xy(0,0);
 8001aba:	2100      	movs	r1, #0
 8001abc:	4608      	mov	r0, r1
 8001abe:	f7ff feeb 	bl	8001898 <lcd_set_xy>
		PrintToLCD("   8V  13.6V    ");
 8001ac2:	481a      	ldr	r0, [pc, #104]	; (8001b2c <MenuSettingsBatteryType_Enter+0x108>)
 8001ac4:	f7ff ff68 	bl	8001998 <PrintToLCD>
		SettingsData.LowVoltage = 800;
 8001ac8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <MenuSettingsBatteryType_Enter+0xf8>)
 8001ace:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 1360;
 8001ad0:	f44f 62aa 	mov.w	r2, #1360	; 0x550
 8001ad4:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 5)
 8001ad6:	f994 3000 	ldrsb.w	r3, [r4]
 8001ada:	2b05      	cmp	r3, #5
 8001adc:	d10c      	bne.n	8001af8 <MenuSettingsBatteryType_Enter+0xd4>
		lcd_set_xy(0,0);
 8001ade:	2100      	movs	r1, #0
 8001ae0:	4608      	mov	r0, r1
 8001ae2:	f7ff fed9 	bl	8001898 <lcd_set_xy>
		PrintToLCD("  1V    20V     ");
 8001ae6:	4812      	ldr	r0, [pc, #72]	; (8001b30 <MenuSettingsBatteryType_Enter+0x10c>)
 8001ae8:	f7ff ff56 	bl	8001998 <PrintToLCD>
		SettingsData.LowVoltage = 100;
 8001aec:	2264      	movs	r2, #100	; 0x64
 8001aee:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <MenuSettingsBatteryType_Enter+0xf8>)
 8001af0:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 2000;
 8001af2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001af6:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 6)
 8001af8:	f994 3000 	ldrsb.w	r3, [r4]
 8001afc:	2b06      	cmp	r3, #6
		CountShowBT = 0;
 8001afe:	bf04      	itt	eq
 8001b00:	2300      	moveq	r3, #0
 8001b02:	7023      	strbeq	r3, [r4, #0]
	SettingsWriteToFlash_CRC();
 8001b04:	f7fe ff6c 	bl	80009e0 <SettingsWriteToFlash_CRC>
}
 8001b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay_ms(600);
 8001b0c:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001b10:	f7ff ba44 	b.w	8000f9c <delay_ms>
 8001b14:	20000787 	.word	0x20000787
 8001b18:	08005ef8 	.word	0x08005ef8
 8001b1c:	20000154 	.word	0x20000154
 8001b20:	08005f09 	.word	0x08005f09
 8001b24:	08005f1a 	.word	0x08005f1a
 8001b28:	08005f2b 	.word	0x08005f2b
 8001b2c:	08005f3c 	.word	0x08005f3c
 8001b30:	08005f4d 	.word	0x08005f4d

08001b34 <MenuSettingsWriteToFlash_Enter>:

void MenuSettingsWriteToFlash_Enter(Key_Pressed_t key)
{
	SettingsWriteToFlash_CRC();
 8001b34:	f7fe bf54 	b.w	80009e0 <SettingsWriteToFlash_CRC>

08001b38 <MenuOption_Enter>:
	}

}

void MenuOption_Enter(Key_Pressed_t key)
{
 8001b38:	b508      	push	{r3, lr}
	lcd_set_xy(7,1);
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	2007      	movs	r0, #7
 8001b3e:	f7ff feab 	bl	8001898 <lcd_set_xy>
	lcd_send(255,DATA);
 8001b42:	2101      	movs	r1, #1
 8001b44:	20ff      	movs	r0, #255	; 0xff
 8001b46:	f7ff fde7 	bl	8001718 <lcd_send>
	SettingsWriteToFlash_CRC();
 8001b4a:	f7fe ff49 	bl	80009e0 <SettingsWriteToFlash_CRC>
	SelectedOptionValue = SettingsData.Option1;
 8001b4e:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <MenuOption_Enter+0x28>)
	delay_ms(200);
 8001b50:	20c8      	movs	r0, #200	; 0xc8
	SelectedOptionValue = SettingsData.Option1;
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <MenuOption_Enter+0x2c>)
 8001b56:	601a      	str	r2, [r3, #0]
}
 8001b58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_ms(200);
 8001b5c:	f7ff ba1e 	b.w	8000f9c <delay_ms>
 8001b60:	20000154 	.word	0x20000154
 8001b64:	20000a00 	.word	0x20000a00

08001b68 <MenuOption_Enter1>:

void MenuOption_Enter1(Key_Pressed_t key)
{
 8001b68:	b508      	push	{r3, lr}
	lcd_set_xy(7,1);
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	2007      	movs	r0, #7
 8001b6e:	f7ff fe93 	bl	8001898 <lcd_set_xy>
	lcd_send(255,DATA);
 8001b72:	2101      	movs	r1, #1
 8001b74:	20ff      	movs	r0, #255	; 0xff
 8001b76:	f7ff fdcf 	bl	8001718 <lcd_send>
	SettingsWriteToFlash_CRC();
 8001b7a:	f7fe ff31 	bl	80009e0 <SettingsWriteToFlash_CRC>
	SelectedOptionValue1 = SettingsData.Option2;
 8001b7e:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <MenuOption_Enter1+0x28>)
	delay_ms(200);
 8001b80:	20c8      	movs	r0, #200	; 0xc8
	SelectedOptionValue1 = SettingsData.Option2;
 8001b82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b84:	4b03      	ldr	r3, [pc, #12]	; (8001b94 <MenuOption_Enter1+0x2c>)
 8001b86:	601a      	str	r2, [r3, #0]
}
 8001b88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_ms(200);
 8001b8c:	f7ff ba06 	b.w	8000f9c <delay_ms>
 8001b90:	20000154 	.word	0x20000154
 8001b94:	200009f8 	.word	0x200009f8

08001b98 <Generic_Write>:
	if (Text) PrintToLCD_xy(Text,0,0);
 8001b98:	b118      	cbz	r0, 8001ba2 <Generic_Write+0xa>
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	4611      	mov	r1, r2
 8001b9e:	f7ff befe 	b.w	800199e <PrintToLCD_xy>
}
 8001ba2:	4770      	bx	lr

08001ba4 <MenuDischarge_Enter>:
	if (BatteryCapacityDischargeCurrent/3600>10)
 8001ba4:	f649 23af 	movw	r3, #39599	; 0x9aaf
{
 8001ba8:	b510      	push	{r4, lr}
	if (BatteryCapacityDischargeCurrent/3600>10)
 8001baa:	4c0e      	ldr	r4, [pc, #56]	; (8001be4 <MenuDischarge_Enter+0x40>)
{
 8001bac:	b090      	sub	sp, #64	; 0x40
	if (BatteryCapacityDischargeCurrent/3600>10)
 8001bae:	6822      	ldr	r2, [r4, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d915      	bls.n	8001be0 <MenuDischarge_Enter+0x3c>
		ClockStringNoSec(DischargeTimeSec,s_clock);
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <MenuDischarge_Enter+0x44>)
 8001bb6:	a90b      	add	r1, sp, #44	; 0x2c
 8001bb8:	6818      	ldr	r0, [r3, #0]
 8001bba:	f7ff fc98 	bl	80014ee <ClockStringNoSec>
		Merge3Strings(itoaP(BatteryCapacityDischargeCurrent/3600,str),"mAh",s_clock,strout);
 8001bbe:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001bc2:	6820      	ldr	r0, [r4, #0]
 8001bc4:	a901      	add	r1, sp, #4
 8001bc6:	fbb0 f0f3 	udiv	r0, r0, r3
 8001bca:	f7ff fb3d 	bl	8001248 <itoaP>
 8001bce:	4907      	ldr	r1, [pc, #28]	; (8001bec <MenuDischarge_Enter+0x48>)
 8001bd0:	ab06      	add	r3, sp, #24
 8001bd2:	aa0b      	add	r2, sp, #44	; 0x2c
 8001bd4:	f7ff fbfd 	bl	80013d2 <Merge3Strings>
		WriteInLOGc(strout,DISCHARGE_l);
 8001bd8:	2102      	movs	r1, #2
 8001bda:	a806      	add	r0, sp, #24
 8001bdc:	f7ff f8f6 	bl	8000dcc <WriteInLOGc>
}
 8001be0:	b010      	add	sp, #64	; 0x40
 8001be2:	bd10      	pop	{r4, pc}
 8001be4:	20000774 	.word	0x20000774
 8001be8:	2000078c 	.word	0x2000078c
 8001bec:	08005e45 	.word	0x08005e45

08001bf0 <MenuCharge_Enter>:
{
 8001bf0:	b510      	push	{r4, lr}
	logDebugD("charge=",BatteryCapacityCharge,0);
 8001bf2:	4c16      	ldr	r4, [pc, #88]	; (8001c4c <MenuCharge_Enter+0x5c>)
{
 8001bf4:	b090      	sub	sp, #64	; 0x40
	logDebugD("charge=",BatteryCapacityCharge,0);
 8001bf6:	4816      	ldr	r0, [pc, #88]	; (8001c50 <MenuCharge_Enter+0x60>)
 8001bf8:	f003 f9ce 	bl	8004f98 <printToBufferWithoutEndUART1>
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	6821      	ldr	r1, [r4, #0]
 8001c00:	4814      	ldr	r0, [pc, #80]	; (8001c54 <MenuCharge_Enter+0x64>)
 8001c02:	f003 fa0d 	bl	8005020 <printToBufferUART1D>
	if (BatteryCapacityCharge/3600>10)
 8001c06:	f649 23af 	movw	r3, #39599	; 0x9aaf
 8001c0a:	6822      	ldr	r2, [r4, #0]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d91b      	bls.n	8001c48 <MenuCharge_Enter+0x58>
		ClockStringNoSec(ChargeTimeSec,s_clock);
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <MenuCharge_Enter+0x68>)
 8001c12:	a90b      	add	r1, sp, #44	; 0x2c
 8001c14:	6818      	ldr	r0, [r3, #0]
 8001c16:	f7ff fc6a 	bl	80014ee <ClockStringNoSec>
		Merge3Strings(itoaP(BatteryCapacityCharge/3600,str),"mAh",s_clock,strout);
 8001c1a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001c1e:	6820      	ldr	r0, [r4, #0]
 8001c20:	a901      	add	r1, sp, #4
 8001c22:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c26:	f7ff fb0f 	bl	8001248 <itoaP>
 8001c2a:	ab06      	add	r3, sp, #24
 8001c2c:	aa0b      	add	r2, sp, #44	; 0x2c
 8001c2e:	490b      	ldr	r1, [pc, #44]	; (8001c5c <MenuCharge_Enter+0x6c>)
 8001c30:	f7ff fbcf 	bl	80013d2 <Merge3Strings>
		WriteInLOGc(strout,CHARGE_H);
 8001c34:	2101      	movs	r1, #1
 8001c36:	a806      	add	r0, sp, #24
 8001c38:	f7ff f8c8 	bl	8000dcc <WriteInLOGc>
		logDebug(strout);
 8001c3c:	4804      	ldr	r0, [pc, #16]	; (8001c50 <MenuCharge_Enter+0x60>)
 8001c3e:	f003 f9ab 	bl	8004f98 <printToBufferWithoutEndUART1>
 8001c42:	a806      	add	r0, sp, #24
 8001c44:	f003 f93e 	bl	8004ec4 <printToBufferUART1>
}
 8001c48:	b010      	add	sp, #64	; 0x40
 8001c4a:	bd10      	pop	{r4, pc}
 8001c4c:	20000770 	.word	0x20000770
 8001c50:	08005a98 	.word	0x08005a98
 8001c54:	08005dc3 	.word	0x08005dc3
 8001c58:	20000780 	.word	0x20000780
 8001c5c:	08005e45 	.word	0x08005e45

08001c60 <SelectedOption.part.8>:
void SelectedOption(void)
 8001c60:	b508      	push	{r3, lr}
		lcd_set_xy(7,1);
 8001c62:	2101      	movs	r1, #1
 8001c64:	2007      	movs	r0, #7
 8001c66:	f7ff fe17 	bl	8001898 <lcd_set_xy>
}
 8001c6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		lcd_send(255,DATA);
 8001c6e:	2101      	movs	r1, #1
 8001c70:	20ff      	movs	r0, #255	; 0xff
 8001c72:	f7ff bd51 	b.w	8001718 <lcd_send>
	...

08001c78 <LL_ADC_SetChannelSamplingTime.constprop.29>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_55CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
 8001c78:	b570      	push	{r4, r5, r6, lr}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c7e:	fa91 f1a1 	rbit	r1, r1
{
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001c82:	fab1 f381 	clz	r3, r1
 8001c86:	4c10      	ldr	r4, [pc, #64]	; (8001cc8 <LL_ADC_SetChannelSamplingTime.constprop.29+0x50>)
 8001c88:	f000 7100 	and.w	r1, r0, #33554432	; 0x2000000
 8001c8c:	40d9      	lsrs	r1, r3
  
  MODIFY_REG(*preg,
 8001c8e:	f854 5021 	ldr.w	r5, [r4, r1, lsl #2]
 8001c92:	f000 70f8 	and.w	r0, r0, #32505856	; 0x1f00000
 8001c96:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001c9a:	fa92 f3a2 	rbit	r3, r2
 8001c9e:	fab3 f383 	clz	r3, r3
 8001ca2:	fa92 f2a2 	rbit	r2, r2
 8001ca6:	2607      	movs	r6, #7
 8001ca8:	fab2 f282 	clz	r2, r2
 8001cac:	fa20 f303 	lsr.w	r3, r0, r3
 8001cb0:	fa06 f303 	lsl.w	r3, r6, r3
 8001cb4:	40d0      	lsrs	r0, r2
 8001cb6:	ea25 0303 	bic.w	r3, r5, r3
 8001cba:	fa06 f000 	lsl.w	r0, r6, r0
 8001cbe:	4318      	orrs	r0, r3
 8001cc0:	f844 0021 	str.w	r0, [r4, r1, lsl #2]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8001cc4:	bd70      	pop	{r4, r5, r6, pc}
 8001cc6:	bf00      	nop
 8001cc8:	4001240c 	.word	0x4001240c

08001ccc <LL_ADC_REG_SetSequencerRanks.constprop.30>:
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
 8001ccc:	b530      	push	{r4, r5, lr}
 8001cce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cd2:	fa93 f3a3 	rbit	r3, r3
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001cd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cda:	fab3 f383 	clz	r3, r3
  MODIFY_REG(*preg,
 8001cde:	241f      	movs	r4, #31
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001ce0:	4d07      	ldr	r5, [pc, #28]	; (8001d00 <LL_ADC_REG_SetSequencerRanks.constprop.30+0x34>)
 8001ce2:	40da      	lsrs	r2, r3
  MODIFY_REG(*preg,
 8001ce4:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
 8001ce8:	f000 001f 	and.w	r0, r0, #31
 8001cec:	4084      	lsls	r4, r0
 8001cee:	f001 011f 	and.w	r1, r1, #31
 8001cf2:	ea23 0304 	bic.w	r3, r3, r4
 8001cf6:	4081      	lsls	r1, r0
 8001cf8:	4319      	orrs	r1, r3
 8001cfa:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
}
 8001cfe:	bd30      	pop	{r4, r5, pc}
 8001d00:	4001242c 	.word	0x4001242c

08001d04 <NVIC_EncodePriority.constprop.31>:

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8001d04:	2000      	movs	r0, #0
 8001d06:	4770      	bx	lr

08001d08 <MenuPowerSupply>:
	lcd_set_xy(0,0);
 8001d08:	2100      	movs	r1, #0
	EnterInMenu_Status = 1;
 8001d0a:	2201      	movs	r2, #1
{
 8001d0c:	b510      	push	{r4, lr}
 8001d0e:	4604      	mov	r4, r0
	EnterInMenu_Status = 1;
 8001d10:	4b2a      	ldr	r3, [pc, #168]	; (8001dbc <MenuPowerSupply+0xb4>)
	lcd_set_xy(0,0);
 8001d12:	4608      	mov	r0, r1
	EnterInMenu_Status = 1;
 8001d14:	701a      	strb	r2, [r3, #0]
	lcd_set_xy(0,0);
 8001d16:	f7ff fdbf 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa_koma(U_OUT,2));
 8001d1a:	4b29      	ldr	r3, [pc, #164]	; (8001dc0 <MenuPowerSupply+0xb8>)
 8001d1c:	2102      	movs	r1, #2
 8001d1e:	8818      	ldrh	r0, [r3, #0]
 8001d20:	f7ff facc 	bl	80012bc <itoa_koma>
 8001d24:	f7ff fe38 	bl	8001998 <PrintToLCD>
	PrintToLCD("V  ");
 8001d28:	4826      	ldr	r0, [pc, #152]	; (8001dc4 <MenuPowerSupply+0xbc>)
 8001d2a:	f7ff fe35 	bl	8001998 <PrintToLCD>
	lcd_set_xy(7,0);
 8001d2e:	2100      	movs	r1, #0
 8001d30:	2007      	movs	r0, #7
 8001d32:	f7ff fdb1 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa(Current));
 8001d36:	4b24      	ldr	r3, [pc, #144]	; (8001dc8 <MenuPowerSupply+0xc0>)
 8001d38:	8818      	ldrh	r0, [r3, #0]
 8001d3a:	b200      	sxth	r0, r0
 8001d3c:	f7ff fa4a 	bl	80011d4 <itoa>
 8001d40:	f7ff fe2a 	bl	8001998 <PrintToLCD>
	PrintToLCD("mA        ");
 8001d44:	4821      	ldr	r0, [pc, #132]	; (8001dcc <MenuPowerSupply+0xc4>)
 8001d46:	f7ff fe27 	bl	8001998 <PrintToLCD>
	if (key == KEY_CURR)
 8001d4a:	2c06      	cmp	r4, #6
 8001d4c:	d110      	bne.n	8001d70 <MenuPowerSupply+0x68>
		Menu_Navigate(MENU_CHILD);
 8001d4e:	f7ff fc77 	bl	8001640 <Menu_GetCurrentMenu>
 8001d52:	68c0      	ldr	r0, [r0, #12]
 8001d54:	f7ff fc7a 	bl	800164c <Menu_Navigate>
		Menu_Navigate(MENU_NEXT);
 8001d58:	f7ff fc72 	bl	8001640 <Menu_GetCurrentMenu>
 8001d5c:	6800      	ldr	r0, [r0, #0]
 8001d5e:	f7ff fc75 	bl	800164c <Menu_Navigate>
		Menu_Navigate(MENU_CHILD);
 8001d62:	f7ff fc6d 	bl	8001640 <Menu_GetCurrentMenu>
}
 8001d66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Menu_Navigate(MENU_CHILD);
 8001d6a:	68c0      	ldr	r0, [r0, #12]
 8001d6c:	f7ff bc6e 	b.w	800164c <Menu_Navigate>
    if (key == KEY_NEXT)
 8001d70:	2c02      	cmp	r4, #2
 8001d72:	d113      	bne.n	8001d9c <MenuPowerSupply+0x94>
    	DAC_VoltageCounter = DAC_VoltageCounter+DAC_step;
 8001d74:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <MenuPowerSupply+0xc8>)
 8001d76:	4a17      	ldr	r2, [pc, #92]	; (8001dd4 <MenuPowerSupply+0xcc>)
 8001d78:	8819      	ldrh	r1, [r3, #0]
 8001d7a:	8812      	ldrh	r2, [r2, #0]
 8001d7c:	440a      	add	r2, r1
 8001d7e:	b212      	sxth	r2, r2
 8001d80:	801a      	strh	r2, [r3, #0]
    	if (DAC_VoltageCounter>4095) DAC_VoltageCounter = 4095;
 8001d82:	881a      	ldrh	r2, [r3, #0]
 8001d84:	b212      	sxth	r2, r2
 8001d86:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001d8a:	db02      	blt.n	8001d92 <MenuPowerSupply+0x8a>
 8001d8c:	f640 72ff 	movw	r2, #4095	; 0xfff
    	if (DAC_VoltageCounter<=0) DAC_VoltageCounter = 0;
 8001d90:	801a      	strh	r2, [r3, #0]
    	DAC->DHR12R1 = DAC_VoltageCounter;
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	4a10      	ldr	r2, [pc, #64]	; (8001dd8 <MenuPowerSupply+0xd0>)
 8001d96:	b21b      	sxth	r3, r3
 8001d98:	6093      	str	r3, [r2, #8]
}
 8001d9a:	bd10      	pop	{r4, pc}
    if (key == KEY_BACK)
 8001d9c:	2c01      	cmp	r4, #1
 8001d9e:	d1fc      	bne.n	8001d9a <MenuPowerSupply+0x92>
    	DAC_VoltageCounter = DAC_VoltageCounter-DAC_step;
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <MenuPowerSupply+0xc8>)
 8001da2:	490c      	ldr	r1, [pc, #48]	; (8001dd4 <MenuPowerSupply+0xcc>)
 8001da4:	881a      	ldrh	r2, [r3, #0]
 8001da6:	8809      	ldrh	r1, [r1, #0]
 8001da8:	1a52      	subs	r2, r2, r1
 8001daa:	b212      	sxth	r2, r2
 8001dac:	801a      	strh	r2, [r3, #0]
    	if (DAC_VoltageCounter<=0) DAC_VoltageCounter = 0;
 8001dae:	881a      	ldrh	r2, [r3, #0]
 8001db0:	b212      	sxth	r2, r2
 8001db2:	2a00      	cmp	r2, #0
 8001db4:	dced      	bgt.n	8001d92 <MenuPowerSupply+0x8a>
 8001db6:	2200      	movs	r2, #0
 8001db8:	e7ea      	b.n	8001d90 <MenuPowerSupply+0x88>
 8001dba:	bf00      	nop
 8001dbc:	20000794 	.word	0x20000794
 8001dc0:	2000084e 	.word	0x2000084e
 8001dc4:	08005e74 	.word	0x08005e74
 8001dc8:	2000083e 	.word	0x2000083e
 8001dcc:	08005e78 	.word	0x08005e78
 8001dd0:	20000788 	.word	0x20000788
 8001dd4:	20000274 	.word	0x20000274
 8001dd8:	40007400 	.word	0x40007400

08001ddc <MenuLoad>:
	EnterInMenu_Status = 1;
 8001ddc:	2201      	movs	r2, #1
 8001dde:	4b33      	ldr	r3, [pc, #204]	; (8001eac <MenuLoad+0xd0>)
	if (key == KEY_CURR)
 8001de0:	2806      	cmp	r0, #6
{
 8001de2:	b510      	push	{r4, lr}
	EnterInMenu_Status = 1;
 8001de4:	701a      	strb	r2, [r3, #0]
 8001de6:	4c32      	ldr	r4, [pc, #200]	; (8001eb0 <MenuLoad+0xd4>)
	if (key == KEY_CURR)
 8001de8:	d13c      	bne.n	8001e64 <MenuLoad+0x88>
		Menu_Navigate(MENU_CHILD);
 8001dea:	f7ff fc29 	bl	8001640 <Menu_GetCurrentMenu>
 8001dee:	68c0      	ldr	r0, [r0, #12]
 8001df0:	f7ff fc2c 	bl	800164c <Menu_Navigate>
		Menu_Navigate(MENU_PREVIOUS);
 8001df4:	f7ff fc24 	bl	8001640 <Menu_GetCurrentMenu>
 8001df8:	6840      	ldr	r0, [r0, #4]
 8001dfa:	f7ff fc27 	bl	800164c <Menu_Navigate>
		Menu_Navigate(MENU_CHILD);
 8001dfe:	f7ff fc1f 	bl	8001640 <Menu_GetCurrentMenu>
 8001e02:	68c0      	ldr	r0, [r0, #12]
 8001e04:	f7ff fc22 	bl	800164c <Menu_Navigate>
	lcd_set_xy(0,0);
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4608      	mov	r0, r1
 8001e0c:	f7ff fd44 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa_koma(U_OUT,2));
 8001e10:	4b28      	ldr	r3, [pc, #160]	; (8001eb4 <MenuLoad+0xd8>)
 8001e12:	2102      	movs	r1, #2
 8001e14:	8818      	ldrh	r0, [r3, #0]
 8001e16:	f7ff fa51 	bl	80012bc <itoa_koma>
 8001e1a:	f7ff fdbd 	bl	8001998 <PrintToLCD>
	PrintToLCD("V ");
 8001e1e:	4826      	ldr	r0, [pc, #152]	; (8001eb8 <MenuLoad+0xdc>)
 8001e20:	f7ff fdba 	bl	8001998 <PrintToLCD>
	lcd_set_xy(7,0);
 8001e24:	2100      	movs	r1, #0
 8001e26:	2007      	movs	r0, #7
 8001e28:	f7ff fd36 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa(Current));
 8001e2c:	4b23      	ldr	r3, [pc, #140]	; (8001ebc <MenuLoad+0xe0>)
 8001e2e:	8818      	ldrh	r0, [r3, #0]
 8001e30:	b200      	sxth	r0, r0
 8001e32:	f7ff f9cf 	bl	80011d4 <itoa>
 8001e36:	f7ff fdaf 	bl	8001998 <PrintToLCD>
	PrintToLCD("mA   ");
 8001e3a:	4821      	ldr	r0, [pc, #132]	; (8001ec0 <MenuLoad+0xe4>)
 8001e3c:	f7ff fdac 	bl	8001998 <PrintToLCD>
	lcd_set_xy(3,1);
 8001e40:	2101      	movs	r1, #1
 8001e42:	2003      	movs	r0, #3
 8001e44:	f7ff fd28 	bl	8001898 <lcd_set_xy>
	PrintToLCD("I");
 8001e48:	481e      	ldr	r0, [pc, #120]	; (8001ec4 <MenuLoad+0xe8>)
 8001e4a:	f7ff fda5 	bl	8001998 <PrintToLCD>
	PrintToLCD(itoa(DAC_CurrentCounter));
 8001e4e:	8820      	ldrh	r0, [r4, #0]
 8001e50:	b200      	sxth	r0, r0
 8001e52:	f7ff f9bf 	bl	80011d4 <itoa>
 8001e56:	f7ff fd9f 	bl	8001998 <PrintToLCD>
}
 8001e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("   ");
 8001e5e:	481a      	ldr	r0, [pc, #104]	; (8001ec8 <MenuLoad+0xec>)
 8001e60:	f7ff bd9a 	b.w	8001998 <PrintToLCD>
    if (key == KEY_NEXT)
 8001e64:	2802      	cmp	r0, #2
 8001e66:	d112      	bne.n	8001e8e <MenuLoad+0xb2>
    	DAC_CurrentCounter = DAC_CurrentCounter+DAC_step;
 8001e68:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <MenuLoad+0xf0>)
 8001e6a:	8822      	ldrh	r2, [r4, #0]
 8001e6c:	881b      	ldrh	r3, [r3, #0]
 8001e6e:	4413      	add	r3, r2
 8001e70:	b21b      	sxth	r3, r3
 8001e72:	8023      	strh	r3, [r4, #0]
    	if (DAC_CurrentCounter>4095) DAC_CurrentCounter = 4095;
 8001e74:	8823      	ldrh	r3, [r4, #0]
 8001e76:	b21b      	sxth	r3, r3
 8001e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e7c:	db02      	blt.n	8001e84 <MenuLoad+0xa8>
 8001e7e:	f640 73ff 	movw	r3, #4095	; 0xfff
    	if (DAC_CurrentCounter<=0) DAC_CurrentCounter = 0;
 8001e82:	8023      	strh	r3, [r4, #0]
    	DAC->DHR12R2 = DAC_CurrentCounter;
 8001e84:	8823      	ldrh	r3, [r4, #0]
 8001e86:	4a12      	ldr	r2, [pc, #72]	; (8001ed0 <MenuLoad+0xf4>)
 8001e88:	b21b      	sxth	r3, r3
 8001e8a:	6153      	str	r3, [r2, #20]
 8001e8c:	e7bc      	b.n	8001e08 <MenuLoad+0x2c>
    if (key == KEY_BACK)
 8001e8e:	2801      	cmp	r0, #1
 8001e90:	d1ba      	bne.n	8001e08 <MenuLoad+0x2c>
    	DAC_CurrentCounter = DAC_CurrentCounter-DAC_step;
 8001e92:	4a0e      	ldr	r2, [pc, #56]	; (8001ecc <MenuLoad+0xf0>)
 8001e94:	8823      	ldrh	r3, [r4, #0]
 8001e96:	8812      	ldrh	r2, [r2, #0]
 8001e98:	1a9b      	subs	r3, r3, r2
 8001e9a:	b21b      	sxth	r3, r3
 8001e9c:	8023      	strh	r3, [r4, #0]
    	if (DAC_CurrentCounter<=0) DAC_CurrentCounter = 0;
 8001e9e:	8823      	ldrh	r3, [r4, #0]
 8001ea0:	b21b      	sxth	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	dcee      	bgt.n	8001e84 <MenuLoad+0xa8>
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	e7eb      	b.n	8001e82 <MenuLoad+0xa6>
 8001eaa:	bf00      	nop
 8001eac:	20000794 	.word	0x20000794
 8001eb0:	20000272 	.word	0x20000272
 8001eb4:	2000084e 	.word	0x2000084e
 8001eb8:	08005e49 	.word	0x08005e49
 8001ebc:	2000083e 	.word	0x2000083e
 8001ec0:	08005e4c 	.word	0x08005e4c
 8001ec4:	08005e52 	.word	0x08005e52
 8001ec8:	08005f84 	.word	0x08005f84
 8001ecc:	20000274 	.word	0x20000274
 8001ed0:	40007400 	.word	0x40007400

08001ed4 <MenuChargeCC_CV>:
	EnterInMenu_Status = 1;
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	4b35      	ldr	r3, [pc, #212]	; (8001fac <MenuChargeCC_CV+0xd8>)
	if (key == KEY_VOLT)
 8001ed8:	2805      	cmp	r0, #5
{
 8001eda:	b510      	push	{r4, lr}
	EnterInMenu_Status = 1;
 8001edc:	701a      	strb	r2, [r3, #0]
 8001ede:	4c34      	ldr	r4, [pc, #208]	; (8001fb0 <MenuChargeCC_CV+0xdc>)
	if (key == KEY_VOLT)
 8001ee0:	d141      	bne.n	8001f66 <MenuChargeCC_CV+0x92>
		Menu_Navigate(MENU_CHILD);
 8001ee2:	f7ff fbad 	bl	8001640 <Menu_GetCurrentMenu>
 8001ee6:	68c0      	ldr	r0, [r0, #12]
 8001ee8:	f7ff fbb0 	bl	800164c <Menu_Navigate>
		Menu_Navigate(MENU_PREVIOUS);
 8001eec:	f7ff fba8 	bl	8001640 <Menu_GetCurrentMenu>
 8001ef0:	6840      	ldr	r0, [r0, #4]
 8001ef2:	f7ff fbab 	bl	800164c <Menu_Navigate>
		Menu_Navigate(MENU_PREVIOUS);
 8001ef6:	f7ff fba3 	bl	8001640 <Menu_GetCurrentMenu>
 8001efa:	6840      	ldr	r0, [r0, #4]
 8001efc:	f7ff fba6 	bl	800164c <Menu_Navigate>
		Menu_Navigate(MENU_CHILD);
 8001f00:	f7ff fb9e 	bl	8001640 <Menu_GetCurrentMenu>
 8001f04:	68c0      	ldr	r0, [r0, #12]
 8001f06:	f7ff fba1 	bl	800164c <Menu_Navigate>
	lcd_set_xy(0,0);
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4608      	mov	r0, r1
 8001f0e:	f7ff fcc3 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa_koma(U_OUT,2));
 8001f12:	4b28      	ldr	r3, [pc, #160]	; (8001fb4 <MenuChargeCC_CV+0xe0>)
 8001f14:	2102      	movs	r1, #2
 8001f16:	8818      	ldrh	r0, [r3, #0]
 8001f18:	f7ff f9d0 	bl	80012bc <itoa_koma>
 8001f1c:	f7ff fd3c 	bl	8001998 <PrintToLCD>
	PrintToLCD("V  ");
 8001f20:	4825      	ldr	r0, [pc, #148]	; (8001fb8 <MenuChargeCC_CV+0xe4>)
 8001f22:	f7ff fd39 	bl	8001998 <PrintToLCD>
	lcd_set_xy(6,0);
 8001f26:	2100      	movs	r1, #0
 8001f28:	2006      	movs	r0, #6
 8001f2a:	f7ff fcb5 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa(Current_x1));
 8001f2e:	4b23      	ldr	r3, [pc, #140]	; (8001fbc <MenuChargeCC_CV+0xe8>)
 8001f30:	8818      	ldrh	r0, [r3, #0]
 8001f32:	b200      	sxth	r0, r0
 8001f34:	f7ff f94e 	bl	80011d4 <itoa>
 8001f38:	f7ff fd2e 	bl	8001998 <PrintToLCD>
	PrintToLCD("m   ");
 8001f3c:	4820      	ldr	r0, [pc, #128]	; (8001fc0 <MenuChargeCC_CV+0xec>)
 8001f3e:	f7ff fd2b 	bl	8001998 <PrintToLCD>
	lcd_set_xy(3,1);
 8001f42:	2101      	movs	r1, #1
 8001f44:	2003      	movs	r0, #3
 8001f46:	f7ff fca7 	bl	8001898 <lcd_set_xy>
	PrintToLCD("V");
 8001f4a:	481e      	ldr	r0, [pc, #120]	; (8001fc4 <MenuChargeCC_CV+0xf0>)
 8001f4c:	f7ff fd24 	bl	8001998 <PrintToLCD>
	PrintToLCD(itoa(DAC_VoltageCounter));
 8001f50:	8820      	ldrh	r0, [r4, #0]
 8001f52:	b200      	sxth	r0, r0
 8001f54:	f7ff f93e 	bl	80011d4 <itoa>
 8001f58:	f7ff fd1e 	bl	8001998 <PrintToLCD>
}
 8001f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("   ");
 8001f60:	4819      	ldr	r0, [pc, #100]	; (8001fc8 <MenuChargeCC_CV+0xf4>)
 8001f62:	f7ff bd19 	b.w	8001998 <PrintToLCD>
    if (key == KEY_NEXT)
 8001f66:	2802      	cmp	r0, #2
 8001f68:	d112      	bne.n	8001f90 <MenuChargeCC_CV+0xbc>
    	DAC_VoltageCounter = DAC_VoltageCounter+DAC_step;
 8001f6a:	4b18      	ldr	r3, [pc, #96]	; (8001fcc <MenuChargeCC_CV+0xf8>)
 8001f6c:	8822      	ldrh	r2, [r4, #0]
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	4413      	add	r3, r2
 8001f72:	b21b      	sxth	r3, r3
 8001f74:	8023      	strh	r3, [r4, #0]
    	if (DAC_VoltageCounter>4095) DAC_VoltageCounter = 4095;
 8001f76:	8823      	ldrh	r3, [r4, #0]
 8001f78:	b21b      	sxth	r3, r3
 8001f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f7e:	db02      	blt.n	8001f86 <MenuChargeCC_CV+0xb2>
 8001f80:	f640 73ff 	movw	r3, #4095	; 0xfff
    	if (DAC_VoltageCounter<=0) DAC_VoltageCounter = 0;
 8001f84:	8023      	strh	r3, [r4, #0]
    	DAC->DHR12R1 = DAC_VoltageCounter;
 8001f86:	8823      	ldrh	r3, [r4, #0]
 8001f88:	4a11      	ldr	r2, [pc, #68]	; (8001fd0 <MenuChargeCC_CV+0xfc>)
 8001f8a:	b21b      	sxth	r3, r3
 8001f8c:	6093      	str	r3, [r2, #8]
 8001f8e:	e7bc      	b.n	8001f0a <MenuChargeCC_CV+0x36>
    if (key == KEY_BACK)
 8001f90:	2801      	cmp	r0, #1
 8001f92:	d1ba      	bne.n	8001f0a <MenuChargeCC_CV+0x36>
    	DAC_VoltageCounter = DAC_VoltageCounter-DAC_step;
 8001f94:	4a0d      	ldr	r2, [pc, #52]	; (8001fcc <MenuChargeCC_CV+0xf8>)
 8001f96:	8823      	ldrh	r3, [r4, #0]
 8001f98:	8812      	ldrh	r2, [r2, #0]
 8001f9a:	1a9b      	subs	r3, r3, r2
 8001f9c:	b21b      	sxth	r3, r3
 8001f9e:	8023      	strh	r3, [r4, #0]
    	if (DAC_VoltageCounter<=0) DAC_VoltageCounter = 0;
 8001fa0:	8823      	ldrh	r3, [r4, #0]
 8001fa2:	b21b      	sxth	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	dcee      	bgt.n	8001f86 <MenuChargeCC_CV+0xb2>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	e7eb      	b.n	8001f84 <MenuChargeCC_CV+0xb0>
 8001fac:	20000794 	.word	0x20000794
 8001fb0:	20000788 	.word	0x20000788
 8001fb4:	2000084e 	.word	0x2000084e
 8001fb8:	08005e74 	.word	0x08005e74
 8001fbc:	200002b6 	.word	0x200002b6
 8001fc0:	08005dbe 	.word	0x08005dbe
 8001fc4:	08005ee6 	.word	0x08005ee6
 8001fc8:	08005f84 	.word	0x08005f84
 8001fcc:	20000274 	.word	0x20000274
 8001fd0:	40007400 	.word	0x40007400

08001fd4 <MenuTraining_WriteInLOG>:
	s[1] = '\0';
 8001fd4:	2300      	movs	r3, #0
{
 8001fd6:	b510      	push	{r4, lr}
 8001fd8:	b096      	sub	sp, #88	; 0x58
 8001fda:	4604      	mov	r4, r0
 8001fdc:	4608      	mov	r0, r1
	ClockStringNoSec(Time,s_clock);
 8001fde:	a911      	add	r1, sp, #68	; 0x44
	s[0] = c;
 8001fe0:	f88d 2004 	strb.w	r2, [sp, #4]
	s[1] = '\0';
 8001fe4:	f88d 3005 	strb.w	r3, [sp, #5]
	ClockStringNoSec(Time,s_clock);
 8001fe8:	f7ff fa81 	bl	80014ee <ClockStringNoSec>
	Merge3Strings(itoaP(Capacity/3600,str),"mAh",s_clock,strout);
 8001fec:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8001ff0:	a902      	add	r1, sp, #8
 8001ff2:	fbb4 f0f0 	udiv	r0, r4, r0
 8001ff6:	f7ff f927 	bl	8001248 <itoaP>
 8001ffa:	ab07      	add	r3, sp, #28
 8001ffc:	aa11      	add	r2, sp, #68	; 0x44
 8001ffe:	4907      	ldr	r1, [pc, #28]	; (800201c <MenuTraining_WriteInLOG+0x48>)
 8002000:	f7ff f9e7 	bl	80013d2 <Merge3Strings>
	Merge2Strings(s,strout,strout1);
 8002004:	aa0c      	add	r2, sp, #48	; 0x30
 8002006:	a907      	add	r1, sp, #28
 8002008:	a801      	add	r0, sp, #4
 800200a:	f7ff f9cd 	bl	80013a8 <Merge2Strings>
	WriteInLOGc(strout1,TRAINING_);
 800200e:	2104      	movs	r1, #4
 8002010:	a80c      	add	r0, sp, #48	; 0x30
 8002012:	f7fe fedb 	bl	8000dcc <WriteInLOGc>
}
 8002016:	b016      	add	sp, #88	; 0x58
 8002018:	bd10      	pop	{r4, pc}
 800201a:	bf00      	nop
 800201c:	08005e45 	.word	0x08005e45

08002020 <MenuLog>:
	if (key == KEY_NEXT)
 8002020:	2802      	cmp	r0, #2
{
 8002022:	b538      	push	{r3, r4, r5, lr}
 8002024:	4c1f      	ldr	r4, [pc, #124]	; (80020a4 <MenuLog+0x84>)
 8002026:	4d20      	ldr	r5, [pc, #128]	; (80020a8 <MenuLog+0x88>)
	if (key == KEY_NEXT)
 8002028:	d12a      	bne.n	8002080 <MenuLog+0x60>
		i_LogItems++;
 800202a:	8823      	ldrh	r3, [r4, #0]
		if (i_LogItems>=LoggingData.RecordsQuantity) i_LogItems=0;
 800202c:	682a      	ldr	r2, [r5, #0]
		i_LogItems++;
 800202e:	3301      	adds	r3, #1
 8002030:	b21b      	sxth	r3, r3
		if (i_LogItems>=LoggingData.RecordsQuantity) i_LogItems=0;
 8002032:	4293      	cmp	r3, r2
		i_LogItems++;
 8002034:	8023      	strh	r3, [r4, #0]
		if (i_LogItems>=LoggingData.RecordsQuantity) i_LogItems=0;
 8002036:	d301      	bcc.n	800203c <MenuLog+0x1c>
 8002038:	2300      	movs	r3, #0
 800203a:	8023      	strh	r3, [r4, #0]
	lcd_set_xy(0,0);
 800203c:	2100      	movs	r1, #0
 800203e:	4608      	mov	r0, r1
 8002040:	f7ff fc2a 	bl	8001898 <lcd_set_xy>
	PrintToLCD(LoggingData.Records[LoggingData.RecordsQuantity - i_LogItems-1]);
 8002044:	6828      	ldr	r0, [r5, #0]
 8002046:	f9b4 3000 	ldrsh.w	r3, [r4]
 800204a:	3801      	subs	r0, #1
 800204c:	1ac0      	subs	r0, r0, r3
 800204e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8002052:	3004      	adds	r0, #4
 8002054:	4428      	add	r0, r5
 8002056:	f7ff fc9f 	bl	8001998 <PrintToLCD>
	logDebugD("i_LogItems: ",i_LogItems,0);
 800205a:	4814      	ldr	r0, [pc, #80]	; (80020ac <MenuLog+0x8c>)
 800205c:	f002 ff9c 	bl	8004f98 <printToBufferWithoutEndUART1>
 8002060:	f9b4 1000 	ldrsh.w	r1, [r4]
 8002064:	2200      	movs	r2, #0
 8002066:	4812      	ldr	r0, [pc, #72]	; (80020b0 <MenuLog+0x90>)
 8002068:	f002 ffda 	bl	8005020 <printToBufferUART1D>
	logDebugD("MRecordsQuantity: ",LoggingData.RecordsQuantity,0);
 800206c:	480f      	ldr	r0, [pc, #60]	; (80020ac <MenuLog+0x8c>)
 800206e:	f002 ff93 	bl	8004f98 <printToBufferWithoutEndUART1>
 8002072:	6829      	ldr	r1, [r5, #0]
 8002074:	2200      	movs	r2, #0
}
 8002076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	logDebugD("MRecordsQuantity: ",LoggingData.RecordsQuantity,0);
 800207a:	480e      	ldr	r0, [pc, #56]	; (80020b4 <MenuLog+0x94>)
 800207c:	f002 bfd0 	b.w	8005020 <printToBufferUART1D>
	if (key == KEY_BACK)
 8002080:	2801      	cmp	r0, #1
 8002082:	d1db      	bne.n	800203c <MenuLog+0x1c>
		i_LogItems--;
 8002084:	8823      	ldrh	r3, [r4, #0]
 8002086:	3b01      	subs	r3, #1
 8002088:	b21b      	sxth	r3, r3
		if (i_LogItems<0) i_LogItems=LoggingData.RecordsQuantity-1;
 800208a:	2b00      	cmp	r3, #0
		i_LogItems--;
 800208c:	8023      	strh	r3, [r4, #0]
		if (i_LogItems<0) i_LogItems=LoggingData.RecordsQuantity-1;
 800208e:	bfbe      	ittt	lt
 8002090:	682b      	ldrlt	r3, [r5, #0]
 8002092:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8002096:	8023      	strhlt	r3, [r4, #0]
		if (i_LogItems<0) i_LogItems=0;
 8002098:	f9b4 3000 	ldrsh.w	r3, [r4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	dacd      	bge.n	800203c <MenuLog+0x1c>
 80020a0:	e7ca      	b.n	8002038 <MenuLog+0x18>
 80020a2:	bf00      	nop
 80020a4:	200007c8 	.word	0x200007c8
 80020a8:	20000858 	.word	0x20000858
 80020ac:	08005a98 	.word	0x08005a98
 80020b0:	08005e54 	.word	0x08005e54
 80020b4:	08005e61 	.word	0x08005e61

080020b8 <MenuCalibration_Current_x1_to_0>:
		lcd_set_xy(0,0);
 80020b8:	2100      	movs	r1, #0
{
 80020ba:	b510      	push	{r4, lr}
 80020bc:	4604      	mov	r4, r0
		lcd_set_xy(0,0);
 80020be:	4608      	mov	r0, r1
 80020c0:	f7ff fbea 	bl	8001898 <lcd_set_xy>
		PrintToLCD(itoa(Current));
 80020c4:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <MenuCalibration_Current_x1_to_0+0x38>)
 80020c6:	8818      	ldrh	r0, [r3, #0]
 80020c8:	b200      	sxth	r0, r0
 80020ca:	f7ff f883 	bl	80011d4 <itoa>
 80020ce:	f7ff fc63 	bl	8001998 <PrintToLCD>
		PrintToLCD("mA >> set 0   ");
 80020d2:	4808      	ldr	r0, [pc, #32]	; (80020f4 <MenuCalibration_Current_x1_to_0+0x3c>)
 80020d4:	f7ff fc60 	bl	8001998 <PrintToLCD>
		if (key == KEY_NEXT)
 80020d8:	2c02      	cmp	r4, #2
 80020da:	d108      	bne.n	80020ee <MenuCalibration_Current_x1_to_0+0x36>
}
 80020dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			CalibrationData.Calibration0ValueForCurrent = Current_x1;
 80020e0:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <MenuCalibration_Current_x1_to_0+0x40>)
 80020e2:	4a06      	ldr	r2, [pc, #24]	; (80020fc <MenuCalibration_Current_x1_to_0+0x44>)
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	b21b      	sxth	r3, r3
 80020e8:	6093      	str	r3, [r2, #8]
			CalibrationWriteToFlash_CRC();
 80020ea:	f7fe bc43 	b.w	8000974 <CalibrationWriteToFlash_CRC>
}
 80020ee:	bd10      	pop	{r4, pc}
 80020f0:	2000083e 	.word	0x2000083e
 80020f4:	08005d91 	.word	0x08005d91
 80020f8:	200002b6 	.word	0x200002b6
 80020fc:	20000004 	.word	0x20000004

08002100 <MenuCalibration_Current_x50_to_0>:
	lcd_set_xy(0,0);
 8002100:	2100      	movs	r1, #0
{
 8002102:	b510      	push	{r4, lr}
 8002104:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 8002106:	4608      	mov	r0, r1
 8002108:	f7ff fbc6 	bl	8001898 <lcd_set_xy>
	PrintToLCD(	itoa(Current));
 800210c:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <MenuCalibration_Current_x50_to_0+0x38>)
 800210e:	8818      	ldrh	r0, [r3, #0]
 8002110:	b200      	sxth	r0, r0
 8002112:	f7ff f85f 	bl	80011d4 <itoa>
 8002116:	f7ff fc3f 	bl	8001998 <PrintToLCD>
	PrintToLCD("mA >> set 0   ");
 800211a:	4808      	ldr	r0, [pc, #32]	; (800213c <MenuCalibration_Current_x50_to_0+0x3c>)
 800211c:	f7ff fc3c 	bl	8001998 <PrintToLCD>
	if (key == KEY_NEXT)
 8002120:	2c02      	cmp	r4, #2
 8002122:	d108      	bne.n	8002136 <MenuCalibration_Current_x50_to_0+0x36>
}
 8002124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		CalibrationData.Calibration0ValueForCurrent1 = Current_x50;
 8002128:	4b05      	ldr	r3, [pc, #20]	; (8002140 <MenuCalibration_Current_x50_to_0+0x40>)
 800212a:	4a06      	ldr	r2, [pc, #24]	; (8002144 <MenuCalibration_Current_x50_to_0+0x44>)
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	b21b      	sxth	r3, r3
 8002130:	6113      	str	r3, [r2, #16]
		CalibrationWriteToFlash_CRC();
 8002132:	f7fe bc1f 	b.w	8000974 <CalibrationWriteToFlash_CRC>
}
 8002136:	bd10      	pop	{r4, pc}
 8002138:	2000083e 	.word	0x2000083e
 800213c:	08005d91 	.word	0x08005d91
 8002140:	200002b8 	.word	0x200002b8
 8002144:	20000004 	.word	0x20000004

08002148 <MenuCalibration_Current_x50>:
	EnterInMenu_Status=1;
 8002148:	2201      	movs	r2, #1
 800214a:	4b15      	ldr	r3, [pc, #84]	; (80021a0 <MenuCalibration_Current_x50+0x58>)
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForCurrent_x50++;
 800214c:	2802      	cmp	r0, #2
{
 800214e:	b510      	push	{r4, lr}
	EnterInMenu_Status=1;
 8002150:	701a      	strb	r2, [r3, #0]
 8002152:	4c14      	ldr	r4, [pc, #80]	; (80021a4 <MenuCalibration_Current_x50+0x5c>)
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForCurrent_x50++;
 8002154:	d11e      	bne.n	8002194 <MenuCalibration_Current_x50+0x4c>
 8002156:	6a23      	ldr	r3, [r4, #32]
 8002158:	4413      	add	r3, r2
	if (key == KEY_BACK) CalibrationData.CalibrationValueForCurrent_x50--;
 800215a:	6223      	str	r3, [r4, #32]
	lcd_set_xy(0,0);
 800215c:	2100      	movs	r1, #0
 800215e:	4608      	mov	r0, r1
 8002160:	f7ff fb9a 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForCurrent_x50));
 8002164:	6a20      	ldr	r0, [r4, #32]
 8002166:	f7ff f835 	bl	80011d4 <itoa>
 800216a:	f7ff fc15 	bl	8001998 <PrintToLCD>
	PrintToLCD("   ");
 800216e:	480e      	ldr	r0, [pc, #56]	; (80021a8 <MenuCalibration_Current_x50+0x60>)
 8002170:	f7ff fc12 	bl	8001998 <PrintToLCD>
	lcd_set_xy(0,1);
 8002174:	2101      	movs	r1, #1
 8002176:	2000      	movs	r0, #0
 8002178:	f7ff fb8e 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa(Current_x50));
 800217c:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <MenuCalibration_Current_x50+0x64>)
 800217e:	8818      	ldrh	r0, [r3, #0]
 8002180:	b200      	sxth	r0, r0
 8002182:	f7ff f827 	bl	80011d4 <itoa>
 8002186:	f7ff fc07 	bl	8001998 <PrintToLCD>
}
 800218a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("mA  ");
 800218e:	4808      	ldr	r0, [pc, #32]	; (80021b0 <MenuCalibration_Current_x50+0x68>)
 8002190:	f7ff bc02 	b.w	8001998 <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForCurrent_x50--;
 8002194:	2801      	cmp	r0, #1
 8002196:	d1e1      	bne.n	800215c <MenuCalibration_Current_x50+0x14>
 8002198:	6a23      	ldr	r3, [r4, #32]
 800219a:	3b01      	subs	r3, #1
 800219c:	e7dd      	b.n	800215a <MenuCalibration_Current_x50+0x12>
 800219e:	bf00      	nop
 80021a0:	20000794 	.word	0x20000794
 80021a4:	20000004 	.word	0x20000004
 80021a8:	08005f84 	.word	0x08005f84
 80021ac:	200002b8 	.word	0x200002b8
 80021b0:	08005da0 	.word	0x08005da0

080021b4 <MenuCalibration_BackToFactory>:
	lcd_set_xy(0,0);
 80021b4:	2100      	movs	r1, #0
{
 80021b6:	b510      	push	{r4, lr}
 80021b8:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 80021ba:	4608      	mov	r0, r1
 80021bc:	f7ff fb6c 	bl	8001898 <lcd_set_xy>
	PrintToLCD("Factory-press >>");
 80021c0:	481f      	ldr	r0, [pc, #124]	; (8002240 <MenuCalibration_BackToFactory+0x8c>)
 80021c2:	f7ff fbe9 	bl	8001998 <PrintToLCD>
	if (key == KEY_NEXT)
 80021c6:	2c02      	cmp	r4, #2
 80021c8:	d130      	bne.n	800222c <MenuCalibration_BackToFactory+0x78>
		FactoryWriteToFlash_CRC();
 80021ca:	f7fe fc63 	bl	8000a94 <FactoryWriteToFlash_CRC>
		EEpromReadStatus = ReadFromFlash();
 80021ce:	f7fe fb8d 	bl	80008ec <ReadFromFlash>
		lcd_set_xy(0,0);
 80021d2:	2100      	movs	r1, #0
		EEpromReadStatus = ReadFromFlash();
 80021d4:	4604      	mov	r4, r0
		lcd_set_xy(0,0);
 80021d6:	4608      	mov	r0, r1
 80021d8:	f7ff fb5e 	bl	8001898 <lcd_set_xy>
		PrintToLCD("In Proccess ....");
 80021dc:	4819      	ldr	r0, [pc, #100]	; (8002244 <MenuCalibration_BackToFactory+0x90>)
 80021de:	f7ff fbdb 	bl	8001998 <PrintToLCD>
		delay_ms(2000);
 80021e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80021e6:	f7fe fed9 	bl	8000f9c <delay_ms>
		lcd_set_xy(0,0);
 80021ea:	2100      	movs	r1, #0
 80021ec:	4608      	mov	r0, r1
 80021ee:	f7ff fb53 	bl	8001898 <lcd_set_xy>
		if (EEpromReadStatus == 1)
 80021f2:	2c01      	cmp	r4, #1
 80021f4:	d11b      	bne.n	800222e <MenuCalibration_BackToFactory+0x7a>
			PrintToLCD("Factory are OK  ");
 80021f6:	4814      	ldr	r0, [pc, #80]	; (8002248 <MenuCalibration_BackToFactory+0x94>)
 80021f8:	f7ff fbce 	bl	8001998 <PrintToLCD>
			WriteInLOG("Factory are OK");
 80021fc:	4813      	ldr	r0, [pc, #76]	; (800224c <MenuCalibration_BackToFactory+0x98>)
 80021fe:	f7fe fd33 	bl	8000c68 <WriteInLOG>
			delay_ms(2000);
 8002202:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002206:	f7fe fec9 	bl	8000f9c <delay_ms>
		    BatteryCapacityDischargeCurrentAfterPOwerUp = SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent;
 800220a:	4b11      	ldr	r3, [pc, #68]	; (8002250 <MenuCalibration_BackToFactory+0x9c>)
 800220c:	691a      	ldr	r2, [r3, #16]
 800220e:	4b11      	ldr	r3, [pc, #68]	; (8002254 <MenuCalibration_BackToFactory+0xa0>)
 8002210:	601a      	str	r2, [r3, #0]
		    ChargeDurationSec = SettingsData.ChargeTime*3600;
 8002212:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002216:	4b10      	ldr	r3, [pc, #64]	; (8002258 <MenuCalibration_BackToFactory+0xa4>)
 8002218:	6919      	ldr	r1, [r3, #16]
 800221a:	434a      	muls	r2, r1
 800221c:	490f      	ldr	r1, [pc, #60]	; (800225c <MenuCalibration_BackToFactory+0xa8>)
 800221e:	600a      	str	r2, [r1, #0]
		    SelectedOptionValue = SettingsData.Option1;
 8002220:	6899      	ldr	r1, [r3, #8]
 8002222:	4a0f      	ldr	r2, [pc, #60]	; (8002260 <MenuCalibration_BackToFactory+0xac>)
 8002224:	6011      	str	r1, [r2, #0]
		    SelectedOptionValue1 = SettingsData.Option2;
 8002226:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002228:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <MenuCalibration_BackToFactory+0xb0>)
 800222a:	601a      	str	r2, [r3, #0]
}
 800222c:	bd10      	pop	{r4, pc}
			PrintToLCD("EEprom read FAIL");
 800222e:	480e      	ldr	r0, [pc, #56]	; (8002268 <MenuCalibration_BackToFactory+0xb4>)
 8002230:	f7ff fbb2 	bl	8001998 <PrintToLCD>
}
 8002234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			delay_ms(4000);
 8002238:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800223c:	f7fe beae 	b.w	8000f9c <delay_ms>
 8002240:	08005d3e 	.word	0x08005d3e
 8002244:	08005d4f 	.word	0x08005d4f
 8002248:	08005d60 	.word	0x08005d60
 800224c:	08005d71 	.word	0x08005d71
 8002250:	200000f4 	.word	0x200000f4
 8002254:	20000778 	.word	0x20000778
 8002258:	20000154 	.word	0x20000154
 800225c:	200009fc 	.word	0x200009fc
 8002260:	20000a00 	.word	0x20000a00
 8002264:	200009f8 	.word	0x200009f8
 8002268:	08005d80 	.word	0x08005d80

0800226c <MenuSettingsChargeTime>:
	if (key == KEY_NEXT) SettingsData.ChargeTime++;
 800226c:	2802      	cmp	r0, #2
{
 800226e:	b510      	push	{r4, lr}
 8002270:	4c0e      	ldr	r4, [pc, #56]	; (80022ac <MenuSettingsChargeTime+0x40>)
	if (key == KEY_NEXT) SettingsData.ChargeTime++;
 8002272:	d115      	bne.n	80022a0 <MenuSettingsChargeTime+0x34>
 8002274:	6923      	ldr	r3, [r4, #16]
 8002276:	3301      	adds	r3, #1
	if (key == KEY_BACK) SettingsData.ChargeTime--;
 8002278:	6123      	str	r3, [r4, #16]
	lcd_set_xy(0,0);
 800227a:	2100      	movs	r1, #0
 800227c:	4608      	mov	r0, r1
 800227e:	f7ff fb0b 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa(SettingsData.ChargeTime));
 8002282:	6920      	ldr	r0, [r4, #16]
 8002284:	f7fe ffa6 	bl	80011d4 <itoa>
 8002288:	f7ff fb86 	bl	8001998 <PrintToLCD>
	PrintToLCD("h   ");
 800228c:	4808      	ldr	r0, [pc, #32]	; (80022b0 <MenuSettingsChargeTime+0x44>)
 800228e:	f7ff fb83 	bl	8001998 <PrintToLCD>
    ChargeDurationSec = SettingsData.ChargeTime*3600;
 8002292:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002296:	6922      	ldr	r2, [r4, #16]
 8002298:	4353      	muls	r3, r2
 800229a:	4a06      	ldr	r2, [pc, #24]	; (80022b4 <MenuSettingsChargeTime+0x48>)
 800229c:	6013      	str	r3, [r2, #0]
}
 800229e:	bd10      	pop	{r4, pc}
	if (key == KEY_BACK) SettingsData.ChargeTime--;
 80022a0:	2801      	cmp	r0, #1
 80022a2:	d1ea      	bne.n	800227a <MenuSettingsChargeTime+0xe>
 80022a4:	6923      	ldr	r3, [r4, #16]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	e7e6      	b.n	8002278 <MenuSettingsChargeTime+0xc>
 80022aa:	bf00      	nop
 80022ac:	20000154 	.word	0x20000154
 80022b0:	08005f61 	.word	0x08005f61
 80022b4:	200009fc 	.word	0x200009fc

080022b8 <MenuSettingsBatteryType>:
{
 80022b8:	b510      	push	{r4, lr}
 80022ba:	4c30      	ldr	r4, [pc, #192]	; (800237c <MenuSettingsBatteryType+0xc4>)
	if (key == KEY_NEXT)
 80022bc:	2802      	cmp	r0, #2
 80022be:	f994 3000 	ldrsb.w	r3, [r4]
 80022c2:	d152      	bne.n	800236a <MenuSettingsBatteryType+0xb2>
		CountShowBT++;
 80022c4:	3301      	adds	r3, #1
 80022c6:	b25b      	sxtb	r3, r3
		if (CountShowBT==MAXITEM_BT) CountShowBT=0;
 80022c8:	2b07      	cmp	r3, #7
 80022ca:	bf08      	it	eq
 80022cc:	2300      	moveq	r3, #0
		if (CountShowBT<0) CountShowBT=MAXITEM_BT-1;
 80022ce:	7023      	strb	r3, [r4, #0]
	if(CountShowBT == 0)
 80022d0:	f994 1000 	ldrsb.w	r1, [r4]
 80022d4:	b929      	cbnz	r1, 80022e2 <MenuSettingsBatteryType+0x2a>
		lcd_set_xy(0,0);
 80022d6:	4608      	mov	r0, r1
 80022d8:	f7ff fade 	bl	8001898 <lcd_set_xy>
		PrintToLCD("12V Pb Battery  ");
 80022dc:	4828      	ldr	r0, [pc, #160]	; (8002380 <MenuSettingsBatteryType+0xc8>)
 80022de:	f7ff fb5b 	bl	8001998 <PrintToLCD>
	if(CountShowBT == 1)
 80022e2:	f994 3000 	ldrsb.w	r3, [r4]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d106      	bne.n	80022f8 <MenuSettingsBatteryType+0x40>
		lcd_set_xy(0,0);
 80022ea:	2100      	movs	r1, #0
 80022ec:	4608      	mov	r0, r1
 80022ee:	f7ff fad3 	bl	8001898 <lcd_set_xy>
		PrintToLCD("Li ion  Battery  ");
 80022f2:	4824      	ldr	r0, [pc, #144]	; (8002384 <MenuSettingsBatteryType+0xcc>)
 80022f4:	f7ff fb50 	bl	8001998 <PrintToLCD>
	if(CountShowBT == 2)
 80022f8:	f994 3000 	ldrsb.w	r3, [r4]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d106      	bne.n	800230e <MenuSettingsBatteryType+0x56>
		lcd_set_xy(0,0);
 8002300:	2100      	movs	r1, #0
 8002302:	4608      	mov	r0, r1
 8002304:	f7ff fac8 	bl	8001898 <lcd_set_xy>
		PrintToLCD("LiFePo4 Battery ");
 8002308:	481f      	ldr	r0, [pc, #124]	; (8002388 <MenuSettingsBatteryType+0xd0>)
 800230a:	f7ff fb45 	bl	8001998 <PrintToLCD>
	if(CountShowBT == 3)
 800230e:	f994 3000 	ldrsb.w	r3, [r4]
 8002312:	2b03      	cmp	r3, #3
 8002314:	d106      	bne.n	8002324 <MenuSettingsBatteryType+0x6c>
		lcd_set_xy(0,0);
 8002316:	2100      	movs	r1, #0
 8002318:	4608      	mov	r0, r1
 800231a:	f7ff fabd 	bl	8001898 <lcd_set_xy>
		PrintToLCD("LiTo Battery   ");
 800231e:	481b      	ldr	r0, [pc, #108]	; (800238c <MenuSettingsBatteryType+0xd4>)
 8002320:	f7ff fb3a 	bl	8001998 <PrintToLCD>
	if(CountShowBT == 4)
 8002324:	f994 3000 	ldrsb.w	r3, [r4]
 8002328:	2b04      	cmp	r3, #4
 800232a:	d106      	bne.n	800233a <MenuSettingsBatteryType+0x82>
		lcd_set_xy(0,0);
 800232c:	2100      	movs	r1, #0
 800232e:	4608      	mov	r0, r1
 8002330:	f7ff fab2 	bl	8001898 <lcd_set_xy>
		PrintToLCD("NIMh 9.6V Bat.  ");
 8002334:	4816      	ldr	r0, [pc, #88]	; (8002390 <MenuSettingsBatteryType+0xd8>)
 8002336:	f7ff fb2f 	bl	8001998 <PrintToLCD>
	if(CountShowBT == 5)
 800233a:	f994 3000 	ldrsb.w	r3, [r4]
 800233e:	2b05      	cmp	r3, #5
 8002340:	d106      	bne.n	8002350 <MenuSettingsBatteryType+0x98>
		lcd_set_xy(0,0);
 8002342:	2100      	movs	r1, #0
 8002344:	4608      	mov	r0, r1
 8002346:	f7ff faa7 	bl	8001898 <lcd_set_xy>
		PrintToLCD("Min 1V  MAX 20V");
 800234a:	4812      	ldr	r0, [pc, #72]	; (8002394 <MenuSettingsBatteryType+0xdc>)
 800234c:	f7ff fb24 	bl	8001998 <PrintToLCD>
	if(CountShowBT == 6)
 8002350:	f994 3000 	ldrsb.w	r3, [r4]
 8002354:	2b06      	cmp	r3, #6
 8002356:	d110      	bne.n	800237a <MenuSettingsBatteryType+0xc2>
		lcd_set_xy(0,0);
 8002358:	2100      	movs	r1, #0
 800235a:	4608      	mov	r0, r1
 800235c:	f7ff fa9c 	bl	8001898 <lcd_set_xy>
}
 8002360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PrintToLCD("   OK to Exit  ");
 8002364:	480c      	ldr	r0, [pc, #48]	; (8002398 <MenuSettingsBatteryType+0xe0>)
 8002366:	f7ff bb17 	b.w	8001998 <PrintToLCD>
	if (key == KEY_BACK)
 800236a:	2801      	cmp	r0, #1
 800236c:	d1b0      	bne.n	80022d0 <MenuSettingsBatteryType+0x18>
		CountShowBT--;
 800236e:	3b01      	subs	r3, #1
 8002370:	b25b      	sxtb	r3, r3
		if (CountShowBT<0) CountShowBT=MAXITEM_BT-1;
 8002372:	2b00      	cmp	r3, #0
 8002374:	bfb8      	it	lt
 8002376:	2306      	movlt	r3, #6
 8002378:	e7a9      	b.n	80022ce <MenuSettingsBatteryType+0x16>
}
 800237a:	bd10      	pop	{r4, pc}
 800237c:	20000787 	.word	0x20000787
 8002380:	08005e83 	.word	0x08005e83
 8002384:	08005e94 	.word	0x08005e94
 8002388:	08005ea6 	.word	0x08005ea6
 800238c:	08005eb7 	.word	0x08005eb7
 8002390:	08005ec7 	.word	0x08005ec7
 8002394:	08005ed8 	.word	0x08005ed8
 8002398:	08005ee8 	.word	0x08005ee8

0800239c <MenuSettingsLowVolt>:
	if (key == KEY_NEXT) SettingsData.LowVoltage = SettingsData.LowVoltage + 10;
 800239c:	2802      	cmp	r0, #2
{
 800239e:	b510      	push	{r4, lr}
 80023a0:	4c0d      	ldr	r4, [pc, #52]	; (80023d8 <MenuSettingsLowVolt+0x3c>)
	if (key == KEY_NEXT) SettingsData.LowVoltage = SettingsData.LowVoltage + 10;
 80023a2:	d114      	bne.n	80023ce <MenuSettingsLowVolt+0x32>
 80023a4:	69a3      	ldr	r3, [r4, #24]
 80023a6:	330a      	adds	r3, #10
	if (key == KEY_BACK) SettingsData.LowVoltage = SettingsData.LowVoltage - 10;
 80023a8:	61a3      	str	r3, [r4, #24]
	lcd_set_xy(0,0);
 80023aa:	2100      	movs	r1, #0
 80023ac:	4608      	mov	r0, r1
 80023ae:	f7ff fa73 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 80023b2:	230a      	movs	r3, #10
 80023b4:	69a0      	ldr	r0, [r4, #24]
 80023b6:	2101      	movs	r1, #1
 80023b8:	fbb0 f0f3 	udiv	r0, r0, r3
 80023bc:	f7fe ff7e 	bl	80012bc <itoa_koma>
 80023c0:	f7ff faea 	bl	8001998 <PrintToLCD>
}
 80023c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V   ");
 80023c8:	4804      	ldr	r0, [pc, #16]	; (80023dc <MenuSettingsLowVolt+0x40>)
 80023ca:	f7ff bae5 	b.w	8001998 <PrintToLCD>
	if (key == KEY_BACK) SettingsData.LowVoltage = SettingsData.LowVoltage - 10;
 80023ce:	2801      	cmp	r0, #1
 80023d0:	d1eb      	bne.n	80023aa <MenuSettingsLowVolt+0xe>
 80023d2:	69a3      	ldr	r3, [r4, #24]
 80023d4:	3b0a      	subs	r3, #10
 80023d6:	e7e7      	b.n	80023a8 <MenuSettingsLowVolt+0xc>
 80023d8:	20000154 	.word	0x20000154
 80023dc:	08005f15 	.word	0x08005f15

080023e0 <MenuSettingsMaxVolt>:
	if (key == KEY_NEXT) SettingsData.MaxVoltage = SettingsData.MaxVoltage + 10;
 80023e0:	2802      	cmp	r0, #2
{
 80023e2:	b510      	push	{r4, lr}
 80023e4:	4c0d      	ldr	r4, [pc, #52]	; (800241c <MenuSettingsMaxVolt+0x3c>)
	if (key == KEY_NEXT) SettingsData.MaxVoltage = SettingsData.MaxVoltage + 10;
 80023e6:	d114      	bne.n	8002412 <MenuSettingsMaxVolt+0x32>
 80023e8:	6a23      	ldr	r3, [r4, #32]
 80023ea:	330a      	adds	r3, #10
	if (key == KEY_BACK) SettingsData.MaxVoltage = SettingsData.MaxVoltage - 10;
 80023ec:	6223      	str	r3, [r4, #32]
	lcd_set_xy(0,0);
 80023ee:	2100      	movs	r1, #0
 80023f0:	4608      	mov	r0, r1
 80023f2:	f7ff fa51 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 80023f6:	230a      	movs	r3, #10
 80023f8:	6a20      	ldr	r0, [r4, #32]
 80023fa:	2101      	movs	r1, #1
 80023fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8002400:	f7fe ff5c 	bl	80012bc <itoa_koma>
 8002404:	f7ff fac8 	bl	8001998 <PrintToLCD>
}
 8002408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V   ");
 800240c:	4804      	ldr	r0, [pc, #16]	; (8002420 <MenuSettingsMaxVolt+0x40>)
 800240e:	f7ff bac3 	b.w	8001998 <PrintToLCD>
	if (key == KEY_BACK) SettingsData.MaxVoltage = SettingsData.MaxVoltage - 10;
 8002412:	2801      	cmp	r0, #1
 8002414:	d1eb      	bne.n	80023ee <MenuSettingsMaxVolt+0xe>
 8002416:	6a23      	ldr	r3, [r4, #32]
 8002418:	3b0a      	subs	r3, #10
 800241a:	e7e7      	b.n	80023ec <MenuSettingsMaxVolt+0xc>
 800241c:	20000154 	.word	0x20000154
 8002420:	08005f15 	.word	0x08005f15

08002424 <MenuSettingsSwngChrgTime>:
	if (key == KEY_NEXT)  SettingsData.Swing_Chrg_time++;
 8002424:	2802      	cmp	r0, #2
{
 8002426:	b510      	push	{r4, lr}
 8002428:	4c0b      	ldr	r4, [pc, #44]	; (8002458 <MenuSettingsSwngChrgTime+0x34>)
	if (key == KEY_NEXT)  SettingsData.Swing_Chrg_time++;
 800242a:	d110      	bne.n	800244e <MenuSettingsSwngChrgTime+0x2a>
 800242c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800242e:	3301      	adds	r3, #1
	if (key == KEY_BACK)  SettingsData.Swing_Chrg_time--;
 8002430:	62a3      	str	r3, [r4, #40]	; 0x28
	lcd_set_xy(0,0);
 8002432:	2100      	movs	r1, #0
 8002434:	4608      	mov	r0, r1
 8002436:	f7ff fa2f 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa(SettingsData.Swing_Chrg_time));
 800243a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800243c:	f7fe feca 	bl	80011d4 <itoa>
 8002440:	f7ff faaa 	bl	8001998 <PrintToLCD>
}
 8002444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD(" sec.   ");
 8002448:	4804      	ldr	r0, [pc, #16]	; (800245c <MenuSettingsSwngChrgTime+0x38>)
 800244a:	f7ff baa5 	b.w	8001998 <PrintToLCD>
	if (key == KEY_BACK)  SettingsData.Swing_Chrg_time--;
 800244e:	2801      	cmp	r0, #1
 8002450:	d1ef      	bne.n	8002432 <MenuSettingsSwngChrgTime+0xe>
 8002452:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002454:	3b01      	subs	r3, #1
 8002456:	e7eb      	b.n	8002430 <MenuSettingsSwngChrgTime+0xc>
 8002458:	20000154 	.word	0x20000154
 800245c:	08006010 	.word	0x08006010

08002460 <MenuSettingsSwngDChrgTime>:
	if (key == KEY_NEXT)  SettingsData.Swing_DChrg_time++;
 8002460:	2802      	cmp	r0, #2
{
 8002462:	b510      	push	{r4, lr}
 8002464:	4c0b      	ldr	r4, [pc, #44]	; (8002494 <MenuSettingsSwngDChrgTime+0x34>)
	if (key == KEY_NEXT)  SettingsData.Swing_DChrg_time++;
 8002466:	d110      	bne.n	800248a <MenuSettingsSwngDChrgTime+0x2a>
 8002468:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800246a:	3301      	adds	r3, #1
	if (key == KEY_BACK)  SettingsData.Swing_DChrg_time--;
 800246c:	6323      	str	r3, [r4, #48]	; 0x30
	lcd_set_xy(0,0);
 800246e:	2100      	movs	r1, #0
 8002470:	4608      	mov	r0, r1
 8002472:	f7ff fa11 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa(SettingsData.Swing_DChrg_time));
 8002476:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002478:	f7fe feac 	bl	80011d4 <itoa>
 800247c:	f7ff fa8c 	bl	8001998 <PrintToLCD>
}
 8002480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD(" sec.   ");
 8002484:	4804      	ldr	r0, [pc, #16]	; (8002498 <MenuSettingsSwngDChrgTime+0x38>)
 8002486:	f7ff ba87 	b.w	8001998 <PrintToLCD>
	if (key == KEY_BACK)  SettingsData.Swing_DChrg_time--;
 800248a:	2801      	cmp	r0, #1
 800248c:	d1ef      	bne.n	800246e <MenuSettingsSwngDChrgTime+0xe>
 800248e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002490:	3b01      	subs	r3, #1
 8002492:	e7eb      	b.n	800246c <MenuSettingsSwngDChrgTime+0xc>
 8002494:	20000154 	.word	0x20000154
 8002498:	08006010 	.word	0x08006010

0800249c <MenuSettingsChargeAddapt>:
	if (key == KEY_NEXT)  SettingsData.ChargeAdapt++;
 800249c:	2802      	cmp	r0, #2
{
 800249e:	b538      	push	{r3, r4, r5, lr}
 80024a0:	4c1a      	ldr	r4, [pc, #104]	; (800250c <MenuSettingsChargeAddapt+0x70>)
	if (key == KEY_NEXT)  SettingsData.ChargeAdapt++;
 80024a2:	d12d      	bne.n	8002500 <MenuSettingsChargeAddapt+0x64>
 80024a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80024a6:	3301      	adds	r3, #1
	if (key == KEY_BACK)  SettingsData.ChargeAdapt--;
 80024a8:	63a3      	str	r3, [r4, #56]	; 0x38
	lcd_set_xy(0,0);
 80024aa:	2100      	movs	r1, #0
	PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 80024ac:	250a      	movs	r5, #10
	lcd_set_xy(0,0);
 80024ae:	4608      	mov	r0, r1
 80024b0:	f7ff f9f2 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa(SettingsData.ChargeAdapt));
 80024b4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80024b6:	f7fe fe8d 	bl	80011d4 <itoa>
 80024ba:	f7ff fa6d 	bl	8001998 <PrintToLCD>
	PrintToLCD("% ");
 80024be:	4814      	ldr	r0, [pc, #80]	; (8002510 <MenuSettingsChargeAddapt+0x74>)
 80024c0:	f7ff fa6a 	bl	8001998 <PrintToLCD>
	PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 80024c4:	6a20      	ldr	r0, [r4, #32]
 80024c6:	2101      	movs	r1, #1
 80024c8:	fbb0 f0f5 	udiv	r0, r0, r5
 80024cc:	f7fe fef6 	bl	80012bc <itoa_koma>
 80024d0:	f7ff fa62 	bl	8001998 <PrintToLCD>
	PrintToLCD("V ");
 80024d4:	480f      	ldr	r0, [pc, #60]	; (8002514 <MenuSettingsChargeAddapt+0x78>)
 80024d6:	f7ff fa5f 	bl	8001998 <PrintToLCD>
	PrintToLCD(itoa_koma((SettingsData.MaxVoltage-(SettingsData.MaxVoltage * SettingsData.ChargeAdapt/100))/10,1));
 80024da:	2264      	movs	r2, #100	; 0x64
 80024dc:	6a23      	ldr	r3, [r4, #32]
 80024de:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80024e0:	2101      	movs	r1, #1
 80024e2:	4358      	muls	r0, r3
 80024e4:	fbb0 f0f2 	udiv	r0, r0, r2
 80024e8:	1a18      	subs	r0, r3, r0
 80024ea:	fbb0 f0f5 	udiv	r0, r0, r5
 80024ee:	f7fe fee5 	bl	80012bc <itoa_koma>
 80024f2:	f7ff fa51 	bl	8001998 <PrintToLCD>
}
 80024f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PrintToLCD("V   ");
 80024fa:	4807      	ldr	r0, [pc, #28]	; (8002518 <MenuSettingsChargeAddapt+0x7c>)
 80024fc:	f7ff ba4c 	b.w	8001998 <PrintToLCD>
	if (key == KEY_BACK)  SettingsData.ChargeAdapt--;
 8002500:	2801      	cmp	r0, #1
 8002502:	d1d2      	bne.n	80024aa <MenuSettingsChargeAddapt+0xe>
 8002504:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002506:	3b01      	subs	r3, #1
 8002508:	e7ce      	b.n	80024a8 <MenuSettingsChargeAddapt+0xc>
 800250a:	bf00      	nop
 800250c:	20000154 	.word	0x20000154
 8002510:	08005f5e 	.word	0x08005f5e
 8002514:	08005e49 	.word	0x08005e49
 8002518:	08005f15 	.word	0x08005f15

0800251c <SelectedOption>:
	if (SelectedOptionValue == SettingsData.Option1)
 800251c:	4b04      	ldr	r3, [pc, #16]	; (8002530 <SelectedOption+0x14>)
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	4b04      	ldr	r3, [pc, #16]	; (8002534 <SelectedOption+0x18>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d101      	bne.n	800252c <SelectedOption+0x10>
 8002528:	f7ff bb9a 	b.w	8001c60 <SelectedOption.part.8>
}
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	20000154 	.word	0x20000154
 8002534:	20000a00 	.word	0x20000a00

08002538 <SelectedOption1>:
	if (SelectedOptionValue1 == SettingsData.Option2)
 8002538:	4b04      	ldr	r3, [pc, #16]	; (800254c <SelectedOption1+0x14>)
 800253a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800253c:	4b04      	ldr	r3, [pc, #16]	; (8002550 <SelectedOption1+0x18>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d101      	bne.n	8002548 <SelectedOption1+0x10>
 8002544:	f7ff bb8c 	b.w	8001c60 <SelectedOption.part.8>
}
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	20000154 	.word	0x20000154
 8002550:	200009f8 	.word	0x200009f8

08002554 <MenuSettingsSaveMenuPosWhenOFF>:
	lcd_set_xy(0,0);
 8002554:	2100      	movs	r1, #0
{
 8002556:	b510      	push	{r4, lr}
 8002558:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 800255a:	4608      	mov	r0, r1
 800255c:	f7ff f99c 	bl	8001898 <lcd_set_xy>
	if (key == KEY_NEXT)
 8002560:	2c02      	cmp	r4, #2
 8002562:	4b17      	ldr	r3, [pc, #92]	; (80025c0 <MenuSettingsSaveMenuPosWhenOFF+0x6c>)
 8002564:	d10f      	bne.n	8002586 <MenuSettingsSaveMenuPosWhenOFF+0x32>
		SettingsData.Option1++;
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	3201      	adds	r2, #1
		if (SettingsData.Option1==QUANTITY_OPTIONS+1) SettingsData.Option1=1;
 800256a:	2a08      	cmp	r2, #8
 800256c:	bf08      	it	eq
 800256e:	2201      	moveq	r2, #1
		if (SettingsData.Option1==0) SettingsData.Option1 = QUANTITY_OPTIONS;
 8002570:	609a      	str	r2, [r3, #8]
	switch (SettingsData.Option1)
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	3a01      	subs	r2, #1
 8002576:	2a06      	cmp	r2, #6
 8002578:	d81f      	bhi.n	80025ba <MenuSettingsSaveMenuPosWhenOFF+0x66>
 800257a:	e8df f002 	tbb	[pc, r2]
 800257e:	120b      	.short	0x120b
 8002580:	1a181614 	.word	0x1a181614
 8002584:	1c          	.byte	0x1c
 8002585:	00          	.byte	0x00
	if (key == KEY_BACK)
 8002586:	2c01      	cmp	r4, #1
 8002588:	d1f3      	bne.n	8002572 <MenuSettingsSaveMenuPosWhenOFF+0x1e>
		SettingsData.Option1--;
 800258a:	689a      	ldr	r2, [r3, #8]
		if (SettingsData.Option1==0) SettingsData.Option1 = QUANTITY_OPTIONS;
 800258c:	3a01      	subs	r2, #1
 800258e:	bf08      	it	eq
 8002590:	2207      	moveq	r2, #7
 8002592:	e7ed      	b.n	8002570 <MenuSettingsSaveMenuPosWhenOFF+0x1c>
			PrintToLCD("PowerSupply     ");
 8002594:	480b      	ldr	r0, [pc, #44]	; (80025c4 <MenuSettingsSaveMenuPosWhenOFF+0x70>)
			PrintToLCD("Swing           ");
 8002596:	f7ff f9ff 	bl	8001998 <PrintToLCD>
}
 800259a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			SelectedOption();
 800259e:	f7ff bfbd 	b.w	800251c <SelectedOption>
			PrintToLCD("Load Menu       ");
 80025a2:	4809      	ldr	r0, [pc, #36]	; (80025c8 <MenuSettingsSaveMenuPosWhenOFF+0x74>)
 80025a4:	e7f7      	b.n	8002596 <MenuSettingsSaveMenuPosWhenOFF+0x42>
			PrintToLCD("Charge CC CV    ");
 80025a6:	4809      	ldr	r0, [pc, #36]	; (80025cc <MenuSettingsSaveMenuPosWhenOFF+0x78>)
 80025a8:	e7f5      	b.n	8002596 <MenuSettingsSaveMenuPosWhenOFF+0x42>
			PrintToLCD("Charge addapt   ");
 80025aa:	4809      	ldr	r0, [pc, #36]	; (80025d0 <MenuSettingsSaveMenuPosWhenOFF+0x7c>)
 80025ac:	e7f3      	b.n	8002596 <MenuSettingsSaveMenuPosWhenOFF+0x42>
			PrintToLCD("DisCharge       ");
 80025ae:	4809      	ldr	r0, [pc, #36]	; (80025d4 <MenuSettingsSaveMenuPosWhenOFF+0x80>)
 80025b0:	e7f1      	b.n	8002596 <MenuSettingsSaveMenuPosWhenOFF+0x42>
			PrintToLCD("Training        ");
 80025b2:	4809      	ldr	r0, [pc, #36]	; (80025d8 <MenuSettingsSaveMenuPosWhenOFF+0x84>)
 80025b4:	e7ef      	b.n	8002596 <MenuSettingsSaveMenuPosWhenOFF+0x42>
			PrintToLCD("Swing           ");
 80025b6:	4809      	ldr	r0, [pc, #36]	; (80025dc <MenuSettingsSaveMenuPosWhenOFF+0x88>)
 80025b8:	e7ed      	b.n	8002596 <MenuSettingsSaveMenuPosWhenOFF+0x42>
			SettingsData.Option1 =1;
 80025ba:	2201      	movs	r2, #1
 80025bc:	609a      	str	r2, [r3, #8]
}
 80025be:	bd10      	pop	{r4, pc}
 80025c0:	20000154 	.word	0x20000154
 80025c4:	08005f99 	.word	0x08005f99
 80025c8:	08005faa 	.word	0x08005faa
 80025cc:	08005fbb 	.word	0x08005fbb
 80025d0:	08005fcc 	.word	0x08005fcc
 80025d4:	08005fdd 	.word	0x08005fdd
 80025d8:	08005fee 	.word	0x08005fee
 80025dc:	08005fff 	.word	0x08005fff

080025e0 <MenuSettingsOutAfterPowerUp>:
	lcd_set_xy(0,0);
 80025e0:	2100      	movs	r1, #0
{
 80025e2:	b510      	push	{r4, lr}
 80025e4:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 80025e6:	4608      	mov	r0, r1
 80025e8:	f7ff f956 	bl	8001898 <lcd_set_xy>
	if (key == KEY_NEXT)
 80025ec:	2c02      	cmp	r4, #2
 80025ee:	4b12      	ldr	r3, [pc, #72]	; (8002638 <MenuSettingsOutAfterPowerUp+0x58>)
 80025f0:	d113      	bne.n	800261a <MenuSettingsOutAfterPowerUp+0x3a>
		SettingsData.Option2++;
 80025f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025f4:	3201      	adds	r2, #1
		if (SettingsData.Option2==QUANTITY_OPTIONS1+1) SettingsData.Option2=1;
 80025f6:	2a04      	cmp	r2, #4
 80025f8:	bf08      	it	eq
 80025fa:	2201      	moveq	r2, #1
		if (SettingsData.Option2==0) SettingsData.Option2 = QUANTITY_OPTIONS1;
 80025fc:	641a      	str	r2, [r3, #64]	; 0x40
	switch (SettingsData.Option2)
 80025fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002600:	2a02      	cmp	r2, #2
 8002602:	d011      	beq.n	8002628 <MenuSettingsOutAfterPowerUp+0x48>
 8002604:	2a03      	cmp	r2, #3
 8002606:	d011      	beq.n	800262c <MenuSettingsOutAfterPowerUp+0x4c>
 8002608:	2a01      	cmp	r2, #1
 800260a:	d111      	bne.n	8002630 <MenuSettingsOutAfterPowerUp+0x50>
			PrintToLCD("OFF             ");
 800260c:	480b      	ldr	r0, [pc, #44]	; (800263c <MenuSettingsOutAfterPowerUp+0x5c>)
			PrintToLCD("Previous        ");
 800260e:	f7ff f9c3 	bl	8001998 <PrintToLCD>
}
 8002612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			SelectedOption1();
 8002616:	f7ff bf8f 	b.w	8002538 <SelectedOption1>
	if (key == KEY_BACK)
 800261a:	2c01      	cmp	r4, #1
 800261c:	d1ef      	bne.n	80025fe <MenuSettingsOutAfterPowerUp+0x1e>
		SettingsData.Option2--;
 800261e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		if (SettingsData.Option2==0) SettingsData.Option2 = QUANTITY_OPTIONS1;
 8002620:	3a01      	subs	r2, #1
 8002622:	bf08      	it	eq
 8002624:	2203      	moveq	r2, #3
 8002626:	e7e9      	b.n	80025fc <MenuSettingsOutAfterPowerUp+0x1c>
			PrintToLCD("ON              ");
 8002628:	4805      	ldr	r0, [pc, #20]	; (8002640 <MenuSettingsOutAfterPowerUp+0x60>)
 800262a:	e7f0      	b.n	800260e <MenuSettingsOutAfterPowerUp+0x2e>
			PrintToLCD("Previous        ");
 800262c:	4805      	ldr	r0, [pc, #20]	; (8002644 <MenuSettingsOutAfterPowerUp+0x64>)
 800262e:	e7ee      	b.n	800260e <MenuSettingsOutAfterPowerUp+0x2e>
			SettingsData.Option2 =1;
 8002630:	2201      	movs	r2, #1
 8002632:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002634:	bd10      	pop	{r4, pc}
 8002636:	bf00      	nop
 8002638:	20000154 	.word	0x20000154
 800263c:	08005f66 	.word	0x08005f66
 8002640:	08005f77 	.word	0x08005f77
 8002644:	08005f88 	.word	0x08005f88

08002648 <ENC_PollEncoder>:
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8002648:	4a27      	ldr	r2, [pc, #156]	; (80026e8 <ENC_PollEncoder+0xa0>)

Key_Pressed_t bufEnc = 0; //буфер энкодера
int16_t comp = 0;

void ENC_PollEncoder(void)
{
 800264a:	b510      	push	{r4, lr}
 800264c:	6893      	ldr	r3, [r2, #8]
 800264e:	6891      	ldr	r1, [r2, #8]
 8002650:	43db      	mvns	r3, r3
	Key_Pressed_t key;
	//провер¤ем состо¤ние выводов микроконтроллера


	if (!LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_11)) {SetBit(currentState,0);}
	if (!LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_8)) {SetBit(currentState,1);}
 8002652:	05c9      	lsls	r1, r1, #23
 8002654:	4925      	ldr	r1, [pc, #148]	; (80026ec <ENC_PollEncoder+0xa4>)
	unsigned char currentState = 0;
 8002656:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 800265a:	6888      	ldr	r0, [r1, #8]
	if (!LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_8)) {SetBit(currentState,1);}
 800265c:	bf58      	it	pl
 800265e:	f043 0302 	orrpl.w	r3, r3, #2
	if (!LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_4))
 8002662:	f010 0f10 	tst.w	r0, #16
 8002666:	4822      	ldr	r0, [pc, #136]	; (80026f0 <ENC_PollEncoder+0xa8>)
 8002668:	d01e      	beq.n	80026a8 <ENC_PollEncoder+0x60>
 800266a:	688c      	ldr	r4, [r1, #8]
		key = KEY_OK;
	else if (!LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_5))
 800266c:	06a4      	lsls	r4, r4, #26
 800266e:	d528      	bpl.n	80026c2 <ENC_PollEncoder+0x7a>
 8002670:	688c      	ldr	r4, [r1, #8]
		key = KEY_VOLT;
	else if (!LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_6))
 8002672:	0664      	lsls	r4, r4, #25
 8002674:	d527      	bpl.n	80026c6 <ENC_PollEncoder+0x7e>
 8002676:	6889      	ldr	r1, [r1, #8]
		key = KEY_CURR;
	else if (!LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_7))
 8002678:	0609      	lsls	r1, r1, #24
 800267a:	d526      	bpl.n	80026ca <ENC_PollEncoder+0x82>
 800267c:	6892      	ldr	r2, [r2, #8]
 800267e:	43d2      	mvns	r2, r2
		key = KEY_FINE;
	else if (!LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_12))
 8002680:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002684:	d123      	bne.n	80026ce <ENC_PollEncoder+0x86>
	      {
	    	  bufEnc = key;
	        return;
	      }
	    }
	    else comp=0;
 8002686:	8002      	strh	r2, [r0, #0]
	//если равно предыдущему, то выходим
	tmp = stateEnc;
 8002688:	4a1a      	ldr	r2, [pc, #104]	; (80026f4 <ENC_PollEncoder+0xac>)
 800268a:	7811      	ldrb	r1, [r2, #0]
	if (currentState == (tmp & b00000011)) return;
 800268c:	f001 0003 	and.w	r0, r1, #3
 8002690:	4283      	cmp	r3, r0
 8002692:	d015      	beq.n	80026c0 <ENC_PollEncoder+0x78>

	//если не равно, то сдвигаем и сохран¤ем в озу
	tmp = (tmp<<2)|currentState;
 8002694:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8002698:	b2db      	uxtb	r3, r3
	stateEnc = tmp;

	//сравниваем получившуюс¤ последовательность
	if (tmp == b11100001)
 800269a:	2be1      	cmp	r3, #225	; 0xe1
	stateEnc = tmp;
 800269c:	7013      	strb	r3, [r2, #0]
	if (tmp == b11100001)
 800269e:	d11e      	bne.n	80026de <ENC_PollEncoder+0x96>
		bufEnc = KEY_NEXT;
 80026a0:	2202      	movs	r2, #2
 80026a2:	4b15      	ldr	r3, [pc, #84]	; (80026f8 <ENC_PollEncoder+0xb0>)
	if (tmp == b11010010)
		bufEnc = KEY_BACK;
 80026a4:	701a      	strb	r2, [r3, #0]
 80026a6:	e00b      	b.n	80026c0 <ENC_PollEncoder+0x78>
		key = KEY_OK;
 80026a8:	2103      	movs	r1, #3
	      if (comp > THRESHOLD2)
 80026aa:	f240 54dc 	movw	r4, #1500	; 0x5dc
 80026ae:	f9b0 2000 	ldrsh.w	r2, [r0]
 80026b2:	42a2      	cmp	r2, r4
 80026b4:	dd0d      	ble.n	80026d2 <ENC_PollEncoder+0x8a>
	        comp = THRESHOLD2 - 40;
 80026b6:	f240 53b4 	movw	r3, #1460	; 0x5b4
 80026ba:	8003      	strh	r3, [r0, #0]
	    	  bufEnc = key;
 80026bc:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <ENC_PollEncoder+0xb0>)
 80026be:	7019      	strb	r1, [r3, #0]

	return;
}
 80026c0:	bd10      	pop	{r4, pc}
		key = KEY_VOLT;
 80026c2:	2105      	movs	r1, #5
 80026c4:	e7f1      	b.n	80026aa <ENC_PollEncoder+0x62>
		key = KEY_CURR;
 80026c6:	2106      	movs	r1, #6
 80026c8:	e7ef      	b.n	80026aa <ENC_PollEncoder+0x62>
		key = KEY_FINE;
 80026ca:	2107      	movs	r1, #7
 80026cc:	e7ed      	b.n	80026aa <ENC_PollEncoder+0x62>
		key = KEY_OUT;
 80026ce:	2108      	movs	r1, #8
 80026d0:	e7eb      	b.n	80026aa <ENC_PollEncoder+0x62>
	      else comp++;
 80026d2:	3201      	adds	r2, #1
 80026d4:	b212      	sxth	r2, r2
	      if (comp == THRESHOLD)
 80026d6:	2a14      	cmp	r2, #20
	      else comp++;
 80026d8:	8002      	strh	r2, [r0, #0]
	      if (comp == THRESHOLD)
 80026da:	d1d5      	bne.n	8002688 <ENC_PollEncoder+0x40>
 80026dc:	e7ee      	b.n	80026bc <ENC_PollEncoder+0x74>
	if (tmp == b11010010)
 80026de:	2bd2      	cmp	r3, #210	; 0xd2
 80026e0:	d1ee      	bne.n	80026c0 <ENC_PollEncoder+0x78>
		bufEnc = KEY_BACK;
 80026e2:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <ENC_PollEncoder+0xb0>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	e7dd      	b.n	80026a4 <ENC_PollEncoder+0x5c>
 80026e8:	40010800 	.word	0x40010800
 80026ec:	40010c00 	.word	0x40010c00
 80026f0:	200007c6 	.word	0x200007c6
 80026f4:	200007ca 	.word	0x200007ca
 80026f8:	200007c4 	.word	0x200007c4

080026fc <Start_Timer_sec>:



void Start_Timer_sec()
{
	Timer_Sec = 0;
 80026fc:	2200      	movs	r2, #0
 80026fe:	4b03      	ldr	r3, [pc, #12]	; (800270c <Start_Timer_sec+0x10>)
 8002700:	601a      	str	r2, [r3, #0]
	Status_Timer_Sec = 1;
 8002702:	2201      	movs	r2, #1
 8002704:	4b02      	ldr	r3, [pc, #8]	; (8002710 <Start_Timer_sec+0x14>)
 8002706:	701a      	strb	r2, [r3, #0]
}
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	200007b8 	.word	0x200007b8
 8002710:	20000798 	.word	0x20000798

08002714 <ClockOnLCD_noSec>:
	if (strlen1(string)<2) lcd_out("0",1);
	lcd_out(string,1);

}
void ClockOnLCD_noSec (uint32_t time)
{
 8002714:	b538      	push	{r3, r4, r5, lr}
 8002716:	4604      	mov	r4, r0
	char *string;
	//(" ",1);
	string = itoa(time/3600);
 8002718:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800271c:	fbb4 f0f0 	udiv	r0, r4, r0
 8002720:	f7fe fd58 	bl	80011d4 <itoa>
 8002724:	4605      	mov	r5, r0
	if (strlen1(string)<2) lcd_out("0",1);
 8002726:	f7fe fe37 	bl	8001398 <strlen1>
 800272a:	2801      	cmp	r0, #1
 800272c:	d803      	bhi.n	8002736 <ClockOnLCD_noSec+0x22>
 800272e:	2101      	movs	r1, #1
 8002730:	4811      	ldr	r0, [pc, #68]	; (8002778 <ClockOnLCD_noSec+0x64>)
 8002732:	f7ff f8c3 	bl	80018bc <lcd_out>
	lcd_out(string,1);
 8002736:	2101      	movs	r1, #1
 8002738:	4628      	mov	r0, r5
 800273a:	f7ff f8bf 	bl	80018bc <lcd_out>

	lcd_out(":",1);
 800273e:	2101      	movs	r1, #1
 8002740:	480e      	ldr	r0, [pc, #56]	; (800277c <ClockOnLCD_noSec+0x68>)
 8002742:	f7ff f8bb 	bl	80018bc <lcd_out>
	string = itoa((time/60)%60);
 8002746:	233c      	movs	r3, #60	; 0x3c
 8002748:	fbb4 f4f3 	udiv	r4, r4, r3
 800274c:	fbb4 f0f3 	udiv	r0, r4, r3
 8002750:	fb03 4010 	mls	r0, r3, r0, r4
 8002754:	f7fe fd3e 	bl	80011d4 <itoa>
 8002758:	4604      	mov	r4, r0
	if (strlen1(string)<2) lcd_out("0",1);
 800275a:	f7fe fe1d 	bl	8001398 <strlen1>
 800275e:	2801      	cmp	r0, #1
 8002760:	d803      	bhi.n	800276a <ClockOnLCD_noSec+0x56>
 8002762:	2101      	movs	r1, #1
 8002764:	4804      	ldr	r0, [pc, #16]	; (8002778 <ClockOnLCD_noSec+0x64>)
 8002766:	f7ff f8a9 	bl	80018bc <lcd_out>
	lcd_out(string,1);
 800276a:	4620      	mov	r0, r4


}
 800276c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lcd_out(string,1);
 8002770:	2101      	movs	r1, #1
 8002772:	f7ff b8a3 	b.w	80018bc <lcd_out>
 8002776:	bf00      	nop
 8002778:	08005d20 	.word	0x08005d20
 800277c:	08005db1 	.word	0x08005db1

08002780 <MenuTraining_new>:
{
 8002780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (EnterInMenu_Status == 0)
 8002784:	4ac3      	ldr	r2, [pc, #780]	; (8002a94 <MenuTraining_new+0x314>)
{
 8002786:	b085      	sub	sp, #20
	if (EnterInMenu_Status == 0)
 8002788:	7813      	ldrb	r3, [r2, #0]
{
 800278a:	9000      	str	r0, [sp, #0]
	if (EnterInMenu_Status == 0)
 800278c:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8002790:	9201      	str	r2, [sp, #4]
 8002792:	f8df a364 	ldr.w	sl, [pc, #868]	; 8002af8 <MenuTraining_new+0x378>
 8002796:	f8df b364 	ldr.w	fp, [pc, #868]	; 8002afc <MenuTraining_new+0x37c>
 800279a:	f8df 9364 	ldr.w	r9, [pc, #868]	; 8002b00 <MenuTraining_new+0x380>
 800279e:	4fbe      	ldr	r7, [pc, #760]	; (8002a98 <MenuTraining_new+0x318>)
 80027a0:	f8df 8360 	ldr.w	r8, [pc, #864]	; 8002b04 <MenuTraining_new+0x384>
 80027a4:	4dbd      	ldr	r5, [pc, #756]	; (8002a9c <MenuTraining_new+0x31c>)
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d13a      	bne.n	8002820 <MenuTraining_new+0xa0>
		if (U_PS < (SettingsData.MaxVoltage+DELTA_UPS_BAT_MAX))
 80027aa:	4bbd      	ldr	r3, [pc, #756]	; (8002aa0 <MenuTraining_new+0x320>)
 80027ac:	881a      	ldrh	r2, [r3, #0]
 80027ae:	4bbd      	ldr	r3, [pc, #756]	; (8002aa4 <MenuTraining_new+0x324>)
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	3305      	adds	r3, #5
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d915      	bls.n	80027e4 <MenuTraining_new+0x64>
			lcd_set_xy(0,0);
 80027b8:	4621      	mov	r1, r4
 80027ba:	4620      	mov	r0, r4
 80027bc:	f7ff f86c 	bl	8001898 <lcd_set_xy>
			PrintToLCD("U(ps)<U(bat.max)");
 80027c0:	48b9      	ldr	r0, [pc, #740]	; (8002aa8 <MenuTraining_new+0x328>)
 80027c2:	f7ff f8e9 	bl	8001998 <PrintToLCD>
			delay_ms(2000);
 80027c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80027ca:	f7fe fbe7 	bl	8000f9c <delay_ms>
			lcd_set_xy(0,0);
 80027ce:	4621      	mov	r1, r4
 80027d0:	4620      	mov	r0, r4
 80027d2:	f7ff f861 	bl	8001898 <lcd_set_xy>
			PrintToLCD("UP U(ps)        ");
 80027d6:	48b5      	ldr	r0, [pc, #724]	; (8002aac <MenuTraining_new+0x32c>)
 80027d8:	f7ff f8de 	bl	8001998 <PrintToLCD>
			delay_ms(3000);
 80027dc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80027e0:	f7fe fbdc 	bl	8000f9c <delay_ms>
		EnterInMenu_Status = 1;
 80027e4:	2301      	movs	r3, #1
		ChargeStatusForTimer = 0;
 80027e6:	2100      	movs	r1, #0
		EnterInMenu_Status = 1;
 80027e8:	9a01      	ldr	r2, [sp, #4]
		lcd_set_xy(0,0);
 80027ea:	4608      	mov	r0, r1
		EnterInMenu_Status = 1;
 80027ec:	7013      	strb	r3, [r2, #0]
		DischargeTimeSec_Previous = 0;
 80027ee:	4ab0      	ldr	r2, [pc, #704]	; (8002ab0 <MenuTraining_new+0x330>)
		ChargeStatusForTimer = 0;
 80027f0:	f88a 1000 	strb.w	r1, [sl]
		DisChargeStatusForTimer = 0;
 80027f4:	f88b 1000 	strb.w	r1, [fp]
		ChargeTimeSec = 0;
 80027f8:	f8c9 1000 	str.w	r1, [r9]
		DischargeTimeSec = 0;
 80027fc:	6039      	str	r1, [r7, #0]
		DischargeTimeSec_Previous = 0;
 80027fe:	6011      	str	r1, [r2, #0]
		ChargeDischargeStatus = CHARGEs;
 8002800:	4aac      	ldr	r2, [pc, #688]	; (8002ab4 <MenuTraining_new+0x334>)
		BatteryCapacityCharge = 0;
 8002802:	f8c8 1000 	str.w	r1, [r8]
		ChargeDischargeStatus = CHARGEs;
 8002806:	7013      	strb	r3, [r2, #0]
		BatteryCapacityDischargeCurrent = 0;
 8002808:	6029      	str	r1, [r5, #0]
		ChargeStatusForTimer = 1;
 800280a:	f88a 3000 	strb.w	r3, [sl]
		lcd_set_xy(0,0);
 800280e:	f7ff f843 	bl	8001898 <lcd_set_xy>
		PrintToLCD("Testing Battery.");
 8002812:	48a9      	ldr	r0, [pc, #676]	; (8002ab8 <MenuTraining_new+0x338>)
 8002814:	f7ff f8c0 	bl	8001998 <PrintToLCD>
		delay_ms(1000);
 8002818:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800281c:	f7fe fbbe 	bl	8000f9c <delay_ms>
	if (Module16(Current)>5)
 8002820:	4ca6      	ldr	r4, [pc, #664]	; (8002abc <MenuTraining_new+0x33c>)
 8002822:	8820      	ldrh	r0, [r4, #0]
 8002824:	b200      	sxth	r0, r0
 8002826:	f7fe fdb1 	bl	800138c <Module16>
 800282a:	2805      	cmp	r0, #5
 800282c:	9403      	str	r4, [sp, #12]
 800282e:	f340 81cd 	ble.w	8002bcc <MenuTraining_new+0x44c>
		if (U_OUT < SettingsData.LowVoltage && ChargeDischargeStatus == DISCHARGEs  && TimerForReadyMeasurement_ms>1000)
 8002832:	4ba3      	ldr	r3, [pc, #652]	; (8002ac0 <MenuTraining_new+0x340>)
 8002834:	4e9b      	ldr	r6, [pc, #620]	; (8002aa4 <MenuTraining_new+0x324>)
 8002836:	881a      	ldrh	r2, [r3, #0]
 8002838:	69b1      	ldr	r1, [r6, #24]
 800283a:	9302      	str	r3, [sp, #8]
 800283c:	4291      	cmp	r1, r2
 800283e:	d91c      	bls.n	800287a <MenuTraining_new+0xfa>
 8002840:	4c9c      	ldr	r4, [pc, #624]	; (8002ab4 <MenuTraining_new+0x334>)
 8002842:	7822      	ldrb	r2, [r4, #0]
 8002844:	2a02      	cmp	r2, #2
 8002846:	d118      	bne.n	800287a <MenuTraining_new+0xfa>
 8002848:	4b9e      	ldr	r3, [pc, #632]	; (8002ac4 <MenuTraining_new+0x344>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002850:	d913      	bls.n	800287a <MenuTraining_new+0xfa>
			DisChargeStatusForTimer = 0;
 8002852:	2300      	movs	r3, #0
 8002854:	f88b 3000 	strb.w	r3, [fp]
			if (BatteryCapacityDischargeCurrent/3600 > 100)
 8002858:	6829      	ldr	r1, [r5, #0]
 800285a:	4b9b      	ldr	r3, [pc, #620]	; (8002ac8 <MenuTraining_new+0x348>)
 800285c:	4299      	cmp	r1, r3
 800285e:	d903      	bls.n	8002868 <MenuTraining_new+0xe8>
				MenuTraining_WriteInLOG(BatteryCapacityDischargeCurrent,DischargeTimeSec,DISCHARGE_l);
 8002860:	6828      	ldr	r0, [r5, #0]
 8002862:	6839      	ldr	r1, [r7, #0]
 8002864:	f7ff fbb6 	bl	8001fd4 <MenuTraining_WriteInLOG>
			ChargeTimeSec = 0;
 8002868:	2300      	movs	r3, #0
 800286a:	f8c9 3000 	str.w	r3, [r9]
			BatteryCapacityCharge = 0;
 800286e:	f8c8 3000 	str.w	r3, [r8]
			ChargeStatusForTimer = 1;
 8002872:	2301      	movs	r3, #1
 8002874:	f88a 3000 	strb.w	r3, [sl]
			ChargeDischargeStatus = CHARGEs;
 8002878:	7023      	strb	r3, [r4, #0]
		if ((U_OUT > SettingsData.MaxVoltage && ChargeDischargeStatus == CHARGEs  && TimerForReadyMeasurement_ms>1000) || (ChargeTimeSec > ChargeDurationSec && ChargeDischargeStatus == CHARGEs))
 800287a:	9b02      	ldr	r3, [sp, #8]
 800287c:	6a32      	ldr	r2, [r6, #32]
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	429a      	cmp	r2, r3
 8002882:	d208      	bcs.n	8002896 <MenuTraining_new+0x116>
 8002884:	4b8b      	ldr	r3, [pc, #556]	; (8002ab4 <MenuTraining_new+0x334>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d104      	bne.n	8002896 <MenuTraining_new+0x116>
 800288c:	4b8d      	ldr	r3, [pc, #564]	; (8002ac4 <MenuTraining_new+0x344>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002894:	d809      	bhi.n	80028aa <MenuTraining_new+0x12a>
 8002896:	4b8d      	ldr	r3, [pc, #564]	; (8002acc <MenuTraining_new+0x34c>)
 8002898:	f8d9 2000 	ldr.w	r2, [r9]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d921      	bls.n	80028e6 <MenuTraining_new+0x166>
 80028a2:	4b84      	ldr	r3, [pc, #528]	; (8002ab4 <MenuTraining_new+0x334>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d11d      	bne.n	80028e6 <MenuTraining_new+0x166>
			ChargeStatusForTimer = 0;
 80028aa:	2300      	movs	r3, #0
 80028ac:	f88a 3000 	strb.w	r3, [sl]
			if (BatteryCapacityCharge/3600 > 100)
 80028b0:	f8d8 2000 	ldr.w	r2, [r8]
 80028b4:	4b84      	ldr	r3, [pc, #528]	; (8002ac8 <MenuTraining_new+0x348>)
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d906      	bls.n	80028c8 <MenuTraining_new+0x148>
				MenuTraining_WriteInLOG(BatteryCapacityCharge,ChargeTimeSec,CHARGE_H);
 80028ba:	f8d8 0000 	ldr.w	r0, [r8]
 80028be:	2201      	movs	r2, #1
 80028c0:	f8d9 1000 	ldr.w	r1, [r9]
 80028c4:	f7ff fb86 	bl	8001fd4 <MenuTraining_WriteInLOG>
			DischargeTimeSec_Previous = DischargeTimeSec;
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	4b79      	ldr	r3, [pc, #484]	; (8002ab0 <MenuTraining_new+0x330>)
 80028cc:	601a      	str	r2, [r3, #0]
			SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue = BatteryCapacityDischargeCurrent;
 80028ce:	682a      	ldr	r2, [r5, #0]
 80028d0:	4b7f      	ldr	r3, [pc, #508]	; (8002ad0 <MenuTraining_new+0x350>)
 80028d2:	609a      	str	r2, [r3, #8]
			DischargeTimeSec = 0;
 80028d4:	2300      	movs	r3, #0
 80028d6:	603b      	str	r3, [r7, #0]
			BatteryCapacityDischargeCurrent = 0;
 80028d8:	602b      	str	r3, [r5, #0]
			DisChargeStatusForTimer = 1;
 80028da:	2301      	movs	r3, #1
			ChargeDischargeStatus = DISCHARGEs;
 80028dc:	2202      	movs	r2, #2
			DisChargeStatusForTimer = 1;
 80028de:	f88b 3000 	strb.w	r3, [fp]
			ChargeDischargeStatus = DISCHARGEs;
 80028e2:	4b74      	ldr	r3, [pc, #464]	; (8002ab4 <MenuTraining_new+0x334>)
 80028e4:	701a      	strb	r2, [r3, #0]
		if (key == KEY_NEXT)
 80028e6:	9a00      	ldr	r2, [sp, #0]
 80028e8:	4c7a      	ldr	r4, [pc, #488]	; (8002ad4 <MenuTraining_new+0x354>)
 80028ea:	2a02      	cmp	r2, #2
 80028ec:	f994 3000 	ldrsb.w	r3, [r4]
 80028f0:	f040 815b 	bne.w	8002baa <MenuTraining_new+0x42a>
			CountShow++;
 80028f4:	3301      	adds	r3, #1
 80028f6:	b25b      	sxtb	r3, r3
			if (CountShow==MAX_SCREENS__MENU_TRAINING) CountShow=0;
 80028f8:	2b05      	cmp	r3, #5
 80028fa:	bf08      	it	eq
 80028fc:	2300      	moveq	r3, #0
			if (CountShow<0) CountShow=MAX_SCREENS__MENU_TRAINING-1;
 80028fe:	7023      	strb	r3, [r4, #0]
		if(CountShow == 0)
 8002900:	f994 3000 	ldrsb.w	r3, [r4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d132      	bne.n	800296e <MenuTraining_new+0x1ee>
			lcd_set_xy(0,0);
 8002908:	4619      	mov	r1, r3
 800290a:	4618      	mov	r0, r3
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	f7fe ffc3 	bl	8001898 <lcd_set_xy>
			PrintToLCD(itoa_koma(U_OUT,2));
 8002912:	9b02      	ldr	r3, [sp, #8]
 8002914:	2102      	movs	r1, #2
 8002916:	8818      	ldrh	r0, [r3, #0]
 8002918:	f7fe fcd0 	bl	80012bc <itoa_koma>
 800291c:	f7ff f83c 	bl	8001998 <PrintToLCD>
			PrintToLCD("V ");
 8002920:	486d      	ldr	r0, [pc, #436]	; (8002ad8 <MenuTraining_new+0x358>)
 8002922:	f7ff f839 	bl	8001998 <PrintToLCD>
			PrintToLCD(itoa(Current));
 8002926:	9b03      	ldr	r3, [sp, #12]
 8002928:	8818      	ldrh	r0, [r3, #0]
 800292a:	b200      	sxth	r0, r0
 800292c:	f7fe fc52 	bl	80011d4 <itoa>
 8002930:	f7ff f832 	bl	8001998 <PrintToLCD>
			PrintToLCD("mA     ");
 8002934:	4869      	ldr	r0, [pc, #420]	; (8002adc <MenuTraining_new+0x35c>)
 8002936:	f7ff f82f 	bl	8001998 <PrintToLCD>
			lcd_set_xy(6,1);
 800293a:	2101      	movs	r1, #1
 800293c:	2006      	movs	r0, #6
 800293e:	f7fe ffab 	bl	8001898 <lcd_set_xy>
			LcdOutbyNumber(4,1);
 8002942:	2101      	movs	r1, #1
 8002944:	2004      	movs	r0, #4
 8002946:	f7fe ffcf 	bl	80018e8 <LcdOutbyNumber>
			if (Status_Out ==1)
 800294a:	4a65      	ldr	r2, [pc, #404]	; (8002ae0 <MenuTraining_new+0x360>)
 800294c:	9b00      	ldr	r3, [sp, #0]
 800294e:	7812      	ldrb	r2, [r2, #0]
 8002950:	2a01      	cmp	r2, #1
 8002952:	f040 8134 	bne.w	8002bbe <MenuTraining_new+0x43e>
				lcd_set_xy(7,1);
 8002956:	4611      	mov	r1, r2
 8002958:	2007      	movs	r0, #7
 800295a:	9302      	str	r3, [sp, #8]
 800295c:	9200      	str	r2, [sp, #0]
 800295e:	f7fe ff9b 	bl	8001898 <lcd_set_xy>
				LcdOutbyNumber(0,1);//charge
 8002962:	9a00      	ldr	r2, [sp, #0]
 8002964:	9b02      	ldr	r3, [sp, #8]
 8002966:	4611      	mov	r1, r2
 8002968:	4618      	mov	r0, r3
				LcdOutbyNumber(2,1);//discharge
 800296a:	f7fe ffbd 	bl	80018e8 <LcdOutbyNumber>
		if(CountShow == 1)
 800296e:	f994 3000 	ldrsb.w	r3, [r4]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d128      	bne.n	80029c8 <MenuTraining_new+0x248>
			lcd_set_xy(0,0);
 8002976:	2100      	movs	r1, #0
 8002978:	4608      	mov	r0, r1
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	f7fe ff8c 	bl	8001898 <lcd_set_xy>
			PrintToLCD(itoa(SettingsData.ChargeTime));
 8002980:	6930      	ldr	r0, [r6, #16]
 8002982:	f7fe fc27 	bl	80011d4 <itoa>
 8002986:	f7ff f807 	bl	8001998 <PrintToLCD>
			PrintToLCD("h ");
 800298a:	4856      	ldr	r0, [pc, #344]	; (8002ae4 <MenuTraining_new+0x364>)
 800298c:	f7ff f804 	bl	8001998 <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 8002990:	220a      	movs	r2, #10
 8002992:	9b00      	ldr	r3, [sp, #0]
 8002994:	69b0      	ldr	r0, [r6, #24]
 8002996:	4619      	mov	r1, r3
 8002998:	fbb0 f0f2 	udiv	r0, r0, r2
 800299c:	9302      	str	r3, [sp, #8]
 800299e:	9200      	str	r2, [sp, #0]
 80029a0:	f7fe fc8c 	bl	80012bc <itoa_koma>
 80029a4:	f7fe fff8 	bl	8001998 <PrintToLCD>
			PrintToLCD("V ");
 80029a8:	484b      	ldr	r0, [pc, #300]	; (8002ad8 <MenuTraining_new+0x358>)
 80029aa:	f7fe fff5 	bl	8001998 <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 80029ae:	9b02      	ldr	r3, [sp, #8]
 80029b0:	9a00      	ldr	r2, [sp, #0]
 80029b2:	6a30      	ldr	r0, [r6, #32]
 80029b4:	4619      	mov	r1, r3
 80029b6:	fbb0 f0f2 	udiv	r0, r0, r2
 80029ba:	f7fe fc7f 	bl	80012bc <itoa_koma>
 80029be:	f7fe ffeb 	bl	8001998 <PrintToLCD>
			PrintToLCD("V     ");
 80029c2:	4849      	ldr	r0, [pc, #292]	; (8002ae8 <MenuTraining_new+0x368>)
 80029c4:	f7fe ffe8 	bl	8001998 <PrintToLCD>
		if(CountShow == 2)
 80029c8:	f994 6000 	ldrsb.w	r6, [r4]
 80029cc:	2e02      	cmp	r6, #2
 80029ce:	d121      	bne.n	8002a14 <MenuTraining_new+0x294>
			lcd_set_xy(0,0);
 80029d0:	2100      	movs	r1, #0
 80029d2:	4608      	mov	r0, r1
 80029d4:	f7fe ff60 	bl	8001898 <lcd_set_xy>
			LcdOutbyNumber(2,1);//discharge
 80029d8:	2101      	movs	r1, #1
 80029da:	4630      	mov	r0, r6
 80029dc:	f7fe ff84 	bl	80018e8 <LcdOutbyNumber>
			lcd_set_xy(1,0);
 80029e0:	2100      	movs	r1, #0
 80029e2:	2001      	movs	r0, #1
 80029e4:	f7fe ff58 	bl	8001898 <lcd_set_xy>
			PrintToLCD(" ");
 80029e8:	4840      	ldr	r0, [pc, #256]	; (8002aec <MenuTraining_new+0x36c>)
 80029ea:	f7fe ffd5 	bl	8001998 <PrintToLCD>
			PrintToLCD(itoa(BatteryCapacityDischargeCurrent/3600));
 80029ee:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80029f2:	6828      	ldr	r0, [r5, #0]
 80029f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80029f8:	f7fe fbec 	bl	80011d4 <itoa>
 80029fc:	f7fe ffcc 	bl	8001998 <PrintToLCD>
			PrintToLCD("mAH      ");
 8002a00:	483b      	ldr	r0, [pc, #236]	; (8002af0 <MenuTraining_new+0x370>)
 8002a02:	f7fe ffc9 	bl	8001998 <PrintToLCD>
			lcd_set_xy(3,1);
 8002a06:	2003      	movs	r0, #3
 8002a08:	2101      	movs	r1, #1
 8002a0a:	f7fe ff45 	bl	8001898 <lcd_set_xy>
			ClockOnLCD_noSec(DischargeTimeSec);
 8002a0e:	6838      	ldr	r0, [r7, #0]
 8002a10:	f7ff fe80 	bl	8002714 <ClockOnLCD_noSec>
		if(CountShow == 3)
 8002a14:	f994 6000 	ldrsb.w	r6, [r4]
 8002a18:	2e03      	cmp	r6, #3
 8002a1a:	d123      	bne.n	8002a64 <MenuTraining_new+0x2e4>
			lcd_set_xy(0,0);
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	4608      	mov	r0, r1
 8002a20:	f7fe ff3a 	bl	8001898 <lcd_set_xy>
			LcdOutbyNumber(0,1);//charge
 8002a24:	2101      	movs	r1, #1
 8002a26:	2000      	movs	r0, #0
 8002a28:	f7fe ff5e 	bl	80018e8 <LcdOutbyNumber>
			lcd_set_xy(1,0);
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	2001      	movs	r0, #1
 8002a30:	f7fe ff32 	bl	8001898 <lcd_set_xy>
			PrintToLCD(" ");
 8002a34:	482d      	ldr	r0, [pc, #180]	; (8002aec <MenuTraining_new+0x36c>)
 8002a36:	f7fe ffaf 	bl	8001998 <PrintToLCD>
			PrintToLCD(itoa(BatteryCapacityCharge/3600));
 8002a3a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002a3e:	f8d8 0000 	ldr.w	r0, [r8]
 8002a42:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a46:	f7fe fbc5 	bl	80011d4 <itoa>
 8002a4a:	f7fe ffa5 	bl	8001998 <PrintToLCD>
			PrintToLCD("mAH      ");
 8002a4e:	4828      	ldr	r0, [pc, #160]	; (8002af0 <MenuTraining_new+0x370>)
 8002a50:	f7fe ffa2 	bl	8001998 <PrintToLCD>
			lcd_set_xy(3,1);
 8002a54:	4630      	mov	r0, r6
 8002a56:	2101      	movs	r1, #1
 8002a58:	f7fe ff1e 	bl	8001898 <lcd_set_xy>
			ClockOnLCD_noSec(ChargeTimeSec);
 8002a5c:	f8d9 0000 	ldr.w	r0, [r9]
 8002a60:	f7ff fe58 	bl	8002714 <ClockOnLCD_noSec>
		if(CountShow == 4)
 8002a64:	f994 3000 	ldrsb.w	r3, [r4]
 8002a68:	2b04      	cmp	r3, #4
 8002a6a:	d15e      	bne.n	8002b2a <MenuTraining_new+0x3aa>
			lcd_set_xy(0,0);
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	4608      	mov	r0, r1
 8002a70:	f7fe ff12 	bl	8001898 <lcd_set_xy>
			LcdOutbyNumber(2,1);//discharge
 8002a74:	2101      	movs	r1, #1
 8002a76:	2002      	movs	r0, #2
 8002a78:	f7fe ff36 	bl	80018e8 <LcdOutbyNumber>
			lcd_set_xy(1,0);
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	2001      	movs	r0, #1
 8002a80:	f7fe ff0a 	bl	8001898 <lcd_set_xy>
			PrintToLCD("P ");
 8002a84:	481b      	ldr	r0, [pc, #108]	; (8002af4 <MenuTraining_new+0x374>)
 8002a86:	f7fe ff87 	bl	8001998 <PrintToLCD>
			PrintToLCD(itoa(SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue/3600));
 8002a8a:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <MenuTraining_new+0x350>)
 8002a8c:	6898      	ldr	r0, [r3, #8]
 8002a8e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002a92:	e039      	b.n	8002b08 <MenuTraining_new+0x388>
 8002a94:	20000794 	.word	0x20000794
 8002a98:	2000078c 	.word	0x2000078c
 8002a9c:	20000774 	.word	0x20000774
 8002aa0:	20000854 	.word	0x20000854
 8002aa4:	20000154 	.word	0x20000154
 8002aa8:	08006021 	.word	0x08006021
 8002aac:	08006032 	.word	0x08006032
 8002ab0:	20000790 	.word	0x20000790
 8002ab4:	20000270 	.word	0x20000270
 8002ab8:	08006043 	.word	0x08006043
 8002abc:	2000083e 	.word	0x2000083e
 8002ac0:	2000084e 	.word	0x2000084e
 8002ac4:	200007b4 	.word	0x200007b4
 8002ac8:	00058c4f 	.word	0x00058c4f
 8002acc:	200009fc 	.word	0x200009fc
 8002ad0:	200000f4 	.word	0x200000f4
 8002ad4:	20000785 	.word	0x20000785
 8002ad8:	08005e49 	.word	0x08005e49
 8002adc:	08006054 	.word	0x08006054
 8002ae0:	20000797 	.word	0x20000797
 8002ae4:	08005836 	.word	0x08005836
 8002ae8:	08005f57 	.word	0x08005f57
 8002aec:	08005f86 	.word	0x08005f86
 8002af0:	0800605c 	.word	0x0800605c
 8002af4:	08006066 	.word	0x08006066
 8002af8:	2000077e 	.word	0x2000077e
 8002afc:	2000078a 	.word	0x2000078a
 8002b00:	20000780 	.word	0x20000780
 8002b04:	20000770 	.word	0x20000770
 8002b08:	fbb0 f0f3 	udiv	r0, r0, r3
 8002b0c:	f7fe fb62 	bl	80011d4 <itoa>
 8002b10:	f7fe ff42 	bl	8001998 <PrintToLCD>
			PrintToLCD("mAH     ");
 8002b14:	4834      	ldr	r0, [pc, #208]	; (8002be8 <MenuTraining_new+0x468>)
 8002b16:	f7fe ff3f 	bl	8001998 <PrintToLCD>
			lcd_set_xy(3,1);
 8002b1a:	2003      	movs	r0, #3
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	f7fe febb 	bl	8001898 <lcd_set_xy>
			ClockOnLCD_noSec(DischargeTimeSec_Previous);
 8002b22:	4b32      	ldr	r3, [pc, #200]	; (8002bec <MenuTraining_new+0x46c>)
 8002b24:	6818      	ldr	r0, [r3, #0]
 8002b26:	f7ff fdf5 	bl	8002714 <ClockOnLCD_noSec>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 8002b2a:	4831      	ldr	r0, [pc, #196]	; (8002bf0 <MenuTraining_new+0x470>)
 8002b2c:	f002 fa34 	bl	8004f98 <printToBufferWithoutEndUART1>
 8002b30:	9b01      	ldr	r3, [sp, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	7819      	ldrb	r1, [r3, #0]
 8002b36:	482f      	ldr	r0, [pc, #188]	; (8002bf4 <MenuTraining_new+0x474>)
 8002b38:	f002 fa72 	bl	8005020 <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 8002b3c:	482c      	ldr	r0, [pc, #176]	; (8002bf0 <MenuTraining_new+0x470>)
 8002b3e:	f002 fa2b 	bl	8004f98 <printToBufferWithoutEndUART1>
 8002b42:	f89a 1000 	ldrb.w	r1, [sl]
 8002b46:	2200      	movs	r2, #0
 8002b48:	482b      	ldr	r0, [pc, #172]	; (8002bf8 <MenuTraining_new+0x478>)
 8002b4a:	f002 fa69 	bl	8005020 <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 8002b4e:	4828      	ldr	r0, [pc, #160]	; (8002bf0 <MenuTraining_new+0x470>)
 8002b50:	f002 fa22 	bl	8004f98 <printToBufferWithoutEndUART1>
 8002b54:	f8d9 1000 	ldr.w	r1, [r9]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	4828      	ldr	r0, [pc, #160]	; (8002bfc <MenuTraining_new+0x47c>)
 8002b5c:	f002 fa60 	bl	8005020 <printToBufferUART1D>
	logDebugD("BatteryCapacityCharge: ",BatteryCapacityCharge,0);
 8002b60:	4823      	ldr	r0, [pc, #140]	; (8002bf0 <MenuTraining_new+0x470>)
 8002b62:	f002 fa19 	bl	8004f98 <printToBufferWithoutEndUART1>
 8002b66:	f8d8 1000 	ldr.w	r1, [r8]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	4824      	ldr	r0, [pc, #144]	; (8002c00 <MenuTraining_new+0x480>)
 8002b6e:	f002 fa57 	bl	8005020 <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 8002b72:	481f      	ldr	r0, [pc, #124]	; (8002bf0 <MenuTraining_new+0x470>)
 8002b74:	f002 fa10 	bl	8004f98 <printToBufferWithoutEndUART1>
 8002b78:	f89b 1000 	ldrb.w	r1, [fp]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	4821      	ldr	r0, [pc, #132]	; (8002c04 <MenuTraining_new+0x484>)
 8002b80:	f002 fa4e 	bl	8005020 <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 8002b84:	481a      	ldr	r0, [pc, #104]	; (8002bf0 <MenuTraining_new+0x470>)
 8002b86:	f002 fa07 	bl	8004f98 <printToBufferWithoutEndUART1>
 8002b8a:	6839      	ldr	r1, [r7, #0]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	481e      	ldr	r0, [pc, #120]	; (8002c08 <MenuTraining_new+0x488>)
 8002b90:	f002 fa46 	bl	8005020 <printToBufferUART1D>
	logDebugD("BatteryCapacityDischargeCurrent: ",BatteryCapacityDischargeCurrent,0);
 8002b94:	4816      	ldr	r0, [pc, #88]	; (8002bf0 <MenuTraining_new+0x470>)
 8002b96:	f002 f9ff 	bl	8004f98 <printToBufferWithoutEndUART1>
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	6829      	ldr	r1, [r5, #0]
 8002b9e:	481b      	ldr	r0, [pc, #108]	; (8002c0c <MenuTraining_new+0x48c>)
}
 8002ba0:	b005      	add	sp, #20
 8002ba2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	logDebugD("BatteryCapacityDischargeCurrent: ",BatteryCapacityDischargeCurrent,0);
 8002ba6:	f002 ba3b 	b.w	8005020 <printToBufferUART1D>
		if (key == KEY_BACK)
 8002baa:	9a00      	ldr	r2, [sp, #0]
 8002bac:	2a01      	cmp	r2, #1
 8002bae:	f47f aea7 	bne.w	8002900 <MenuTraining_new+0x180>
			CountShow--;
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b25b      	sxtb	r3, r3
			if (CountShow<0) CountShow=MAX_SCREENS__MENU_TRAINING-1;
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	bfb8      	it	lt
 8002bba:	2304      	movlt	r3, #4
 8002bbc:	e69f      	b.n	80028fe <MenuTraining_new+0x17e>
				lcd_set_xy(7,1);
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	2007      	movs	r0, #7
 8002bc2:	f7fe fe69 	bl	8001898 <lcd_set_xy>
				LcdOutbyNumber(2,1);//discharge
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	2002      	movs	r0, #2
 8002bca:	e6ce      	b.n	800296a <MenuTraining_new+0x1ea>
		if (TimerForReadyMeasurement_ms>1000)
 8002bcc:	4b10      	ldr	r3, [pc, #64]	; (8002c10 <MenuTraining_new+0x490>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bd4:	d9a9      	bls.n	8002b2a <MenuTraining_new+0x3aa>
			lcd_set_xy(0,0);
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	4608      	mov	r0, r1
 8002bda:	f7fe fe5d 	bl	8001898 <lcd_set_xy>
			PrintToLCD("NO/BAD Battery  ");
 8002bde:	480d      	ldr	r0, [pc, #52]	; (8002c14 <MenuTraining_new+0x494>)
 8002be0:	f7fe feda 	bl	8001998 <PrintToLCD>
 8002be4:	e7a1      	b.n	8002b2a <MenuTraining_new+0x3aa>
 8002be6:	bf00      	nop
 8002be8:	08006069 	.word	0x08006069
 8002bec:	20000790 	.word	0x20000790
 8002bf0:	08005a98 	.word	0x08005a98
 8002bf4:	08006083 	.word	0x08006083
 8002bf8:	08006098 	.word	0x08006098
 8002bfc:	080060ad 	.word	0x080060ad
 8002c00:	080060bd 	.word	0x080060bd
 8002c04:	080060d5 	.word	0x080060d5
 8002c08:	080060ed 	.word	0x080060ed
 8002c0c:	08006100 	.word	0x08006100
 8002c10:	200007b4 	.word	0x200007b4
 8002c14:	08006072 	.word	0x08006072

08002c18 <MenuSwing>:
   	lcd_set_xy(0,0);
 8002c18:	2100      	movs	r1, #0
{
 8002c1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c1c:	4606      	mov	r6, r0
   	lcd_set_xy(0,0);
 8002c1e:	4608      	mov	r0, r1
 8002c20:	f7fe fe3a 	bl	8001898 <lcd_set_xy>
       	EnterInMenu_Status = 1;
 8002c24:	2201      	movs	r2, #1
 8002c26:	4b64      	ldr	r3, [pc, #400]	; (8002db8 <MenuSwing+0x1a0>)
 8002c28:	701a      	strb	r2, [r3, #0]
       	if (InitiStatus==0)
 8002c2a:	4b64      	ldr	r3, [pc, #400]	; (8002dbc <MenuSwing+0x1a4>)
 8002c2c:	7819      	ldrb	r1, [r3, #0]
 8002c2e:	b911      	cbnz	r1, 8002c36 <MenuSwing+0x1e>
       		InitiStatus=1;
 8002c30:	701a      	strb	r2, [r3, #0]
       		Start_Timer_sec();
 8002c32:	f7ff fd63 	bl	80026fc <Start_Timer_sec>
       if (Timer_Sec<=SettingsData.Swing_Chrg_time)
 8002c36:	4962      	ldr	r1, [pc, #392]	; (8002dc0 <MenuSwing+0x1a8>)
 8002c38:	4c62      	ldr	r4, [pc, #392]	; (8002dc4 <MenuSwing+0x1ac>)
 8002c3a:	680b      	ldr	r3, [r1, #0]
 8002c3c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d30f      	bcc.n	8002c62 <MenuSwing+0x4a>
           if (U_OUT>SettingsData.MaxVoltage && TimerForReadyMeasurement_ms>400)
 8002c42:	4b61      	ldr	r3, [pc, #388]	; (8002dc8 <MenuSwing+0x1b0>)
 8002c44:	6a22      	ldr	r2, [r4, #32]
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d20a      	bcs.n	8002c62 <MenuSwing+0x4a>
 8002c4c:	4b5f      	ldr	r3, [pc, #380]	; (8002dcc <MenuSwing+0x1b4>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002c54:	d905      	bls.n	8002c62 <MenuSwing+0x4a>
        	   ReStart_Timer_sec();
 8002c56:	f7ff fd51 	bl	80026fc <Start_Timer_sec>
               Timer_Sec  = Timer_Sec+ SettingsData.Swing_Chrg_time;
 8002c5a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002c5c:	680b      	ldr	r3, [r1, #0]
 8002c5e:	4413      	add	r3, r2
 8002c60:	600b      	str	r3, [r1, #0]
       if (Timer_Sec > SettingsData.Swing_Chrg_time)
 8002c62:	680b      	ldr	r3, [r1, #0]
 8002c64:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d20b      	bcs.n	8002c82 <MenuSwing+0x6a>
           if (U_OUT<SettingsData.LowVoltage && TimerForReadyMeasurement_ms>400)
 8002c6a:	4b57      	ldr	r3, [pc, #348]	; (8002dc8 <MenuSwing+0x1b0>)
 8002c6c:	69a2      	ldr	r2, [r4, #24]
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d906      	bls.n	8002c82 <MenuSwing+0x6a>
 8002c74:	4b55      	ldr	r3, [pc, #340]	; (8002dcc <MenuSwing+0x1b4>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002c7c:	d901      	bls.n	8002c82 <MenuSwing+0x6a>
        	   ReStart_Timer_sec();
 8002c7e:	f7ff fd3d 	bl	80026fc <Start_Timer_sec>
       if (Timer_Sec > (SettingsData.Swing_Chrg_time+SettingsData.Swing_DChrg_time))
 8002c82:	680a      	ldr	r2, [r1, #0]
 8002c84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002c86:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002c88:	440b      	add	r3, r1
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d201      	bcs.n	8002c92 <MenuSwing+0x7a>
    	   ReStart_Timer_sec();
 8002c8e:	f7ff fd35 	bl	80026fc <Start_Timer_sec>
 8002c92:	4d4f      	ldr	r5, [pc, #316]	; (8002dd0 <MenuSwing+0x1b8>)
		if (key == KEY_NEXT)
 8002c94:	2e02      	cmp	r6, #2
 8002c96:	f995 3000 	ldrsb.w	r3, [r5]
 8002c9a:	d17d      	bne.n	8002d98 <MenuSwing+0x180>
			CountShow++;
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	b25b      	sxtb	r3, r3
			if (CountShow==MAXITEM6) CountShow=0;
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	bf08      	it	eq
 8002ca4:	2300      	moveq	r3, #0
			if (CountShow<0) CountShow=MAXITEM6-1;
 8002ca6:	702b      	strb	r3, [r5, #0]
		if(CountShow == 0)
 8002ca8:	f995 6000 	ldrsb.w	r6, [r5]
 8002cac:	bb5e      	cbnz	r6, 8002d06 <MenuSwing+0xee>
			lcd_set_xy(0,0);
 8002cae:	4631      	mov	r1, r6
 8002cb0:	4630      	mov	r0, r6
 8002cb2:	f7fe fdf1 	bl	8001898 <lcd_set_xy>
			PrintToLCD(itoa_koma(U_OUT,2));
 8002cb6:	4b44      	ldr	r3, [pc, #272]	; (8002dc8 <MenuSwing+0x1b0>)
 8002cb8:	2102      	movs	r1, #2
 8002cba:	8818      	ldrh	r0, [r3, #0]
 8002cbc:	f7fe fafe 	bl	80012bc <itoa_koma>
 8002cc0:	f7fe fe6a 	bl	8001998 <PrintToLCD>
			PrintToLCD("V ");
 8002cc4:	4843      	ldr	r0, [pc, #268]	; (8002dd4 <MenuSwing+0x1bc>)
 8002cc6:	f7fe fe67 	bl	8001998 <PrintToLCD>
			PrintToLCD(itoa(Current));
 8002cca:	4b43      	ldr	r3, [pc, #268]	; (8002dd8 <MenuSwing+0x1c0>)
 8002ccc:	8818      	ldrh	r0, [r3, #0]
 8002cce:	b200      	sxth	r0, r0
 8002cd0:	f7fe fa80 	bl	80011d4 <itoa>
 8002cd4:	f7fe fe60 	bl	8001998 <PrintToLCD>
			PrintToLCD("mA     ");
 8002cd8:	4840      	ldr	r0, [pc, #256]	; (8002ddc <MenuSwing+0x1c4>)
 8002cda:	f7fe fe5d 	bl	8001998 <PrintToLCD>
			lcd_set_xy(6,1);
 8002cde:	2101      	movs	r1, #1
 8002ce0:	2006      	movs	r0, #6
 8002ce2:	f7fe fdd9 	bl	8001898 <lcd_set_xy>
			LcdOutbyNumber(5,1);
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	2005      	movs	r0, #5
 8002cea:	f7fe fdfd 	bl	80018e8 <LcdOutbyNumber>
			if (Status_Out ==1)
 8002cee:	4b3c      	ldr	r3, [pc, #240]	; (8002de0 <MenuSwing+0x1c8>)
 8002cf0:	781f      	ldrb	r7, [r3, #0]
 8002cf2:	2f01      	cmp	r7, #1
 8002cf4:	d158      	bne.n	8002da8 <MenuSwing+0x190>
				lcd_set_xy(7,1);
 8002cf6:	4639      	mov	r1, r7
 8002cf8:	2007      	movs	r0, #7
 8002cfa:	f7fe fdcd 	bl	8001898 <lcd_set_xy>
				LcdOutbyNumber(0,1);//charge
 8002cfe:	4639      	mov	r1, r7
 8002d00:	4630      	mov	r0, r6
				LcdOutbyNumber(2,1);//discharge
 8002d02:	f7fe fdf1 	bl	80018e8 <LcdOutbyNumber>
		if(CountShow == 1)
 8002d06:	f995 6000 	ldrsb.w	r6, [r5]
 8002d0a:	2e01      	cmp	r6, #1
 8002d0c:	d122      	bne.n	8002d54 <MenuSwing+0x13c>
			lcd_set_xy(0,0);
 8002d0e:	2100      	movs	r1, #0
			PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 8002d10:	270a      	movs	r7, #10
			lcd_set_xy(0,0);
 8002d12:	4608      	mov	r0, r1
 8002d14:	f7fe fdc0 	bl	8001898 <lcd_set_xy>
			PrintToLCD(itoa(SettingsData.ChargeTime));
 8002d18:	6920      	ldr	r0, [r4, #16]
 8002d1a:	f7fe fa5b 	bl	80011d4 <itoa>
 8002d1e:	f7fe fe3b 	bl	8001998 <PrintToLCD>
			PrintToLCD("h ");
 8002d22:	4830      	ldr	r0, [pc, #192]	; (8002de4 <MenuSwing+0x1cc>)
 8002d24:	f7fe fe38 	bl	8001998 <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 8002d28:	69a0      	ldr	r0, [r4, #24]
 8002d2a:	4631      	mov	r1, r6
 8002d2c:	fbb0 f0f7 	udiv	r0, r0, r7
 8002d30:	f7fe fac4 	bl	80012bc <itoa_koma>
 8002d34:	f7fe fe30 	bl	8001998 <PrintToLCD>
			PrintToLCD("V ");
 8002d38:	4826      	ldr	r0, [pc, #152]	; (8002dd4 <MenuSwing+0x1bc>)
 8002d3a:	f7fe fe2d 	bl	8001998 <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8002d3e:	6a20      	ldr	r0, [r4, #32]
 8002d40:	4631      	mov	r1, r6
 8002d42:	fbb0 f0f7 	udiv	r0, r0, r7
 8002d46:	f7fe fab9 	bl	80012bc <itoa_koma>
 8002d4a:	f7fe fe25 	bl	8001998 <PrintToLCD>
			PrintToLCD("V     ");
 8002d4e:	4826      	ldr	r0, [pc, #152]	; (8002de8 <MenuSwing+0x1d0>)
 8002d50:	f7fe fe22 	bl	8001998 <PrintToLCD>
		if(CountShow == 2)
 8002d54:	f995 3000 	ldrsb.w	r3, [r5]
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d12c      	bne.n	8002db6 <MenuSwing+0x19e>
			lcd_set_xy(0,0);
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	4608      	mov	r0, r1
 8002d60:	f7fe fd9a 	bl	8001898 <lcd_set_xy>
			PrintToLCD(itoa(SettingsData.Swing_Chrg_time));
 8002d64:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002d66:	f7fe fa35 	bl	80011d4 <itoa>
 8002d6a:	f7fe fe15 	bl	8001998 <PrintToLCD>
			PrintToLCD("s ");
 8002d6e:	481f      	ldr	r0, [pc, #124]	; (8002dec <MenuSwing+0x1d4>)
 8002d70:	f7fe fe12 	bl	8001998 <PrintToLCD>
			PrintToLCD(itoa(SettingsData.Swing_DChrg_time));
 8002d74:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002d76:	f7fe fa2d 	bl	80011d4 <itoa>
 8002d7a:	f7fe fe0d 	bl	8001998 <PrintToLCD>
			PrintToLCD("s      ");
 8002d7e:	481c      	ldr	r0, [pc, #112]	; (8002df0 <MenuSwing+0x1d8>)
 8002d80:	f7fe fe0a 	bl	8001998 <PrintToLCD>
			lcd_set_xy(3,1);
 8002d84:	2003      	movs	r0, #3
 8002d86:	2101      	movs	r1, #1
 8002d88:	f7fe fd86 	bl	8001898 <lcd_set_xy>
			ClockOnLCD_noSec(DischargeTimeSec);
 8002d8c:	4b19      	ldr	r3, [pc, #100]	; (8002df4 <MenuSwing+0x1dc>)
 8002d8e:	6818      	ldr	r0, [r3, #0]
}
 8002d90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			ClockOnLCD_noSec(DischargeTimeSec);
 8002d94:	f7ff bcbe 	b.w	8002714 <ClockOnLCD_noSec>
		if (key == KEY_BACK)
 8002d98:	2e01      	cmp	r6, #1
 8002d9a:	d185      	bne.n	8002ca8 <MenuSwing+0x90>
			CountShow--;
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	b25b      	sxtb	r3, r3
			if (CountShow<0) CountShow=MAXITEM6-1;
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bfb8      	it	lt
 8002da4:	2302      	movlt	r3, #2
 8002da6:	e77e      	b.n	8002ca6 <MenuSwing+0x8e>
				lcd_set_xy(7,1);
 8002da8:	2101      	movs	r1, #1
 8002daa:	2007      	movs	r0, #7
 8002dac:	f7fe fd74 	bl	8001898 <lcd_set_xy>
				LcdOutbyNumber(2,1);//discharge
 8002db0:	2101      	movs	r1, #1
 8002db2:	2002      	movs	r0, #2
 8002db4:	e7a5      	b.n	8002d02 <MenuSwing+0xea>
}
 8002db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002db8:	20000794 	.word	0x20000794
 8002dbc:	20000795 	.word	0x20000795
 8002dc0:	200007b8 	.word	0x200007b8
 8002dc4:	20000154 	.word	0x20000154
 8002dc8:	2000084e 	.word	0x2000084e
 8002dcc:	200007b4 	.word	0x200007b4
 8002dd0:	20000785 	.word	0x20000785
 8002dd4:	08005e49 	.word	0x08005e49
 8002dd8:	2000083e 	.word	0x2000083e
 8002ddc:	08006054 	.word	0x08006054
 8002de0:	20000797 	.word	0x20000797
 8002de4:	08005836 	.word	0x08005836
 8002de8:	08005f57 	.word	0x08005f57
 8002dec:	08005dd7 	.word	0x08005dd7
 8002df0:	08006019 	.word	0x08006019
 8002df4:	2000078c 	.word	0x2000078c

08002df8 <MenuDisCharge>:
	EnterInMenu_Status = 1;
 8002df8:	2101      	movs	r1, #1
{
 8002dfa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (InitiStatus==0)
 8002dfe:	4d89      	ldr	r5, [pc, #548]	; (8003024 <MenuDisCharge+0x22c>)
	EnterInMenu_Status = 1;
 8002e00:	4e89      	ldr	r6, [pc, #548]	; (8003028 <MenuDisCharge+0x230>)
	if (InitiStatus==0)
 8002e02:	782b      	ldrb	r3, [r5, #0]
	EnterInMenu_Status = 1;
 8002e04:	7031      	strb	r1, [r6, #0]
 8002e06:	4a89      	ldr	r2, [pc, #548]	; (800302c <MenuDisCharge+0x234>)
	if (InitiStatus==0)
 8002e08:	b94b      	cbnz	r3, 8002e1e <MenuDisCharge+0x26>
		InitiStatus = 1;
 8002e0a:	7029      	strb	r1, [r5, #0]
		ChargeStatusForTimer = 0;
 8002e0c:	4988      	ldr	r1, [pc, #544]	; (8003030 <MenuDisCharge+0x238>)
		BatteryLow=0;
 8002e0e:	7013      	strb	r3, [r2, #0]
		ChargeStatusForTimer = 0;
 8002e10:	700b      	strb	r3, [r1, #0]
		DisChargeStatusForTimer = 0;
 8002e12:	4988      	ldr	r1, [pc, #544]	; (8003034 <MenuDisCharge+0x23c>)
 8002e14:	700b      	strb	r3, [r1, #0]
		BatteryCapacityDischargeCurrent = 0;
 8002e16:	4988      	ldr	r1, [pc, #544]	; (8003038 <MenuDisCharge+0x240>)
 8002e18:	600b      	str	r3, [r1, #0]
		DischargeTimeSec = 0;
 8002e1a:	4988      	ldr	r1, [pc, #544]	; (800303c <MenuDisCharge+0x244>)
 8002e1c:	600b      	str	r3, [r1, #0]
	U_BatteryTmp = U_OUT;
 8002e1e:	4988      	ldr	r1, [pc, #544]	; (8003040 <MenuDisCharge+0x248>)
 8002e20:	4c88      	ldr	r4, [pc, #544]	; (8003044 <MenuDisCharge+0x24c>)
 8002e22:	880b      	ldrh	r3, [r1, #0]
	if (U_BatteryTmp >=SettingsData.LowVoltage) BatteryLow=0;
 8002e24:	4f88      	ldr	r7, [pc, #544]	; (8003048 <MenuDisCharge+0x250>)
	U_BatteryTmp = U_OUT;
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	8023      	strh	r3, [r4, #0]
	if (U_BatteryTmp >=SettingsData.LowVoltage) BatteryLow=0;
 8002e2a:	69bc      	ldr	r4, [r7, #24]
 8002e2c:	4689      	mov	r9, r1
 8002e2e:	42a3      	cmp	r3, r4
 8002e30:	f0c0 80f0 	bcc.w	8003014 <MenuDisCharge+0x21c>
 8002e34:	2300      	movs	r3, #0
		BatteryLow = 1;
 8002e36:	7013      	strb	r3, [r2, #0]
	if ((time_sec - U_Battery_Timer)>3 && BatteryLow !=0)//was 10
 8002e38:	4984      	ldr	r1, [pc, #528]	; (800304c <MenuDisCharge+0x254>)
 8002e3a:	4b85      	ldr	r3, [pc, #532]	; (8003050 <MenuDisCharge+0x258>)
 8002e3c:	6809      	ldr	r1, [r1, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 8003034 <MenuDisCharge+0x23c>
 8002e44:	1a5b      	subs	r3, r3, r1
 8002e46:	2b03      	cmp	r3, #3
 8002e48:	d904      	bls.n	8002e54 <MenuDisCharge+0x5c>
 8002e4a:	7813      	ldrb	r3, [r2, #0]
 8002e4c:	b113      	cbz	r3, 8002e54 <MenuDisCharge+0x5c>
		DisChargeStatusForTimer = 0;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f888 3000 	strb.w	r3, [r8]
	if (key == KEY_NEXT)
 8002e54:	2802      	cmp	r0, #2
 8002e56:	4c7f      	ldr	r4, [pc, #508]	; (8003054 <MenuDisCharge+0x25c>)
 8002e58:	f040 80c7 	bne.w	8002fea <MenuDisCharge+0x1f2>
    	if (On_off == 0)
 8002e5c:	4b7e      	ldr	r3, [pc, #504]	; (8003058 <MenuDisCharge+0x260>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f040 80c0 	bne.w	8002fe6 <MenuDisCharge+0x1ee>
    		DisChargeStatusForTimer = 1;
 8002e66:	2301      	movs	r3, #1
    		DisChargeStatusForTimer = 0;
 8002e68:	f888 3000 	strb.w	r3, [r8]
	if(CountShow == 0)
 8002e6c:	f994 1000 	ldrsb.w	r1, [r4]
 8002e70:	bb61      	cbnz	r1, 8002ecc <MenuDisCharge+0xd4>
		lcd_set_xy(0,0);
 8002e72:	4608      	mov	r0, r1
 8002e74:	f7fe fd10 	bl	8001898 <lcd_set_xy>
		PrintToLCD(itoa_koma(U_OUT ,2));
 8002e78:	2102      	movs	r1, #2
 8002e7a:	f8b9 0000 	ldrh.w	r0, [r9]
 8002e7e:	f7fe fa1d 	bl	80012bc <itoa_koma>
 8002e82:	f7fe fd89 	bl	8001998 <PrintToLCD>
		PrintToLCD("V ");
 8002e86:	4875      	ldr	r0, [pc, #468]	; (800305c <MenuDisCharge+0x264>)
 8002e88:	f7fe fd86 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa(Current ));
 8002e8c:	4b74      	ldr	r3, [pc, #464]	; (8003060 <MenuDisCharge+0x268>)
 8002e8e:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80030a8 <MenuDisCharge+0x2b0>
 8002e92:	8818      	ldrh	r0, [r3, #0]
 8002e94:	b200      	sxth	r0, r0
 8002e96:	f7fe f99d 	bl	80011d4 <itoa>
 8002e9a:	f7fe fd7d 	bl	8001998 <PrintToLCD>
		PrintToLCD("mA      ");
 8002e9e:	4871      	ldr	r0, [pc, #452]	; (8003064 <MenuDisCharge+0x26c>)
 8002ea0:	f7fe fd7a 	bl	8001998 <PrintToLCD>
		if (On_off ==0)
 8002ea4:	4b6c      	ldr	r3, [pc, #432]	; (8003058 <MenuDisCharge+0x260>)
				lcd_set_xy(7,1);
 8002ea6:	2101      	movs	r1, #1
		if (On_off ==0)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
				lcd_set_xy(7,1);
 8002eaa:	2007      	movs	r0, #7
		if (On_off ==0)
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f040 80a7 	bne.w	8003000 <MenuDisCharge+0x208>
				lcd_set_xy(7,1);
 8002eb2:	f7fe fcf1 	bl	8001898 <lcd_set_xy>
				LcdOutbyNumber(2,1);
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	2002      	movs	r0, #2
						LcdOutbyNumber(3,1);
 8002eba:	f7fe fd15 	bl	80018e8 <LcdOutbyNumber>
			if (Blink_message_counter>10)
 8002ebe:	f899 3000 	ldrb.w	r3, [r9]
 8002ec2:	2b0a      	cmp	r3, #10
				Blink_message_counter = 0;
 8002ec4:	bf84      	itt	hi
 8002ec6:	2300      	movhi	r3, #0
 8002ec8:	f889 3000 	strbhi.w	r3, [r9]
	if(CountShow == 1)
 8002ecc:	f994 9000 	ldrsb.w	r9, [r4]
 8002ed0:	f1b9 0f01 	cmp.w	r9, #1
 8002ed4:	d112      	bne.n	8002efc <MenuDisCharge+0x104>
		lcd_set_xy(0,0);
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	4608      	mov	r0, r1
 8002eda:	f7fe fcdd 	bl	8001898 <lcd_set_xy>
		PrintToLCD("OffWhen Vb<");
 8002ede:	4862      	ldr	r0, [pc, #392]	; (8003068 <MenuDisCharge+0x270>)
 8002ee0:	f7fe fd5a 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa_koma(SettingsData.LowVoltage/10 ,1));
 8002ee4:	230a      	movs	r3, #10
 8002ee6:	69b8      	ldr	r0, [r7, #24]
 8002ee8:	4649      	mov	r1, r9
 8002eea:	fbb0 f0f3 	udiv	r0, r0, r3
 8002eee:	f7fe f9e5 	bl	80012bc <itoa_koma>
 8002ef2:	f7fe fd51 	bl	8001998 <PrintToLCD>
		PrintToLCD("V   ");
 8002ef6:	485d      	ldr	r0, [pc, #372]	; (800306c <MenuDisCharge+0x274>)
 8002ef8:	f7fe fd4e 	bl	8001998 <PrintToLCD>
	if(CountShow == 2)
 8002efc:	f994 3000 	ldrsb.w	r3, [r4]
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d11b      	bne.n	8002f3c <MenuDisCharge+0x144>
		lcd_set_xy(0,0);
 8002f04:	2100      	movs	r1, #0
 8002f06:	4608      	mov	r0, r1
 8002f08:	f7fe fcc6 	bl	8001898 <lcd_set_xy>
		PrintToLCD("P ");
 8002f0c:	4858      	ldr	r0, [pc, #352]	; (8003070 <MenuDisCharge+0x278>)
 8002f0e:	f7fe fd43 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa(SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue/3600 ));
 8002f12:	4b58      	ldr	r3, [pc, #352]	; (8003074 <MenuDisCharge+0x27c>)
 8002f14:	6898      	ldr	r0, [r3, #8]
 8002f16:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002f1a:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f1e:	f7fe f959 	bl	80011d4 <itoa>
 8002f22:	f7fe fd39 	bl	8001998 <PrintToLCD>
		PrintToLCD("mAh     ");
 8002f26:	4854      	ldr	r0, [pc, #336]	; (8003078 <MenuDisCharge+0x280>)
 8002f28:	f7fe fd36 	bl	8001998 <PrintToLCD>
		lcd_set_xy(3,1);
 8002f2c:	2003      	movs	r0, #3
 8002f2e:	2101      	movs	r1, #1
 8002f30:	f7fe fcb2 	bl	8001898 <lcd_set_xy>
		ClockOnLCD_noSec(DischargeTimeSec_Previous);
 8002f34:	4b51      	ldr	r3, [pc, #324]	; (800307c <MenuDisCharge+0x284>)
 8002f36:	6818      	ldr	r0, [r3, #0]
 8002f38:	f7ff fbec 	bl	8002714 <ClockOnLCD_noSec>
	if(CountShow == 3)
 8002f3c:	f994 7000 	ldrsb.w	r7, [r4]
 8002f40:	4c3e      	ldr	r4, [pc, #248]	; (800303c <MenuDisCharge+0x244>)
 8002f42:	2f03      	cmp	r7, #3
 8002f44:	d11a      	bne.n	8002f7c <MenuDisCharge+0x184>
		lcd_set_xy(0,0);
 8002f46:	2100      	movs	r1, #0
 8002f48:	4608      	mov	r0, r1
 8002f4a:	f7fe fca5 	bl	8001898 <lcd_set_xy>
		PrintToLCD("N ");
 8002f4e:	484c      	ldr	r0, [pc, #304]	; (8003080 <MenuDisCharge+0x288>)
 8002f50:	f7fe fd22 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa(BatteryCapacityDischargeCurrent/3600 ));
 8002f54:	4b38      	ldr	r3, [pc, #224]	; (8003038 <MenuDisCharge+0x240>)
 8002f56:	6818      	ldr	r0, [r3, #0]
 8002f58:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002f5c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f60:	f7fe f938 	bl	80011d4 <itoa>
 8002f64:	f7fe fd18 	bl	8001998 <PrintToLCD>
		PrintToLCD("mAH     ");
 8002f68:	4846      	ldr	r0, [pc, #280]	; (8003084 <MenuDisCharge+0x28c>)
 8002f6a:	f7fe fd15 	bl	8001998 <PrintToLCD>
		lcd_set_xy(3,1);
 8002f6e:	4638      	mov	r0, r7
 8002f70:	2101      	movs	r1, #1
 8002f72:	f7fe fc91 	bl	8001898 <lcd_set_xy>
		ClockOnLCD_noSec(DischargeTimeSec);
 8002f76:	6820      	ldr	r0, [r4, #0]
 8002f78:	f7ff fbcc 	bl	8002714 <ClockOnLCD_noSec>
	logDebugD("Init status: ",InitiStatus,0);
 8002f7c:	4842      	ldr	r0, [pc, #264]	; (8003088 <MenuDisCharge+0x290>)
 8002f7e:	f002 f80b 	bl	8004f98 <printToBufferWithoutEndUART1>
 8002f82:	7829      	ldrb	r1, [r5, #0]
 8002f84:	2200      	movs	r2, #0
 8002f86:	4841      	ldr	r0, [pc, #260]	; (800308c <MenuDisCharge+0x294>)
 8002f88:	f002 f84a 	bl	8005020 <printToBufferUART1D>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 8002f8c:	483e      	ldr	r0, [pc, #248]	; (8003088 <MenuDisCharge+0x290>)
 8002f8e:	f002 f803 	bl	8004f98 <printToBufferWithoutEndUART1>
 8002f92:	7831      	ldrb	r1, [r6, #0]
 8002f94:	2200      	movs	r2, #0
 8002f96:	483e      	ldr	r0, [pc, #248]	; (8003090 <MenuDisCharge+0x298>)
 8002f98:	f002 f842 	bl	8005020 <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 8002f9c:	483a      	ldr	r0, [pc, #232]	; (8003088 <MenuDisCharge+0x290>)
 8002f9e:	f001 fffb 	bl	8004f98 <printToBufferWithoutEndUART1>
 8002fa2:	4b23      	ldr	r3, [pc, #140]	; (8003030 <MenuDisCharge+0x238>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	7819      	ldrb	r1, [r3, #0]
 8002fa8:	483a      	ldr	r0, [pc, #232]	; (8003094 <MenuDisCharge+0x29c>)
 8002faa:	f002 f839 	bl	8005020 <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 8002fae:	4836      	ldr	r0, [pc, #216]	; (8003088 <MenuDisCharge+0x290>)
 8002fb0:	f001 fff2 	bl	8004f98 <printToBufferWithoutEndUART1>
 8002fb4:	4b38      	ldr	r3, [pc, #224]	; (8003098 <MenuDisCharge+0x2a0>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	6819      	ldr	r1, [r3, #0]
 8002fba:	4838      	ldr	r0, [pc, #224]	; (800309c <MenuDisCharge+0x2a4>)
 8002fbc:	f002 f830 	bl	8005020 <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 8002fc0:	4831      	ldr	r0, [pc, #196]	; (8003088 <MenuDisCharge+0x290>)
 8002fc2:	f001 ffe9 	bl	8004f98 <printToBufferWithoutEndUART1>
 8002fc6:	f898 1000 	ldrb.w	r1, [r8]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	4834      	ldr	r0, [pc, #208]	; (80030a0 <MenuDisCharge+0x2a8>)
 8002fce:	f002 f827 	bl	8005020 <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 8002fd2:	482d      	ldr	r0, [pc, #180]	; (8003088 <MenuDisCharge+0x290>)
 8002fd4:	f001 ffe0 	bl	8004f98 <printToBufferWithoutEndUART1>
 8002fd8:	6821      	ldr	r1, [r4, #0]
 8002fda:	2200      	movs	r2, #0
}
 8002fdc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 8002fe0:	4830      	ldr	r0, [pc, #192]	; (80030a4 <MenuDisCharge+0x2ac>)
 8002fe2:	f002 b81d 	b.w	8005020 <printToBufferUART1D>
    		DisChargeStatusForTimer = 0;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	e73e      	b.n	8002e68 <MenuDisCharge+0x70>
	if (key == KEY_BACK)
 8002fea:	2801      	cmp	r0, #1
 8002fec:	f47f af3e 	bne.w	8002e6c <MenuDisCharge+0x74>
		CountShow--;
 8002ff0:	7823      	ldrb	r3, [r4, #0]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b25b      	sxtb	r3, r3
		if (CountShow<0) CountShow=MAXITEM2-1;
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	bfb8      	it	lt
 8002ffa:	2303      	movlt	r3, #3
 8002ffc:	7023      	strb	r3, [r4, #0]
 8002ffe:	e735      	b.n	8002e6c <MenuDisCharge+0x74>
				if (Blink_message_counter<=5)
 8003000:	f899 3000 	ldrb.w	r3, [r9]
 8003004:	2b05      	cmp	r3, #5
 8003006:	f67f af54 	bls.w	8002eb2 <MenuDisCharge+0xba>
						lcd_set_xy(7,1);
 800300a:	f7fe fc45 	bl	8001898 <lcd_set_xy>
						LcdOutbyNumber(3,1);
 800300e:	2101      	movs	r1, #1
 8003010:	2003      	movs	r0, #3
 8003012:	e752      	b.n	8002eba <MenuDisCharge+0xc2>
		if (BatteryLow == 0) U_Battery_Timer = time_sec;
 8003014:	7813      	ldrb	r3, [r2, #0]
 8003016:	b91b      	cbnz	r3, 8003020 <MenuDisCharge+0x228>
 8003018:	4b0d      	ldr	r3, [pc, #52]	; (8003050 <MenuDisCharge+0x258>)
 800301a:	6819      	ldr	r1, [r3, #0]
 800301c:	4b0b      	ldr	r3, [pc, #44]	; (800304c <MenuDisCharge+0x254>)
 800301e:	6019      	str	r1, [r3, #0]
		BatteryLow = 1;
 8003020:	2301      	movs	r3, #1
 8003022:	e708      	b.n	8002e36 <MenuDisCharge+0x3e>
 8003024:	20000795 	.word	0x20000795
 8003028:	20000794 	.word	0x20000794
 800302c:	2000077c 	.word	0x2000077c
 8003030:	2000077e 	.word	0x2000077e
 8003034:	2000078a 	.word	0x2000078a
 8003038:	20000774 	.word	0x20000774
 800303c:	2000078c 	.word	0x2000078c
 8003040:	2000084e 	.word	0x2000084e
 8003044:	200007bc 	.word	0x200007bc
 8003048:	20000154 	.word	0x20000154
 800304c:	200007c0 	.word	0x200007c0
 8003050:	200007cc 	.word	0x200007cc
 8003054:	20000785 	.word	0x20000785
 8003058:	20000796 	.word	0x20000796
 800305c:	08005e49 	.word	0x08005e49
 8003060:	2000083e 	.word	0x2000083e
 8003064:	08005e19 	.word	0x08005e19
 8003068:	08005e22 	.word	0x08005e22
 800306c:	08005f15 	.word	0x08005f15
 8003070:	08006066 	.word	0x08006066
 8003074:	200000f4 	.word	0x200000f4
 8003078:	08005e2e 	.word	0x08005e2e
 800307c:	20000790 	.word	0x20000790
 8003080:	08005d2f 	.word	0x08005d2f
 8003084:	08006069 	.word	0x08006069
 8003088:	08005a98 	.word	0x08005a98
 800308c:	08005e37 	.word	0x08005e37
 8003090:	08006083 	.word	0x08006083
 8003094:	08006098 	.word	0x08006098
 8003098:	20000780 	.word	0x20000780
 800309c:	080060ad 	.word	0x080060ad
 80030a0:	080060d5 	.word	0x080060d5
 80030a4:	080060ed 	.word	0x080060ed
 80030a8:	2000077d 	.word	0x2000077d

080030ac <MenuCheckingCapacity>:
{
 80030ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (EnterInMenu_Status == 0)
 80030b0:	4a7e      	ldr	r2, [pc, #504]	; (80032ac <MenuCheckingCapacity+0x200>)
{
 80030b2:	b085      	sub	sp, #20
	if (EnterInMenu_Status == 0)
 80030b4:	7813      	ldrb	r3, [r2, #0]
{
 80030b6:	4683      	mov	fp, r0
	if (EnterInMenu_Status == 0)
 80030b8:	f003 08ff 	and.w	r8, r3, #255	; 0xff
 80030bc:	9201      	str	r2, [sp, #4]
 80030be:	f8df a238 	ldr.w	sl, [pc, #568]	; 80032f8 <MenuCheckingCapacity+0x24c>
 80030c2:	4e7b      	ldr	r6, [pc, #492]	; (80032b0 <MenuCheckingCapacity+0x204>)
 80030c4:	f8df 9234 	ldr.w	r9, [pc, #564]	; 80032fc <MenuCheckingCapacity+0x250>
 80030c8:	4d7a      	ldr	r5, [pc, #488]	; (80032b4 <MenuCheckingCapacity+0x208>)
 80030ca:	4f7b      	ldr	r7, [pc, #492]	; (80032b8 <MenuCheckingCapacity+0x20c>)
 80030cc:	4c7b      	ldr	r4, [pc, #492]	; (80032bc <MenuCheckingCapacity+0x210>)
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d13e      	bne.n	8003150 <MenuCheckingCapacity+0xa4>
		if (U_PS < (SettingsData.MaxVoltage+DELTA_UPS_BAT_MAX))
 80030d2:	4b7b      	ldr	r3, [pc, #492]	; (80032c0 <MenuCheckingCapacity+0x214>)
 80030d4:	881a      	ldrh	r2, [r3, #0]
 80030d6:	4b7b      	ldr	r3, [pc, #492]	; (80032c4 <MenuCheckingCapacity+0x218>)
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	3305      	adds	r3, #5
 80030dc:	4293      	cmp	r3, r2
 80030de:	d915      	bls.n	800310c <MenuCheckingCapacity+0x60>
			lcd_set_xy(0,0);
 80030e0:	4641      	mov	r1, r8
 80030e2:	4640      	mov	r0, r8
 80030e4:	f7fe fbd8 	bl	8001898 <lcd_set_xy>
			PrintToLCD("U(ps)<U(bat.max)");
 80030e8:	4877      	ldr	r0, [pc, #476]	; (80032c8 <MenuCheckingCapacity+0x21c>)
 80030ea:	f7fe fc55 	bl	8001998 <PrintToLCD>
			delay_ms(2000);
 80030ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80030f2:	f7fd ff53 	bl	8000f9c <delay_ms>
			lcd_set_xy(0,0);
 80030f6:	4641      	mov	r1, r8
 80030f8:	4640      	mov	r0, r8
 80030fa:	f7fe fbcd 	bl	8001898 <lcd_set_xy>
			PrintToLCD("UP U(ps)        ");
 80030fe:	4873      	ldr	r0, [pc, #460]	; (80032cc <MenuCheckingCapacity+0x220>)
 8003100:	f7fe fc4a 	bl	8001998 <PrintToLCD>
			delay_ms(3000);
 8003104:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003108:	f7fd ff48 	bl	8000f9c <delay_ms>
		EnterInMenu_Status = 1;
 800310c:	f04f 0801 	mov.w	r8, #1
		ChargeStatusForTimer = 0;
 8003110:	2100      	movs	r1, #0
		EnterInMenu_Status = 1;
 8003112:	9b01      	ldr	r3, [sp, #4]
		lcd_set_xy(0,0);
 8003114:	4608      	mov	r0, r1
		EnterInMenu_Status = 1;
 8003116:	f883 8000 	strb.w	r8, [r3]
		DisChargeStatusForTimer = 0;
 800311a:	4b6d      	ldr	r3, [pc, #436]	; (80032d0 <MenuCheckingCapacity+0x224>)
		ChargeStatusForTimer = 0;
 800311c:	f88a 1000 	strb.w	r1, [sl]
		DisChargeStatusForTimer = 0;
 8003120:	7019      	strb	r1, [r3, #0]
		DischargeTimeSec_Previous = 0;
 8003122:	4b6c      	ldr	r3, [pc, #432]	; (80032d4 <MenuCheckingCapacity+0x228>)
		ChargeTimeSec = 0;
 8003124:	6031      	str	r1, [r6, #0]
		DischargeTimeSec = 0;
 8003126:	f8c9 1000 	str.w	r1, [r9]
		DischargeTimeSec_Previous = 0;
 800312a:	6019      	str	r1, [r3, #0]
		ChargeDischargeStatus = CHARGEs;
 800312c:	4b6a      	ldr	r3, [pc, #424]	; (80032d8 <MenuCheckingCapacity+0x22c>)
		BatteryCapacityCharge = 0;
 800312e:	6029      	str	r1, [r5, #0]
		ChargeDischargeStatus = CHARGEs;
 8003130:	f883 8000 	strb.w	r8, [r3]
		BatteryCapacityDischargeCurrent = 0;
 8003134:	6039      	str	r1, [r7, #0]
		ChargeStatusForTimer = 1;
 8003136:	f88a 8000 	strb.w	r8, [sl]
		lcd_set_xy(0,0);
 800313a:	f7fe fbad 	bl	8001898 <lcd_set_xy>
		PrintToLCD("Testing Battery.");
 800313e:	4867      	ldr	r0, [pc, #412]	; (80032dc <MenuCheckingCapacity+0x230>)
 8003140:	f7fe fc2a 	bl	8001998 <PrintToLCD>
		delay_ms(1000);
 8003144:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003148:	f7fd ff28 	bl	8000f9c <delay_ms>
		CheckingCapacityCounter = 1;
 800314c:	f884 8000 	strb.w	r8, [r4]
	if (CheckingCapacityCounter<=3)
 8003150:	f994 3000 	ldrsb.w	r3, [r4]
 8003154:	2b03      	cmp	r3, #3
 8003156:	f300 81f1 	bgt.w	800353c <MenuCheckingCapacity+0x490>
		if (Module16(Current)>5)
 800315a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003300 <MenuCheckingCapacity+0x254>
 800315e:	f8b8 0000 	ldrh.w	r0, [r8]
 8003162:	b200      	sxth	r0, r0
 8003164:	f7fe f912 	bl	800138c <Module16>
 8003168:	2805      	cmp	r0, #5
 800316a:	f8cd 8008 	str.w	r8, [sp, #8]
 800316e:	f340 819a 	ble.w	80034a6 <MenuCheckingCapacity+0x3fa>
			if (U_OUT < SettingsData.LowVoltage && ChargeDischargeStatus == DISCHARGEs  && TimerForReadyMeasurement_ms>1000)
 8003172:	4b5b      	ldr	r3, [pc, #364]	; (80032e0 <MenuCheckingCapacity+0x234>)
 8003174:	4a53      	ldr	r2, [pc, #332]	; (80032c4 <MenuCheckingCapacity+0x218>)
 8003176:	8819      	ldrh	r1, [r3, #0]
 8003178:	6990      	ldr	r0, [r2, #24]
 800317a:	4690      	mov	r8, r2
 800317c:	4288      	cmp	r0, r1
 800317e:	9303      	str	r3, [sp, #12]
 8003180:	d926      	bls.n	80031d0 <MenuCheckingCapacity+0x124>
 8003182:	4b55      	ldr	r3, [pc, #340]	; (80032d8 <MenuCheckingCapacity+0x22c>)
 8003184:	781a      	ldrb	r2, [r3, #0]
 8003186:	2a02      	cmp	r2, #2
 8003188:	d122      	bne.n	80031d0 <MenuCheckingCapacity+0x124>
 800318a:	4b56      	ldr	r3, [pc, #344]	; (80032e4 <MenuCheckingCapacity+0x238>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003192:	d91d      	bls.n	80031d0 <MenuCheckingCapacity+0x124>
				DisChargeStatusForTimer = 0;
 8003194:	2300      	movs	r3, #0
 8003196:	494e      	ldr	r1, [pc, #312]	; (80032d0 <MenuCheckingCapacity+0x224>)
 8003198:	700b      	strb	r3, [r1, #0]
				if (BatteryCapacityDischargeCurrent/3600 > 100)
 800319a:	6839      	ldr	r1, [r7, #0]
 800319c:	4b52      	ldr	r3, [pc, #328]	; (80032e8 <MenuCheckingCapacity+0x23c>)
 800319e:	4299      	cmp	r1, r3
 80031a0:	d904      	bls.n	80031ac <MenuCheckingCapacity+0x100>
					MenuTraining_WriteInLOG(BatteryCapacityDischargeCurrent,DischargeTimeSec,DISCHARGE_l);
 80031a2:	6838      	ldr	r0, [r7, #0]
 80031a4:	f8d9 1000 	ldr.w	r1, [r9]
 80031a8:	f7fe ff14 	bl	8001fd4 <MenuTraining_WriteInLOG>
				DischargeTimeSec_Previous = DischargeTimeSec;
 80031ac:	f8d9 2000 	ldr.w	r2, [r9]
 80031b0:	4b48      	ldr	r3, [pc, #288]	; (80032d4 <MenuCheckingCapacity+0x228>)
 80031b2:	601a      	str	r2, [r3, #0]
				SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue = BatteryCapacityDischargeCurrent;
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	4b4d      	ldr	r3, [pc, #308]	; (80032ec <MenuCheckingCapacity+0x240>)
 80031b8:	609a      	str	r2, [r3, #8]
				ChargeStatusForTimer = 1;
 80031ba:	2201      	movs	r2, #1
				BatteryCapacityCharge = 0;
 80031bc:	2300      	movs	r3, #0
				ChargeStatusForTimer = 1;
 80031be:	f88a 2000 	strb.w	r2, [sl]
				BatteryCapacityCharge = 0;
 80031c2:	602b      	str	r3, [r5, #0]
				ChargeTimeSec = 0;
 80031c4:	6033      	str	r3, [r6, #0]
				CheckingCapacityCounter ++;
 80031c6:	7823      	ldrb	r3, [r4, #0]
 80031c8:	4413      	add	r3, r2
 80031ca:	7023      	strb	r3, [r4, #0]
				ChargeDischargeStatus = CHARGEs;
 80031cc:	4b42      	ldr	r3, [pc, #264]	; (80032d8 <MenuCheckingCapacity+0x22c>)
 80031ce:	701a      	strb	r2, [r3, #0]
			if (((U_OUT > SettingsData.MaxVoltage && ChargeDischargeStatus == CHARGEs  && TimerForReadyMeasurement_ms>1000) || (ChargeTimeSec > ChargeDurationSec && ChargeDischargeStatus == CHARGEs))&&CheckingCapacityCounter<3)
 80031d0:	4b43      	ldr	r3, [pc, #268]	; (80032e0 <MenuCheckingCapacity+0x234>)
 80031d2:	f8d8 2020 	ldr.w	r2, [r8, #32]
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d208      	bcs.n	80031ee <MenuCheckingCapacity+0x142>
 80031dc:	4b3e      	ldr	r3, [pc, #248]	; (80032d8 <MenuCheckingCapacity+0x22c>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d104      	bne.n	80031ee <MenuCheckingCapacity+0x142>
 80031e4:	4b3f      	ldr	r3, [pc, #252]	; (80032e4 <MenuCheckingCapacity+0x238>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031ec:	d808      	bhi.n	8003200 <MenuCheckingCapacity+0x154>
 80031ee:	4b40      	ldr	r3, [pc, #256]	; (80032f0 <MenuCheckingCapacity+0x244>)
 80031f0:	6832      	ldr	r2, [r6, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d920      	bls.n	800323a <MenuCheckingCapacity+0x18e>
 80031f8:	4b37      	ldr	r3, [pc, #220]	; (80032d8 <MenuCheckingCapacity+0x22c>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d11c      	bne.n	800323a <MenuCheckingCapacity+0x18e>
 8003200:	f994 3000 	ldrsb.w	r3, [r4]
 8003204:	2b02      	cmp	r3, #2
 8003206:	dc18      	bgt.n	800323a <MenuCheckingCapacity+0x18e>
				ChargeStatusForTimer = 0;
 8003208:	2300      	movs	r3, #0
 800320a:	f88a 3000 	strb.w	r3, [sl]
				if (BatteryCapacityCharge/3600 > 100)
 800320e:	682a      	ldr	r2, [r5, #0]
 8003210:	4b35      	ldr	r3, [pc, #212]	; (80032e8 <MenuCheckingCapacity+0x23c>)
 8003212:	429a      	cmp	r2, r3
 8003214:	d904      	bls.n	8003220 <MenuCheckingCapacity+0x174>
					MenuTraining_WriteInLOG(BatteryCapacityCharge,ChargeTimeSec,CHARGE_H);
 8003216:	6828      	ldr	r0, [r5, #0]
 8003218:	2201      	movs	r2, #1
 800321a:	6831      	ldr	r1, [r6, #0]
 800321c:	f7fe feda 	bl	8001fd4 <MenuTraining_WriteInLOG>
				DisChargeStatusForTimer = 1;
 8003220:	2301      	movs	r3, #1
 8003222:	4a2b      	ldr	r2, [pc, #172]	; (80032d0 <MenuCheckingCapacity+0x224>)
 8003224:	7013      	strb	r3, [r2, #0]
				BatteryCapacityDischargeCurrent = 0;
 8003226:	2300      	movs	r3, #0
				ChargeDischargeStatus = DISCHARGEs;
 8003228:	2202      	movs	r2, #2
				BatteryCapacityDischargeCurrent = 0;
 800322a:	603b      	str	r3, [r7, #0]
				DischargeTimeSec = 0;
 800322c:	f8c9 3000 	str.w	r3, [r9]
				CheckingCapacityCounter ++;
 8003230:	7823      	ldrb	r3, [r4, #0]
 8003232:	3301      	adds	r3, #1
 8003234:	7023      	strb	r3, [r4, #0]
				ChargeDischargeStatus = DISCHARGEs;
 8003236:	4b28      	ldr	r3, [pc, #160]	; (80032d8 <MenuCheckingCapacity+0x22c>)
 8003238:	701a      	strb	r2, [r3, #0]
			if (((U_OUT > SettingsData.MaxVoltage && ChargeDischargeStatus == CHARGEs  && TimerForReadyMeasurement_ms>1000) || (ChargeTimeSec > ChargeDurationSec && ChargeDischargeStatus == CHARGEs))&&CheckingCapacityCounter>=3)
 800323a:	4b29      	ldr	r3, [pc, #164]	; (80032e0 <MenuCheckingCapacity+0x234>)
 800323c:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8003240:	881b      	ldrh	r3, [r3, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d208      	bcs.n	8003258 <MenuCheckingCapacity+0x1ac>
 8003246:	4b24      	ldr	r3, [pc, #144]	; (80032d8 <MenuCheckingCapacity+0x22c>)
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d104      	bne.n	8003258 <MenuCheckingCapacity+0x1ac>
 800324e:	4b25      	ldr	r3, [pc, #148]	; (80032e4 <MenuCheckingCapacity+0x238>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003256:	d808      	bhi.n	800326a <MenuCheckingCapacity+0x1be>
 8003258:	4b25      	ldr	r3, [pc, #148]	; (80032f0 <MenuCheckingCapacity+0x244>)
 800325a:	6832      	ldr	r2, [r6, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d950      	bls.n	8003304 <MenuCheckingCapacity+0x258>
 8003262:	4b1d      	ldr	r3, [pc, #116]	; (80032d8 <MenuCheckingCapacity+0x22c>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d14c      	bne.n	8003304 <MenuCheckingCapacity+0x258>
 800326a:	f994 3000 	ldrsb.w	r3, [r4]
 800326e:	2b02      	cmp	r3, #2
 8003270:	dd48      	ble.n	8003304 <MenuCheckingCapacity+0x258>
				ChargeStatusForTimer = 0;
 8003272:	2300      	movs	r3, #0
				DisChargeStatusForTimer = 0;
 8003274:	4a16      	ldr	r2, [pc, #88]	; (80032d0 <MenuCheckingCapacity+0x224>)
				ChargeStatusForTimer = 0;
 8003276:	f88a 3000 	strb.w	r3, [sl]
				DisChargeStatusForTimer = 0;
 800327a:	7013      	strb	r3, [r2, #0]
				if (BatteryCapacityCharge/3600 > 100)
 800327c:	682a      	ldr	r2, [r5, #0]
 800327e:	4b1a      	ldr	r3, [pc, #104]	; (80032e8 <MenuCheckingCapacity+0x23c>)
 8003280:	429a      	cmp	r2, r3
 8003282:	d904      	bls.n	800328e <MenuCheckingCapacity+0x1e2>
					MenuTraining_WriteInLOG(BatteryCapacityCharge,ChargeTimeSec,CHARGE_H);
 8003284:	6828      	ldr	r0, [r5, #0]
 8003286:	2201      	movs	r2, #1
 8003288:	6831      	ldr	r1, [r6, #0]
 800328a:	f7fe fea3 	bl	8001fd4 <MenuTraining_WriteInLOG>
				CountShow = 2;
 800328e:	2202      	movs	r2, #2
				CheckingCapacityCounter ++;
 8003290:	7823      	ldrb	r3, [r4, #0]
			if (key == KEY_NEXT)
 8003292:	4593      	cmp	fp, r2
				CheckingCapacityCounter ++;
 8003294:	f103 0301 	add.w	r3, r3, #1
 8003298:	7023      	strb	r3, [r4, #0]
				CountShow = 2;
 800329a:	4b16      	ldr	r3, [pc, #88]	; (80032f4 <MenuCheckingCapacity+0x248>)
 800329c:	701a      	strb	r2, [r3, #0]
			if (key == KEY_NEXT)
 800329e:	f040 80ee 	bne.w	800347e <MenuCheckingCapacity+0x3d2>
				if (CountShow<0) CountShow=MAX_SCREENS__MENU_CAPACITY-1;
 80032a2:	2203      	movs	r2, #3
 80032a4:	4b13      	ldr	r3, [pc, #76]	; (80032f4 <MenuCheckingCapacity+0x248>)
 80032a6:	701a      	strb	r2, [r3, #0]
 80032a8:	e038      	b.n	800331c <MenuCheckingCapacity+0x270>
 80032aa:	bf00      	nop
 80032ac:	20000794 	.word	0x20000794
 80032b0:	20000780 	.word	0x20000780
 80032b4:	20000770 	.word	0x20000770
 80032b8:	20000774 	.word	0x20000774
 80032bc:	20000784 	.word	0x20000784
 80032c0:	20000854 	.word	0x20000854
 80032c4:	20000154 	.word	0x20000154
 80032c8:	08006021 	.word	0x08006021
 80032cc:	08006032 	.word	0x08006032
 80032d0:	2000078a 	.word	0x2000078a
 80032d4:	20000790 	.word	0x20000790
 80032d8:	20000270 	.word	0x20000270
 80032dc:	08006043 	.word	0x08006043
 80032e0:	2000084e 	.word	0x2000084e
 80032e4:	200007b4 	.word	0x200007b4
 80032e8:	00058c4f 	.word	0x00058c4f
 80032ec:	200000f4 	.word	0x200000f4
 80032f0:	200009fc 	.word	0x200009fc
 80032f4:	20000785 	.word	0x20000785
 80032f8:	2000077e 	.word	0x2000077e
 80032fc:	2000078c 	.word	0x2000078c
 8003300:	2000083e 	.word	0x2000083e
			if (key == KEY_NEXT)
 8003304:	f1bb 0f02 	cmp.w	fp, #2
 8003308:	f040 80b9 	bne.w	800347e <MenuCheckingCapacity+0x3d2>
				CountShow++;
 800330c:	4ac6      	ldr	r2, [pc, #792]	; (8003628 <MenuCheckingCapacity+0x57c>)
 800330e:	7813      	ldrb	r3, [r2, #0]
 8003310:	3301      	adds	r3, #1
 8003312:	b25b      	sxtb	r3, r3
				if (CountShow==MAX_SCREENS__MENU_CAPACITY) CountShow=0;
 8003314:	2b04      	cmp	r3, #4
 8003316:	bf08      	it	eq
 8003318:	2300      	moveq	r3, #0
 800331a:	7013      	strb	r3, [r2, #0]
			if(CountShow == 0)
 800331c:	4cc2      	ldr	r4, [pc, #776]	; (8003628 <MenuCheckingCapacity+0x57c>)
 800331e:	f994 b000 	ldrsb.w	fp, [r4]
 8003322:	f1bb 0f00 	cmp.w	fp, #0
 8003326:	d12e      	bne.n	8003386 <MenuCheckingCapacity+0x2da>
				lcd_set_xy(0,0);
 8003328:	4659      	mov	r1, fp
 800332a:	4658      	mov	r0, fp
 800332c:	f7fe fab4 	bl	8001898 <lcd_set_xy>
				PrintToLCD(itoa_koma(U_OUT,2));
 8003330:	9b03      	ldr	r3, [sp, #12]
 8003332:	2102      	movs	r1, #2
 8003334:	8818      	ldrh	r0, [r3, #0]
 8003336:	f7fd ffc1 	bl	80012bc <itoa_koma>
 800333a:	f7fe fb2d 	bl	8001998 <PrintToLCD>
				PrintToLCD("V ");
 800333e:	48bb      	ldr	r0, [pc, #748]	; (800362c <MenuCheckingCapacity+0x580>)
 8003340:	f7fe fb2a 	bl	8001998 <PrintToLCD>
				PrintToLCD(itoa(Current));
 8003344:	9b02      	ldr	r3, [sp, #8]
 8003346:	8818      	ldrh	r0, [r3, #0]
 8003348:	b200      	sxth	r0, r0
 800334a:	f7fd ff43 	bl	80011d4 <itoa>
 800334e:	f7fe fb23 	bl	8001998 <PrintToLCD>
				PrintToLCD("mA     ");
 8003352:	48b7      	ldr	r0, [pc, #732]	; (8003630 <MenuCheckingCapacity+0x584>)
 8003354:	f7fe fb20 	bl	8001998 <PrintToLCD>
				lcd_set_xy(6,1);
 8003358:	2101      	movs	r1, #1
 800335a:	2006      	movs	r0, #6
 800335c:	f7fe fa9c 	bl	8001898 <lcd_set_xy>
				LcdOutbyNumber(4,1);
 8003360:	2101      	movs	r1, #1
 8003362:	2004      	movs	r0, #4
 8003364:	f7fe fac0 	bl	80018e8 <LcdOutbyNumber>
				if (Status_Out ==1)
 8003368:	4bb2      	ldr	r3, [pc, #712]	; (8003634 <MenuCheckingCapacity+0x588>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b01      	cmp	r3, #1
 800336e:	f040 8093 	bne.w	8003498 <MenuCheckingCapacity+0x3ec>
					lcd_set_xy(7,1);
 8003372:	4619      	mov	r1, r3
 8003374:	2007      	movs	r0, #7
 8003376:	9302      	str	r3, [sp, #8]
 8003378:	f7fe fa8e 	bl	8001898 <lcd_set_xy>
					LcdOutbyNumber(0,1);//charge
 800337c:	9b02      	ldr	r3, [sp, #8]
 800337e:	4658      	mov	r0, fp
 8003380:	4619      	mov	r1, r3
					LcdOutbyNumber(2,1);//discharge
 8003382:	f7fe fab1 	bl	80018e8 <LcdOutbyNumber>
			if(CountShow == 1)
 8003386:	f994 b000 	ldrsb.w	fp, [r4]
 800338a:	f1bb 0f01 	cmp.w	fp, #1
 800338e:	d127      	bne.n	80033e0 <MenuCheckingCapacity+0x334>
				lcd_set_xy(0,0);
 8003390:	2100      	movs	r1, #0
 8003392:	4608      	mov	r0, r1
 8003394:	f7fe fa80 	bl	8001898 <lcd_set_xy>
				PrintToLCD(itoa(SettingsData.ChargeTime));
 8003398:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800339c:	f7fd ff1a 	bl	80011d4 <itoa>
 80033a0:	f7fe fafa 	bl	8001998 <PrintToLCD>
				PrintToLCD("h ");
 80033a4:	48a4      	ldr	r0, [pc, #656]	; (8003638 <MenuCheckingCapacity+0x58c>)
 80033a6:	f7fe faf7 	bl	8001998 <PrintToLCD>
				PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 80033aa:	230a      	movs	r3, #10
 80033ac:	f8d8 0018 	ldr.w	r0, [r8, #24]
 80033b0:	4659      	mov	r1, fp
 80033b2:	fbb0 f0f3 	udiv	r0, r0, r3
 80033b6:	9302      	str	r3, [sp, #8]
 80033b8:	f7fd ff80 	bl	80012bc <itoa_koma>
 80033bc:	f7fe faec 	bl	8001998 <PrintToLCD>
				PrintToLCD("V ");
 80033c0:	489a      	ldr	r0, [pc, #616]	; (800362c <MenuCheckingCapacity+0x580>)
 80033c2:	f7fe fae9 	bl	8001998 <PrintToLCD>
				PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 80033c6:	4659      	mov	r1, fp
 80033c8:	f8d8 0020 	ldr.w	r0, [r8, #32]
			PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 80033cc:	9b02      	ldr	r3, [sp, #8]
 80033ce:	fbb0 f0f3 	udiv	r0, r0, r3
 80033d2:	f7fd ff73 	bl	80012bc <itoa_koma>
 80033d6:	f7fe fadf 	bl	8001998 <PrintToLCD>
			PrintToLCD("V     ");
 80033da:	4898      	ldr	r0, [pc, #608]	; (800363c <MenuCheckingCapacity+0x590>)
 80033dc:	f7fe fadc 	bl	8001998 <PrintToLCD>
		if(CountShow == 2)
 80033e0:	f994 8000 	ldrsb.w	r8, [r4]
 80033e4:	f1b8 0f02 	cmp.w	r8, #2
 80033e8:	d122      	bne.n	8003430 <MenuCheckingCapacity+0x384>
			lcd_set_xy(0,0);
 80033ea:	2100      	movs	r1, #0
 80033ec:	4608      	mov	r0, r1
 80033ee:	f7fe fa53 	bl	8001898 <lcd_set_xy>
			LcdOutbyNumber(2,1);//discharge
 80033f2:	2101      	movs	r1, #1
 80033f4:	4640      	mov	r0, r8
 80033f6:	f7fe fa77 	bl	80018e8 <LcdOutbyNumber>
			lcd_set_xy(1,0);
 80033fa:	2100      	movs	r1, #0
 80033fc:	2001      	movs	r0, #1
 80033fe:	f7fe fa4b 	bl	8001898 <lcd_set_xy>
			PrintToLCD(" ");
 8003402:	488f      	ldr	r0, [pc, #572]	; (8003640 <MenuCheckingCapacity+0x594>)
 8003404:	f7fe fac8 	bl	8001998 <PrintToLCD>
			PrintToLCD(itoa(BatteryCapacityDischargeCurrent/3600));
 8003408:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800340c:	6838      	ldr	r0, [r7, #0]
 800340e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003412:	f7fd fedf 	bl	80011d4 <itoa>
 8003416:	f7fe fabf 	bl	8001998 <PrintToLCD>
			PrintToLCD("mAH      ");
 800341a:	488a      	ldr	r0, [pc, #552]	; (8003644 <MenuCheckingCapacity+0x598>)
 800341c:	f7fe fabc 	bl	8001998 <PrintToLCD>
			lcd_set_xy(3,1);
 8003420:	2003      	movs	r0, #3
 8003422:	2101      	movs	r1, #1
 8003424:	f7fe fa38 	bl	8001898 <lcd_set_xy>
			ClockOnLCD_noSec(DischargeTimeSec);
 8003428:	f8d9 0000 	ldr.w	r0, [r9]
 800342c:	f7ff f972 	bl	8002714 <ClockOnLCD_noSec>
		if(CountShow == 3)
 8003430:	f994 4000 	ldrsb.w	r4, [r4]
 8003434:	2c03      	cmp	r4, #3
 8003436:	d142      	bne.n	80034be <MenuCheckingCapacity+0x412>
			lcd_set_xy(0,0);
 8003438:	2100      	movs	r1, #0
 800343a:	4608      	mov	r0, r1
 800343c:	f7fe fa2c 	bl	8001898 <lcd_set_xy>
			LcdOutbyNumber(0,1);//charge
 8003440:	2101      	movs	r1, #1
 8003442:	2000      	movs	r0, #0
 8003444:	f7fe fa50 	bl	80018e8 <LcdOutbyNumber>
			lcd_set_xy(1,0);
 8003448:	2100      	movs	r1, #0
 800344a:	2001      	movs	r0, #1
 800344c:	f7fe fa24 	bl	8001898 <lcd_set_xy>
			PrintToLCD(" ");
 8003450:	487b      	ldr	r0, [pc, #492]	; (8003640 <MenuCheckingCapacity+0x594>)
 8003452:	f7fe faa1 	bl	8001998 <PrintToLCD>
			PrintToLCD(itoa(BatteryCapacityCharge/3600));
 8003456:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800345a:	6828      	ldr	r0, [r5, #0]
 800345c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003460:	f7fd feb8 	bl	80011d4 <itoa>
 8003464:	f7fe fa98 	bl	8001998 <PrintToLCD>
			PrintToLCD("mAH      ");
 8003468:	4876      	ldr	r0, [pc, #472]	; (8003644 <MenuCheckingCapacity+0x598>)
 800346a:	f7fe fa95 	bl	8001998 <PrintToLCD>
			lcd_set_xy(3,1);
 800346e:	4620      	mov	r0, r4
 8003470:	2101      	movs	r1, #1
 8003472:	f7fe fa11 	bl	8001898 <lcd_set_xy>
			ClockOnLCD_noSec(ChargeTimeSec);
 8003476:	6830      	ldr	r0, [r6, #0]
 8003478:	f7ff f94c 	bl	8002714 <ClockOnLCD_noSec>
 800347c:	e01f      	b.n	80034be <MenuCheckingCapacity+0x412>
			if (key == KEY_BACK)
 800347e:	f1bb 0f01 	cmp.w	fp, #1
 8003482:	f47f af4b 	bne.w	800331c <MenuCheckingCapacity+0x270>
				CountShow--;
 8003486:	4a68      	ldr	r2, [pc, #416]	; (8003628 <MenuCheckingCapacity+0x57c>)
 8003488:	7813      	ldrb	r3, [r2, #0]
 800348a:	3b01      	subs	r3, #1
 800348c:	b25b      	sxtb	r3, r3
				if (CountShow<0) CountShow=MAX_SCREENS__MENU_CAPACITY-1;
 800348e:	2b00      	cmp	r3, #0
				CountShow--;
 8003490:	7013      	strb	r3, [r2, #0]
				if (CountShow<0) CountShow=MAX_SCREENS__MENU_CAPACITY-1;
 8003492:	f6bf af43 	bge.w	800331c <MenuCheckingCapacity+0x270>
 8003496:	e704      	b.n	80032a2 <MenuCheckingCapacity+0x1f6>
					lcd_set_xy(7,1);
 8003498:	2101      	movs	r1, #1
 800349a:	2007      	movs	r0, #7
 800349c:	f7fe f9fc 	bl	8001898 <lcd_set_xy>
					LcdOutbyNumber(2,1);//discharge
 80034a0:	2101      	movs	r1, #1
 80034a2:	2002      	movs	r0, #2
 80034a4:	e76d      	b.n	8003382 <MenuCheckingCapacity+0x2d6>
			if (TimerForReadyMeasurement_ms>1000)
 80034a6:	4b68      	ldr	r3, [pc, #416]	; (8003648 <MenuCheckingCapacity+0x59c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034ae:	d906      	bls.n	80034be <MenuCheckingCapacity+0x412>
				lcd_set_xy(0,0);
 80034b0:	2100      	movs	r1, #0
 80034b2:	4608      	mov	r0, r1
 80034b4:	f7fe f9f0 	bl	8001898 <lcd_set_xy>
				PrintToLCD("NO/BAD Battery  ");
 80034b8:	4864      	ldr	r0, [pc, #400]	; (800364c <MenuCheckingCapacity+0x5a0>)
 80034ba:	f7fe fa6d 	bl	8001998 <PrintToLCD>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 80034be:	4864      	ldr	r0, [pc, #400]	; (8003650 <MenuCheckingCapacity+0x5a4>)
 80034c0:	f001 fd6a 	bl	8004f98 <printToBufferWithoutEndUART1>
 80034c4:	9b01      	ldr	r3, [sp, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	7819      	ldrb	r1, [r3, #0]
 80034ca:	4862      	ldr	r0, [pc, #392]	; (8003654 <MenuCheckingCapacity+0x5a8>)
 80034cc:	f001 fda8 	bl	8005020 <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 80034d0:	485f      	ldr	r0, [pc, #380]	; (8003650 <MenuCheckingCapacity+0x5a4>)
 80034d2:	f001 fd61 	bl	8004f98 <printToBufferWithoutEndUART1>
 80034d6:	f89a 1000 	ldrb.w	r1, [sl]
 80034da:	2200      	movs	r2, #0
 80034dc:	485e      	ldr	r0, [pc, #376]	; (8003658 <MenuCheckingCapacity+0x5ac>)
 80034de:	f001 fd9f 	bl	8005020 <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 80034e2:	485b      	ldr	r0, [pc, #364]	; (8003650 <MenuCheckingCapacity+0x5a4>)
 80034e4:	f001 fd58 	bl	8004f98 <printToBufferWithoutEndUART1>
 80034e8:	6831      	ldr	r1, [r6, #0]
 80034ea:	2200      	movs	r2, #0
 80034ec:	485b      	ldr	r0, [pc, #364]	; (800365c <MenuCheckingCapacity+0x5b0>)
 80034ee:	f001 fd97 	bl	8005020 <printToBufferUART1D>
	logDebugD("BatteryCapacityCharge: ",BatteryCapacityCharge,0);
 80034f2:	4857      	ldr	r0, [pc, #348]	; (8003650 <MenuCheckingCapacity+0x5a4>)
 80034f4:	f001 fd50 	bl	8004f98 <printToBufferWithoutEndUART1>
 80034f8:	6829      	ldr	r1, [r5, #0]
 80034fa:	2200      	movs	r2, #0
 80034fc:	4858      	ldr	r0, [pc, #352]	; (8003660 <MenuCheckingCapacity+0x5b4>)
 80034fe:	f001 fd8f 	bl	8005020 <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 8003502:	4853      	ldr	r0, [pc, #332]	; (8003650 <MenuCheckingCapacity+0x5a4>)
 8003504:	f001 fd48 	bl	8004f98 <printToBufferWithoutEndUART1>
 8003508:	4b56      	ldr	r3, [pc, #344]	; (8003664 <MenuCheckingCapacity+0x5b8>)
 800350a:	2200      	movs	r2, #0
 800350c:	7819      	ldrb	r1, [r3, #0]
 800350e:	4856      	ldr	r0, [pc, #344]	; (8003668 <MenuCheckingCapacity+0x5bc>)
 8003510:	f001 fd86 	bl	8005020 <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 8003514:	484e      	ldr	r0, [pc, #312]	; (8003650 <MenuCheckingCapacity+0x5a4>)
 8003516:	f001 fd3f 	bl	8004f98 <printToBufferWithoutEndUART1>
 800351a:	f8d9 1000 	ldr.w	r1, [r9]
 800351e:	2200      	movs	r2, #0
 8003520:	4852      	ldr	r0, [pc, #328]	; (800366c <MenuCheckingCapacity+0x5c0>)
 8003522:	f001 fd7d 	bl	8005020 <printToBufferUART1D>
	logDebugD("BatteryCapacityDischargeCurrent: ",BatteryCapacityDischargeCurrent,0);
 8003526:	484a      	ldr	r0, [pc, #296]	; (8003650 <MenuCheckingCapacity+0x5a4>)
 8003528:	f001 fd36 	bl	8004f98 <printToBufferWithoutEndUART1>
 800352c:	2200      	movs	r2, #0
 800352e:	6839      	ldr	r1, [r7, #0]
 8003530:	484f      	ldr	r0, [pc, #316]	; (8003670 <MenuCheckingCapacity+0x5c4>)
}
 8003532:	b005      	add	sp, #20
 8003534:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	logDebugD("BatteryCapacityDischargeCurrent: ",BatteryCapacityDischargeCurrent,0);
 8003538:	f001 bd72 	b.w	8005020 <printToBufferUART1D>
 800353c:	4c3a      	ldr	r4, [pc, #232]	; (8003628 <MenuCheckingCapacity+0x57c>)
		if (key == KEY_NEXT)
 800353e:	f1bb 0f02 	cmp.w	fp, #2
 8003542:	f994 3000 	ldrsb.w	r3, [r4]
 8003546:	d15f      	bne.n	8003608 <MenuCheckingCapacity+0x55c>
			CountShow++;
 8003548:	3301      	adds	r3, #1
 800354a:	b25b      	sxtb	r3, r3
			if (CountShow==MAX_SCREENS__MENU_CAPACITY1) CountShow=0;
 800354c:	2b04      	cmp	r3, #4
 800354e:	bf08      	it	eq
 8003550:	2300      	moveq	r3, #0
			if (CountShow<0) CountShow=MAX_SCREENS__MENU_CAPACITY1-1;
 8003552:	7023      	strb	r3, [r4, #0]
		if(CountShow == 0)
 8003554:	f994 8000 	ldrsb.w	r8, [r4]
 8003558:	f1b8 0f00 	cmp.w	r8, #0
 800355c:	d12d      	bne.n	80035ba <MenuCheckingCapacity+0x50e>
			lcd_set_xy(0,0);
 800355e:	4641      	mov	r1, r8
 8003560:	4640      	mov	r0, r8
 8003562:	f7fe f999 	bl	8001898 <lcd_set_xy>
			PrintToLCD(itoa_koma(U_OUT,2));
 8003566:	4b43      	ldr	r3, [pc, #268]	; (8003674 <MenuCheckingCapacity+0x5c8>)
 8003568:	2102      	movs	r1, #2
 800356a:	8818      	ldrh	r0, [r3, #0]
 800356c:	f7fd fea6 	bl	80012bc <itoa_koma>
 8003570:	f7fe fa12 	bl	8001998 <PrintToLCD>
			PrintToLCD("V ");
 8003574:	482d      	ldr	r0, [pc, #180]	; (800362c <MenuCheckingCapacity+0x580>)
 8003576:	f7fe fa0f 	bl	8001998 <PrintToLCD>
			PrintToLCD(itoa(Current));
 800357a:	4b3f      	ldr	r3, [pc, #252]	; (8003678 <MenuCheckingCapacity+0x5cc>)
 800357c:	8818      	ldrh	r0, [r3, #0]
 800357e:	b200      	sxth	r0, r0
 8003580:	f7fd fe28 	bl	80011d4 <itoa>
 8003584:	f7fe fa08 	bl	8001998 <PrintToLCD>
			PrintToLCD("mA     ");
 8003588:	4829      	ldr	r0, [pc, #164]	; (8003630 <MenuCheckingCapacity+0x584>)
 800358a:	f7fe fa05 	bl	8001998 <PrintToLCD>
			lcd_set_xy(6,1);
 800358e:	2101      	movs	r1, #1
 8003590:	2006      	movs	r0, #6
 8003592:	f7fe f981 	bl	8001898 <lcd_set_xy>
			LcdOutbyNumber(4,1);
 8003596:	2101      	movs	r1, #1
 8003598:	2004      	movs	r0, #4
 800359a:	f7fe f9a5 	bl	80018e8 <LcdOutbyNumber>
			if (Status_Out ==1)
 800359e:	4b25      	ldr	r3, [pc, #148]	; (8003634 <MenuCheckingCapacity+0x588>)
 80035a0:	f893 b000 	ldrb.w	fp, [r3]
 80035a4:	f1bb 0f01 	cmp.w	fp, #1
 80035a8:	d137      	bne.n	800361a <MenuCheckingCapacity+0x56e>
				lcd_set_xy(7,1);
 80035aa:	4659      	mov	r1, fp
 80035ac:	2007      	movs	r0, #7
 80035ae:	f7fe f973 	bl	8001898 <lcd_set_xy>
				LcdOutbyNumber(0,1);//charge
 80035b2:	4659      	mov	r1, fp
 80035b4:	4640      	mov	r0, r8
				LcdOutbyNumber(2,1);//discharge
 80035b6:	f7fe f997 	bl	80018e8 <LcdOutbyNumber>
		if(CountShow == 1)
 80035ba:	f994 8000 	ldrsb.w	r8, [r4]
 80035be:	f1b8 0f01 	cmp.w	r8, #1
 80035c2:	f47f af0d 	bne.w	80033e0 <MenuCheckingCapacity+0x334>
			lcd_set_xy(0,0);
 80035c6:	2100      	movs	r1, #0
			PrintToLCD(itoa(SettingsData.ChargeTime));
 80035c8:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 800367c <MenuCheckingCapacity+0x5d0>
			lcd_set_xy(0,0);
 80035cc:	4608      	mov	r0, r1
 80035ce:	f7fe f963 	bl	8001898 <lcd_set_xy>
			PrintToLCD(itoa(SettingsData.ChargeTime));
 80035d2:	f8db 0010 	ldr.w	r0, [fp, #16]
 80035d6:	f7fd fdfd 	bl	80011d4 <itoa>
 80035da:	f7fe f9dd 	bl	8001998 <PrintToLCD>
			PrintToLCD("h ");
 80035de:	4816      	ldr	r0, [pc, #88]	; (8003638 <MenuCheckingCapacity+0x58c>)
 80035e0:	f7fe f9da 	bl	8001998 <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 80035e4:	230a      	movs	r3, #10
 80035e6:	f8db 0018 	ldr.w	r0, [fp, #24]
 80035ea:	4641      	mov	r1, r8
 80035ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80035f0:	9302      	str	r3, [sp, #8]
 80035f2:	f7fd fe63 	bl	80012bc <itoa_koma>
 80035f6:	f7fe f9cf 	bl	8001998 <PrintToLCD>
			PrintToLCD("V ");
 80035fa:	480c      	ldr	r0, [pc, #48]	; (800362c <MenuCheckingCapacity+0x580>)
 80035fc:	f7fe f9cc 	bl	8001998 <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8003600:	f8db 0020 	ldr.w	r0, [fp, #32]
 8003604:	4641      	mov	r1, r8
 8003606:	e6e1      	b.n	80033cc <MenuCheckingCapacity+0x320>
		if (key == KEY_BACK)
 8003608:	f1bb 0f01 	cmp.w	fp, #1
 800360c:	d1a2      	bne.n	8003554 <MenuCheckingCapacity+0x4a8>
			CountShow--;
 800360e:	3b01      	subs	r3, #1
 8003610:	b25b      	sxtb	r3, r3
			if (CountShow<0) CountShow=MAX_SCREENS__MENU_CAPACITY1-1;
 8003612:	2b00      	cmp	r3, #0
 8003614:	bfb8      	it	lt
 8003616:	2303      	movlt	r3, #3
 8003618:	e79b      	b.n	8003552 <MenuCheckingCapacity+0x4a6>
				lcd_set_xy(7,1);
 800361a:	2101      	movs	r1, #1
 800361c:	2007      	movs	r0, #7
 800361e:	f7fe f93b 	bl	8001898 <lcd_set_xy>
				LcdOutbyNumber(2,1);//discharge
 8003622:	2101      	movs	r1, #1
 8003624:	2002      	movs	r0, #2
 8003626:	e7c6      	b.n	80035b6 <MenuCheckingCapacity+0x50a>
 8003628:	20000785 	.word	0x20000785
 800362c:	08005e49 	.word	0x08005e49
 8003630:	08006054 	.word	0x08006054
 8003634:	20000797 	.word	0x20000797
 8003638:	08005836 	.word	0x08005836
 800363c:	08005f57 	.word	0x08005f57
 8003640:	08005f86 	.word	0x08005f86
 8003644:	0800605c 	.word	0x0800605c
 8003648:	200007b4 	.word	0x200007b4
 800364c:	08006072 	.word	0x08006072
 8003650:	08005a98 	.word	0x08005a98
 8003654:	08006083 	.word	0x08006083
 8003658:	08006098 	.word	0x08006098
 800365c:	080060ad 	.word	0x080060ad
 8003660:	080060bd 	.word	0x080060bd
 8003664:	2000078a 	.word	0x2000078a
 8003668:	080060d5 	.word	0x080060d5
 800366c:	080060ed 	.word	0x080060ed
 8003670:	08006100 	.word	0x08006100
 8003674:	2000084e 	.word	0x2000084e
 8003678:	2000083e 	.word	0x2000083e
 800367c:	20000154 	.word	0x20000154

08003680 <OUT_OFF>:


void OUT_OFF()
{
	//GPIOB->BSRR =  GPIO_BSRR_BR0;//Diode 1 OUT ON//OFF
	GPIOB->BSRR =  GPIO_BSRR_BR1;//ON-OFF OUT
 8003680:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003684:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <OUT_OFF+0x20>)
 8003686:	611a      	str	r2, [r3, #16]
	//GPIOB->BSRR =  GPIO_BSRR_BR1; //load1

	GPIOA->BSRR =  GPIO_BSRR_BR0;//led out on/off
 8003688:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800368c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003690:	611a      	str	r2, [r3, #16]

	On_off = 0;
 8003692:	2300      	movs	r3, #0
 8003694:	4a03      	ldr	r2, [pc, #12]	; (80036a4 <OUT_OFF+0x24>)
 8003696:	7013      	strb	r3, [r2, #0]
   	//Print_to_USART1_d(On_off,"Select OFF:",0);
	Status_Out = 0;
 8003698:	4a03      	ldr	r2, [pc, #12]	; (80036a8 <OUT_OFF+0x28>)
 800369a:	7013      	strb	r3, [r2, #0]

}
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	40010c00 	.word	0x40010c00
 80036a4:	20000796 	.word	0x20000796
 80036a8:	20000797 	.word	0x20000797

080036ac <OUT_ON>:
void OUT_ON()
{
	//GPIOB->BSRR =  GPIO_BSRR_BR0;//Diode 1 OUT ON//OFF
	GPIOB->BSRR =  GPIO_BSRR_BS1;//ON-OFF OUT
 80036ac:	2202      	movs	r2, #2
 80036ae:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <OUT_ON+0x18>)
 80036b0:	611a      	str	r2, [r3, #16]
	//GPIOB->BSRR =  GPIO_BSRR_BR1; //load1

	On_off = 1;
 80036b2:	2301      	movs	r3, #1
 80036b4:	4a04      	ldr	r2, [pc, #16]	; (80036c8 <OUT_ON+0x1c>)
 80036b6:	7013      	strb	r3, [r2, #0]
   	//Print_to_USART1_d(On_off,"SelectON:",0);
	Status_Out = 1;
 80036b8:	4a04      	ldr	r2, [pc, #16]	; (80036cc <OUT_ON+0x20>)
 80036ba:	7013      	strb	r3, [r2, #0]
	GPIOA->BSRR =  GPIO_BSRR_BS0;//led out on/off
 80036bc:	4a04      	ldr	r2, [pc, #16]	; (80036d0 <OUT_ON+0x24>)
 80036be:	6113      	str	r3, [r2, #16]
}
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	40010c00 	.word	0x40010c00
 80036c8:	20000796 	.word	0x20000796
 80036cc:	20000797 	.word	0x20000797
 80036d0:	40010800 	.word	0x40010800

080036d4 <OUTStateAfterPowerUpFunction>:
    if (OutStateAfterPowerUp ==2)
 80036d4:	4909      	ldr	r1, [pc, #36]	; (80036fc <OUTStateAfterPowerUpFunction+0x28>)
{
 80036d6:	b508      	push	{r3, lr}
    if (OutStateAfterPowerUp ==2)
 80036d8:	680b      	ldr	r3, [r1, #0]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d103      	bne.n	80036e6 <OUTStateAfterPowerUpFunction+0x12>
    	OUT_ON();
 80036de:	f7ff ffe5 	bl	80036ac <OUT_ON>
    	OutStateAfterPowerUp = 1;
 80036e2:	2301      	movs	r3, #1
 80036e4:	600b      	str	r3, [r1, #0]
    if (OutStateAfterPowerUp ==3)
 80036e6:	680b      	ldr	r3, [r1, #0]
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	d106      	bne.n	80036fa <OUTStateAfterPowerUpFunction+0x26>
    	if (SaveDataWhenPowerOff.OutState==1)
 80036ec:	4b04      	ldr	r3, [pc, #16]	; (8003700 <OUTStateAfterPowerUpFunction+0x2c>)
 80036ee:	6998      	ldr	r0, [r3, #24]
 80036f0:	2801      	cmp	r0, #1
 80036f2:	d102      	bne.n	80036fa <OUTStateAfterPowerUpFunction+0x26>
    		OUT_ON();
 80036f4:	f7ff ffda 	bl	80036ac <OUT_ON>
    		OutStateAfterPowerUp = 1;
 80036f8:	6008      	str	r0, [r1, #0]
}
 80036fa:	bd08      	pop	{r3, pc}
 80036fc:	20000278 	.word	0x20000278
 8003700:	200000f4 	.word	0x200000f4

08003704 <MenuChargeAdapt>:
	EnterInMenu_Status = 1;
 8003704:	2201      	movs	r2, #1
{
 8003706:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (InitiStatus==0)
 800370a:	4eb6      	ldr	r6, [pc, #728]	; (80039e4 <MenuChargeAdapt+0x2e0>)
	EnterInMenu_Status = 1;
 800370c:	4bb6      	ldr	r3, [pc, #728]	; (80039e8 <MenuChargeAdapt+0x2e4>)
	if (InitiStatus==0)
 800370e:	7835      	ldrb	r5, [r6, #0]
{
 8003710:	4682      	mov	sl, r0
	EnterInMenu_Status = 1;
 8003712:	701a      	strb	r2, [r3, #0]
 8003714:	4698      	mov	r8, r3
 8003716:	4cb5      	ldr	r4, [pc, #724]	; (80039ec <MenuChargeAdapt+0x2e8>)
 8003718:	f8df 9340 	ldr.w	r9, [pc, #832]	; 8003a5c <MenuChargeAdapt+0x358>
 800371c:	4fb4      	ldr	r7, [pc, #720]	; (80039f0 <MenuChargeAdapt+0x2ec>)
	if (InitiStatus==0)
 800371e:	bb2d      	cbnz	r5, 800376c <MenuChargeAdapt+0x68>
		if (U_PS < (SettingsData.MaxVoltage+DELTA_UPS_BAT_MAX))
 8003720:	4bb4      	ldr	r3, [pc, #720]	; (80039f4 <MenuChargeAdapt+0x2f0>)
 8003722:	881a      	ldrh	r2, [r3, #0]
 8003724:	4bb4      	ldr	r3, [pc, #720]	; (80039f8 <MenuChargeAdapt+0x2f4>)
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	3305      	adds	r3, #5
 800372a:	4293      	cmp	r3, r2
 800372c:	d915      	bls.n	800375a <MenuChargeAdapt+0x56>
			lcd_set_xy(0,0);
 800372e:	4629      	mov	r1, r5
 8003730:	4628      	mov	r0, r5
 8003732:	f7fe f8b1 	bl	8001898 <lcd_set_xy>
			PrintToLCD("U(ps)<U(bat.max)");
 8003736:	48b1      	ldr	r0, [pc, #708]	; (80039fc <MenuChargeAdapt+0x2f8>)
 8003738:	f7fe f92e 	bl	8001998 <PrintToLCD>
			delay_ms(2000);
 800373c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003740:	f7fd fc2c 	bl	8000f9c <delay_ms>
			lcd_set_xy(0,0);
 8003744:	4629      	mov	r1, r5
 8003746:	4628      	mov	r0, r5
 8003748:	f7fe f8a6 	bl	8001898 <lcd_set_xy>
			PrintToLCD("UP U(ps)        ");
 800374c:	48ac      	ldr	r0, [pc, #688]	; (8003a00 <MenuChargeAdapt+0x2fc>)
 800374e:	f7fe f923 	bl	8001998 <PrintToLCD>
			delay_ms(3000);
 8003752:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003756:	f7fd fc21 	bl	8000f9c <delay_ms>
		ChargeStatusForTimer = 0;
 800375a:	2300      	movs	r3, #0
		BatteryCapacityCharge = 0;
 800375c:	4aa9      	ldr	r2, [pc, #676]	; (8003a04 <MenuChargeAdapt+0x300>)
		ChargeStatusForTimer = 0;
 800375e:	7023      	strb	r3, [r4, #0]
		DisChargeStatusForTimer = 0;
 8003760:	f889 3000 	strb.w	r3, [r9]
		BatteryCapacityCharge = 0;
 8003764:	6013      	str	r3, [r2, #0]
		InitiStatus = 1;
 8003766:	2201      	movs	r2, #1
		ChargeTimeSec = 0;
 8003768:	603b      	str	r3, [r7, #0]
		InitiStatus = 1;
 800376a:	7032      	strb	r2, [r6, #0]
	if (ChargeTimeSec > ChargeDurationSec)
 800376c:	4ba6      	ldr	r3, [pc, #664]	; (8003a08 <MenuChargeAdapt+0x304>)
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	f240 80f7 	bls.w	8003966 <MenuChargeAdapt+0x262>
			ChargeStatusForTimer = 0;
 8003778:	2300      	movs	r3, #0
				ChargeStatusForTimer = 1;
 800377a:	7023      	strb	r3, [r4, #0]
    OUTStateAfterPowerUpFunction();
 800377c:	f7ff ffaa 	bl	80036d4 <OUTStateAfterPowerUpFunction>
	if (key == KEY_NEXT)
 8003780:	f1ba 0f02 	cmp.w	sl, #2
 8003784:	4da1      	ldr	r5, [pc, #644]	; (8003a0c <MenuChargeAdapt+0x308>)
 8003786:	f040 8103 	bne.w	8003990 <MenuChargeAdapt+0x28c>
		if (On_off == 0)
 800378a:	4ba1      	ldr	r3, [pc, #644]	; (8003a10 <MenuChargeAdapt+0x30c>)
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	f040 80fc 	bne.w	800398c <MenuChargeAdapt+0x288>
			ChargeStatusForTimer = 1;
 8003794:	2301      	movs	r3, #1
			ChargeStatusForTimer = 0;
 8003796:	7023      	strb	r3, [r4, #0]
	if(CountShow == 0)
 8003798:	f995 1000 	ldrsb.w	r1, [r5]
 800379c:	bba1      	cbnz	r1, 8003808 <MenuChargeAdapt+0x104>
		lcd_set_xy(0,0);
 800379e:	4608      	mov	r0, r1
 80037a0:	f7fe f87a 	bl	8001898 <lcd_set_xy>
		if (On_off ==0)
 80037a4:	4b9a      	ldr	r3, [pc, #616]	; (8003a10 <MenuChargeAdapt+0x30c>)
 80037a6:	f8df a2a8 	ldr.w	sl, [pc, #680]	; 8003a50 <MenuChargeAdapt+0x34c>
 80037aa:	781a      	ldrb	r2, [r3, #0]
 80037ac:	469b      	mov	fp, r3
 80037ae:	2a00      	cmp	r2, #0
 80037b0:	f040 80fa 	bne.w	80039a8 <MenuChargeAdapt+0x2a4>
			PrintToLCD(itoa_koma(U_PS,2));
 80037b4:	4b8f      	ldr	r3, [pc, #572]	; (80039f4 <MenuChargeAdapt+0x2f0>)
 80037b6:	2102      	movs	r1, #2
 80037b8:	8818      	ldrh	r0, [r3, #0]
 80037ba:	f7fd fd7f 	bl	80012bc <itoa_koma>
 80037be:	f7fe f8eb 	bl	8001998 <PrintToLCD>
			PrintToLCD("V ");
 80037c2:	4894      	ldr	r0, [pc, #592]	; (8003a14 <MenuChargeAdapt+0x310>)
 80037c4:	f7fe f8e8 	bl	8001998 <PrintToLCD>
			PrintToLCD(itoa_koma(U_OUT,2));
 80037c8:	2102      	movs	r1, #2
 80037ca:	f8ba 0000 	ldrh.w	r0, [sl]
 80037ce:	f7fd fd75 	bl	80012bc <itoa_koma>
 80037d2:	f7fe f8e1 	bl	8001998 <PrintToLCD>
			PrintToLCD("V   ");
 80037d6:	4890      	ldr	r0, [pc, #576]	; (8003a18 <MenuChargeAdapt+0x314>)
			PrintToLCD("mA      ");
 80037d8:	f7fe f8de 	bl	8001998 <PrintToLCD>
		if (On_off ==0)
 80037dc:	f89b 3000 	ldrb.w	r3, [fp]
 80037e0:	f8df a27c 	ldr.w	sl, [pc, #636]	; 8003a60 <MenuChargeAdapt+0x35c>
			lcd_set_xy(7,1);
 80037e4:	2101      	movs	r1, #1
 80037e6:	2007      	movs	r0, #7
		if (On_off ==0)
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f040 80f0 	bne.w	80039ce <MenuChargeAdapt+0x2ca>
			lcd_set_xy(7,1);
 80037ee:	f7fe f853 	bl	8001898 <lcd_set_xy>
			LcdOutbyNumber(0,1);
 80037f2:	2101      	movs	r1, #1
 80037f4:	2000      	movs	r0, #0
					LcdOutbyNumber(1,1);
 80037f6:	f7fe f877 	bl	80018e8 <LcdOutbyNumber>
		if (Blink_message_counter>10)
 80037fa:	f89a 3000 	ldrb.w	r3, [sl]
 80037fe:	2b0a      	cmp	r3, #10
			Blink_message_counter = 0;
 8003800:	bf84      	itt	hi
 8003802:	2300      	movhi	r3, #0
 8003804:	f88a 3000 	strbhi.w	r3, [sl]
	if(CountShow == 1)
 8003808:	f995 a000 	ldrsb.w	sl, [r5]
 800380c:	f1ba 0f01 	cmp.w	sl, #1
 8003810:	d11e      	bne.n	8003850 <MenuChargeAdapt+0x14c>
		lcd_set_xy(0,0);
 8003812:	2100      	movs	r1, #0
		PrintToLCD(itoa(SettingsData.ChargeTime));
 8003814:	f8df b1e0 	ldr.w	fp, [pc, #480]	; 80039f8 <MenuChargeAdapt+0x2f4>
		lcd_set_xy(0,0);
 8003818:	4608      	mov	r0, r1
 800381a:	f7fe f83d 	bl	8001898 <lcd_set_xy>
		PrintToLCD("T:");
 800381e:	487f      	ldr	r0, [pc, #508]	; (8003a1c <MenuChargeAdapt+0x318>)
 8003820:	f7fe f8ba 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa(SettingsData.ChargeTime));
 8003824:	f8db 0010 	ldr.w	r0, [fp, #16]
 8003828:	f7fd fcd4 	bl	80011d4 <itoa>
 800382c:	f7fe f8b4 	bl	8001998 <PrintToLCD>
		PrintToLCD("h MaxV:");
 8003830:	487b      	ldr	r0, [pc, #492]	; (8003a20 <MenuChargeAdapt+0x31c>)
 8003832:	f7fe f8b1 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8003836:	230a      	movs	r3, #10
 8003838:	f8db 0020 	ldr.w	r0, [fp, #32]
 800383c:	4651      	mov	r1, sl
 800383e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003842:	f7fd fd3b 	bl	80012bc <itoa_koma>
 8003846:	f7fe f8a7 	bl	8001998 <PrintToLCD>
		PrintToLCD("V   ");
 800384a:	4873      	ldr	r0, [pc, #460]	; (8003a18 <MenuChargeAdapt+0x314>)
 800384c:	f7fe f8a4 	bl	8001998 <PrintToLCD>
	if(CountShow == 2)
 8003850:	f995 3000 	ldrsb.w	r3, [r5]
 8003854:	2b02      	cmp	r3, #2
 8003856:	d12f      	bne.n	80038b8 <MenuChargeAdapt+0x1b4>
		lcd_set_xy(0,0);
 8003858:	2100      	movs	r1, #0
		PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 800385a:	f04f 0a0a 	mov.w	sl, #10
		PrintToLCD(itoa(SettingsData.ChargeAdapt));
 800385e:	f8df b198 	ldr.w	fp, [pc, #408]	; 80039f8 <MenuChargeAdapt+0x2f4>
		lcd_set_xy(0,0);
 8003862:	4608      	mov	r0, r1
 8003864:	f7fe f818 	bl	8001898 <lcd_set_xy>
		PrintToLCD(itoa(SettingsData.ChargeAdapt));
 8003868:	f8db 0038 	ldr.w	r0, [fp, #56]	; 0x38
 800386c:	f7fd fcb2 	bl	80011d4 <itoa>
 8003870:	f7fe f892 	bl	8001998 <PrintToLCD>
		PrintToLCD("% ");
 8003874:	486b      	ldr	r0, [pc, #428]	; (8003a24 <MenuChargeAdapt+0x320>)
 8003876:	f7fe f88f 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 800387a:	f8db 0020 	ldr.w	r0, [fp, #32]
 800387e:	2101      	movs	r1, #1
 8003880:	fbb0 f0fa 	udiv	r0, r0, sl
 8003884:	f7fd fd1a 	bl	80012bc <itoa_koma>
 8003888:	f7fe f886 	bl	8001998 <PrintToLCD>
		PrintToLCD("V ");
 800388c:	4861      	ldr	r0, [pc, #388]	; (8003a14 <MenuChargeAdapt+0x310>)
 800388e:	f7fe f883 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa_koma((SettingsData.MaxVoltage-(SettingsData.MaxVoltage*SettingsData.ChargeAdapt/100))/10,1));
 8003892:	2264      	movs	r2, #100	; 0x64
 8003894:	f8db 3020 	ldr.w	r3, [fp, #32]
 8003898:	f8db 0038 	ldr.w	r0, [fp, #56]	; 0x38
 800389c:	2101      	movs	r1, #1
 800389e:	4358      	muls	r0, r3
 80038a0:	fbb0 f0f2 	udiv	r0, r0, r2
 80038a4:	1a18      	subs	r0, r3, r0
 80038a6:	fbb0 f0fa 	udiv	r0, r0, sl
 80038aa:	f7fd fd07 	bl	80012bc <itoa_koma>
 80038ae:	f7fe f873 	bl	8001998 <PrintToLCD>
		PrintToLCD("V   ");
 80038b2:	4859      	ldr	r0, [pc, #356]	; (8003a18 <MenuChargeAdapt+0x314>)
 80038b4:	f7fe f870 	bl	8001998 <PrintToLCD>
	if(CountShow == 3)
 80038b8:	f995 5000 	ldrsb.w	r5, [r5]
 80038bc:	2d03      	cmp	r5, #3
 80038be:	d11a      	bne.n	80038f6 <MenuChargeAdapt+0x1f2>
		lcd_set_xy(0,0);
 80038c0:	2100      	movs	r1, #0
 80038c2:	4608      	mov	r0, r1
 80038c4:	f7fd ffe8 	bl	8001898 <lcd_set_xy>
		PrintToLCD("C ");
 80038c8:	4857      	ldr	r0, [pc, #348]	; (8003a28 <MenuChargeAdapt+0x324>)
 80038ca:	f7fe f865 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa(BatteryCapacityCharge/3600));
 80038ce:	4b4d      	ldr	r3, [pc, #308]	; (8003a04 <MenuChargeAdapt+0x300>)
 80038d0:	6818      	ldr	r0, [r3, #0]
 80038d2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80038d6:	fbb0 f0f3 	udiv	r0, r0, r3
 80038da:	f7fd fc7b 	bl	80011d4 <itoa>
 80038de:	f7fe f85b 	bl	8001998 <PrintToLCD>
		PrintToLCD("mAH     ");
 80038e2:	4852      	ldr	r0, [pc, #328]	; (8003a2c <MenuChargeAdapt+0x328>)
 80038e4:	f7fe f858 	bl	8001998 <PrintToLCD>
		lcd_set_xy(3,1);
 80038e8:	4628      	mov	r0, r5
 80038ea:	2101      	movs	r1, #1
 80038ec:	f7fd ffd4 	bl	8001898 <lcd_set_xy>
		ClockOnLCD_noSec(ChargeTimeSec);
 80038f0:	6838      	ldr	r0, [r7, #0]
 80038f2:	f7fe ff0f 	bl	8002714 <ClockOnLCD_noSec>
	delay_ms(MENUDELAY);
 80038f6:	2064      	movs	r0, #100	; 0x64
 80038f8:	f7fd fb50 	bl	8000f9c <delay_ms>
	logDebugD("Init status: ",InitiStatus,0);
 80038fc:	484c      	ldr	r0, [pc, #304]	; (8003a30 <MenuChargeAdapt+0x32c>)
 80038fe:	f001 fb4b 	bl	8004f98 <printToBufferWithoutEndUART1>
 8003902:	7831      	ldrb	r1, [r6, #0]
 8003904:	2200      	movs	r2, #0
 8003906:	484b      	ldr	r0, [pc, #300]	; (8003a34 <MenuChargeAdapt+0x330>)
 8003908:	f001 fb8a 	bl	8005020 <printToBufferUART1D>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 800390c:	4848      	ldr	r0, [pc, #288]	; (8003a30 <MenuChargeAdapt+0x32c>)
 800390e:	f001 fb43 	bl	8004f98 <printToBufferWithoutEndUART1>
 8003912:	f898 1000 	ldrb.w	r1, [r8]
 8003916:	2200      	movs	r2, #0
 8003918:	4847      	ldr	r0, [pc, #284]	; (8003a38 <MenuChargeAdapt+0x334>)
 800391a:	f001 fb81 	bl	8005020 <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 800391e:	4844      	ldr	r0, [pc, #272]	; (8003a30 <MenuChargeAdapt+0x32c>)
 8003920:	f001 fb3a 	bl	8004f98 <printToBufferWithoutEndUART1>
 8003924:	7821      	ldrb	r1, [r4, #0]
 8003926:	2200      	movs	r2, #0
 8003928:	4844      	ldr	r0, [pc, #272]	; (8003a3c <MenuChargeAdapt+0x338>)
 800392a:	f001 fb79 	bl	8005020 <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 800392e:	4840      	ldr	r0, [pc, #256]	; (8003a30 <MenuChargeAdapt+0x32c>)
 8003930:	f001 fb32 	bl	8004f98 <printToBufferWithoutEndUART1>
 8003934:	6839      	ldr	r1, [r7, #0]
 8003936:	2200      	movs	r2, #0
 8003938:	4841      	ldr	r0, [pc, #260]	; (8003a40 <MenuChargeAdapt+0x33c>)
 800393a:	f001 fb71 	bl	8005020 <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 800393e:	483c      	ldr	r0, [pc, #240]	; (8003a30 <MenuChargeAdapt+0x32c>)
 8003940:	f001 fb2a 	bl	8004f98 <printToBufferWithoutEndUART1>
 8003944:	f899 1000 	ldrb.w	r1, [r9]
 8003948:	2200      	movs	r2, #0
 800394a:	483e      	ldr	r0, [pc, #248]	; (8003a44 <MenuChargeAdapt+0x340>)
 800394c:	f001 fb68 	bl	8005020 <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 8003950:	4837      	ldr	r0, [pc, #220]	; (8003a30 <MenuChargeAdapt+0x32c>)
 8003952:	f001 fb21 	bl	8004f98 <printToBufferWithoutEndUART1>
 8003956:	4b3c      	ldr	r3, [pc, #240]	; (8003a48 <MenuChargeAdapt+0x344>)
 8003958:	2200      	movs	r2, #0
 800395a:	6819      	ldr	r1, [r3, #0]
 800395c:	483b      	ldr	r0, [pc, #236]	; (8003a4c <MenuChargeAdapt+0x348>)
}
 800395e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 8003962:	f001 bb5d 	b.w	8005020 <printToBufferUART1D>
		if (U_OUT> SettingsData.MaxVoltage)
 8003966:	493a      	ldr	r1, [pc, #232]	; (8003a50 <MenuChargeAdapt+0x34c>)
 8003968:	4a23      	ldr	r2, [pc, #140]	; (80039f8 <MenuChargeAdapt+0x2f4>)
 800396a:	8808      	ldrh	r0, [r1, #0]
 800396c:	6a13      	ldr	r3, [r2, #32]
 800396e:	4283      	cmp	r3, r0
 8003970:	f4ff af02 	bcc.w	8003778 <MenuChargeAdapt+0x74>
			if (U_OUT< (SettingsData.MaxVoltage-(SettingsData.MaxVoltage*SettingsData.ChargeAdapt/100))   )
 8003974:	2064      	movs	r0, #100	; 0x64
 8003976:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003978:	8809      	ldrh	r1, [r1, #0]
 800397a:	435a      	muls	r2, r3
 800397c:	fbb2 f2f0 	udiv	r2, r2, r0
 8003980:	1a9b      	subs	r3, r3, r2
 8003982:	428b      	cmp	r3, r1
 8003984:	f67f aefa 	bls.w	800377c <MenuChargeAdapt+0x78>
				ChargeStatusForTimer = 1;
 8003988:	2301      	movs	r3, #1
 800398a:	e6f6      	b.n	800377a <MenuChargeAdapt+0x76>
			ChargeStatusForTimer = 0;
 800398c:	2300      	movs	r3, #0
 800398e:	e702      	b.n	8003796 <MenuChargeAdapt+0x92>
	if (key == KEY_BACK)
 8003990:	f1ba 0f01 	cmp.w	sl, #1
 8003994:	f47f af00 	bne.w	8003798 <MenuChargeAdapt+0x94>
		CountShow--;
 8003998:	782b      	ldrb	r3, [r5, #0]
 800399a:	3b01      	subs	r3, #1
 800399c:	b25b      	sxtb	r3, r3
		if (CountShow<0) CountShow=MAXITEM1-1;
 800399e:	2b00      	cmp	r3, #0
 80039a0:	bfb8      	it	lt
 80039a2:	2303      	movlt	r3, #3
 80039a4:	702b      	strb	r3, [r5, #0]
 80039a6:	e6f7      	b.n	8003798 <MenuChargeAdapt+0x94>
			PrintToLCD(itoa_koma(U_OUT,2));
 80039a8:	2102      	movs	r1, #2
 80039aa:	f8ba 0000 	ldrh.w	r0, [sl]
 80039ae:	f7fd fc85 	bl	80012bc <itoa_koma>
 80039b2:	f7fd fff1 	bl	8001998 <PrintToLCD>
			PrintToLCD("V ");
 80039b6:	4817      	ldr	r0, [pc, #92]	; (8003a14 <MenuChargeAdapt+0x310>)
 80039b8:	f7fd ffee 	bl	8001998 <PrintToLCD>
			PrintToLCD(itoa(Current));
 80039bc:	4b25      	ldr	r3, [pc, #148]	; (8003a54 <MenuChargeAdapt+0x350>)
 80039be:	8818      	ldrh	r0, [r3, #0]
 80039c0:	b200      	sxth	r0, r0
 80039c2:	f7fd fc07 	bl	80011d4 <itoa>
 80039c6:	f7fd ffe7 	bl	8001998 <PrintToLCD>
			PrintToLCD("mA      ");
 80039ca:	4823      	ldr	r0, [pc, #140]	; (8003a58 <MenuChargeAdapt+0x354>)
 80039cc:	e704      	b.n	80037d8 <MenuChargeAdapt+0xd4>
			if (Blink_message_counter<=5)
 80039ce:	f89a 3000 	ldrb.w	r3, [sl]
 80039d2:	2b05      	cmp	r3, #5
 80039d4:	f67f af0b 	bls.w	80037ee <MenuChargeAdapt+0xea>
					lcd_set_xy(7,1);
 80039d8:	f7fd ff5e 	bl	8001898 <lcd_set_xy>
					LcdOutbyNumber(1,1);
 80039dc:	2101      	movs	r1, #1
 80039de:	4608      	mov	r0, r1
 80039e0:	e709      	b.n	80037f6 <MenuChargeAdapt+0xf2>
 80039e2:	bf00      	nop
 80039e4:	20000795 	.word	0x20000795
 80039e8:	20000794 	.word	0x20000794
 80039ec:	2000077e 	.word	0x2000077e
 80039f0:	20000780 	.word	0x20000780
 80039f4:	20000854 	.word	0x20000854
 80039f8:	20000154 	.word	0x20000154
 80039fc:	08006021 	.word	0x08006021
 8003a00:	08006032 	.word	0x08006032
 8003a04:	20000770 	.word	0x20000770
 8003a08:	200009fc 	.word	0x200009fc
 8003a0c:	20000785 	.word	0x20000785
 8003a10:	20000796 	.word	0x20000796
 8003a14:	08005e49 	.word	0x08005e49
 8003a18:	08005f15 	.word	0x08005f15
 8003a1c:	08005db0 	.word	0x08005db0
 8003a20:	08005db3 	.word	0x08005db3
 8003a24:	08005f5e 	.word	0x08005f5e
 8003a28:	08005dbb 	.word	0x08005dbb
 8003a2c:	08006069 	.word	0x08006069
 8003a30:	08005a98 	.word	0x08005a98
 8003a34:	08005e37 	.word	0x08005e37
 8003a38:	08006083 	.word	0x08006083
 8003a3c:	08006098 	.word	0x08006098
 8003a40:	080060ad 	.word	0x080060ad
 8003a44:	080060d5 	.word	0x080060d5
 8003a48:	2000078c 	.word	0x2000078c
 8003a4c:	080060ed 	.word	0x080060ed
 8003a50:	2000084e 	.word	0x2000084e
 8003a54:	2000083e 	.word	0x2000083e
 8003a58:	08005e19 	.word	0x08005e19
 8003a5c:	2000078a 	.word	0x2000078a
 8003a60:	2000077d 	.word	0x2000077d

08003a64 <MenuCalibration_Current_x1>:
	EnterInMenu_Status=1;
 8003a64:	2201      	movs	r2, #1
 8003a66:	4b16      	ldr	r3, [pc, #88]	; (8003ac0 <MenuCalibration_Current_x1+0x5c>)
{
 8003a68:	b510      	push	{r4, lr}
	EnterInMenu_Status=1;
 8003a6a:	701a      	strb	r2, [r3, #0]
	OUT_ON();
 8003a6c:	f7ff fe1e 	bl	80036ac <OUT_ON>
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForCurrent_x1++;
 8003a70:	2802      	cmp	r0, #2
 8003a72:	4c14      	ldr	r4, [pc, #80]	; (8003ac4 <MenuCalibration_Current_x1+0x60>)
 8003a74:	d11e      	bne.n	8003ab4 <MenuCalibration_Current_x1+0x50>
 8003a76:	69a3      	ldr	r3, [r4, #24]
 8003a78:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationValueForCurrent_x1--;
 8003a7a:	61a3      	str	r3, [r4, #24]
	lcd_set_xy(0,0);
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	4608      	mov	r0, r1
 8003a80:	f7fd ff0a 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForCurrent_x1));
 8003a84:	69a0      	ldr	r0, [r4, #24]
 8003a86:	f7fd fba5 	bl	80011d4 <itoa>
 8003a8a:	f7fd ff85 	bl	8001998 <PrintToLCD>
	PrintToLCD("   ");
 8003a8e:	480e      	ldr	r0, [pc, #56]	; (8003ac8 <MenuCalibration_Current_x1+0x64>)
 8003a90:	f7fd ff82 	bl	8001998 <PrintToLCD>
	lcd_set_xy(0,1);
 8003a94:	2101      	movs	r1, #1
 8003a96:	2000      	movs	r0, #0
 8003a98:	f7fd fefe 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa(Current_x1));
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <MenuCalibration_Current_x1+0x68>)
 8003a9e:	8818      	ldrh	r0, [r3, #0]
 8003aa0:	b200      	sxth	r0, r0
 8003aa2:	f7fd fb97 	bl	80011d4 <itoa>
 8003aa6:	f7fd ff77 	bl	8001998 <PrintToLCD>
}
 8003aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("mA  ");
 8003aae:	4808      	ldr	r0, [pc, #32]	; (8003ad0 <MenuCalibration_Current_x1+0x6c>)
 8003ab0:	f7fd bf72 	b.w	8001998 <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForCurrent_x1--;
 8003ab4:	2801      	cmp	r0, #1
 8003ab6:	d1e1      	bne.n	8003a7c <MenuCalibration_Current_x1+0x18>
 8003ab8:	69a3      	ldr	r3, [r4, #24]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	e7dd      	b.n	8003a7a <MenuCalibration_Current_x1+0x16>
 8003abe:	bf00      	nop
 8003ac0:	20000794 	.word	0x20000794
 8003ac4:	20000004 	.word	0x20000004
 8003ac8:	08005f84 	.word	0x08005f84
 8003acc:	200002b6 	.word	0x200002b6
 8003ad0:	08005da0 	.word	0x08005da0

08003ad4 <MenuCalibration_VoltagePS>:
	EnterInMenu_Status=1;
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	4b16      	ldr	r3, [pc, #88]	; (8003b30 <MenuCalibration_VoltagePS+0x5c>)
{
 8003ad8:	b510      	push	{r4, lr}
	EnterInMenu_Status=1;
 8003ada:	701a      	strb	r2, [r3, #0]
	OUT_ON();
 8003adc:	f7ff fde6 	bl	80036ac <OUT_ON>
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForTemperature++;
 8003ae0:	2802      	cmp	r0, #2
 8003ae2:	4c14      	ldr	r4, [pc, #80]	; (8003b34 <MenuCalibration_VoltagePS+0x60>)
 8003ae4:	d11e      	bne.n	8003b24 <MenuCalibration_VoltagePS+0x50>
 8003ae6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003ae8:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationValueForTemperature--;
 8003aea:	62a3      	str	r3, [r4, #40]	; 0x28
	lcd_set_xy(0,0);
 8003aec:	2100      	movs	r1, #0
 8003aee:	4608      	mov	r0, r1
 8003af0:	f7fd fed2 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForTemperature));
 8003af4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003af6:	f7fd fb6d 	bl	80011d4 <itoa>
 8003afa:	f7fd ff4d 	bl	8001998 <PrintToLCD>
	PrintToLCD("   ");
 8003afe:	480e      	ldr	r0, [pc, #56]	; (8003b38 <MenuCalibration_VoltagePS+0x64>)
 8003b00:	f7fd ff4a 	bl	8001998 <PrintToLCD>
	lcd_set_xy(0,1);
 8003b04:	2101      	movs	r1, #1
 8003b06:	2000      	movs	r0, #0
 8003b08:	f7fd fec6 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa_koma(U_PS,2));
 8003b0c:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <MenuCalibration_VoltagePS+0x68>)
 8003b0e:	2102      	movs	r1, #2
 8003b10:	8818      	ldrh	r0, [r3, #0]
 8003b12:	f7fd fbd3 	bl	80012bc <itoa_koma>
 8003b16:	f7fd ff3f 	bl	8001998 <PrintToLCD>
}
 8003b1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V  ");
 8003b1e:	4808      	ldr	r0, [pc, #32]	; (8003b40 <MenuCalibration_VoltagePS+0x6c>)
 8003b20:	f7fd bf3a 	b.w	8001998 <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForTemperature--;
 8003b24:	2801      	cmp	r0, #1
 8003b26:	d1e1      	bne.n	8003aec <MenuCalibration_VoltagePS+0x18>
 8003b28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	e7dd      	b.n	8003aea <MenuCalibration_VoltagePS+0x16>
 8003b2e:	bf00      	nop
 8003b30:	20000794 	.word	0x20000794
 8003b34:	20000004 	.word	0x20000004
 8003b38:	08005f84 	.word	0x08005f84
 8003b3c:	20000854 	.word	0x20000854
 8003b40:	08005e74 	.word	0x08005e74

08003b44 <MenuCalibration_VoltageOut>:
	EnterInMenu_Status=1;
 8003b44:	2201      	movs	r2, #1
 8003b46:	4b16      	ldr	r3, [pc, #88]	; (8003ba0 <MenuCalibration_VoltageOut+0x5c>)
{
 8003b48:	b510      	push	{r4, lr}
	EnterInMenu_Status=1;
 8003b4a:	701a      	strb	r2, [r3, #0]
	OUT_ON();
 8003b4c:	f7ff fdae 	bl	80036ac <OUT_ON>
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForU_OUT++;
 8003b50:	2802      	cmp	r0, #2
 8003b52:	4c14      	ldr	r4, [pc, #80]	; (8003ba4 <MenuCalibration_VoltageOut+0x60>)
 8003b54:	d11e      	bne.n	8003b94 <MenuCalibration_VoltageOut+0x50>
 8003b56:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003b58:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationValueForU_OUT--;
 8003b5a:	6323      	str	r3, [r4, #48]	; 0x30
	lcd_set_xy(0,0);
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	4608      	mov	r0, r1
 8003b60:	f7fd fe9a 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForU_OUT));
 8003b64:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003b66:	f7fd fb35 	bl	80011d4 <itoa>
 8003b6a:	f7fd ff15 	bl	8001998 <PrintToLCD>
	PrintToLCD("   ");
 8003b6e:	480e      	ldr	r0, [pc, #56]	; (8003ba8 <MenuCalibration_VoltageOut+0x64>)
 8003b70:	f7fd ff12 	bl	8001998 <PrintToLCD>
	lcd_set_xy(0,1);
 8003b74:	2101      	movs	r1, #1
 8003b76:	2000      	movs	r0, #0
 8003b78:	f7fd fe8e 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa_koma(U_OUT,2));
 8003b7c:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <MenuCalibration_VoltageOut+0x68>)
 8003b7e:	2102      	movs	r1, #2
 8003b80:	8818      	ldrh	r0, [r3, #0]
 8003b82:	f7fd fb9b 	bl	80012bc <itoa_koma>
 8003b86:	f7fd ff07 	bl	8001998 <PrintToLCD>
}
 8003b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V  ");
 8003b8e:	4808      	ldr	r0, [pc, #32]	; (8003bb0 <MenuCalibration_VoltageOut+0x6c>)
 8003b90:	f7fd bf02 	b.w	8001998 <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForU_OUT--;
 8003b94:	2801      	cmp	r0, #1
 8003b96:	d1e1      	bne.n	8003b5c <MenuCalibration_VoltageOut+0x18>
 8003b98:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	e7dd      	b.n	8003b5a <MenuCalibration_VoltageOut+0x16>
 8003b9e:	bf00      	nop
 8003ba0:	20000794 	.word	0x20000794
 8003ba4:	20000004 	.word	0x20000004
 8003ba8:	08005f84 	.word	0x08005f84
 8003bac:	2000084e 	.word	0x2000084e
 8003bb0:	08005e74 	.word	0x08005e74

08003bb4 <MenuCalibration_VoltageIn>:
	EnterInMenu_Status=1;
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	4b16      	ldr	r3, [pc, #88]	; (8003c10 <MenuCalibration_VoltageIn+0x5c>)
{
 8003bb8:	b510      	push	{r4, lr}
	EnterInMenu_Status=1;
 8003bba:	701a      	strb	r2, [r3, #0]
	OUT_ON();
 8003bbc:	f7ff fd76 	bl	80036ac <OUT_ON>
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForVoltage2++;
 8003bc0:	2802      	cmp	r0, #2
 8003bc2:	4c14      	ldr	r4, [pc, #80]	; (8003c14 <MenuCalibration_VoltageIn+0x60>)
 8003bc4:	d11e      	bne.n	8003c04 <MenuCalibration_VoltageIn+0x50>
 8003bc6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003bc8:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationValueForVoltage2--;
 8003bca:	63a3      	str	r3, [r4, #56]	; 0x38
	lcd_set_xy(0,0);
 8003bcc:	2100      	movs	r1, #0
 8003bce:	4608      	mov	r0, r1
 8003bd0:	f7fd fe62 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForVoltage2));
 8003bd4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003bd6:	f7fd fafd 	bl	80011d4 <itoa>
 8003bda:	f7fd fedd 	bl	8001998 <PrintToLCD>
	PrintToLCD("   ");
 8003bde:	480e      	ldr	r0, [pc, #56]	; (8003c18 <MenuCalibration_VoltageIn+0x64>)
 8003be0:	f7fd feda 	bl	8001998 <PrintToLCD>
	lcd_set_xy(0,1);
 8003be4:	2101      	movs	r1, #1
 8003be6:	2000      	movs	r0, #0
 8003be8:	f7fd fe56 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa_koma(U_IN,2));
 8003bec:	4b0b      	ldr	r3, [pc, #44]	; (8003c1c <MenuCalibration_VoltageIn+0x68>)
 8003bee:	2102      	movs	r1, #2
 8003bf0:	8818      	ldrh	r0, [r3, #0]
 8003bf2:	f7fd fb63 	bl	80012bc <itoa_koma>
 8003bf6:	f7fd fecf 	bl	8001998 <PrintToLCD>
}
 8003bfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V  ");
 8003bfe:	4808      	ldr	r0, [pc, #32]	; (8003c20 <MenuCalibration_VoltageIn+0x6c>)
 8003c00:	f7fd beca 	b.w	8001998 <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForVoltage2--;
 8003c04:	2801      	cmp	r0, #1
 8003c06:	d1e1      	bne.n	8003bcc <MenuCalibration_VoltageIn+0x18>
 8003c08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	e7dd      	b.n	8003bca <MenuCalibration_VoltageIn+0x16>
 8003c0e:	bf00      	nop
 8003c10:	20000794 	.word	0x20000794
 8003c14:	20000004 	.word	0x20000004
 8003c18:	08005f84 	.word	0x08005f84
 8003c1c:	2000083c 	.word	0x2000083c
 8003c20:	08005e74 	.word	0x08005e74

08003c24 <MenuCalibration_Resist_Comp_5V1A>:
		EnterInMenu_Status=1;
 8003c24:	2201      	movs	r2, #1
{
 8003c26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		EnterInMenu_Status=1;
 8003c28:	4b29      	ldr	r3, [pc, #164]	; (8003cd0 <MenuCalibration_Resist_Comp_5V1A+0xac>)
 8003c2a:	4e2a      	ldr	r6, [pc, #168]	; (8003cd4 <MenuCalibration_Resist_Comp_5V1A+0xb0>)
 8003c2c:	701a      	strb	r2, [r3, #0]
		OUT_ON();
 8003c2e:	f7ff fd3d 	bl	80036ac <OUT_ON>
		if (key == KEY_NEXT) ResistanceComp_Voltage++;
 8003c32:	2802      	cmp	r0, #2
 8003c34:	d12e      	bne.n	8003c94 <MenuCalibration_Resist_Comp_5V1A+0x70>
 8003c36:	8833      	ldrh	r3, [r6, #0]
 8003c38:	3301      	adds	r3, #1
		if (key == KEY_BACK) ResistanceComp_Voltage--;
 8003c3a:	8033      	strh	r3, [r6, #0]
		lcd_set_xy(0,0);
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	4608      	mov	r0, r1
 8003c40:	f7fd fe2a 	bl	8001898 <lcd_set_xy>
		PrintToLCD(itoa_koma(ResistanceComp_Voltage,2));
 8003c44:	2102      	movs	r1, #2
 8003c46:	8830      	ldrh	r0, [r6, #0]
 8003c48:	f7fd fb38 	bl	80012bc <itoa_koma>
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 8003c4c:	4f22      	ldr	r7, [pc, #136]	; (8003cd8 <MenuCalibration_Resist_Comp_5V1A+0xb4>)
		if (Current <= 0) CalibrationData.ResistanceComp_Ishunt_Wires = 70;
 8003c4e:	4c23      	ldr	r4, [pc, #140]	; (8003cdc <MenuCalibration_Resist_Comp_5V1A+0xb8>)
		PrintToLCD(itoa_koma(ResistanceComp_Voltage,2));
 8003c50:	f7fd fea2 	bl	8001998 <PrintToLCD>
		PrintToLCD("V ");
 8003c54:	4822      	ldr	r0, [pc, #136]	; (8003ce0 <MenuCalibration_Resist_Comp_5V1A+0xbc>)
 8003c56:	f7fd fe9f 	bl	8001998 <PrintToLCD>
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 8003c5a:	883b      	ldrh	r3, [r7, #0]
		if (Current <= 0) CalibrationData.ResistanceComp_Ishunt_Wires = 70;
 8003c5c:	8822      	ldrh	r2, [r4, #0]
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 8003c5e:	b29b      	uxth	r3, r3
		if (Current <= 0) CalibrationData.ResistanceComp_Ishunt_Wires = 70;
 8003c60:	b212      	sxth	r2, r2
 8003c62:	2a00      	cmp	r2, #0
 8003c64:	4d1f      	ldr	r5, [pc, #124]	; (8003ce4 <MenuCalibration_Resist_Comp_5V1A+0xc0>)
 8003c66:	dc1a      	bgt.n	8003c9e <MenuCalibration_Resist_Comp_5V1A+0x7a>
 8003c68:	2346      	movs	r3, #70	; 0x46
		else CalibrationData.ResistanceComp_Ishunt_Wires = Delta*10000/Current;
 8003c6a:	642b      	str	r3, [r5, #64]	; 0x40
		PrintToLCD(itoa(CalibrationData.ResistanceComp_Ishunt_Wires));
 8003c6c:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8003c6e:	f7fd fab1 	bl	80011d4 <itoa>
 8003c72:	f7fd fe91 	bl	8001998 <PrintToLCD>
		PrintToLCD("mOm       ");
 8003c76:	481c      	ldr	r0, [pc, #112]	; (8003ce8 <MenuCalibration_Resist_Comp_5V1A+0xc4>)
 8003c78:	f7fd fe8e 	bl	8001998 <PrintToLCD>
		Delta = U_PS - U_OUT_ForSetResistance;
 8003c7c:	4b1b      	ldr	r3, [pc, #108]	; (8003cec <MenuCalibration_Resist_Comp_5V1A+0xc8>)
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	883a      	ldrh	r2, [r7, #0]
		if (Current <= 0) CalibrationData.ResistanceComp_MOSFET = 10;
 8003c82:	8821      	ldrh	r1, [r4, #0]
		Delta = U_PS - U_OUT_ForSetResistance;
 8003c84:	b29b      	uxth	r3, r3
		if (Current <= 0) CalibrationData.ResistanceComp_MOSFET = 10;
 8003c86:	b209      	sxth	r1, r1
 8003c88:	2900      	cmp	r1, #0
		Delta = U_PS - U_OUT_ForSetResistance;
 8003c8a:	b292      	uxth	r2, r2
		if (Current <= 0) CalibrationData.ResistanceComp_MOSFET = 10;
 8003c8c:	dc14      	bgt.n	8003cb8 <MenuCalibration_Resist_Comp_5V1A+0x94>
 8003c8e:	230a      	movs	r3, #10
		else CalibrationData.ResistanceComp_MOSFET = Delta*10000/Current;
 8003c90:	64ab      	str	r3, [r5, #72]	; 0x48
}
 8003c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (key == KEY_BACK) ResistanceComp_Voltage--;
 8003c94:	2801      	cmp	r0, #1
 8003c96:	d1d1      	bne.n	8003c3c <MenuCalibration_Resist_Comp_5V1A+0x18>
 8003c98:	8833      	ldrh	r3, [r6, #0]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	e7cd      	b.n	8003c3a <MenuCalibration_Resist_Comp_5V1A+0x16>
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 8003c9e:	8832      	ldrh	r2, [r6, #0]
		else CalibrationData.ResistanceComp_Ishunt_Wires = Delta*10000/Current;
 8003ca0:	8821      	ldrh	r1, [r4, #0]
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 8003ca2:	1a9b      	subs	r3, r3, r2
		else CalibrationData.ResistanceComp_Ishunt_Wires = Delta*10000/Current;
 8003ca4:	f242 7210 	movw	r2, #10000	; 0x2710
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 8003ca8:	b21b      	sxth	r3, r3
		else CalibrationData.ResistanceComp_Ishunt_Wires = Delta*10000/Current;
 8003caa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003cae:	4353      	muls	r3, r2
 8003cb0:	b209      	sxth	r1, r1
 8003cb2:	fb93 f3f1 	sdiv	r3, r3, r1
 8003cb6:	e7d8      	b.n	8003c6a <MenuCalibration_Resist_Comp_5V1A+0x46>
		Delta = U_PS - U_OUT_ForSetResistance;
 8003cb8:	1a9b      	subs	r3, r3, r2
		else CalibrationData.ResistanceComp_MOSFET = Delta*10000/Current;
 8003cba:	f242 7210 	movw	r2, #10000	; 0x2710
		Delta = U_PS - U_OUT_ForSetResistance;
 8003cbe:	b21b      	sxth	r3, r3
		else CalibrationData.ResistanceComp_MOSFET = Delta*10000/Current;
 8003cc0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003cc4:	4353      	muls	r3, r2
 8003cc6:	8821      	ldrh	r1, [r4, #0]
 8003cc8:	b209      	sxth	r1, r1
 8003cca:	fb93 f3f1 	sdiv	r3, r3, r1
 8003cce:	e7df      	b.n	8003c90 <MenuCalibration_Resist_Comp_5V1A+0x6c>
 8003cd0:	20000794 	.word	0x20000794
 8003cd4:	2000027c 	.word	0x2000027c
 8003cd8:	200002c0 	.word	0x200002c0
 8003cdc:	2000083e 	.word	0x2000083e
 8003ce0:	08005e49 	.word	0x08005e49
 8003ce4:	20000004 	.word	0x20000004
 8003ce8:	08005da5 	.word	0x08005da5
 8003cec:	20000854 	.word	0x20000854

08003cf0 <MenuBatterySimilation>:
	lcd_set_xy(0,0);
 8003cf0:	2100      	movs	r1, #0
{
 8003cf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	EnterInMenu_Status = 1;
 8003cf6:	2601      	movs	r6, #1
 8003cf8:	4b2a      	ldr	r3, [pc, #168]	; (8003da4 <MenuBatterySimilation+0xb4>)
	if (On_off == 0)
 8003cfa:	4d2b      	ldr	r5, [pc, #172]	; (8003da8 <MenuBatterySimilation+0xb8>)
{
 8003cfc:	4607      	mov	r7, r0
	lcd_set_xy(0,0);
 8003cfe:	4608      	mov	r0, r1
	EnterInMenu_Status = 1;
 8003d00:	701e      	strb	r6, [r3, #0]
	lcd_set_xy(0,0);
 8003d02:	f7fd fdc9 	bl	8001898 <lcd_set_xy>
	if (On_off == 0)
 8003d06:	782b      	ldrb	r3, [r5, #0]
 8003d08:	4c28      	ldr	r4, [pc, #160]	; (8003dac <MenuBatterySimilation+0xbc>)
 8003d0a:	f003 08ff 	and.w	r8, r3, #255	; 0xff
 8003d0e:	bb2b      	cbnz	r3, 8003d5c <MenuBatterySimilation+0x6c>
		PrintToLCD(itoa_koma(U_PS,2));
 8003d10:	4b27      	ldr	r3, [pc, #156]	; (8003db0 <MenuBatterySimilation+0xc0>)
 8003d12:	2102      	movs	r1, #2
 8003d14:	8818      	ldrh	r0, [r3, #0]
 8003d16:	f7fd fad1 	bl	80012bc <itoa_koma>
 8003d1a:	f7fd fe3d 	bl	8001998 <PrintToLCD>
		PrintToLCD("V  ");
 8003d1e:	4825      	ldr	r0, [pc, #148]	; (8003db4 <MenuBatterySimilation+0xc4>)
 8003d20:	f7fd fe3a 	bl	8001998 <PrintToLCD>
		lcd_set_xy(7,0);
 8003d24:	4641      	mov	r1, r8
 8003d26:	2007      	movs	r0, #7
 8003d28:	f7fd fdb6 	bl	8001898 <lcd_set_xy>
		PrintToLCD(itoa(Current));
 8003d2c:	8820      	ldrh	r0, [r4, #0]
 8003d2e:	b200      	sxth	r0, r0
 8003d30:	f7fd fa50 	bl	80011d4 <itoa>
 8003d34:	f7fd fe30 	bl	8001998 <PrintToLCD>
		PrintToLCD("mA   ");
 8003d38:	481f      	ldr	r0, [pc, #124]	; (8003db8 <MenuBatterySimilation+0xc8>)
 8003d3a:	f7fd fe2d 	bl	8001998 <PrintToLCD>
		lcd_set_xy(5,1);
 8003d3e:	2005      	movs	r0, #5
 8003d40:	4631      	mov	r1, r6
 8003d42:	f7fd fda9 	bl	8001898 <lcd_set_xy>
		PrintToLCD("OFF ");
 8003d46:	481d      	ldr	r0, [pc, #116]	; (8003dbc <MenuBatterySimilation+0xcc>)
		PrintToLCD("ON ");
 8003d48:	f7fd fe26 	bl	8001998 <PrintToLCD>
    if (key == KEY_NEXT)
 8003d4c:	2f02      	cmp	r7, #2
 8003d4e:	d126      	bne.n	8003d9e <MenuBatterySimilation+0xae>
    	if (On_off == 0)
 8003d50:	782b      	ldrb	r3, [r5, #0]
 8003d52:	bb03      	cbnz	r3, 8003d96 <MenuBatterySimilation+0xa6>
}
 8003d54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    		OUT_ON();
 8003d58:	f7ff bca8 	b.w	80036ac <OUT_ON>
		PrintToLCD(itoa_koma(U_OUT,2));
 8003d5c:	4b18      	ldr	r3, [pc, #96]	; (8003dc0 <MenuBatterySimilation+0xd0>)
 8003d5e:	2102      	movs	r1, #2
 8003d60:	8818      	ldrh	r0, [r3, #0]
 8003d62:	f7fd faab 	bl	80012bc <itoa_koma>
 8003d66:	f7fd fe17 	bl	8001998 <PrintToLCD>
		PrintToLCD("V  ");
 8003d6a:	4812      	ldr	r0, [pc, #72]	; (8003db4 <MenuBatterySimilation+0xc4>)
 8003d6c:	f7fd fe14 	bl	8001998 <PrintToLCD>
		lcd_set_xy(7,0);
 8003d70:	2100      	movs	r1, #0
 8003d72:	2007      	movs	r0, #7
 8003d74:	f7fd fd90 	bl	8001898 <lcd_set_xy>
		PrintToLCD(itoa(Current));
 8003d78:	8820      	ldrh	r0, [r4, #0]
 8003d7a:	b200      	sxth	r0, r0
 8003d7c:	f7fd fa2a 	bl	80011d4 <itoa>
 8003d80:	f7fd fe0a 	bl	8001998 <PrintToLCD>
		PrintToLCD("mA    ");
 8003d84:	480f      	ldr	r0, [pc, #60]	; (8003dc4 <MenuBatterySimilation+0xd4>)
 8003d86:	f7fd fe07 	bl	8001998 <PrintToLCD>
		lcd_set_xy(6,1);
 8003d8a:	2006      	movs	r0, #6
 8003d8c:	4631      	mov	r1, r6
 8003d8e:	f7fd fd83 	bl	8001898 <lcd_set_xy>
		PrintToLCD("ON ");
 8003d92:	480d      	ldr	r0, [pc, #52]	; (8003dc8 <MenuBatterySimilation+0xd8>)
 8003d94:	e7d8      	b.n	8003d48 <MenuBatterySimilation+0x58>
}
 8003d96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    		OUT_OFF();
 8003d9a:	f7ff bc71 	b.w	8003680 <OUT_OFF>
}
 8003d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003da2:	bf00      	nop
 8003da4:	20000794 	.word	0x20000794
 8003da8:	20000796 	.word	0x20000796
 8003dac:	2000083e 	.word	0x2000083e
 8003db0:	20000854 	.word	0x20000854
 8003db4:	08005e74 	.word	0x08005e74
 8003db8:	08005e4c 	.word	0x08005e4c
 8003dbc:	08005d22 	.word	0x08005d22
 8003dc0:	2000084e 	.word	0x2000084e
 8003dc4:	08005d27 	.word	0x08005d27
 8003dc8:	08005d2e 	.word	0x08005d2e

08003dcc <MenuDIAGNOSTIC>:
	EnterInMenu_Status=1;
 8003dcc:	2201      	movs	r2, #1
{
 8003dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	EnterInMenu_Status=1;
 8003dd2:	4b93      	ldr	r3, [pc, #588]	; (8004020 <MenuDIAGNOSTIC+0x254>)
 8003dd4:	4c93      	ldr	r4, [pc, #588]	; (8004024 <MenuDIAGNOSTIC+0x258>)
	if (key == KEY_NEXT)
 8003dd6:	2802      	cmp	r0, #2
	EnterInMenu_Status=1;
 8003dd8:	701a      	strb	r2, [r3, #0]
{
 8003dda:	b086      	sub	sp, #24
 8003ddc:	f994 3000 	ldrsb.w	r3, [r4]
	if (key == KEY_NEXT)
 8003de0:	f040 8114 	bne.w	800400c <MenuDIAGNOSTIC+0x240>
		CountShow1++;
 8003de4:	4413      	add	r3, r2
 8003de6:	b25b      	sxtb	r3, r3
		if (CountShow1==MAXITEM) CountShow1=0;
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	bf08      	it	eq
 8003dec:	2300      	moveq	r3, #0
		if (CountShow1<0) CountShow1=MAXITEM-1;
 8003dee:	7023      	strb	r3, [r4, #0]
	if(CountShow1 == 0)
 8003df0:	f994 1000 	ldrsb.w	r1, [r4]
 8003df4:	b9e1      	cbnz	r1, 8003e30 <MenuDIAGNOSTIC+0x64>
		lcd_set_xy(0,0);
 8003df6:	4608      	mov	r0, r1
 8003df8:	f7fd fd4e 	bl	8001898 <lcd_set_xy>
		PrintToLCD("Uin=");
 8003dfc:	488a      	ldr	r0, [pc, #552]	; (8004028 <MenuDIAGNOSTIC+0x25c>)
 8003dfe:	f7fd fdcb 	bl	8001998 <PrintToLCD>
		PrintToLCD(		itoa_koma(U_IN/10,1));
 8003e02:	4b8a      	ldr	r3, [pc, #552]	; (800402c <MenuDIAGNOSTIC+0x260>)
 8003e04:	2101      	movs	r1, #1
 8003e06:	8818      	ldrh	r0, [r3, #0]
 8003e08:	230a      	movs	r3, #10
 8003e0a:	fbb0 f0f3 	udiv	r0, r0, r3
 8003e0e:	f7fd fa55 	bl	80012bc <itoa_koma>
 8003e12:	f7fd fdc1 	bl	8001998 <PrintToLCD>
		PrintToLCD(" Uc=");
 8003e16:	4886      	ldr	r0, [pc, #536]	; (8004030 <MenuDIAGNOSTIC+0x264>)
 8003e18:	f7fd fdbe 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa_koma(U_Controller,2));
 8003e1c:	4b85      	ldr	r3, [pc, #532]	; (8004034 <MenuDIAGNOSTIC+0x268>)
 8003e1e:	2102      	movs	r1, #2
 8003e20:	8818      	ldrh	r0, [r3, #0]
 8003e22:	f7fd fa4b 	bl	80012bc <itoa_koma>
 8003e26:	f7fd fdb7 	bl	8001998 <PrintToLCD>
		PrintToLCD("    ");
 8003e2a:	4883      	ldr	r0, [pc, #524]	; (8004038 <MenuDIAGNOSTIC+0x26c>)
 8003e2c:	f7fd fdb4 	bl	8001998 <PrintToLCD>
	if(CountShow1 == 1)
 8003e30:	f994 3000 	ldrsb.w	r3, [r4]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d119      	bne.n	8003e6c <MenuDIAGNOSTIC+0xa0>
		lcd_set_xy(0,0);
 8003e38:	2100      	movs	r1, #0
 8003e3a:	4608      	mov	r0, r1
 8003e3c:	f7fd fd2c 	bl	8001898 <lcd_set_xy>
		PrintToLCD("Ups ");
 8003e40:	487e      	ldr	r0, [pc, #504]	; (800403c <MenuDIAGNOSTIC+0x270>)
 8003e42:	f7fd fda9 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa_koma(U_PS,2));
 8003e46:	4b7e      	ldr	r3, [pc, #504]	; (8004040 <MenuDIAGNOSTIC+0x274>)
 8003e48:	2102      	movs	r1, #2
 8003e4a:	8818      	ldrh	r0, [r3, #0]
 8003e4c:	f7fd fa36 	bl	80012bc <itoa_koma>
 8003e50:	f7fd fda2 	bl	8001998 <PrintToLCD>
		PrintToLCD("V ");
 8003e54:	487b      	ldr	r0, [pc, #492]	; (8004044 <MenuDIAGNOSTIC+0x278>)
 8003e56:	f7fd fd9f 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa((RegularConvData[3])));
 8003e5a:	4b7b      	ldr	r3, [pc, #492]	; (8004048 <MenuDIAGNOSTIC+0x27c>)
 8003e5c:	88d8      	ldrh	r0, [r3, #6]
 8003e5e:	f7fd f9b9 	bl	80011d4 <itoa>
 8003e62:	f7fd fd99 	bl	8001998 <PrintToLCD>
		PrintToLCD("      ");
 8003e66:	4879      	ldr	r0, [pc, #484]	; (800404c <MenuDIAGNOSTIC+0x280>)
 8003e68:	f7fd fd96 	bl	8001998 <PrintToLCD>
	if(CountShow1 == 2)
 8003e6c:	f994 5000 	ldrsb.w	r5, [r4]
 8003e70:	2d02      	cmp	r5, #2
 8003e72:	d11b      	bne.n	8003eac <MenuDIAGNOSTIC+0xe0>
		OUT_ON();
 8003e74:	f7ff fc1a 	bl	80036ac <OUT_ON>
		lcd_set_xy(0,0);
 8003e78:	2100      	movs	r1, #0
 8003e7a:	4608      	mov	r0, r1
 8003e7c:	f7fd fd0c 	bl	8001898 <lcd_set_xy>
		PrintToLCD("Uout ");
 8003e80:	4873      	ldr	r0, [pc, #460]	; (8004050 <MenuDIAGNOSTIC+0x284>)
 8003e82:	f7fd fd89 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa_koma(U_OUT,2));
 8003e86:	4b73      	ldr	r3, [pc, #460]	; (8004054 <MenuDIAGNOSTIC+0x288>)
 8003e88:	4629      	mov	r1, r5
 8003e8a:	8818      	ldrh	r0, [r3, #0]
 8003e8c:	f7fd fa16 	bl	80012bc <itoa_koma>
 8003e90:	f7fd fd82 	bl	8001998 <PrintToLCD>
		PrintToLCD("V ");
 8003e94:	486b      	ldr	r0, [pc, #428]	; (8004044 <MenuDIAGNOSTIC+0x278>)
 8003e96:	f7fd fd7f 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa((RegularConvData[2])));
 8003e9a:	4b6b      	ldr	r3, [pc, #428]	; (8004048 <MenuDIAGNOSTIC+0x27c>)
 8003e9c:	8898      	ldrh	r0, [r3, #4]
 8003e9e:	f7fd f999 	bl	80011d4 <itoa>
 8003ea2:	f7fd fd79 	bl	8001998 <PrintToLCD>
		PrintToLCD("      ");
 8003ea6:	4869      	ldr	r0, [pc, #420]	; (800404c <MenuDIAGNOSTIC+0x280>)
 8003ea8:	f7fd fd76 	bl	8001998 <PrintToLCD>
	if(CountShow1 == 3)
 8003eac:	f994 3000 	ldrsb.w	r3, [r4]
 8003eb0:	2b03      	cmp	r3, #3
 8003eb2:	d11b      	bne.n	8003eec <MenuDIAGNOSTIC+0x120>
		OUT_ON();
 8003eb4:	f7ff fbfa 	bl	80036ac <OUT_ON>
		lcd_set_xy(0,0);
 8003eb8:	2100      	movs	r1, #0
 8003eba:	4608      	mov	r0, r1
 8003ebc:	f7fd fcec 	bl	8001898 <lcd_set_xy>
		PrintToLCD("I(1)");
 8003ec0:	4865      	ldr	r0, [pc, #404]	; (8004058 <MenuDIAGNOSTIC+0x28c>)
 8003ec2:	f7fd fd69 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa(Current));
 8003ec6:	4b65      	ldr	r3, [pc, #404]	; (800405c <MenuDIAGNOSTIC+0x290>)
 8003ec8:	8818      	ldrh	r0, [r3, #0]
 8003eca:	b200      	sxth	r0, r0
 8003ecc:	f7fd f982 	bl	80011d4 <itoa>
 8003ed0:	f7fd fd62 	bl	8001998 <PrintToLCD>
		PrintToLCD("mA ");
 8003ed4:	4862      	ldr	r0, [pc, #392]	; (8004060 <MenuDIAGNOSTIC+0x294>)
 8003ed6:	f7fd fd5f 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa((RegularConvData[1])));
 8003eda:	4b5b      	ldr	r3, [pc, #364]	; (8004048 <MenuDIAGNOSTIC+0x27c>)
 8003edc:	8858      	ldrh	r0, [r3, #2]
 8003ede:	f7fd f979 	bl	80011d4 <itoa>
 8003ee2:	f7fd fd59 	bl	8001998 <PrintToLCD>
		PrintToLCD("      ");
 8003ee6:	4859      	ldr	r0, [pc, #356]	; (800404c <MenuDIAGNOSTIC+0x280>)
 8003ee8:	f7fd fd56 	bl	8001998 <PrintToLCD>
	if(CountShow1 == 4)
 8003eec:	f994 3000 	ldrsb.w	r3, [r4]
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	d11b      	bne.n	8003f2c <MenuDIAGNOSTIC+0x160>
		OUT_ON();
 8003ef4:	f7ff fbda 	bl	80036ac <OUT_ON>
		lcd_set_xy(0,0);
 8003ef8:	2100      	movs	r1, #0
 8003efa:	4608      	mov	r0, r1
 8003efc:	f7fd fccc 	bl	8001898 <lcd_set_xy>
		PrintToLCD("I(50)");
 8003f00:	4858      	ldr	r0, [pc, #352]	; (8004064 <MenuDIAGNOSTIC+0x298>)
 8003f02:	f7fd fd49 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa(Current_x50));
 8003f06:	4b58      	ldr	r3, [pc, #352]	; (8004068 <MenuDIAGNOSTIC+0x29c>)
 8003f08:	8818      	ldrh	r0, [r3, #0]
 8003f0a:	b200      	sxth	r0, r0
 8003f0c:	f7fd f962 	bl	80011d4 <itoa>
 8003f10:	f7fd fd42 	bl	8001998 <PrintToLCD>
		PrintToLCD("mA ");
 8003f14:	4852      	ldr	r0, [pc, #328]	; (8004060 <MenuDIAGNOSTIC+0x294>)
 8003f16:	f7fd fd3f 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa(RegularConvData[0]));
 8003f1a:	4b4b      	ldr	r3, [pc, #300]	; (8004048 <MenuDIAGNOSTIC+0x27c>)
 8003f1c:	8818      	ldrh	r0, [r3, #0]
 8003f1e:	f7fd f959 	bl	80011d4 <itoa>
 8003f22:	f7fd fd39 	bl	8001998 <PrintToLCD>
		PrintToLCD("       ");
 8003f26:	4851      	ldr	r0, [pc, #324]	; (800406c <MenuDIAGNOSTIC+0x2a0>)
 8003f28:	f7fd fd36 	bl	8001998 <PrintToLCD>
	if(CountShow1 == 5)
 8003f2c:	f994 3000 	ldrsb.w	r3, [r4]
 8003f30:	2b05      	cmp	r3, #5
 8003f32:	d13a      	bne.n	8003faa <MenuDIAGNOSTIC+0x1de>
		CalibrationData.ResistanceComp_MOSFET= (int32_t)(U_PS-U_OUT_ForSetResistance)*10000/Current;
 8003f34:	4f42      	ldr	r7, [pc, #264]	; (8004040 <MenuDIAGNOSTIC+0x274>)
 8003f36:	4e4e      	ldr	r6, [pc, #312]	; (8004070 <MenuDIAGNOSTIC+0x2a4>)
		OUT_ON();
 8003f38:	f7ff fbb8 	bl	80036ac <OUT_ON>
		CalibrationData.ResistanceComp_MOSFET= (int32_t)(U_PS-U_OUT_ForSetResistance)*10000/Current;
 8003f3c:	883b      	ldrh	r3, [r7, #0]
 8003f3e:	8831      	ldrh	r1, [r6, #0]
 8003f40:	f8df 8118 	ldr.w	r8, [pc, #280]	; 800405c <MenuDIAGNOSTIC+0x290>
 8003f44:	1a59      	subs	r1, r3, r1
 8003f46:	f242 7310 	movw	r3, #10000	; 0x2710
 8003f4a:	434b      	muls	r3, r1
 8003f4c:	f8b8 2000 	ldrh.w	r2, [r8]
		lcd_set_xy(0,0);
 8003f50:	2100      	movs	r1, #0
		CalibrationData.ResistanceComp_MOSFET= (int32_t)(U_PS-U_OUT_ForSetResistance)*10000/Current;
 8003f52:	b212      	sxth	r2, r2
 8003f54:	fb93 f3f2 	sdiv	r3, r3, r2
 8003f58:	4d46      	ldr	r5, [pc, #280]	; (8004074 <MenuDIAGNOSTIC+0x2a8>)
		lcd_set_xy(0,0);
 8003f5a:	4608      	mov	r0, r1
		CalibrationData.ResistanceComp_MOSFET= (int32_t)(U_PS-U_OUT_ForSetResistance)*10000/Current;
 8003f5c:	64ab      	str	r3, [r5, #72]	; 0x48
		lcd_set_xy(0,0);
 8003f5e:	f7fd fc9b 	bl	8001898 <lcd_set_xy>
		PrintToLCD("R=");
 8003f62:	4845      	ldr	r0, [pc, #276]	; (8004078 <MenuDIAGNOSTIC+0x2ac>)
 8003f64:	f7fd fd18 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa(CalibrationData.ResistanceComp_Ishunt_Wires));
 8003f68:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8003f6a:	f7fd f933 	bl	80011d4 <itoa>
 8003f6e:	f7fd fd13 	bl	8001998 <PrintToLCD>
		PrintToLCD("mOm ");
 8003f72:	4842      	ldr	r0, [pc, #264]	; (800407c <MenuDIAGNOSTIC+0x2b0>)
 8003f74:	f7fd fd10 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa(CalibrationData.ResistanceComp_MOSFET));
 8003f78:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8003f7a:	f7fd f92b 	bl	80011d4 <itoa>
 8003f7e:	f7fd fd0b 	bl	8001998 <PrintToLCD>
		PrintToLCD("mOm    ");
 8003f82:	483f      	ldr	r0, [pc, #252]	; (8004080 <MenuDIAGNOSTIC+0x2b4>)
 8003f84:	f7fd fd08 	bl	8001998 <PrintToLCD>
		Print_to_USART1_d(Current,"I: ",0);
 8003f88:	f8b8 0000 	ldrh.w	r0, [r8]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	493d      	ldr	r1, [pc, #244]	; (8004084 <MenuDIAGNOSTIC+0x2b8>)
 8003f90:	b200      	sxth	r0, r0
 8003f92:	f001 f8fb 	bl	800518c <Print_to_USART1_d>
		Print_to_USART1_d(U_PS,"U_PS: ",2);
 8003f96:	8838      	ldrh	r0, [r7, #0]
 8003f98:	2202      	movs	r2, #2
 8003f9a:	493b      	ldr	r1, [pc, #236]	; (8004088 <MenuDIAGNOSTIC+0x2bc>)
 8003f9c:	f001 f8f6 	bl	800518c <Print_to_USART1_d>
		Print_to_USART1_d(U_OUT_ForSetResistance,"U out: ",2);
 8003fa0:	8830      	ldrh	r0, [r6, #0]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	4939      	ldr	r1, [pc, #228]	; (800408c <MenuDIAGNOSTIC+0x2c0>)
 8003fa6:	f001 f8f1 	bl	800518c <Print_to_USART1_d>
	if(CountShow1 == 6)
 8003faa:	f994 3000 	ldrsb.w	r3, [r4]
 8003fae:	2b06      	cmp	r3, #6
 8003fb0:	d10d      	bne.n	8003fce <MenuDIAGNOSTIC+0x202>
		lcd_set_xy(0,0);
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	4608      	mov	r0, r1
 8003fb6:	f7fd fc6f 	bl	8001898 <lcd_set_xy>
		PrintToLCD(ClockStringWithSec(time_sec,s));
 8003fba:	4b35      	ldr	r3, [pc, #212]	; (8004090 <MenuDIAGNOSTIC+0x2c4>)
 8003fbc:	a901      	add	r1, sp, #4
 8003fbe:	6818      	ldr	r0, [r3, #0]
 8003fc0:	f7fd fa26 	bl	8001410 <ClockStringWithSec>
 8003fc4:	f7fd fce8 	bl	8001998 <PrintToLCD>
		PrintToLCD("        ");
 8003fc8:	4832      	ldr	r0, [pc, #200]	; (8004094 <MenuDIAGNOSTIC+0x2c8>)
 8003fca:	f7fd fce5 	bl	8001998 <PrintToLCD>
	if(CountShow1 == 7)
 8003fce:	f994 3000 	ldrsb.w	r3, [r4]
 8003fd2:	2b07      	cmp	r3, #7
 8003fd4:	d117      	bne.n	8004006 <MenuDIAGNOSTIC+0x23a>
		OUT_ON();
 8003fd6:	f7ff fb69 	bl	80036ac <OUT_ON>
		lcd_set_xy(0,0);
 8003fda:	2100      	movs	r1, #0
 8003fdc:	4608      	mov	r0, r1
 8003fde:	f7fd fc5b 	bl	8001898 <lcd_set_xy>
		PrintToLCD("T=");
 8003fe2:	482d      	ldr	r0, [pc, #180]	; (8004098 <MenuDIAGNOSTIC+0x2cc>)
 8003fe4:	f7fd fcd8 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa(Temperature_Out));
 8003fe8:	4b2c      	ldr	r3, [pc, #176]	; (800409c <MenuDIAGNOSTIC+0x2d0>)
 8003fea:	6818      	ldr	r0, [r3, #0]
 8003fec:	f7fd f8f2 	bl	80011d4 <itoa>
 8003ff0:	f7fd fcd2 	bl	8001998 <PrintToLCD>
		PrintToLCD("C  ");
 8003ff4:	482a      	ldr	r0, [pc, #168]	; (80040a0 <MenuDIAGNOSTIC+0x2d4>)
 8003ff6:	f7fd fccf 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa(RegularConvData[3]));
 8003ffa:	4b13      	ldr	r3, [pc, #76]	; (8004048 <MenuDIAGNOSTIC+0x27c>)
 8003ffc:	88d8      	ldrh	r0, [r3, #6]
 8003ffe:	f7fd f8e9 	bl	80011d4 <itoa>
 8004002:	f7fd fcc9 	bl	8001998 <PrintToLCD>
}
 8004006:	b006      	add	sp, #24
 8004008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (key == KEY_BACK)
 800400c:	2801      	cmp	r0, #1
 800400e:	f47f aeef 	bne.w	8003df0 <MenuDIAGNOSTIC+0x24>
		CountShow1--;
 8004012:	3b01      	subs	r3, #1
 8004014:	b25b      	sxtb	r3, r3
		if (CountShow1<0) CountShow1=MAXITEM-1;
 8004016:	2b00      	cmp	r3, #0
 8004018:	bfb8      	it	lt
 800401a:	2307      	movlt	r3, #7
 800401c:	e6e7      	b.n	8003dee <MenuDIAGNOSTIC+0x22>
 800401e:	bf00      	nop
 8004020:	20000794 	.word	0x20000794
 8004024:	20000786 	.word	0x20000786
 8004028:	08005dcb 	.word	0x08005dcb
 800402c:	2000083c 	.word	0x2000083c
 8004030:	08005dd0 	.word	0x08005dd0
 8004034:	2000084c 	.word	0x2000084c
 8004038:	08005f83 	.word	0x08005f83
 800403c:	08005dd5 	.word	0x08005dd5
 8004040:	20000854 	.word	0x20000854
 8004044:	08005e49 	.word	0x08005e49
 8004048:	20000840 	.word	0x20000840
 800404c:	08005f81 	.word	0x08005f81
 8004050:	08005dda 	.word	0x08005dda
 8004054:	2000084e 	.word	0x2000084e
 8004058:	08005de0 	.word	0x08005de0
 800405c:	2000083e 	.word	0x2000083e
 8004060:	08005de5 	.word	0x08005de5
 8004064:	08005de9 	.word	0x08005de9
 8004068:	200002b8 	.word	0x200002b8
 800406c:	08005f80 	.word	0x08005f80
 8004070:	200002c0 	.word	0x200002c0
 8004074:	20000004 	.word	0x20000004
 8004078:	08005def 	.word	0x08005def
 800407c:	08005df2 	.word	0x08005df2
 8004080:	08005df7 	.word	0x08005df7
 8004084:	08005dff 	.word	0x08005dff
 8004088:	08005e03 	.word	0x08005e03
 800408c:	08005e0a 	.word	0x08005e0a
 8004090:	200007cc 	.word	0x200007cc
 8004094:	08005f7f 	.word	0x08005f7f
 8004098:	08005e12 	.word	0x08005e12
 800409c:	200002bc 	.word	0x200002bc
 80040a0:	08005e15 	.word	0x08005e15

080040a4 <adc_func>:
	Count1000mSecond++;
}


void adc_func()
{
 80040a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	//6 3  T
	//  4 temp
	//  5 vref


	volatile int32_t Ut = 0;
 80040a6:	2500      	movs	r5, #0
	volatile int32_t It_m = 0;
	#define NUM_READ 32
	//LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_1);


	U_Controller = 491520 / RegularConvData[5];// Uref V/10;  1200 * 4096/ChVref
 80040a8:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
 80040ac:	4c49      	ldr	r4, [pc, #292]	; (80041d4 <adc_func+0x130>)
	volatile int32_t Ut = 0;
 80040ae:	9500      	str	r5, [sp, #0]
	volatile int32_t It = 0;
 80040b0:	9501      	str	r5, [sp, #4]
	volatile int32_t Ut_m = 0;
 80040b2:	9502      	str	r5, [sp, #8]
	volatile int32_t It_m = 0;
 80040b4:	9503      	str	r5, [sp, #12]
	U_Controller = 491520 / RegularConvData[5];// Uref V/10;  1200 * 4096/ChVref
 80040b6:	8962      	ldrh	r2, [r4, #10]
	//Rt= (RegularConvData[5] *2050 )/ RegularConvData[7];
	Ut = (RegularConvData[2] * CalibrationData.CalibrationValueForU_OUT) / RegularConvData[5];
 80040b8:	4e47      	ldr	r6, [pc, #284]	; (80041d8 <adc_func+0x134>)
	U_Controller = 491520 / RegularConvData[5];// Uref V/10;  1200 * 4096/ChVref
 80040ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80040be:	4a47      	ldr	r2, [pc, #284]	; (80041dc <adc_func+0x138>)
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	8013      	strh	r3, [r2, #0]
	Ut = (RegularConvData[2] * CalibrationData.CalibrationValueForU_OUT) / RegularConvData[5];
 80040c4:	88a1      	ldrh	r1, [r4, #4]
 80040c6:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80040c8:	8962      	ldrh	r2, [r4, #10]
 80040ca:	434b      	muls	r3, r1
 80040cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80040d0:	9300      	str	r3, [sp, #0]
	Ut_m = middle_of_3Umax1(Ut);
 80040d2:	9800      	ldr	r0, [sp, #0]
 80040d4:	f7fd fa92 	bl	80015fc <middle_of_3Umax1>
 80040d8:	9002      	str	r0, [sp, #8]
	SumU1 =SumU1 + RunningAverageU1(Ut_m);
 80040da:	9802      	ldr	r0, [sp, #8]
 80040dc:	f7fd faae 	bl	800163c <RunningAverageU1>
 80040e0:	4a3f      	ldr	r2, [pc, #252]	; (80041e0 <adc_func+0x13c>)
	SumU1Counter ++;
 80040e2:	4940      	ldr	r1, [pc, #256]	; (80041e4 <adc_func+0x140>)
	SumU1 =SumU1 + RunningAverageU1(Ut_m);
 80040e4:	6813      	ldr	r3, [r2, #0]
 80040e6:	4418      	add	r0, r3
 80040e8:	6010      	str	r0, [r2, #0]
	SumU1Counter ++;
 80040ea:	880b      	ldrh	r3, [r1, #0]
 80040ec:	3301      	adds	r3, #1
 80040ee:	b21b      	sxth	r3, r3
 80040f0:	800b      	strh	r3, [r1, #0]
	if (SumU1Counter >= NUM_READ)
 80040f2:	880b      	ldrh	r3, [r1, #0]
 80040f4:	b21b      	sxth	r3, r3
 80040f6:	2b1f      	cmp	r3, #31
 80040f8:	dd0d      	ble.n	8004116 <adc_func+0x72>
	{
		U_OUT = SumU1/NUM_READ;
 80040fa:	2020      	movs	r0, #32
 80040fc:	6813      	ldr	r3, [r2, #0]
 80040fe:	fb93 f3f0 	sdiv	r3, r3, r0
 8004102:	4839      	ldr	r0, [pc, #228]	; (80041e8 <adc_func+0x144>)
 8004104:	b29b      	uxth	r3, r3
 8004106:	8003      	strh	r3, [r0, #0]
		SumU1Counter = 0;
		SumU1 = 0;
		if (U_PS < 3) U_PS = 0;
 8004108:	4b38      	ldr	r3, [pc, #224]	; (80041ec <adc_func+0x148>)
		SumU1Counter = 0;
 800410a:	800d      	strh	r5, [r1, #0]
		SumU1 = 0;
 800410c:	6015      	str	r5, [r2, #0]
		if (U_PS < 3) U_PS = 0;
 800410e:	881a      	ldrh	r2, [r3, #0]
 8004110:	2a02      	cmp	r2, #2
 8004112:	bf98      	it	ls
 8004114:	801d      	strhls	r5, [r3, #0]
	}

	It = (RegularConvData[1] * CalibrationData.CalibrationValueForCurrent_x1*10) / RegularConvData[5] ;//  Current A/10
 8004116:	230a      	movs	r3, #10
 8004118:	69b0      	ldr	r0, [r6, #24]
 800411a:	8861      	ldrh	r1, [r4, #2]
 800411c:	4343      	muls	r3, r0
 800411e:	434b      	muls	r3, r1
 8004120:	8962      	ldrh	r2, [r4, #10]
 8004122:	fbb3 f3f2 	udiv	r3, r3, r2
 8004126:	9301      	str	r3, [sp, #4]
	It_m = middle_of_3Imax1(It);
 8004128:	9801      	ldr	r0, [sp, #4]
 800412a:	f7fd fa2b 	bl	8001584 <middle_of_3Imax1>
 800412e:	9003      	str	r0, [sp, #12]
	SumI1 =SumI1 + RunningAverageI1(It_m);
 8004130:	9803      	ldr	r0, [sp, #12]
 8004132:	f7fd fa81 	bl	8001638 <RunningAverageI1>
 8004136:	4a2e      	ldr	r2, [pc, #184]	; (80041f0 <adc_func+0x14c>)
	SumI1Counter ++;
 8004138:	492e      	ldr	r1, [pc, #184]	; (80041f4 <adc_func+0x150>)
	SumI1 =SumI1 + RunningAverageI1(It_m);
 800413a:	6813      	ldr	r3, [r2, #0]
 800413c:	4418      	add	r0, r3
 800413e:	6010      	str	r0, [r2, #0]
	SumI1Counter ++;
 8004140:	880b      	ldrh	r3, [r1, #0]
 8004142:	3301      	adds	r3, #1
 8004144:	b21b      	sxth	r3, r3
 8004146:	800b      	strh	r3, [r1, #0]
	if (SumI1Counter >= NUM_READ)
 8004148:	880b      	ldrh	r3, [r1, #0]
 800414a:	b21b      	sxth	r3, r3
 800414c:	2b1f      	cmp	r3, #31
 800414e:	dd09      	ble.n	8004164 <adc_func+0xc0>
	{
		Current_x1 = SumI1/NUM_READ;
 8004150:	2020      	movs	r0, #32
 8004152:	6813      	ldr	r3, [r2, #0]
 8004154:	fb93 f3f0 	sdiv	r3, r3, r0
 8004158:	4827      	ldr	r0, [pc, #156]	; (80041f8 <adc_func+0x154>)
 800415a:	b21b      	sxth	r3, r3
 800415c:	8003      	strh	r3, [r0, #0]
		SumI1Counter = 0;
 800415e:	2300      	movs	r3, #0
 8004160:	800b      	strh	r3, [r1, #0]
		SumI1 = 0;
 8004162:	6013      	str	r3, [r2, #0]
	}

	It= (RegularConvData[0] * CalibrationData.CalibrationValueForCurrent_x50*10) / RegularConvData[5] ;//  Current A/10
 8004164:	230a      	movs	r3, #10
 8004166:	6a30      	ldr	r0, [r6, #32]
 8004168:	8821      	ldrh	r1, [r4, #0]
 800416a:	4343      	muls	r3, r0
 800416c:	434b      	muls	r3, r1
 800416e:	8962      	ldrh	r2, [r4, #10]
 8004170:	fbb3 f3f2 	udiv	r3, r3, r2
 8004174:	9301      	str	r3, [sp, #4]
	It_m = middle_of_3Imax2(It);
 8004176:	9801      	ldr	r0, [sp, #4]
 8004178:	f7fd fa22 	bl	80015c0 <middle_of_3Imax2>
 800417c:	9003      	str	r0, [sp, #12]
	SumI2 =SumI2 + RunningAverageI2(It_m);
 800417e:	9803      	ldr	r0, [sp, #12]
 8004180:	f7fd fa5b 	bl	800163a <RunningAverageI2>
 8004184:	4a1d      	ldr	r2, [pc, #116]	; (80041fc <adc_func+0x158>)
	SumI2Counter ++;
 8004186:	491e      	ldr	r1, [pc, #120]	; (8004200 <adc_func+0x15c>)
	SumI2 =SumI2 + RunningAverageI2(It_m);
 8004188:	6813      	ldr	r3, [r2, #0]
 800418a:	4418      	add	r0, r3
 800418c:	6010      	str	r0, [r2, #0]
	SumI2Counter ++;
 800418e:	880b      	ldrh	r3, [r1, #0]
 8004190:	481c      	ldr	r0, [pc, #112]	; (8004204 <adc_func+0x160>)
 8004192:	3301      	adds	r3, #1
 8004194:	b21b      	sxth	r3, r3
 8004196:	800b      	strh	r3, [r1, #0]
	if (SumI2Counter >= NUM_READ)
 8004198:	880b      	ldrh	r3, [r1, #0]
 800419a:	b21b      	sxth	r3, r3
 800419c:	2b1f      	cmp	r3, #31
 800419e:	dd08      	ble.n	80041b2 <adc_func+0x10e>
	{
		Current_x50 = SumI2/NUM_READ;
 80041a0:	2420      	movs	r4, #32
 80041a2:	6813      	ldr	r3, [r2, #0]
 80041a4:	fb93 f3f4 	sdiv	r3, r3, r4
 80041a8:	b21b      	sxth	r3, r3
 80041aa:	8003      	strh	r3, [r0, #0]
		SumI2Counter = 0;
 80041ac:	2300      	movs	r3, #0
 80041ae:	800b      	strh	r3, [r1, #0]
		SumI2 = 0;
 80041b0:	6013      	str	r3, [r2, #0]
	}

	if (Current_x50<=1000)
 80041b2:	8803      	ldrh	r3, [r0, #0]
 80041b4:	4a14      	ldr	r2, [pc, #80]	; (8004208 <adc_func+0x164>)
 80041b6:	b21b      	sxth	r3, r3
 80041b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		Current = Current_x50;
	else
		Current = 10*Current_x1;
 80041bc:	bfc9      	itett	gt
 80041be:	4b0e      	ldrgt	r3, [pc, #56]	; (80041f8 <adc_func+0x154>)
		Current = Current_x50;
 80041c0:	8803      	ldrhle	r3, [r0, #0]
		Current = 10*Current_x1;
 80041c2:	881b      	ldrhgt	r3, [r3, #0]
 80041c4:	eb03 0383 	addgt.w	r3, r3, r3, lsl #2
 80041c8:	bfc4      	itt	gt
 80041ca:	005b      	lslgt	r3, r3, #1
 80041cc:	b21b      	sxthgt	r3, r3
 80041ce:	8013      	strh	r3, [r2, #0]


	 //LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_1);
}
 80041d0:	b004      	add	sp, #16
 80041d2:	bd70      	pop	{r4, r5, r6, pc}
 80041d4:	20000840 	.word	0x20000840
 80041d8:	20000004 	.word	0x20000004
 80041dc:	2000084c 	.word	0x2000084c
 80041e0:	200007ac 	.word	0x200007ac
 80041e4:	200007b0 	.word	0x200007b0
 80041e8:	2000084e 	.word	0x2000084e
 80041ec:	20000854 	.word	0x20000854
 80041f0:	2000079c 	.word	0x2000079c
 80041f4:	200007a0 	.word	0x200007a0
 80041f8:	200002b6 	.word	0x200002b6
 80041fc:	200007a4 	.word	0x200007a4
 8004200:	200007a8 	.word	0x200007a8
 8004204:	200002b8 	.word	0x200002b8
 8004208:	2000083e 	.word	0x2000083e

0800420c <SysTick_Callback>:
{
 800420c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ENC_PollEncoder();
 800420e:	f7fe fa1b 	bl	8002648 <ENC_PollEncoder>
	TimerForReadyMeasurement_ms++;
 8004212:	4a35      	ldr	r2, [pc, #212]	; (80042e8 <SysTick_Callback+0xdc>)
	if (Count10mSecond >= 10)
 8004214:	4e35      	ldr	r6, [pc, #212]	; (80042ec <SysTick_Callback+0xe0>)
	TimerForReadyMeasurement_ms++;
 8004216:	6813      	ldr	r3, [r2, #0]
 8004218:	3301      	adds	r3, #1
 800421a:	6013      	str	r3, [r2, #0]
    if (U_OUT > 1000) GPIOB->BSRR =  GPIO_BSRR_BS0;
 800421c:	4b34      	ldr	r3, [pc, #208]	; (80042f0 <SysTick_Callback+0xe4>)
 800421e:	881a      	ldrh	r2, [r3, #0]
 8004220:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8004224:	bf82      	ittt	hi
 8004226:	2101      	movhi	r1, #1
 8004228:	4a32      	ldrhi	r2, [pc, #200]	; (80042f4 <SysTick_Callback+0xe8>)
 800422a:	6111      	strhi	r1, [r2, #16]
    if (U_OUT < 900)  GPIOB->BSRR =  GPIO_BSRR_BR0;
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004232:	bf3e      	ittt	cc
 8004234:	f44f 3280 	movcc.w	r2, #65536	; 0x10000
 8004238:	4b2e      	ldrcc	r3, [pc, #184]	; (80042f4 <SysTick_Callback+0xe8>)
 800423a:	611a      	strcc	r2, [r3, #16]
	if (Count10mSecond >= 10)
 800423c:	8833      	ldrh	r3, [r6, #0]
 800423e:	2b09      	cmp	r3, #9
 8004240:	d903      	bls.n	800424a <SysTick_Callback+0x3e>
		Count10mSecond = 0;
 8004242:	2300      	movs	r3, #0
 8004244:	8033      	strh	r3, [r6, #0]
		adc_func();
 8004246:	f7ff ff2d 	bl	80040a4 <adc_func>
	if (Count100mSecond >= 100)
 800424a:	4d2b      	ldr	r5, [pc, #172]	; (80042f8 <SysTick_Callback+0xec>)
	if (Count1000mSecond >= 1000)
 800424c:	4c2b      	ldr	r4, [pc, #172]	; (80042fc <SysTick_Callback+0xf0>)
	if (Count100mSecond >= 100)
 800424e:	882b      	ldrh	r3, [r5, #0]
 8004250:	2b63      	cmp	r3, #99	; 0x63
		Count100mSecond = 0;
 8004252:	bf84      	itt	hi
 8004254:	2300      	movhi	r3, #0
 8004256:	802b      	strhhi	r3, [r5, #0]
	if (Count1000mSecond >= 1000)
 8004258:	8823      	ldrh	r3, [r4, #0]
 800425a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800425e:	d336      	bcc.n	80042ce <SysTick_Callback+0xc2>
		Count1000mSecond = 0;
 8004260:	2300      	movs	r3, #0
		if (Current < 2)
 8004262:	4f27      	ldr	r7, [pc, #156]	; (8004300 <SysTick_Callback+0xf4>)
		Count1000mSecond = 0;
 8004264:	8023      	strh	r3, [r4, #0]
		if (Current < 2)
 8004266:	883b      	ldrh	r3, [r7, #0]
 8004268:	b21b      	sxth	r3, r3
 800426a:	2b01      	cmp	r3, #1
 800426c:	dc07      	bgt.n	800427e <SysTick_Callback+0x72>
			BatteryCapacityDischargeCurrent = BatteryCapacityDischargeCurrent + Module16(Current);
 800426e:	8838      	ldrh	r0, [r7, #0]
 8004270:	b200      	sxth	r0, r0
 8004272:	f7fd f88b 	bl	800138c <Module16>
 8004276:	4a23      	ldr	r2, [pc, #140]	; (8004304 <SysTick_Callback+0xf8>)
 8004278:	6813      	ldr	r3, [r2, #0]
 800427a:	4418      	add	r0, r3
 800427c:	6010      	str	r0, [r2, #0]
		if (Current > 2)
 800427e:	883b      	ldrh	r3, [r7, #0]
 8004280:	b21b      	sxth	r3, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	dd07      	ble.n	8004296 <SysTick_Callback+0x8a>
			BatteryCapacityCharge = BatteryCapacityCharge + Module16(Current);
 8004286:	8838      	ldrh	r0, [r7, #0]
 8004288:	b200      	sxth	r0, r0
 800428a:	f7fd f87f 	bl	800138c <Module16>
 800428e:	4a1e      	ldr	r2, [pc, #120]	; (8004308 <SysTick_Callback+0xfc>)
 8004290:	6813      	ldr	r3, [r2, #0]
 8004292:	4418      	add	r0, r3
 8004294:	6010      	str	r0, [r2, #0]
		if (ChargeStatusForTimer == 1)
 8004296:	4b1d      	ldr	r3, [pc, #116]	; (800430c <SysTick_Callback+0x100>)
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	2b01      	cmp	r3, #1
			ChargeTimeSec++;
 800429c:	bf01      	itttt	eq
 800429e:	4a1c      	ldreq	r2, [pc, #112]	; (8004310 <SysTick_Callback+0x104>)
 80042a0:	6813      	ldreq	r3, [r2, #0]
 80042a2:	3301      	addeq	r3, #1
 80042a4:	6013      	streq	r3, [r2, #0]
		if (DisChargeStatusForTimer == 1)
 80042a6:	4b1b      	ldr	r3, [pc, #108]	; (8004314 <SysTick_Callback+0x108>)
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	2b01      	cmp	r3, #1
			DischargeTimeSec++;
 80042ac:	bf01      	itttt	eq
 80042ae:	4a1a      	ldreq	r2, [pc, #104]	; (8004318 <SysTick_Callback+0x10c>)
 80042b0:	6813      	ldreq	r3, [r2, #0]
 80042b2:	3301      	addeq	r3, #1
 80042b4:	6013      	streq	r3, [r2, #0]
		if (Status_Timer_Sec == 1)
 80042b6:	4b19      	ldr	r3, [pc, #100]	; (800431c <SysTick_Callback+0x110>)
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b01      	cmp	r3, #1
			Timer_Sec++;
 80042bc:	bf01      	itttt	eq
 80042be:	4a18      	ldreq	r2, [pc, #96]	; (8004320 <SysTick_Callback+0x114>)
 80042c0:	6813      	ldreq	r3, [r2, #0]
 80042c2:	3301      	addeq	r3, #1
 80042c4:	6013      	streq	r3, [r2, #0]
		time_sec++;
 80042c6:	4a17      	ldr	r2, [pc, #92]	; (8004324 <SysTick_Callback+0x118>)
 80042c8:	6813      	ldr	r3, [r2, #0]
 80042ca:	3301      	adds	r3, #1
 80042cc:	6013      	str	r3, [r2, #0]
	Count10mSecond++;
 80042ce:	8833      	ldrh	r3, [r6, #0]
 80042d0:	3301      	adds	r3, #1
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	8033      	strh	r3, [r6, #0]
	Count100mSecond++;
 80042d6:	882b      	ldrh	r3, [r5, #0]
 80042d8:	3301      	adds	r3, #1
 80042da:	b29b      	uxth	r3, r3
 80042dc:	802b      	strh	r3, [r5, #0]
	Count1000mSecond++;
 80042de:	8823      	ldrh	r3, [r4, #0]
 80042e0:	3301      	adds	r3, #1
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	8023      	strh	r3, [r4, #0]
}
 80042e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042e8:	200007b4 	.word	0x200007b4
 80042ec:	200002b4 	.word	0x200002b4
 80042f0:	2000084e 	.word	0x2000084e
 80042f4:	40010c00 	.word	0x40010c00
 80042f8:	200002b2 	.word	0x200002b2
 80042fc:	200002b0 	.word	0x200002b0
 8004300:	2000083e 	.word	0x2000083e
 8004304:	20000774 	.word	0x20000774
 8004308:	20000770 	.word	0x20000770
 800430c:	2000077e 	.word	0x2000077e
 8004310:	20000780 	.word	0x20000780
 8004314:	2000078a 	.word	0x2000078a
 8004318:	2000078c 	.word	0x2000078c
 800431c:	20000798 	.word	0x20000798
 8004320:	200007b8 	.word	0x200007b8
 8004324:	200007cc 	.word	0x200007cc

08004328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004328:	b510      	push	{r4, lr}
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800432a:	4c1d      	ldr	r4, [pc, #116]	; (80043a0 <SystemClock_Config+0x78>)
 800432c:	6823      	ldr	r3, [r4, #0]
 800432e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004332:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8004334:	6823      	ldr	r3, [r4, #0]
  LL_RCC_HSE_Enable();

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8004336:	039a      	lsls	r2, r3, #14
 8004338:	d5fc      	bpl.n	8004334 <SystemClock_Config+0xc>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 800433a:	6863      	ldr	r3, [r4, #4]
 800433c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8004340:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8004344:	6063      	str	r3, [r4, #4]
#if defined(RCC_CFGR2_PREDIV1)
#if defined(RCC_CFGR2_PREDIV1SRC)
  MODIFY_REG(RCC->CFGR2, (RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC),
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
 8004346:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004348:	f023 030f 	bic.w	r3, r3, #15
 800434c:	62e3      	str	r3, [r4, #44]	; 0x2c
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800434e:	6823      	ldr	r3, [r4, #0]
 8004350:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004354:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8004356:	6823      	ldr	r3, [r4, #0]
  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_3);
  LL_RCC_PLL_Enable();

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8004358:	019b      	lsls	r3, r3, #6
 800435a:	d5fc      	bpl.n	8004356 <SystemClock_Config+0x2e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800435c:	6863      	ldr	r3, [r4, #4]
 800435e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004362:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004364:	6863      	ldr	r3, [r4, #4]
 8004366:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800436a:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800436c:	6863      	ldr	r3, [r4, #4]
 800436e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004372:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004374:	6863      	ldr	r3, [r4, #4]
 8004376:	f023 0303 	bic.w	r3, r3, #3
 800437a:	f043 0302 	orr.w	r3, r3, #2
 800437e:	6063      	str	r3, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004380:	6863      	ldr	r3, [r4, #4]
 8004382:	f003 030c 	and.w	r3, r3, #12
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004386:	2b08      	cmp	r3, #8
 8004388:	d1fa      	bne.n	8004380 <SystemClock_Config+0x58>
  {

  }
  LL_Init1msTick(24000000);
 800438a:	4806      	ldr	r0, [pc, #24]	; (80043a4 <SystemClock_Config+0x7c>)
 800438c:	f001 f932 	bl	80055f4 <LL_Init1msTick>
  LL_SetSystemCoreClock(24000000);
 8004390:	4804      	ldr	r0, [pc, #16]	; (80043a4 <SystemClock_Config+0x7c>)
 8004392:	f001 f93d 	bl	8005610 <LL_SetSystemCoreClock>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 8004396:	6863      	ldr	r3, [r4, #4]
 8004398:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800439c:	6063      	str	r3, [r4, #4]
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_2);
}
 800439e:	bd10      	pop	{r4, pc}
 80043a0:	40021000 	.word	0x40021000
 80043a4:	016e3600 	.word	0x016e3600

080043a8 <main>:
{
 80043a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 80043ac:	2001      	movs	r0, #1
{
 80043ae:	b095      	sub	sp, #84	; 0x54
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043b0:	f8df 9388 	ldr.w	r9, [pc, #904]	; 800473c <main+0x394>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 80043b4:	f7fd fb18 	bl	80019e8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80043b8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80043bc:	f7fd fb06 	bl	80019cc <LL_APB1_GRP1_EnableClock>
 80043c0:	f8d9 200c 	ldr.w	r2, [r9, #12]
  reg_value  =  (reg_value                                   |
 80043c4:	4bc9      	ldr	r3, [pc, #804]	; (80046ec <main+0x344>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043ca:	0412      	lsls	r2, r2, #16
 80043cc:	0c12      	lsrs	r2, r2, #16
  reg_value  =  (reg_value                                   |
 80043ce:	4313      	orrs	r3, r2
  SCB->AIRCR =  reg_value;
 80043d0:	f8c9 300c 	str.w	r3, [r9, #12]
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 80043d4:	4bc6      	ldr	r3, [pc, #792]	; (80046f0 <main+0x348>)
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80043d6:	4ec7      	ldr	r6, [pc, #796]	; (80046f4 <main+0x34c>)
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 80043d8:	685a      	ldr	r2, [r3, #4]

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_15;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80043da:	2400      	movs	r4, #0
 80043dc:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 80043e0:	605a      	str	r2, [r3, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 80043e2:	685a      	ldr	r2, [r3, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80043e4:	2501      	movs	r5, #1
 80043e6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80043ea:	605a      	str	r2, [r3, #4]
  SystemClock_Config();
 80043ec:	f7ff ff9c 	bl	8004328 <SystemClock_Config>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043f0:	2214      	movs	r2, #20
 80043f2:	2100      	movs	r1, #0
 80043f4:	a80d      	add	r0, sp, #52	; 0x34
 80043f6:	f001 f940 	bl	800567a <memset>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 80043fa:	2020      	movs	r0, #32
 80043fc:	f7fd faf4 	bl	80019e8 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8004400:	2004      	movs	r0, #4
 8004402:	f7fd faf1 	bl	80019e8 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8004406:	2008      	movs	r0, #8
 8004408:	f7fd faee 	bl	80019e8 <LL_APB2_GRP1_EnableClock>
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800440c:	f248 0301 	movw	r3, #32769	; 0x8001
 8004410:	6173      	str	r3, [r6, #20]
 8004412:	f64f 5303 	movw	r3, #64771	; 0xfd03
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004416:	2702      	movs	r7, #2
  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12|LL_GPIO_PIN_13
                          |LL_GPIO_PIN_14|LL_GPIO_PIN_15;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8004418:	f04f 0804 	mov.w	r8, #4
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800441c:	f04f 0b08 	mov.w	fp, #8
 8004420:	f8df a31c 	ldr.w	sl, [pc, #796]	; 8004740 <main+0x398>
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004424:	a90d      	add	r1, sp, #52	; 0x34
 8004426:	f8ca 3014 	str.w	r3, [sl, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800442a:	4bb3      	ldr	r3, [pc, #716]	; (80046f8 <main+0x350>)
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800442c:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800442e:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004432:	e9cd 740f 	strd	r7, r4, [sp, #60]	; 0x3c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004436:	f000 ff46 	bl	80052c6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_8;
 800443a:	4bb0      	ldr	r3, [pc, #704]	; (80046fc <main+0x354>)
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800443c:	a90d      	add	r1, sp, #52	; 0x34
 800443e:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004440:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004444:	e9cd 740f 	strd	r7, r4, [sp, #60]	; 0x3c
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004448:	f000 ff3d 	bl	80052c6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12|LL_GPIO_PIN_13
 800444c:	4bac      	ldr	r3, [pc, #688]	; (8004700 <main+0x358>)
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800444e:	a90d      	add	r1, sp, #52	; 0x34
 8004450:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004452:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8004456:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800445a:	970f      	str	r7, [sp, #60]	; 0x3c
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800445c:	f000 ff33 	bl	80052c6 <LL_GPIO_Init>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004460:	4ba8      	ldr	r3, [pc, #672]	; (8004704 <main+0x35c>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004462:	a90d      	add	r1, sp, #52	; 0x34
 8004464:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004466:	e9cd 3b0d 	strd	r3, fp, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800446a:	9511      	str	r5, [sp, #68]	; 0x44
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800446c:	f000 ff2b 	bl	80052c6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8004470:	f24f 03f0 	movw	r3, #61680	; 0xf0f0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004474:	a90d      	add	r1, sp, #52	; 0x34
 8004476:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004478:	e9cd 3b0d 	strd	r3, fp, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800447c:	9511      	str	r5, [sp, #68]	; 0x44
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800447e:	f000 ff22 	bl	80052c6 <LL_GPIO_Init>
  SET_BIT(RCC->AHBENR, Periphs);
 8004482:	4ba1      	ldr	r3, [pc, #644]	; (8004708 <main+0x360>)
 8004484:	695a      	ldr	r2, [r3, #20]
 8004486:	432a      	orrs	r2, r5
 8004488:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	402b      	ands	r3, r5
 800448e:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8004490:	9b05      	ldr	r3, [sp, #20]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004492:	f8d9 000c 	ldr.w	r0, [r9, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004496:	4d9d      	ldr	r5, [pc, #628]	; (800470c <main+0x364>)
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004498:	f3c0 2002 	ubfx	r0, r0, #8, #3
 800449c:	f7fd fc32 	bl	8001d04 <NVIC_EncodePriority.constprop.31>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044a4:	fa00 f008 	lsl.w	r0, r0, r8
 80044a8:	b2c0      	uxtb	r0, r0
 80044aa:	f885 030b 	strb.w	r0, [r5, #779]	; 0x30b
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80044ae:	221c      	movs	r2, #28
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044b0:	602b      	str	r3, [r5, #0]
 80044b2:	4621      	mov	r1, r4
 80044b4:	a80d      	add	r0, sp, #52	; 0x34
 80044b6:	f001 f8e0 	bl	800567a <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ba:	2214      	movs	r2, #20
 80044bc:	4621      	mov	r1, r4
 80044be:	a808      	add	r0, sp, #32
 80044c0:	f001 f8db 	bl	800567a <memset>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80044c4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80044c8:	f7fd fa8e 	bl	80019e8 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80044cc:	4640      	mov	r0, r8
 80044ce:	f7fd fa8b 	bl	80019e8 <LL_APB2_GRP1_EnableClock>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80044d2:	2309      	movs	r3, #9
 80044d4:	4a8e      	ldr	r2, [pc, #568]	; (8004710 <main+0x368>)
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044d6:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80044d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80044dc:	2303      	movs	r3, #3
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044de:	4630      	mov	r0, r6
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80044e0:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044e4:	f000 feef 	bl	80052c6 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80044e8:	4b8a      	ldr	r3, [pc, #552]	; (8004714 <main+0x36c>)
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044ea:	a908      	add	r1, sp, #32
 80044ec:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80044ee:	e9cd 3808 	strd	r3, r8, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044f2:	f000 fee8 	bl	80052c6 <LL_GPIO_Init>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044f6:	f8d9 000c 	ldr.w	r0, [r9, #12]
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 80044fa:	f44f 7980 	mov.w	r9, #256	; 0x100
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80044fe:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8004502:	f7fd fbff 	bl	8001d04 <NVIC_EncodePriority.constprop.31>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004506:	2320      	movs	r3, #32
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004508:	fa00 f008 	lsl.w	r0, r0, r8
 800450c:	b2c0      	uxtb	r0, r0
 800450e:	f885 0325 	strb.w	r0, [r5, #805]	; 0x325
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004512:	606b      	str	r3, [r5, #4]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8004514:	4d80      	ldr	r5, [pc, #512]	; (8004718 <main+0x370>)
  LL_USART_Init(USART1, &USART_InitStruct);
 8004516:	a90d      	add	r1, sp, #52	; 0x34
 8004518:	68eb      	ldr	r3, [r5, #12]
 800451a:	4628      	mov	r0, r5
 800451c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004520:	60eb      	str	r3, [r5, #12]
  USART_InitStruct.BaudRate = 38400;
 8004522:	f44f 4316 	mov.w	r3, #38400	; 0x9600
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004526:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800452a:	230c      	movs	r3, #12
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800452c:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004530:	e9cd 3411 	strd	r3, r4, [sp, #68]	; 0x44
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004534:	9413      	str	r4, [sp, #76]	; 0x4c
  LL_USART_Init(USART1, &USART_InitStruct);
 8004536:	f000 ffef 	bl	8005518 <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800453a:	692b      	ldr	r3, [r5, #16]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800453c:	2214      	movs	r2, #20
 800453e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004542:	612b      	str	r3, [r5, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8004544:	696b      	ldr	r3, [r5, #20]
 8004546:	4621      	mov	r1, r4
 8004548:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800454c:	616b      	str	r3, [r5, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800454e:	68eb      	ldr	r3, [r5, #12]
 8004550:	a808      	add	r0, sp, #32
 8004552:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004556:	60eb      	str	r3, [r5, #12]
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8004558:	e9cd 4406 	strd	r4, r4, [sp, #24]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800455c:	f001 f88d 	bl	800567a <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004560:	2214      	movs	r2, #20
 8004562:	4621      	mov	r1, r4
 8004564:	a80d      	add	r0, sp, #52	; 0x34
 8004566:	f001 f888 	bl	800567a <memset>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 800456a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800456e:	f7fd fa3b 	bl	80019e8 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8004572:	4640      	mov	r0, r8
 8004574:	f7fd fa38 	bl	80019e8 <LL_APB2_GRP1_EnableClock>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_6;
 8004578:	f644 634e 	movw	r3, #20046	; 0x4e4e
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800457c:	a90d      	add	r1, sp, #52	; 0x34
 800457e:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004580:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004584:	f000 fe9f 	bl	80052c6 <LL_GPIO_Init>
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8004588:	4b64      	ldr	r3, [pc, #400]	; (800471c <main+0x374>)
  LL_DMA_ConfigAddresses(DMA1,
 800458a:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8004744 <main+0x39c>
 800458e:	681a      	ldr	r2, [r3, #0]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8004590:	f5a5 55a0 	sub.w	r5, r5, #5120	; 0x1400
 8004594:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004598:	f022 0210 	bic.w	r2, r2, #16
 800459c:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	a906      	add	r1, sp, #24
 80045a2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80045a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045aa:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	4628      	mov	r0, r5
 80045b0:	f042 0220 	orr.w	r2, r2, #32
 80045b4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045bc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80045c4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80045cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045d0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80045d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045dc:	601a      	str	r2, [r3, #0]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
  }
  /* Direction Periph to Memory and Memory to Memory */
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 80045de:	4a50      	ldr	r2, [pc, #320]	; (8004720 <main+0x378>)
 80045e0:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 80045e2:	f8c3 800c 	str.w	r8, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	0c12      	lsrs	r2, r2, #16
 80045ea:	0412      	lsls	r2, r2, #16
 80045ec:	f042 0206 	orr.w	r2, r2, #6
 80045f0:	605a      	str	r2, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	f042 0201 	orr.w	r2, r2, #1
 80045f8:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80045fa:	9406      	str	r4, [sp, #24]
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 80045fc:	f8cd 901c 	str.w	r9, [sp, #28]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8004600:	f000 fe01 	bl	8005206 <LL_ADC_Init>
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS;
 8004604:	f44f 03a0 	mov.w	r3, #5242880	; 0x500000
 8004608:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 800460c:	4628      	mov	r0, r5
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS;
 800460e:	e9cd 1308 	strd	r1, r3, [sp, #32]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8004612:	a908      	add	r1, sp, #32
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8004614:	e9cd 470a 	strd	r4, r7, [sp, #40]	; 0x28
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8004618:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 800461c:	f000 fe08 	bl	8005230 <LL_ADC_REG_Init>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8004620:	4940      	ldr	r1, [pc, #256]	; (8004724 <main+0x37c>)
 8004622:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004626:	f7fd fb51 	bl	8001ccc <LL_ADC_REG_SetSequencerRanks.constprop.30>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 800462a:	483e      	ldr	r0, [pc, #248]	; (8004724 <main+0x37c>)
 800462c:	f7fd fb24 	bl	8001c78 <LL_ADC_SetChannelSamplingTime.constprop.29>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_2);
 8004630:	493d      	ldr	r1, [pc, #244]	; (8004728 <main+0x380>)
 8004632:	f240 2005 	movw	r0, #517	; 0x205
 8004636:	f7fd fb49 	bl	8001ccc <LL_ADC_REG_SetSequencerRanks.constprop.30>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 800463a:	483b      	ldr	r0, [pc, #236]	; (8004728 <main+0x380>)
 800463c:	f7fd fb1c 	bl	8001c78 <LL_ADC_SetChannelSamplingTime.constprop.29>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_3);
 8004640:	493a      	ldr	r1, [pc, #232]	; (800472c <main+0x384>)
 8004642:	f240 200a 	movw	r0, #522	; 0x20a
 8004646:	f7fd fb41 	bl	8001ccc <LL_ADC_REG_SetSequencerRanks.constprop.30>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 800464a:	4838      	ldr	r0, [pc, #224]	; (800472c <main+0x384>)
 800464c:	f7fd fb14 	bl	8001c78 <LL_ADC_SetChannelSamplingTime.constprop.29>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_6);
 8004650:	4937      	ldr	r1, [pc, #220]	; (8004730 <main+0x388>)
 8004652:	f240 200f 	movw	r0, #527	; 0x20f
 8004656:	f7fd fb39 	bl	8001ccc <LL_ADC_REG_SetSequencerRanks.constprop.30>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 800465a:	4835      	ldr	r0, [pc, #212]	; (8004730 <main+0x388>)
 800465c:	f7fd fb0c 	bl	8001c78 <LL_ADC_SetChannelSamplingTime.constprop.29>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_TEMPSENSOR);
 8004660:	4934      	ldr	r1, [pc, #208]	; (8004734 <main+0x38c>)
 8004662:	f44f 7005 	mov.w	r0, #532	; 0x214
 8004666:	f7fd fb31 	bl	8001ccc <LL_ADC_REG_SetSequencerRanks.constprop.30>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_TEMPSENSOR, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 800466a:	4832      	ldr	r0, [pc, #200]	; (8004734 <main+0x38c>)
 800466c:	f7fd fb04 	bl	8001c78 <LL_ADC_SetChannelSamplingTime.constprop.29>
  MODIFY_REG(ADCxy_COMMON->CR2, (ADC_CR2_TSVREFE), PathInternal);
 8004670:	68ab      	ldr	r3, [r5, #8]
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_VREFINT);
 8004672:	4931      	ldr	r1, [pc, #196]	; (8004738 <main+0x390>)
 8004674:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004678:	60ab      	str	r3, [r5, #8]
 800467a:	f240 2019 	movw	r0, #537	; 0x219
 800467e:	f7fd fb25 	bl	8001ccc <LL_ADC_REG_SetSequencerRanks.constprop.30>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004682:	482d      	ldr	r0, [pc, #180]	; (8004738 <main+0x390>)
 8004684:	f7fd faf8 	bl	8001c78 <LL_ADC_SetChannelSamplingTime.constprop.29>
 8004688:	68ab      	ldr	r3, [r5, #8]
	  delay_ms(100);
 800468a:	2064      	movs	r0, #100	; 0x64
 800468c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004690:	60ab      	str	r3, [r5, #8]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8004692:	68ab      	ldr	r3, [r5, #8]
 8004694:	f043 0301 	orr.w	r3, r3, #1
 8004698:	60ab      	str	r3, [r5, #8]
 800469a:	f7fc fc7f 	bl	8000f9c <delay_ms>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 800469e:	68ab      	ldr	r3, [r5, #8]
 80046a0:	f043 0304 	orr.w	r3, r3, #4
 80046a4:	60ab      	str	r3, [r5, #8]
 80046a6:	e9cd 6801 	strd	r6, r8, [sp, #4]
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 80046aa:	68ac      	ldr	r4, [r5, #8]
	  while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0) {}
 80046ac:	f014 0404 	ands.w	r4, r4, #4
 80046b0:	d1fb      	bne.n	80046aa <main+0x302>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80046b2:	68ab      	ldr	r3, [r5, #8]
  LL_DAC_InitTypeDef DAC_InitStruct = {0};
 80046b4:	2210      	movs	r2, #16
 80046b6:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80046ba:	60ab      	str	r3, [r5, #8]
 80046bc:	4621      	mov	r1, r4
 80046be:	a808      	add	r0, sp, #32
 80046c0:	f000 ffdb 	bl	800567a <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046c4:	2214      	movs	r2, #20
 80046c6:	4621      	mov	r1, r4
 80046c8:	a80d      	add	r0, sp, #52	; 0x34
 80046ca:	f000 ffd6 	bl	800567a <memset>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_DAC1);
 80046ce:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80046d2:	f7fd f97b 	bl	80019cc <LL_APB1_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80046d6:	2004      	movs	r0, #4
 80046d8:	f7fd f986 	bl	80019e8 <LL_APB2_GRP1_EnableClock>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 80046dc:	f243 0330 	movw	r3, #12336	; 0x3030
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046e0:	4e16      	ldr	r6, [pc, #88]	; (800473c <main+0x394>)
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046e2:	a90d      	add	r1, sp, #52	; 0x34
 80046e4:	4803      	ldr	r0, [pc, #12]	; (80046f4 <main+0x34c>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80046e6:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 80046ea:	e02d      	b.n	8004748 <main+0x3a0>
 80046ec:	05fa0300 	.word	0x05fa0300
 80046f0:	40010000 	.word	0x40010000
 80046f4:	40010800 	.word	0x40010800
 80046f8:	04800181 	.word	0x04800181
 80046fc:	04010303 	.word	0x04010303
 8004700:	04fc00fc 	.word	0x04fc00fc
 8004704:	04190019 	.word	0x04190019
 8004708:	40021000 	.word	0x40021000
 800470c:	e000e100 	.word	0xe000e100
 8004710:	04020002 	.word	0x04020002
 8004714:	04040004 	.word	0x04040004
 8004718:	40013800 	.word	0x40013800
 800471c:	40020008 	.word	0x40020008
 8004720:	4001244c 	.word	0x4001244c
 8004724:	02300001 	.word	0x02300001
 8004728:	02600002 	.word	0x02600002
 800472c:	02900003 	.word	0x02900003
 8004730:	03200006 	.word	0x03200006
 8004734:	81200010 	.word	0x81200010
 8004738:	81500011 	.word	0x81500011
 800473c:	e000ed00 	.word	0xe000ed00
 8004740:	40010c00 	.word	0x40010c00
 8004744:	20000840 	.word	0x20000840
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004748:	f000 fdbd 	bl	80052c6 <LL_GPIO_Init>
 800474c:	68f0      	ldr	r0, [r6, #12]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800474e:	f44f 0880 	mov.w	r8, #4194304	; 0x400000
  NVIC_SetPriority(TIM6_DAC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004752:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8004756:	f7fd fad5 	bl	8001d04 <NVIC_EncodePriority.constprop.31>
  DAC_InitStruct.TriggerSource = LL_DAC_TRIG_SOFTWARE;
 800475a:	2338      	movs	r3, #56	; 0x38
  LL_DAC_Init(DAC, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 800475c:	4db3      	ldr	r5, [pc, #716]	; (8004a2c <main+0x684>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800475e:	4fb4      	ldr	r7, [pc, #720]	; (8004a30 <main+0x688>)
 8004760:	0100      	lsls	r0, r0, #4
 8004762:	b2c0      	uxtb	r0, r0
 8004764:	f887 0336 	strb.w	r0, [r7, #822]	; 0x336
 8004768:	aa08      	add	r2, sp, #32
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800476a:	f8c7 8004 	str.w	r8, [r7, #4]
 800476e:	49b1      	ldr	r1, [pc, #708]	; (8004a34 <main+0x68c>)
 8004770:	4628      	mov	r0, r5
  DAC_InitStruct.WaveAutoGeneration = LL_DAC_WAVE_AUTO_GENERATION_NONE;
 8004772:	e9cd 3408 	strd	r3, r4, [sp, #32]
  DAC_InitStruct.OutputBuffer = LL_DAC_OUTPUT_BUFFER_ENABLE;
 8004776:	940b      	str	r4, [sp, #44]	; 0x2c
  LL_DAC_Init(DAC, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8004778:	f000 fd7c 	bl	8005274 <LL_DAC_Init>
  *         @arg @ref LL_DAC_CHANNEL_2
  * @retval None
  */
__STATIC_INLINE void LL_DAC_DisableTrigger(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
  CLEAR_BIT(DACx->CR,
 800477c:	682b      	ldr	r3, [r5, #0]
  LL_DAC_Init(DAC, LL_DAC_CHANNEL_2, &DAC_InitStruct);
 800477e:	aa08      	add	r2, sp, #32
 8004780:	f023 0304 	bic.w	r3, r3, #4
 8004784:	602b      	str	r3, [r5, #0]
 8004786:	49ac      	ldr	r1, [pc, #688]	; (8004a38 <main+0x690>)
 8004788:	4628      	mov	r0, r5
 800478a:	f000 fd73 	bl	8005274 <LL_DAC_Init>
 800478e:	682b      	ldr	r3, [r5, #0]
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004790:	2214      	movs	r2, #20
 8004792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004796:	602b      	str	r3, [r5, #0]
	 DAC->CR |= DAC_CR_EN1;
 8004798:	682b      	ldr	r3, [r5, #0]
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800479a:	4621      	mov	r1, r4
	 DAC->CR |= DAC_CR_EN1;
 800479c:	f043 0301 	orr.w	r3, r3, #1
 80047a0:	602b      	str	r3, [r5, #0]
	 DAC->CR |= DAC_CR_EN2;
 80047a2:	682b      	ldr	r3, [r5, #0]
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80047a4:	a80d      	add	r0, sp, #52	; 0x34
	 DAC->CR |= DAC_CR_EN2;
 80047a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047aa:	602b      	str	r3, [r5, #0]
	 DAC->DHR12R1 = 0;
 80047ac:	60ac      	str	r4, [r5, #8]
	 DAC->DHR12R2 = 0;
 80047ae:	616c      	str	r4, [r5, #20]
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80047b0:	f000 ff63 	bl	800567a <memset>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 80047b4:	2010      	movs	r0, #16
 80047b6:	f7fd f909 	bl	80019cc <LL_APB1_GRP1_EnableClock>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047ba:	68f0      	ldr	r0, [r6, #12]
  TIM_InitStruct.Prescaler = 2400;
 80047bc:	f44f 6916 	mov.w	r9, #2400	; 0x960
  NVIC_SetPriority(TIM6_DAC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80047c0:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80047c4:	f7fd fa9e 	bl	8001d04 <NVIC_EncodePriority.constprop.31>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047c8:	0100      	lsls	r0, r0, #4
 80047ca:	b2c0      	uxtb	r0, r0
 80047cc:	f887 0336 	strb.w	r0, [r7, #822]	; 0x336
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047d0:	f8c7 8004 	str.w	r8, [r7, #4]
  TIM_InitStruct.Autoreload = 10;
 80047d4:	f04f 080a 	mov.w	r8, #10
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 80047d8:	f5a5 45c8 	sub.w	r5, r5, #25600	; 0x6400
 80047dc:	4628      	mov	r0, r5
 80047de:	a90d      	add	r1, sp, #52	; 0x34
  TIM_InitStruct.Prescaler = 2400;
 80047e0:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80047e4:	940e      	str	r4, [sp, #56]	; 0x38
  TIM_InitStruct.Autoreload = 10;
 80047e6:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 80047ea:	f000 fe45 	bl	8005478 <LL_TIM_Init>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80047ee:	682b      	ldr	r3, [r5, #0]
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80047f0:	2214      	movs	r2, #20
 80047f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047f6:	602b      	str	r3, [r5, #0]
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80047f8:	686b      	ldr	r3, [r5, #4]
 80047fa:	4621      	mov	r1, r4
 80047fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004800:	606b      	str	r3, [r5, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8004802:	68ab      	ldr	r3, [r5, #8]
 8004804:	a80d      	add	r0, sp, #52	; 0x34
 8004806:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800480a:	60ab      	str	r3, [r5, #8]
 800480c:	f000 ff35 	bl	800567a <memset>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 8004810:	2020      	movs	r0, #32
 8004812:	f7fd f8db 	bl	80019cc <LL_APB1_GRP1_EnableClock>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004816:	68f0      	ldr	r0, [r6, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 8004818:	f505 6580 	add.w	r5, r5, #1024	; 0x400
  NVIC_SetPriority(TIM7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800481c:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8004820:	f7fd fa70 	bl	8001d04 <NVIC_EncodePriority.constprop.31>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004824:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004828:	0100      	lsls	r0, r0, #4
 800482a:	b2c0      	uxtb	r0, r0
 800482c:	f887 0337 	strb.w	r0, [r7, #823]	; 0x337
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 8004830:	a90d      	add	r1, sp, #52	; 0x34
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004832:	607b      	str	r3, [r7, #4]
 8004834:	4628      	mov	r0, r5
  TIM_InitStruct.Prescaler = 2400;
 8004836:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
  TIM_InitStruct.Autoreload = 10;
 800483a:	e9cd 480e 	strd	r4, r8, [sp, #56]	; 0x38
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 800483e:	f000 fe1b 	bl	8005478 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8004842:	682b      	ldr	r3, [r5, #0]
 8004844:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004848:	602b      	str	r3, [r5, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800484a:	686b      	ldr	r3, [r5, #4]
 800484c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004850:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8004852:	68ab      	ldr	r3, [r5, #8]
 8004854:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004858:	60ab      	str	r3, [r5, #8]
  InitLCD();
 800485a:	f7fd f8ac 	bl	80019b6 <InitLCD>
  SystemCoreClockUpdate();
 800485e:	f000 fb01 	bl	8004e64 <SystemCoreClockUpdate>
  SysTick_Config(SystemCoreClock/1000);//SystemCoreClock/1000 - 1mc
 8004862:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004866:	4b75      	ldr	r3, [pc, #468]	; (8004a3c <main+0x694>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	fbb3 f3f2 	udiv	r3, r3, r2
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800486e:	3b01      	subs	r3, #1
 8004870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004874:	d207      	bcs.n	8004886 <main+0x4de>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004876:	4a72      	ldr	r2, [pc, #456]	; (8004a40 <main+0x698>)
 8004878:	6053      	str	r3, [r2, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800487a:	23f0      	movs	r3, #240	; 0xf0
 800487c:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004880:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004882:	6094      	str	r4, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004884:	6013      	str	r3, [r2, #0]
	LoggingData.RecordsQuantity= 0;
 8004886:	2400      	movs	r4, #0
 8004888:	4d6e      	ldr	r5, [pc, #440]	; (8004a44 <main+0x69c>)
	PrintToLCD(Version);
 800488a:	486f      	ldr	r0, [pc, #444]	; (8004a48 <main+0x6a0>)
	LoggingData.RecordsQuantity= 0;
 800488c:	602c      	str	r4, [r5, #0]
	PrintToLCD(Version);
 800488e:	f7fd f883 	bl	8001998 <PrintToLCD>
	InfoToUARTBeforeStart();
 8004892:	f7fc fb93 	bl	8000fbc <InfoToUARTBeforeStart>
	logInfo(Version);
 8004896:	486d      	ldr	r0, [pc, #436]	; (8004a4c <main+0x6a4>)
 8004898:	f000 fb7e 	bl	8004f98 <printToBufferWithoutEndUART1>
 800489c:	486a      	ldr	r0, [pc, #424]	; (8004a48 <main+0x6a0>)
 800489e:	f000 fb11 	bl	8004ec4 <printToBufferUART1>
	SetSymbols();
 80048a2:	f7fc ffa1 	bl	80017e8 <SetSymbols>
	lcd_set_xy(0,0);
 80048a6:	4621      	mov	r1, r4
 80048a8:	4620      	mov	r0, r4
 80048aa:	f7fc fff5 	bl	8001898 <lcd_set_xy>
	delay_ms(1000);
 80048ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048b2:	f7fc fb73 	bl	8000f9c <delay_ms>
	flash_read_block();
 80048b6:	f7fb fd3b 	bl	8000330 <flash_read_block>
	if (LoggingData.RecordsQuantity>=MAX_LOG_ITEMS) LoggingData.RecordsQuantity = 0;
 80048ba:	682b      	ldr	r3, [r5, #0]
 80048bc:	2b17      	cmp	r3, #23
 80048be:	bf88      	it	hi
 80048c0:	602c      	strhi	r4, [r5, #0]
	EEpromReadStatus = ReadFromFlash();
 80048c2:	f7fc f813 	bl	80008ec <ReadFromFlash>
	if (EEpromReadStatus==0)
 80048c6:	4604      	mov	r4, r0
 80048c8:	2800      	cmp	r0, #0
 80048ca:	f040 808f 	bne.w	80049ec <main+0x644>
		delay_ms(1000);
 80048ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048d2:	f7fc fb63 	bl	8000f9c <delay_ms>
		EEpromReadStatus = ReadFromFlash();
 80048d6:	f7fc f809 	bl	80008ec <ReadFromFlash>
 80048da:	4604      	mov	r4, r0
		logInfo("Read from EEprom - FAIL");
 80048dc:	485b      	ldr	r0, [pc, #364]	; (8004a4c <main+0x6a4>)
 80048de:	f000 fb5b 	bl	8004f98 <printToBufferWithoutEndUART1>
 80048e2:	485b      	ldr	r0, [pc, #364]	; (8004a50 <main+0x6a8>)
 80048e4:	f000 faee 	bl	8004ec4 <printToBufferUART1>
	if (EEpromReadStatus == 0)
 80048e8:	2c00      	cmp	r4, #0
 80048ea:	d17f      	bne.n	80049ec <main+0x644>
		PrintToLCD("EEprom Read FAIL");
 80048ec:	4859      	ldr	r0, [pc, #356]	; (8004a54 <main+0x6ac>)
 80048ee:	f7fd f853 	bl	8001998 <PrintToLCD>
		delay_ms(4000);
 80048f2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80048f6:	f7fc fb51 	bl	8000f9c <delay_ms>
		WriteInLOG("EEprmReadFAIL");
 80048fa:	4857      	ldr	r0, [pc, #348]	; (8004a58 <main+0x6b0>)
 80048fc:	f7fc f9b4 	bl	8000c68 <WriteInLOG>
		logInfo("Read from EEprom - FAIL");
 8004900:	4852      	ldr	r0, [pc, #328]	; (8004a4c <main+0x6a4>)
 8004902:	f000 fb49 	bl	8004f98 <printToBufferWithoutEndUART1>
 8004906:	4852      	ldr	r0, [pc, #328]	; (8004a50 <main+0x6a8>)
		logInfo("Read from EEprom - SUCCESS");
 8004908:	f000 fadc 	bl	8004ec4 <printToBufferUART1>
  BatteryCapacityDischargeCurrentAfterPOwerUp = SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent;
 800490c:	4b53      	ldr	r3, [pc, #332]	; (8004a5c <main+0x6b4>)
  ChargeDurationSec = SettingsData.ChargeTime*3600;
 800490e:	4c54      	ldr	r4, [pc, #336]	; (8004a60 <main+0x6b8>)
  BatteryCapacityDischargeCurrentAfterPOwerUp = SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent;
 8004910:	691a      	ldr	r2, [r3, #16]
 8004912:	4b54      	ldr	r3, [pc, #336]	; (8004a64 <main+0x6bc>)
  OutStateAfterPowerUp = SettingsData.Option2;
 8004914:	4d54      	ldr	r5, [pc, #336]	; (8004a68 <main+0x6c0>)
  BatteryCapacityDischargeCurrentAfterPOwerUp = SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent;
 8004916:	601a      	str	r2, [r3, #0]
  ChargeDurationSec = SettingsData.ChargeTime*3600;
 8004918:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800491c:	6922      	ldr	r2, [r4, #16]
 800491e:	4353      	muls	r3, r2
 8004920:	4a52      	ldr	r2, [pc, #328]	; (8004a6c <main+0x6c4>)
 8004922:	6013      	str	r3, [r2, #0]
  SelectedOptionValue = SettingsData.Option1;
 8004924:	68a2      	ldr	r2, [r4, #8]
 8004926:	4b52      	ldr	r3, [pc, #328]	; (8004a70 <main+0x6c8>)
 8004928:	601a      	str	r2, [r3, #0]
  SelectedOptionValue1 = SettingsData.Option2;
 800492a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800492c:	4a51      	ldr	r2, [pc, #324]	; (8004a74 <main+0x6cc>)
  OutStateAfterPowerUp = SettingsData.Option2;
 800492e:	602b      	str	r3, [r5, #0]
  SelectedOptionValue1 = SettingsData.Option2;
 8004930:	6013      	str	r3, [r2, #0]
	Generation_Coefficients_R_A_B();
 8004932:	f7fc f965 	bl	8000c00 <Generation_Coefficients_R_A_B>
	delay_ms(1000);
 8004936:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800493a:	f7fc fb2f 	bl	8000f9c <delay_ms>
  lcd_clear();
 800493e:	f7fd f819 	bl	8001974 <lcd_clear>
	Menu_SetGenericWriteCallback(Generic_Write);
 8004942:	484d      	ldr	r0, [pc, #308]	; (8004a78 <main+0x6d0>)
 8004944:	f7fc fe9c 	bl	8001680 <Menu_SetGenericWriteCallback>
	if (SettingsData.Option1 == 1)
 8004948:	68a3      	ldr	r3, [r4, #8]
 800494a:	9503      	str	r5, [sp, #12]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d154      	bne.n	80049fa <main+0x652>
		Menu_Navigate(&Menu_2_1);
 8004950:	484a      	ldr	r0, [pc, #296]	; (8004a7c <main+0x6d4>)
		Menu_Navigate(&Menu_8_1);
 8004952:	f7fc fe7b 	bl	800164c <Menu_Navigate>
	FineKeyState = FINE_KEY_ON;
 8004956:	2301      	movs	r3, #1
 8004958:	4d49      	ldr	r5, [pc, #292]	; (8004a80 <main+0x6d8>)
	GPIOB->BSRR =  GPIO_BSRR_BS8;// ON (fine)
 800495a:	f44f 7280 	mov.w	r2, #256	; 0x100
	FineKeyState = FINE_KEY_ON;
 800495e:	702b      	strb	r3, [r5, #0]
	DAC_step = DAC_STEP_FINE;
 8004960:	2314      	movs	r3, #20
 8004962:	4e48      	ldr	r6, [pc, #288]	; (8004a84 <main+0x6dc>)
	bufEnc = 0;
 8004964:	2700      	movs	r7, #0
	DAC_step = DAC_STEP_FINE;
 8004966:	8033      	strh	r3, [r6, #0]
	GPIOB->BSRR =  GPIO_BSRR_BS8;// ON (fine)
 8004968:	4b47      	ldr	r3, [pc, #284]	; (8004a88 <main+0x6e0>)
	bufEnc = 0;
 800496a:	46bb      	mov	fp, r7
	GPIOB->BSRR =  GPIO_BSRR_BS8;// ON (fine)
 800496c:	611a      	str	r2, [r3, #16]
	DAC_CurrentCounter = 3000;
 800496e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004972:	4b46      	ldr	r3, [pc, #280]	; (8004a8c <main+0x6e4>)
	DAC_VoltageCounter = 1020;
 8004974:	4946      	ldr	r1, [pc, #280]	; (8004a90 <main+0x6e8>)
	DAC_CurrentCounter = 3000;
 8004976:	801a      	strh	r2, [r3, #0]
	DAC_VoltageCounter = 1020;
 8004978:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 800497c:	800a      	strh	r2, [r1, #0]
	DAC->DHR12R2 = DAC_CurrentCounter;
 800497e:	881b      	ldrh	r3, [r3, #0]
 8004980:	4a2a      	ldr	r2, [pc, #168]	; (8004a2c <main+0x684>)
 8004982:	b21b      	sxth	r3, r3
 8004984:	6153      	str	r3, [r2, #20]
	DAC->DHR12R1 = DAC_VoltageCounter;
 8004986:	880b      	ldrh	r3, [r1, #0]
	Key_Pressed_t tmp = bufEnc;
 8004988:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8004ac0 <main+0x718>
	DAC->DHR12R1 = DAC_VoltageCounter;
 800498c:	b21b      	sxth	r3, r3
	if (!LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_11)) logDebug("Encoder");
 800498e:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8004ac4 <main+0x71c>
	DAC->DHR12R1 = DAC_VoltageCounter;
 8004992:	6093      	str	r3, [r2, #8]
  	Blink_message_counter++;
 8004994:	4a3f      	ldr	r2, [pc, #252]	; (8004a94 <main+0x6ec>)
	Key_Pressed_t tmp = bufEnc;
 8004996:	f899 4000 	ldrb.w	r4, [r9]
  	Blink_message_counter++;
 800499a:	7813      	ldrb	r3, [r2, #0]
	bufEnc = 0;
 800499c:	f889 b000 	strb.w	fp, [r9]
  	Blink_message_counter++;
 80049a0:	3301      	adds	r3, #1
 80049a2:	7013      	strb	r3, [r2, #0]
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80049a4:	9b01      	ldr	r3, [sp, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
	if (!LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_11)) logDebug("Encoder");
 80049a8:	051b      	lsls	r3, r3, #20
 80049aa:	d405      	bmi.n	80049b8 <main+0x610>
 80049ac:	4640      	mov	r0, r8
 80049ae:	f000 faf3 	bl	8004f98 <printToBufferWithoutEndUART1>
 80049b2:	4839      	ldr	r0, [pc, #228]	; (8004a98 <main+0x6f0>)
 80049b4:	f000 fa86 	bl	8004ec4 <printToBufferUART1>
	logDebugD("ch3 ", RegularConvData[2],0);
 80049b8:	4640      	mov	r0, r8
 80049ba:	f000 faed 	bl	8004f98 <printToBufferWithoutEndUART1>
 80049be:	9b02      	ldr	r3, [sp, #8]
 80049c0:	2200      	movs	r2, #0
 80049c2:	8899      	ldrh	r1, [r3, #4]
 80049c4:	4835      	ldr	r0, [pc, #212]	; (8004a9c <main+0x6f4>)
 80049c6:	f000 fb2b 	bl	8005020 <printToBufferUART1D>
	logDebugD("Button: ",Button,0);
 80049ca:	4640      	mov	r0, r8
 80049cc:	f000 fae4 	bl	8004f98 <printToBufferWithoutEndUART1>
 80049d0:	2200      	movs	r2, #0
 80049d2:	4621      	mov	r1, r4
 80049d4:	4832      	ldr	r0, [pc, #200]	; (8004aa0 <main+0x6f8>)
 80049d6:	f000 fb23 	bl	8005020 <printToBufferUART1D>
		switch (Button)
 80049da:	1e63      	subs	r3, r4, #1
 80049dc:	2b06      	cmp	r3, #6
 80049de:	d878      	bhi.n	8004ad2 <main+0x72a>
 80049e0:	e8df f003 	tbb	[pc, r3]
 80049e4:	a59e9a72 	.word	0xa59e9a72
 80049e8:	7777      	.short	0x7777
 80049ea:	a9          	.byte	0xa9
 80049eb:	00          	.byte	0x00
	if (EEpromReadStatus == 1)
 80049ec:	2c01      	cmp	r4, #1
 80049ee:	d18d      	bne.n	800490c <main+0x564>
		logInfo("Read from EEprom - SUCCESS");
 80049f0:	4816      	ldr	r0, [pc, #88]	; (8004a4c <main+0x6a4>)
 80049f2:	f000 fad1 	bl	8004f98 <printToBufferWithoutEndUART1>
 80049f6:	482b      	ldr	r0, [pc, #172]	; (8004aa4 <main+0x6fc>)
 80049f8:	e786      	b.n	8004908 <main+0x560>
	else if (SettingsData.Option1 == 2)
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d101      	bne.n	8004a02 <main+0x65a>
		Menu_Navigate(&Menu_3_1);
 80049fe:	482a      	ldr	r0, [pc, #168]	; (8004aa8 <main+0x700>)
 8004a00:	e7a7      	b.n	8004952 <main+0x5aa>
	else if (SettingsData.Option1 == 3)
 8004a02:	2b03      	cmp	r3, #3
 8004a04:	d101      	bne.n	8004a0a <main+0x662>
		Menu_Navigate(&Menu_4_1);
 8004a06:	4829      	ldr	r0, [pc, #164]	; (8004aac <main+0x704>)
 8004a08:	e7a3      	b.n	8004952 <main+0x5aa>
	else if (SettingsData.Option1 == 4)
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	d101      	bne.n	8004a12 <main+0x66a>
		Menu_Navigate(&Menu_5_1);
 8004a0e:	4828      	ldr	r0, [pc, #160]	; (8004ab0 <main+0x708>)
 8004a10:	e79f      	b.n	8004952 <main+0x5aa>
	else if (SettingsData.Option1 == 5)
 8004a12:	2b05      	cmp	r3, #5
 8004a14:	d101      	bne.n	8004a1a <main+0x672>
		Menu_Navigate(&Menu_6_1);
 8004a16:	4827      	ldr	r0, [pc, #156]	; (8004ab4 <main+0x70c>)
 8004a18:	e79b      	b.n	8004952 <main+0x5aa>
	else if (SettingsData.Option1 == 6)
 8004a1a:	2b06      	cmp	r3, #6
 8004a1c:	d101      	bne.n	8004a22 <main+0x67a>
		Menu_Navigate(&Menu_7_1);
 8004a1e:	4826      	ldr	r0, [pc, #152]	; (8004ab8 <main+0x710>)
 8004a20:	e797      	b.n	8004952 <main+0x5aa>
	else if (SettingsData.Option1 == 7)
 8004a22:	2b07      	cmp	r3, #7
 8004a24:	d194      	bne.n	8004950 <main+0x5a8>
		Menu_Navigate(&Menu_8_1);
 8004a26:	4825      	ldr	r0, [pc, #148]	; (8004abc <main+0x714>)
 8004a28:	e793      	b.n	8004952 <main+0x5aa>
 8004a2a:	bf00      	nop
 8004a2c:	40007400 	.word	0x40007400
 8004a30:	e000e100 	.word	0xe000e100
 8004a34:	02100001 	.word	0x02100001
 8004a38:	15430012 	.word	0x15430012
 8004a3c:	20000290 	.word	0x20000290
 8004a40:	e000e010 	.word	0xe000e010
 8004a44:	20000858 	.word	0x20000858
 8004a48:	2000027e 	.word	0x2000027e
 8004a4c:	08005aad 	.word	0x08005aad
 8004a50:	08006b99 	.word	0x08006b99
 8004a54:	08006bb1 	.word	0x08006bb1
 8004a58:	08006bc2 	.word	0x08006bc2
 8004a5c:	200000f4 	.word	0x200000f4
 8004a60:	20000154 	.word	0x20000154
 8004a64:	20000778 	.word	0x20000778
 8004a68:	20000278 	.word	0x20000278
 8004a6c:	200009fc 	.word	0x200009fc
 8004a70:	20000a00 	.word	0x20000a00
 8004a74:	200009f8 	.word	0x200009f8
 8004a78:	08001b99 	.word	0x08001b99
 8004a7c:	08006858 	.word	0x08006858
 8004a80:	200009f4 	.word	0x200009f4
 8004a84:	20000274 	.word	0x20000274
 8004a88:	40010c00 	.word	0x40010c00
 8004a8c:	20000272 	.word	0x20000272
 8004a90:	20000788 	.word	0x20000788
 8004a94:	2000077d 	.word	0x2000077d
 8004a98:	08006bd0 	.word	0x08006bd0
 8004a9c:	08006bd8 	.word	0x08006bd8
 8004aa0:	08006bdd 	.word	0x08006bdd
 8004aa4:	080059d3 	.word	0x080059d3
 8004aa8:	080068b0 	.word	0x080068b0
 8004aac:	08006908 	.word	0x08006908
 8004ab0:	08006960 	.word	0x08006960
 8004ab4:	080069b8 	.word	0x080069b8
 8004ab8:	08006a68 	.word	0x08006a68
 8004abc:	08006ac0 	.word	0x08006ac0
 8004ac0:	200007c4 	.word	0x200007c4
 8004ac4:	08005a98 	.word	0x08005a98
				Menu_Navigate(MENU_PREVIOUS);
 8004ac8:	f7fc fdba 	bl	8001640 <Menu_GetCurrentMenu>
 8004acc:	6840      	ldr	r0, [r0, #4]
				Menu_Navigate(MENU_NEXT);
 8004ace:	f7fc fdbd 	bl	800164c <Menu_Navigate>
		if (Menu_GetCurrentMenu() == &Menu_2_1)
 8004ad2:	f7fc fdb5 	bl	8001640 <Menu_GetCurrentMenu>
 8004ad6:	4ba2      	ldr	r3, [pc, #648]	; (8004d60 <main+0x9b8>)
 8004ad8:	f8df a308 	ldr.w	sl, [pc, #776]	; 8004de4 <main+0xa3c>
 8004adc:	4283      	cmp	r3, r0
 8004ade:	d13c      	bne.n	8004b5a <main+0x7b2>
			MenuPowerSupply(Button);
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	f7fd f911 	bl	8001d08 <MenuPowerSupply>
		if (Button == KEY_OUT)
 8004ae6:	2c08      	cmp	r4, #8
 8004ae8:	d106      	bne.n	8004af8 <main+0x750>
	    	if (On_off == 0)
 8004aea:	4b9e      	ldr	r3, [pc, #632]	; (8004d64 <main+0x9bc>)
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f040 8132 	bne.w	8004d58 <main+0x9b0>
	    		OUT_ON();
 8004af4:	f7fe fdda 	bl	80036ac <OUT_ON>
		if (EnterInMenu_Status == 0)
 8004af8:	f89a 2000 	ldrb.w	r2, [sl]
 8004afc:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8004b00:	b932      	cbnz	r2, 8004b10 <main+0x768>
			InitiStatus = 0;
 8004b02:	4a99      	ldr	r2, [pc, #612]	; (8004d68 <main+0x9c0>)
 8004b04:	7013      	strb	r3, [r2, #0]
			CountShow = 0;
 8004b06:	4a99      	ldr	r2, [pc, #612]	; (8004d6c <main+0x9c4>)
 8004b08:	7013      	strb	r3, [r2, #0]
			OutStateAfterPowerUp = 1;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	9a03      	ldr	r2, [sp, #12]
 8004b0e:	6013      	str	r3, [r2, #0]
      delay_ms(100);
 8004b10:	2064      	movs	r0, #100	; 0x64
 8004b12:	f7fc fa43 	bl	8000f9c <delay_ms>
  {
 8004b16:	e73d      	b.n	8004994 <main+0x5ec>
				Menu_Navigate(MENU_NEXT);
 8004b18:	f7fc fd92 	bl	8001640 <Menu_GetCurrentMenu>
 8004b1c:	6800      	ldr	r0, [r0, #0]
 8004b1e:	e7d6      	b.n	8004ace <main+0x726>
				Menu_SelectItem(KEY_NEXT);
 8004b20:	2002      	movs	r0, #2
 8004b22:	f7fc fdb7 	bl	8001694 <Menu_SelectItem>
				Menu_Navigate(MENU_CHILD);
 8004b26:	f7fc fd8b 	bl	8001640 <Menu_GetCurrentMenu>
 8004b2a:	68c0      	ldr	r0, [r0, #12]
 8004b2c:	e7cf      	b.n	8004ace <main+0x726>
				Menu_Navigate(MENU_PARENT);
 8004b2e:	f7fc fd87 	bl	8001640 <Menu_GetCurrentMenu>
 8004b32:	6880      	ldr	r0, [r0, #8]
 8004b34:	e7cb      	b.n	8004ace <main+0x726>
				if (FineKeyState == FINE_KEY_OFF)
 8004b36:	782a      	ldrb	r2, [r5, #0]
 8004b38:	4b8d      	ldr	r3, [pc, #564]	; (8004d70 <main+0x9c8>)
 8004b3a:	b93a      	cbnz	r2, 8004b4c <main+0x7a4>
					DAC_step = DAC_STEP_FINE;
 8004b3c:	2214      	movs	r2, #20
 8004b3e:	8032      	strh	r2, [r6, #0]
					GPIOB->BSRR =  GPIO_BSRR_BS8;// ON
 8004b40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b44:	611a      	str	r2, [r3, #16]
					FineKeyState = FINE_KEY_ON;
 8004b46:	2301      	movs	r3, #1
 8004b48:	702b      	strb	r3, [r5, #0]
 8004b4a:	e7c2      	b.n	8004ad2 <main+0x72a>
					DAC_step = DAC_STEP_NORMAL;
 8004b4c:	22c8      	movs	r2, #200	; 0xc8
 8004b4e:	8032      	strh	r2, [r6, #0]
					GPIOB->BSRR =  GPIO_BSRR_BR8;//Off
 8004b50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
					FineKeyState = FINE_KEY_OFF;
 8004b54:	702f      	strb	r7, [r5, #0]
					GPIOB->BSRR =  GPIO_BSRR_BR8;//Off
 8004b56:	611a      	str	r2, [r3, #16]
 8004b58:	e7bb      	b.n	8004ad2 <main+0x72a>
		else if (Menu_GetCurrentMenu() == &Menu_3_1)
 8004b5a:	f7fc fd71 	bl	8001640 <Menu_GetCurrentMenu>
 8004b5e:	4b85      	ldr	r3, [pc, #532]	; (8004d74 <main+0x9cc>)
 8004b60:	4283      	cmp	r3, r0
 8004b62:	d103      	bne.n	8004b6c <main+0x7c4>
			MenuLoad(Button);
 8004b64:	4620      	mov	r0, r4
 8004b66:	f7fd f939 	bl	8001ddc <MenuLoad>
 8004b6a:	e7bc      	b.n	8004ae6 <main+0x73e>
		else if (Menu_GetCurrentMenu() == &Menu_4_1)
 8004b6c:	f7fc fd68 	bl	8001640 <Menu_GetCurrentMenu>
 8004b70:	4b81      	ldr	r3, [pc, #516]	; (8004d78 <main+0x9d0>)
 8004b72:	4283      	cmp	r3, r0
 8004b74:	d103      	bne.n	8004b7e <main+0x7d6>
			MenuChargeCC_CV(Button);
 8004b76:	4620      	mov	r0, r4
 8004b78:	f7fd f9ac 	bl	8001ed4 <MenuChargeCC_CV>
 8004b7c:	e7b3      	b.n	8004ae6 <main+0x73e>
		else if (Menu_GetCurrentMenu() == &Menu_5_1)
 8004b7e:	f7fc fd5f 	bl	8001640 <Menu_GetCurrentMenu>
 8004b82:	4b7e      	ldr	r3, [pc, #504]	; (8004d7c <main+0x9d4>)
 8004b84:	4283      	cmp	r3, r0
 8004b86:	d103      	bne.n	8004b90 <main+0x7e8>
			MenuChargeAdapt(Button);
 8004b88:	4620      	mov	r0, r4
 8004b8a:	f7fe fdbb 	bl	8003704 <MenuChargeAdapt>
 8004b8e:	e7aa      	b.n	8004ae6 <main+0x73e>
		else if (Menu_GetCurrentMenu() == &Menu_6_1)
 8004b90:	f7fc fd56 	bl	8001640 <Menu_GetCurrentMenu>
 8004b94:	4b7a      	ldr	r3, [pc, #488]	; (8004d80 <main+0x9d8>)
 8004b96:	4283      	cmp	r3, r0
 8004b98:	d103      	bne.n	8004ba2 <main+0x7fa>
			MenuDisCharge(Button);
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	f7fe f92c 	bl	8002df8 <MenuDisCharge>
 8004ba0:	e7a1      	b.n	8004ae6 <main+0x73e>
		else if (Menu_GetCurrentMenu() == &Menu_6_1a)
 8004ba2:	f7fc fd4d 	bl	8001640 <Menu_GetCurrentMenu>
 8004ba6:	4b77      	ldr	r3, [pc, #476]	; (8004d84 <main+0x9dc>)
 8004ba8:	4283      	cmp	r3, r0
 8004baa:	d103      	bne.n	8004bb4 <main+0x80c>
			MenuCheckingCapacity(Button);
 8004bac:	4620      	mov	r0, r4
 8004bae:	f7fe fa7d 	bl	80030ac <MenuCheckingCapacity>
 8004bb2:	e798      	b.n	8004ae6 <main+0x73e>
		else if (Menu_GetCurrentMenu() == &Menu_7_1)
 8004bb4:	f7fc fd44 	bl	8001640 <Menu_GetCurrentMenu>
 8004bb8:	4b73      	ldr	r3, [pc, #460]	; (8004d88 <main+0x9e0>)
 8004bba:	4283      	cmp	r3, r0
 8004bbc:	d103      	bne.n	8004bc6 <main+0x81e>
			MenuTraining_new(Button);
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	f7fd fdde 	bl	8002780 <MenuTraining_new>
 8004bc4:	e78f      	b.n	8004ae6 <main+0x73e>
		else if (Menu_GetCurrentMenu() == &Menu_8_1)
 8004bc6:	f7fc fd3b 	bl	8001640 <Menu_GetCurrentMenu>
 8004bca:	4b70      	ldr	r3, [pc, #448]	; (8004d8c <main+0x9e4>)
 8004bcc:	4283      	cmp	r3, r0
 8004bce:	d103      	bne.n	8004bd8 <main+0x830>
			MenuSwing(Button);
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	f7fe f821 	bl	8002c18 <MenuSwing>
 8004bd6:	e786      	b.n	8004ae6 <main+0x73e>
		else if (Menu_GetCurrentMenu() == &Menu_8a_1)
 8004bd8:	f7fc fd32 	bl	8001640 <Menu_GetCurrentMenu>
 8004bdc:	4b6c      	ldr	r3, [pc, #432]	; (8004d90 <main+0x9e8>)
 8004bde:	4283      	cmp	r3, r0
 8004be0:	d103      	bne.n	8004bea <main+0x842>
					MenuBatterySimilation(Button);
 8004be2:	4620      	mov	r0, r4
 8004be4:	f7ff f884 	bl	8003cf0 <MenuBatterySimilation>
 8004be8:	e77d      	b.n	8004ae6 <main+0x73e>
		else if (Menu_GetCurrentMenu() == &Menu_9_1)
 8004bea:	f7fc fd29 	bl	8001640 <Menu_GetCurrentMenu>
 8004bee:	4b69      	ldr	r3, [pc, #420]	; (8004d94 <main+0x9ec>)
 8004bf0:	4283      	cmp	r3, r0
 8004bf2:	d103      	bne.n	8004bfc <main+0x854>
			MenuDIAGNOSTIC(Button);
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	f7ff f8e9 	bl	8003dcc <MenuDIAGNOSTIC>
 8004bfa:	e774      	b.n	8004ae6 <main+0x73e>
		else if (Menu_GetCurrentMenu() == &Menu_11_1)
 8004bfc:	f7fc fd20 	bl	8001640 <Menu_GetCurrentMenu>
 8004c00:	4b65      	ldr	r3, [pc, #404]	; (8004d98 <main+0x9f0>)
 8004c02:	4283      	cmp	r3, r0
 8004c04:	d103      	bne.n	8004c0e <main+0x866>
			MenuLog(Button);
 8004c06:	4620      	mov	r0, r4
 8004c08:	f7fd fa0a 	bl	8002020 <MenuLog>
 8004c0c:	e76b      	b.n	8004ae6 <main+0x73e>
		else if (Menu_GetCurrentMenu() == &Menu_10_2_1)
 8004c0e:	f7fc fd17 	bl	8001640 <Menu_GetCurrentMenu>
 8004c12:	4b62      	ldr	r3, [pc, #392]	; (8004d9c <main+0x9f4>)
 8004c14:	4283      	cmp	r3, r0
 8004c16:	d103      	bne.n	8004c20 <main+0x878>
				MenuCalibration_Current_x50_to_0(Button);
 8004c18:	4620      	mov	r0, r4
 8004c1a:	f7fd fa71 	bl	8002100 <MenuCalibration_Current_x50_to_0>
 8004c1e:	e762      	b.n	8004ae6 <main+0x73e>
			else if (Menu_GetCurrentMenu() == &Menu_10_1_1)
 8004c20:	f7fc fd0e 	bl	8001640 <Menu_GetCurrentMenu>
 8004c24:	4b5e      	ldr	r3, [pc, #376]	; (8004da0 <main+0x9f8>)
 8004c26:	4283      	cmp	r3, r0
 8004c28:	d103      	bne.n	8004c32 <main+0x88a>
				MenuCalibration_Current_x1_to_0(Button);
 8004c2a:	4620      	mov	r0, r4
 8004c2c:	f7fd fa44 	bl	80020b8 <MenuCalibration_Current_x1_to_0>
 8004c30:	e759      	b.n	8004ae6 <main+0x73e>
			else if (Menu_GetCurrentMenu() == &Menu_10_4_1)
 8004c32:	f7fc fd05 	bl	8001640 <Menu_GetCurrentMenu>
 8004c36:	4b5b      	ldr	r3, [pc, #364]	; (8004da4 <main+0x9fc>)
 8004c38:	4283      	cmp	r3, r0
 8004c3a:	d103      	bne.n	8004c44 <main+0x89c>
				MenuCalibration_Current_x50(Button);
 8004c3c:	4620      	mov	r0, r4
 8004c3e:	f7fd fa83 	bl	8002148 <MenuCalibration_Current_x50>
 8004c42:	e750      	b.n	8004ae6 <main+0x73e>
			else if (Menu_GetCurrentMenu() == &Menu_10_3_1)
 8004c44:	f7fc fcfc 	bl	8001640 <Menu_GetCurrentMenu>
 8004c48:	4b57      	ldr	r3, [pc, #348]	; (8004da8 <main+0xa00>)
 8004c4a:	4283      	cmp	r3, r0
 8004c4c:	d103      	bne.n	8004c56 <main+0x8ae>
				MenuCalibration_Current_x1(Button);
 8004c4e:	4620      	mov	r0, r4
 8004c50:	f7fe ff08 	bl	8003a64 <MenuCalibration_Current_x1>
 8004c54:	e747      	b.n	8004ae6 <main+0x73e>
			else if (Menu_GetCurrentMenu() == &Menu_10_7_1)
 8004c56:	f7fc fcf3 	bl	8001640 <Menu_GetCurrentMenu>
 8004c5a:	4b54      	ldr	r3, [pc, #336]	; (8004dac <main+0xa04>)
 8004c5c:	4283      	cmp	r3, r0
 8004c5e:	d103      	bne.n	8004c68 <main+0x8c0>
			MenuCalibration_VoltageIn(Button);
 8004c60:	4620      	mov	r0, r4
 8004c62:	f7fe ffa7 	bl	8003bb4 <MenuCalibration_VoltageIn>
 8004c66:	e73e      	b.n	8004ae6 <main+0x73e>
		else if (Menu_GetCurrentMenu() == &Menu_10_6_1)
 8004c68:	f7fc fcea 	bl	8001640 <Menu_GetCurrentMenu>
 8004c6c:	4b50      	ldr	r3, [pc, #320]	; (8004db0 <main+0xa08>)
 8004c6e:	4283      	cmp	r3, r0
 8004c70:	d103      	bne.n	8004c7a <main+0x8d2>
			MenuCalibration_VoltageOut(Button);
 8004c72:	4620      	mov	r0, r4
 8004c74:	f7fe ff66 	bl	8003b44 <MenuCalibration_VoltageOut>
 8004c78:	e735      	b.n	8004ae6 <main+0x73e>
		else if (Menu_GetCurrentMenu() == &Menu_10_5_1)
 8004c7a:	f7fc fce1 	bl	8001640 <Menu_GetCurrentMenu>
 8004c7e:	4b4d      	ldr	r3, [pc, #308]	; (8004db4 <main+0xa0c>)
 8004c80:	4283      	cmp	r3, r0
 8004c82:	d103      	bne.n	8004c8c <main+0x8e4>
			MenuCalibration_VoltagePS(Button);
 8004c84:	4620      	mov	r0, r4
 8004c86:	f7fe ff25 	bl	8003ad4 <MenuCalibration_VoltagePS>
 8004c8a:	e72c      	b.n	8004ae6 <main+0x73e>
		else if (Menu_GetCurrentMenu() == &Menu_10_8_1)
 8004c8c:	f7fc fcd8 	bl	8001640 <Menu_GetCurrentMenu>
 8004c90:	4b49      	ldr	r3, [pc, #292]	; (8004db8 <main+0xa10>)
 8004c92:	4283      	cmp	r3, r0
 8004c94:	d103      	bne.n	8004c9e <main+0x8f6>
			MenuCalibration_Resist_Comp_5V1A(Button);
 8004c96:	4620      	mov	r0, r4
 8004c98:	f7fe ffc4 	bl	8003c24 <MenuCalibration_Resist_Comp_5V1A>
 8004c9c:	e723      	b.n	8004ae6 <main+0x73e>
		else if (Menu_GetCurrentMenu() == &Menu_10_9_1)
 8004c9e:	f7fc fccf 	bl	8001640 <Menu_GetCurrentMenu>
 8004ca2:	4b46      	ldr	r3, [pc, #280]	; (8004dbc <main+0xa14>)
 8004ca4:	4283      	cmp	r3, r0
 8004ca6:	d103      	bne.n	8004cb0 <main+0x908>
			MenuCalibration_BackToFactory(Button);
 8004ca8:	4620      	mov	r0, r4
 8004caa:	f7fd fa83 	bl	80021b4 <MenuCalibration_BackToFactory>
 8004cae:	e71a      	b.n	8004ae6 <main+0x73e>
		else if (Menu_GetCurrentMenu() == &Menu_1_1_1)
 8004cb0:	f7fc fcc6 	bl	8001640 <Menu_GetCurrentMenu>
 8004cb4:	4b42      	ldr	r3, [pc, #264]	; (8004dc0 <main+0xa18>)
 8004cb6:	4283      	cmp	r3, r0
 8004cb8:	d103      	bne.n	8004cc2 <main+0x91a>
			MenuSettingsChargeTime(Button);
 8004cba:	4620      	mov	r0, r4
 8004cbc:	f7fd fad6 	bl	800226c <MenuSettingsChargeTime>
 8004cc0:	e711      	b.n	8004ae6 <main+0x73e>
		else if (Menu_GetCurrentMenu() == &Menu_1_1_1a)
 8004cc2:	f7fc fcbd 	bl	8001640 <Menu_GetCurrentMenu>
 8004cc6:	4b3f      	ldr	r3, [pc, #252]	; (8004dc4 <main+0xa1c>)
 8004cc8:	4283      	cmp	r3, r0
 8004cca:	d103      	bne.n	8004cd4 <main+0x92c>
			MenuSettingsBatteryType(Button);
 8004ccc:	4620      	mov	r0, r4
 8004cce:	f7fd faf3 	bl	80022b8 <MenuSettingsBatteryType>
 8004cd2:	e708      	b.n	8004ae6 <main+0x73e>
		else if (Menu_GetCurrentMenu() == &Menu_1_2_1)
 8004cd4:	f7fc fcb4 	bl	8001640 <Menu_GetCurrentMenu>
 8004cd8:	4b3b      	ldr	r3, [pc, #236]	; (8004dc8 <main+0xa20>)
 8004cda:	4283      	cmp	r3, r0
 8004cdc:	d103      	bne.n	8004ce6 <main+0x93e>
			MenuSettingsLowVolt(Button);
 8004cde:	4620      	mov	r0, r4
 8004ce0:	f7fd fb5c 	bl	800239c <MenuSettingsLowVolt>
 8004ce4:	e6ff      	b.n	8004ae6 <main+0x73e>
		else if (Menu_GetCurrentMenu() == &Menu_1_3_1)
 8004ce6:	f7fc fcab 	bl	8001640 <Menu_GetCurrentMenu>
 8004cea:	4b38      	ldr	r3, [pc, #224]	; (8004dcc <main+0xa24>)
 8004cec:	4283      	cmp	r3, r0
 8004cee:	d103      	bne.n	8004cf8 <main+0x950>
			MenuSettingsMaxVolt(Button);
 8004cf0:	4620      	mov	r0, r4
 8004cf2:	f7fd fb75 	bl	80023e0 <MenuSettingsMaxVolt>
 8004cf6:	e6f6      	b.n	8004ae6 <main+0x73e>
		else if (Menu_GetCurrentMenu() == &Menu_1_4_1)
 8004cf8:	f7fc fca2 	bl	8001640 <Menu_GetCurrentMenu>
 8004cfc:	4b34      	ldr	r3, [pc, #208]	; (8004dd0 <main+0xa28>)
 8004cfe:	4283      	cmp	r3, r0
 8004d00:	d103      	bne.n	8004d0a <main+0x962>
			MenuSettingsSwngChrgTime(Button);
 8004d02:	4620      	mov	r0, r4
 8004d04:	f7fd fb8e 	bl	8002424 <MenuSettingsSwngChrgTime>
 8004d08:	e6ed      	b.n	8004ae6 <main+0x73e>
		else if (Menu_GetCurrentMenu() == &Menu_1_5_1)
 8004d0a:	f7fc fc99 	bl	8001640 <Menu_GetCurrentMenu>
 8004d0e:	4b31      	ldr	r3, [pc, #196]	; (8004dd4 <main+0xa2c>)
 8004d10:	4283      	cmp	r3, r0
 8004d12:	d103      	bne.n	8004d1c <main+0x974>
			MenuSettingsSwngDChrgTime(Button);
 8004d14:	4620      	mov	r0, r4
 8004d16:	f7fd fba3 	bl	8002460 <MenuSettingsSwngDChrgTime>
 8004d1a:	e6e4      	b.n	8004ae6 <main+0x73e>
		else if (Menu_GetCurrentMenu() == &Menu_1_6_1)
 8004d1c:	f7fc fc90 	bl	8001640 <Menu_GetCurrentMenu>
 8004d20:	4b2d      	ldr	r3, [pc, #180]	; (8004dd8 <main+0xa30>)
 8004d22:	4283      	cmp	r3, r0
 8004d24:	d103      	bne.n	8004d2e <main+0x986>
			MenuSettingsChargeAddapt(Button);
 8004d26:	4620      	mov	r0, r4
 8004d28:	f7fd fbb8 	bl	800249c <MenuSettingsChargeAddapt>
 8004d2c:	e6db      	b.n	8004ae6 <main+0x73e>
		else if (Menu_GetCurrentMenu() == &Menu_1_S_1)
 8004d2e:	f7fc fc87 	bl	8001640 <Menu_GetCurrentMenu>
 8004d32:	4b2a      	ldr	r3, [pc, #168]	; (8004ddc <main+0xa34>)
 8004d34:	4283      	cmp	r3, r0
 8004d36:	d103      	bne.n	8004d40 <main+0x998>
			MenuSettingsSaveMenuPosWhenOFF(Button);
 8004d38:	4620      	mov	r0, r4
 8004d3a:	f7fd fc0b 	bl	8002554 <MenuSettingsSaveMenuPosWhenOFF>
 8004d3e:	e6d2      	b.n	8004ae6 <main+0x73e>
		else if (Menu_GetCurrentMenu() == &Menu_1_SO_1)
 8004d40:	f7fc fc7e 	bl	8001640 <Menu_GetCurrentMenu>
 8004d44:	4b26      	ldr	r3, [pc, #152]	; (8004de0 <main+0xa38>)
 8004d46:	4283      	cmp	r3, r0
 8004d48:	d103      	bne.n	8004d52 <main+0x9aa>
			MenuSettingsOutAfterPowerUp(Button);
 8004d4a:	4620      	mov	r0, r4
 8004d4c:	f7fd fc48 	bl	80025e0 <MenuSettingsOutAfterPowerUp>
 8004d50:	e6c9      	b.n	8004ae6 <main+0x73e>
		else EnterInMenu_Status = 0;
 8004d52:	f88a 7000 	strb.w	r7, [sl]
 8004d56:	e6c6      	b.n	8004ae6 <main+0x73e>
	    		OUT_OFF();
 8004d58:	f7fe fc92 	bl	8003680 <OUT_OFF>
 8004d5c:	e6cc      	b.n	8004af8 <main+0x750>
 8004d5e:	bf00      	nop
 8004d60:	08006858 	.word	0x08006858
 8004d64:	20000796 	.word	0x20000796
 8004d68:	20000795 	.word	0x20000795
 8004d6c:	20000785 	.word	0x20000785
 8004d70:	40010c00 	.word	0x40010c00
 8004d74:	080068b0 	.word	0x080068b0
 8004d78:	08006908 	.word	0x08006908
 8004d7c:	08006960 	.word	0x08006960
 8004d80:	080069b8 	.word	0x080069b8
 8004d84:	080069e4 	.word	0x080069e4
 8004d88:	08006a68 	.word	0x08006a68
 8004d8c:	08006ac0 	.word	0x08006ac0
 8004d90:	08006b18 	.word	0x08006b18
 8004d94:	08006b70 	.word	0x08006b70
 8004d98:	080064bc 	.word	0x080064bc
 8004d9c:	0800622c 	.word	0x0800622c
 8004da0:	080061d4 	.word	0x080061d4
 8004da4:	080062dc 	.word	0x080062dc
 8004da8:	08006284 	.word	0x08006284
 8004dac:	080063e4 	.word	0x080063e4
 8004db0:	0800638c 	.word	0x0800638c
 8004db4:	08006334 	.word	0x08006334
 8004db8:	0800642c 	.word	0x0800642c
 8004dbc:	08006474 	.word	0x08006474
 8004dc0:	08006514 	.word	0x08006514
 8004dc4:	08006540 	.word	0x08006540
 8004dc8:	080065c4 	.word	0x080065c4
 8004dcc:	0800661c 	.word	0x0800661c
 8004dd0:	08006674 	.word	0x08006674
 8004dd4:	080066cc 	.word	0x080066cc
 8004dd8:	08006724 	.word	0x08006724
 8004ddc:	08006800 	.word	0x08006800
 8004de0:	080067d4 	.word	0x080067d4
 8004de4:	20000794 	.word	0x20000794

08004de8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004de8:	4770      	bx	lr

08004dea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004dea:	e7fe      	b.n	8004dea <HardFault_Handler>

08004dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004dec:	e7fe      	b.n	8004dec <MemManage_Handler>

08004dee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004dee:	e7fe      	b.n	8004dee <BusFault_Handler>

08004df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004df0:	e7fe      	b.n	8004df0 <UsageFault_Handler>

08004df2 <SVC_Handler>:
 8004df2:	4770      	bx	lr

08004df4 <DebugMon_Handler>:
 8004df4:	4770      	bx	lr

08004df6 <PendSV_Handler>:
 8004df6:	4770      	bx	lr

08004df8 <SysTick_Handler>:
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
	//Delay_us(990);
	SysTick_Callback();
 8004df8:	f7ff ba08 	b.w	800420c <SysTick_Callback>

08004dfc <DMA1_Channel1_IRQHandler>:
 8004dfc:	4770      	bx	lr
	...

08004e00 <USART1_IRQHandler>:
  */
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

	if ( (USART1->SR & USART_SR_TXE) != 0 ) //if(LL_USART_IsActiveFlag_TXE(USART1)) //прерывание по передачи
 8004e00:	4914      	ldr	r1, [pc, #80]	; (8004e54 <USART1_IRQHandler+0x54>)
 8004e02:	680b      	ldr	r3, [r1, #0]
 8004e04:	061b      	lsls	r3, r3, #24
 8004e06:	d524      	bpl.n	8004e52 <USART1_IRQHandler+0x52>
	{
		if (bufferUart1.tx_counter > 0) //если есть что передать
 8004e08:	4b13      	ldr	r3, [pc, #76]	; (8004e58 <USART1_IRQHandler+0x58>)
 8004e0a:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8004e0e:	b292      	uxth	r2, r2
 8004e10:	b1da      	cbz	r2, 8004e4a <USART1_IRQHandler+0x4a>
	    {
	      --bufferUart1.tx_counter; // уменьшаем количество не переданных данных
 8004e12:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8004e16:	3a01      	subs	r2, #1
 8004e18:	b292      	uxth	r2, r2
 8004e1a:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	      //LL_USART_TransmitData8(USART1,tx_buffer[tx_rd_index++]);
	      USART1->DR = bufferUart1.tx_buffer[bufferUart1.tx_rd_index++]; //передаем данные инкрементируя хвост буфера
 8004e1e:	f8b3 2456 	ldrh.w	r2, [r3, #1110]	; 0x456
 8004e22:	b292      	uxth	r2, r2
 8004e24:	1c50      	adds	r0, r2, #1
 8004e26:	b280      	uxth	r0, r0
 8004e28:	f8a3 0456 	strh.w	r0, [r3, #1110]	; 0x456
 8004e2c:	441a      	add	r2, r3
 8004e2e:	f892 206c 	ldrb.w	r2, [r2, #108]	; 0x6c
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	604a      	str	r2, [r1, #4]
	      if (bufferUart1.tx_rd_index == TX_BUFFER_SIZE) bufferUart1.tx_rd_index=0; //идем по кругу
 8004e36:	f8b3 2456 	ldrh.w	r2, [r3, #1110]	; 0x456
 8004e3a:	b292      	uxth	r2, r2
 8004e3c:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8004e40:	d107      	bne.n	8004e52 <USART1_IRQHandler+0x52>
 8004e42:	2200      	movs	r2, #0
 8004e44:	f8a3 2456 	strh.w	r2, [r3, #1110]	; 0x456
 8004e48:	4770      	bx	lr
	    }
	    else //если нечего передать, запрещаем прерывание по передачи
	    {
	    	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 8004e4a:	68cb      	ldr	r3, [r1, #12]
 8004e4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e50:	60cb      	str	r3, [r1, #12]

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004e52:	4770      	bx	lr
 8004e54:	40013800 	.word	0x40013800
 8004e58:	200002c2 	.word	0x200002c2

08004e5c <TIM6_DAC_IRQHandler>:
 8004e5c:	4770      	bx	lr

08004e5e <TIM7_IRQHandler>:
 8004e5e:	4770      	bx	lr

08004e60 <SystemInit>:
 8004e60:	4770      	bx	lr
	...

08004e64 <SystemCoreClockUpdate>:
 8004e64:	4a12      	ldr	r2, [pc, #72]	; (8004eb0 <SystemCoreClockUpdate+0x4c>)
 8004e66:	b510      	push	{r4, lr}
 8004e68:	6853      	ldr	r3, [r2, #4]
 8004e6a:	4912      	ldr	r1, [pc, #72]	; (8004eb4 <SystemCoreClockUpdate+0x50>)
 8004e6c:	f003 030c 	and.w	r3, r3, #12
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	d00a      	beq.n	8004e8a <SystemCoreClockUpdate+0x26>
 8004e74:	4b10      	ldr	r3, [pc, #64]	; (8004eb8 <SystemCoreClockUpdate+0x54>)
 8004e76:	600b      	str	r3, [r1, #0]
 8004e78:	6853      	ldr	r3, [r2, #4]
 8004e7a:	4a10      	ldr	r2, [pc, #64]	; (8004ebc <SystemCoreClockUpdate+0x58>)
 8004e7c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004e80:	5cd2      	ldrb	r2, [r2, r3]
 8004e82:	680b      	ldr	r3, [r1, #0]
 8004e84:	40d3      	lsrs	r3, r2
 8004e86:	600b      	str	r3, [r1, #0]
 8004e88:	bd10      	pop	{r4, pc}
 8004e8a:	6853      	ldr	r3, [r2, #4]
 8004e8c:	6850      	ldr	r0, [r2, #4]
 8004e8e:	f3c3 4383 	ubfx	r3, r3, #18, #4
 8004e92:	03c0      	lsls	r0, r0, #15
 8004e94:	bf41      	itttt	mi
 8004e96:	6ad0      	ldrmi	r0, [r2, #44]	; 0x2c
 8004e98:	4c07      	ldrmi	r4, [pc, #28]	; (8004eb8 <SystemCoreClockUpdate+0x54>)
 8004e9a:	f000 000f 	andmi.w	r0, r0, #15
 8004e9e:	3001      	addmi	r0, #1
 8004ea0:	bf4c      	ite	mi
 8004ea2:	fbb4 f0f0 	udivmi	r0, r4, r0
 8004ea6:	4806      	ldrpl	r0, [pc, #24]	; (8004ec0 <SystemCoreClockUpdate+0x5c>)
 8004ea8:	3302      	adds	r3, #2
 8004eaa:	4343      	muls	r3, r0
 8004eac:	e7e3      	b.n	8004e76 <SystemCoreClockUpdate+0x12>
 8004eae:	bf00      	nop
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	20000290 	.word	0x20000290
 8004eb8:	007a1200 	.word	0x007a1200
 8004ebc:	08006be6 	.word	0x08006be6
 8004ec0:	003d0900 	.word	0x003d0900

08004ec4 <printToBufferUART1>:



void printToBufferUART1(volatile char* str)//10us for one char 24Mgz
{
	while (bufferUart1.tx_counter >= TX_BUFFER_SIZE-30); //если буфер переполнен, ждем
 8004ec4:	4a32      	ldr	r2, [pc, #200]	; (8004f90 <printToBufferUART1+0xcc>)
{
 8004ec6:	b530      	push	{r4, r5, lr}
 8004ec8:	4613      	mov	r3, r2
	while (bufferUart1.tx_counter >= TX_BUFFER_SIZE-30); //если буфер переполнен, ждем
 8004eca:	f240 34c9 	movw	r4, #969	; 0x3c9
 8004ece:	f8b2 1458 	ldrh.w	r1, [r2, #1112]	; 0x458
 8004ed2:	428c      	cmp	r4, r1
 8004ed4:	d3fb      	bcc.n	8004ece <printToBufferUART1+0xa>

	//LL_USART_DisableIT_TXE(USART1); //запрещаем прерывание, чтобы оно не мешало менять переменную
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 8004ed6:	492f      	ldr	r1, [pc, #188]	; (8004f94 <printToBufferUART1+0xd0>)
 8004ed8:	68ca      	ldr	r2, [r1, #12]
 8004eda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ede:	60ca      	str	r2, [r1, #12]

	while (*str != 0)
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8004ee0:	2100      	movs	r1, #0
	while (*str != 0)
 8004ee2:	7802      	ldrb	r2, [r0, #0]
 8004ee4:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 8004ee8:	bb4a      	cbnz	r2, 8004f3e <printToBufferUART1+0x7a>
		#if DEBUG_LEVEL
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
		#endif
	}
	bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]='\n'; //то кладем данные в буфер
 8004eea:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 8004eee:	b292      	uxth	r2, r2
 8004ef0:	1c51      	adds	r1, r2, #1
 8004ef2:	b289      	uxth	r1, r1
 8004ef4:	f8a3 1454 	strh.w	r1, [r3, #1108]	; 0x454
 8004ef8:	210a      	movs	r1, #10
 8004efa:	441a      	add	r2, r3
 8004efc:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
	if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8004f00:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 8004f04:	b292      	uxth	r2, r2
 8004f06:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8004f0a:	bf08      	it	eq
 8004f0c:	f8a3 4454 	strheq.w	r4, [r3, #1108]	; 0x454
	++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 8004f10:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8004f14:	3201      	adds	r2, #1
 8004f16:	b292      	uxth	r2, r2
 8004f18:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	#if DEBUG_LEVEL
		if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 8004f1c:	f8b3 245a 	ldrh.w	r2, [r3, #1114]	; 0x45a
 8004f20:	f8b3 1458 	ldrh.w	r1, [r3, #1112]	; 0x458
 8004f24:	4291      	cmp	r1, r2
			bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 8004f26:	bf82      	ittt	hi
 8004f28:	f8b3 2458 	ldrhhi.w	r2, [r3, #1112]	; 0x458
 8004f2c:	b292      	uxthhi	r2, r2
 8004f2e:	f8a3 245a 	strhhi.w	r2, [r3, #1114]	; 0x45a
	#endif

	//LL_USART_EnableIT_TXE(USART1); //разрешаем прерывание
	USART1->CR1 |= USART_CR1_TXEIE;// Interrupt enable
 8004f32:	4a18      	ldr	r2, [pc, #96]	; (8004f94 <printToBufferUART1+0xd0>)
 8004f34:	68d3      	ldr	r3, [r2, #12]
 8004f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f3a:	60d3      	str	r3, [r2, #12]
}
 8004f3c:	bd30      	pop	{r4, r5, pc}
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
 8004f3e:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 8004f42:	1c44      	adds	r4, r0, #1
 8004f44:	b292      	uxth	r2, r2
 8004f46:	1c55      	adds	r5, r2, #1
 8004f48:	b2ad      	uxth	r5, r5
 8004f4a:	f8a3 5454 	strh.w	r5, [r3, #1108]	; 0x454
 8004f4e:	7800      	ldrb	r0, [r0, #0]
 8004f50:	441a      	add	r2, r3
 8004f52:	b2c0      	uxtb	r0, r0
 8004f54:	f882 006c 	strb.w	r0, [r2, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8004f58:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 8004f5c:	b292      	uxth	r2, r2
 8004f5e:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8004f62:	bf08      	it	eq
 8004f64:	f8a3 1454 	strheq.w	r1, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 8004f68:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8004f6c:	3201      	adds	r2, #1
 8004f6e:	b292      	uxth	r2, r2
 8004f70:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 8004f74:	f8b3 245a 	ldrh.w	r2, [r3, #1114]	; 0x45a
 8004f78:	f8b3 0458 	ldrh.w	r0, [r3, #1112]	; 0x458
 8004f7c:	4290      	cmp	r0, r2
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 8004f7e:	bf88      	it	hi
 8004f80:	f8b3 2458 	ldrhhi.w	r2, [r3, #1112]	; 0x458
{
 8004f84:	4620      	mov	r0, r4
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 8004f86:	bf84      	itt	hi
 8004f88:	b292      	uxthhi	r2, r2
 8004f8a:	f8a3 245a 	strhhi.w	r2, [r3, #1114]	; 0x45a
 8004f8e:	e7a8      	b.n	8004ee2 <printToBufferUART1+0x1e>
 8004f90:	200002c2 	.word	0x200002c2
 8004f94:	40013800 	.word	0x40013800

08004f98 <printToBufferWithoutEndUART1>:


void printToBufferWithoutEndUART1(volatile char* str)//10us for one char 24Mgz
{
	while (bufferUart1.tx_counter >= TX_BUFFER_SIZE-30); //если буфер переполнен, ждем
 8004f98:	4a1f      	ldr	r2, [pc, #124]	; (8005018 <printToBufferWithoutEndUART1+0x80>)
{
 8004f9a:	b530      	push	{r4, r5, lr}
 8004f9c:	4613      	mov	r3, r2
	while (bufferUart1.tx_counter >= TX_BUFFER_SIZE-30); //если буфер переполнен, ждем
 8004f9e:	f240 34c9 	movw	r4, #969	; 0x3c9
 8004fa2:	f8b2 1458 	ldrh.w	r1, [r2, #1112]	; 0x458
 8004fa6:	428c      	cmp	r4, r1
 8004fa8:	d3fb      	bcc.n	8004fa2 <printToBufferWithoutEndUART1+0xa>

	//LL_USART_DisableIT_TXE(USART1); //запрещаем прерывание, чтобы оно не мешало менять переменную
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 8004faa:	491c      	ldr	r1, [pc, #112]	; (800501c <printToBufferWithoutEndUART1+0x84>)
 8004fac:	68ca      	ldr	r2, [r1, #12]
 8004fae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fb2:	60ca      	str	r2, [r1, #12]

	while (*str != 0)
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8004fb4:	2100      	movs	r1, #0
	while (*str != 0)
 8004fb6:	7802      	ldrb	r2, [r0, #0]
 8004fb8:	b92a      	cbnz	r2, 8004fc6 <printToBufferWithoutEndUART1+0x2e>
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
		#endif

	}
	USART1->CR1 |= USART_CR1_TXEIE;// Interrupt enable
 8004fba:	4a18      	ldr	r2, [pc, #96]	; (800501c <printToBufferWithoutEndUART1+0x84>)
 8004fbc:	68d3      	ldr	r3, [r2, #12]
 8004fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fc2:	60d3      	str	r3, [r2, #12]
}
 8004fc4:	bd30      	pop	{r4, r5, pc}
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
 8004fc6:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 8004fca:	1c44      	adds	r4, r0, #1
 8004fcc:	b292      	uxth	r2, r2
 8004fce:	1c55      	adds	r5, r2, #1
 8004fd0:	b2ad      	uxth	r5, r5
 8004fd2:	f8a3 5454 	strh.w	r5, [r3, #1108]	; 0x454
 8004fd6:	7800      	ldrb	r0, [r0, #0]
 8004fd8:	441a      	add	r2, r3
 8004fda:	b2c0      	uxtb	r0, r0
 8004fdc:	f882 006c 	strb.w	r0, [r2, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8004fe0:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 8004fe4:	b292      	uxth	r2, r2
 8004fe6:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8004fea:	bf08      	it	eq
 8004fec:	f8a3 1454 	strheq.w	r1, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 8004ff0:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8004ff4:	3201      	adds	r2, #1
 8004ff6:	b292      	uxth	r2, r2
 8004ff8:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 8004ffc:	f8b3 245a 	ldrh.w	r2, [r3, #1114]	; 0x45a
 8005000:	f8b3 0458 	ldrh.w	r0, [r3, #1112]	; 0x458
 8005004:	4290      	cmp	r0, r2
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 8005006:	bf88      	it	hi
 8005008:	f8b3 2458 	ldrhhi.w	r2, [r3, #1112]	; 0x458
{
 800500c:	4620      	mov	r0, r4
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 800500e:	bf84      	itt	hi
 8005010:	b292      	uxthhi	r2, r2
 8005012:	f8a3 245a 	strhhi.w	r2, [r3, #1114]	; 0x45a
 8005016:	e7ce      	b.n	8004fb6 <printToBufferWithoutEndUART1+0x1e>
 8005018:	200002c2 	.word	0x200002c2
 800501c:	40013800 	.word	0x40013800

08005020 <printToBufferUART1D>:

void printToBufferUART1D(volatile char* str, volatile int32_t value, volatile uint8_t koma) //10us for one char + 6us for one digit 24Mgz
{
 8005020:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005022:	9101      	str	r1, [sp, #4]
 8005024:	f88d 2003 	strb.w	r2, [sp, #3]
	char *str1;
	if (koma == 0)
 8005028:	f89d 3003 	ldrb.w	r3, [sp, #3]
{
 800502c:	4604      	mov	r4, r0
		str1 = itoa(value);
 800502e:	9801      	ldr	r0, [sp, #4]
	if (koma == 0)
 8005030:	2b00      	cmp	r3, #0
 8005032:	d144      	bne.n	80050be <printToBufferUART1D+0x9e>
		str1 = itoa(value);
 8005034:	f7fc f8ce 	bl	80011d4 <itoa>
	else
		str1 = itoa_koma(value,koma);

	while (bufferUart1.tx_counter >= TX_BUFFER_SIZE-30); //если буфер переполнен, ждем
 8005038:	4a49      	ldr	r2, [pc, #292]	; (8005160 <printToBufferUART1D+0x140>)
 800503a:	f240 35c9 	movw	r5, #969	; 0x3c9
 800503e:	4613      	mov	r3, r2
 8005040:	f8b2 1458 	ldrh.w	r1, [r2, #1112]	; 0x458
 8005044:	428d      	cmp	r5, r1
 8005046:	d3fb      	bcc.n	8005040 <printToBufferUART1D+0x20>
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable

	while (*str != 0)
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8005048:	2500      	movs	r5, #0
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 800504a:	4946      	ldr	r1, [pc, #280]	; (8005164 <printToBufferUART1D+0x144>)
 800504c:	68ca      	ldr	r2, [r1, #12]
 800504e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005052:	60ca      	str	r2, [r1, #12]
	while (*str != 0)
 8005054:	7822      	ldrb	r2, [r4, #0]
 8005056:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 800505a:	2a00      	cmp	r2, #0
 800505c:	d134      	bne.n	80050c8 <printToBufferUART1D+0xa8>
 800505e:	3801      	subs	r0, #1

	}

	while (*str1 != 0)
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str1++; //то кладем данные в буфер
 8005060:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
	while (*str1 != 0)
 8005064:	f810 4f01 	ldrb.w	r4, [r0, #1]!
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str1++; //то кладем данные в буфер
 8005068:	b292      	uxth	r2, r2
	while (*str1 != 0)
 800506a:	2c00      	cmp	r4, #0
 800506c:	d155      	bne.n	800511a <printToBufferUART1D+0xfa>
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
		#endif

	}

	bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]='\n'; //то кладем данные в буфер
 800506e:	1c51      	adds	r1, r2, #1
 8005070:	b289      	uxth	r1, r1
 8005072:	f8a3 1454 	strh.w	r1, [r3, #1108]	; 0x454
 8005076:	210a      	movs	r1, #10
 8005078:	441a      	add	r2, r3
 800507a:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
	if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 800507e:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 8005082:	b292      	uxth	r2, r2
 8005084:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8005088:	bf08      	it	eq
 800508a:	f8a3 4454 	strheq.w	r4, [r3, #1108]	; 0x454
	++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 800508e:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8005092:	3201      	adds	r2, #1
 8005094:	b292      	uxth	r2, r2
 8005096:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	#if DEBUG_LEVEL
		if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 800509a:	f8b3 245a 	ldrh.w	r2, [r3, #1114]	; 0x45a
 800509e:	f8b3 1458 	ldrh.w	r1, [r3, #1112]	; 0x458
 80050a2:	4291      	cmp	r1, r2
			bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 80050a4:	bf82      	ittt	hi
 80050a6:	f8b3 2458 	ldrhhi.w	r2, [r3, #1112]	; 0x458
 80050aa:	b292      	uxthhi	r2, r2
 80050ac:	f8a3 245a 	strhhi.w	r2, [r3, #1114]	; 0x45a
	#endif

	//LL_USART_EnableIT_TXE(USART1); //разрешаем прерывание
	USART1->CR1 |= USART_CR1_TXEIE;// Interrupt enable
 80050b0:	4a2c      	ldr	r2, [pc, #176]	; (8005164 <printToBufferUART1D+0x144>)
 80050b2:	68d3      	ldr	r3, [r2, #12]
 80050b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050b8:	60d3      	str	r3, [r2, #12]
}
 80050ba:	b002      	add	sp, #8
 80050bc:	bd70      	pop	{r4, r5, r6, pc}
		str1 = itoa_koma(value,koma);
 80050be:	f89d 1003 	ldrb.w	r1, [sp, #3]
 80050c2:	f7fc f8fb 	bl	80012bc <itoa_koma>
 80050c6:	e7b7      	b.n	8005038 <printToBufferUART1D+0x18>
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
 80050c8:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 80050cc:	1c61      	adds	r1, r4, #1
 80050ce:	b292      	uxth	r2, r2
 80050d0:	1c56      	adds	r6, r2, #1
 80050d2:	b2b6      	uxth	r6, r6
 80050d4:	f8a3 6454 	strh.w	r6, [r3, #1108]	; 0x454
 80050d8:	7824      	ldrb	r4, [r4, #0]
 80050da:	441a      	add	r2, r3
 80050dc:	b2e4      	uxtb	r4, r4
 80050de:	f882 406c 	strb.w	r4, [r2, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 80050e2:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 80050e6:	b292      	uxth	r2, r2
 80050e8:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80050ec:	bf08      	it	eq
 80050ee:	f8a3 5454 	strheq.w	r5, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 80050f2:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 80050f6:	3201      	adds	r2, #1
 80050f8:	b292      	uxth	r2, r2
 80050fa:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 80050fe:	f8b3 245a 	ldrh.w	r2, [r3, #1114]	; 0x45a
 8005102:	f8b3 4458 	ldrh.w	r4, [r3, #1112]	; 0x458
 8005106:	4294      	cmp	r4, r2
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 8005108:	bf88      	it	hi
 800510a:	f8b3 2458 	ldrhhi.w	r2, [r3, #1112]	; 0x458
{
 800510e:	460c      	mov	r4, r1
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 8005110:	bf84      	itt	hi
 8005112:	b292      	uxthhi	r2, r2
 8005114:	f8a3 245a 	strhhi.w	r2, [r3, #1114]	; 0x45a
 8005118:	e79c      	b.n	8005054 <printToBufferUART1D+0x34>
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str1++; //то кладем данные в буфер
 800511a:	1c54      	adds	r4, r2, #1
 800511c:	b2a4      	uxth	r4, r4
 800511e:	f8a3 4454 	strh.w	r4, [r3, #1108]	; 0x454
 8005122:	7804      	ldrb	r4, [r0, #0]
 8005124:	441a      	add	r2, r3
 8005126:	f882 406c 	strb.w	r4, [r2, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 800512a:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 800512e:	b292      	uxth	r2, r2
 8005130:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8005134:	bf08      	it	eq
 8005136:	f8a3 1454 	strheq.w	r1, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 800513a:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 800513e:	3201      	adds	r2, #1
 8005140:	b292      	uxth	r2, r2
 8005142:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 8005146:	f8b3 245a 	ldrh.w	r2, [r3, #1114]	; 0x45a
 800514a:	f8b3 4458 	ldrh.w	r4, [r3, #1112]	; 0x458
 800514e:	4294      	cmp	r4, r2
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 8005150:	bf82      	ittt	hi
 8005152:	f8b3 2458 	ldrhhi.w	r2, [r3, #1112]	; 0x458
 8005156:	b292      	uxthhi	r2, r2
 8005158:	f8a3 245a 	strhhi.w	r2, [r3, #1114]	; 0x45a
 800515c:	e780      	b.n	8005060 <printToBufferUART1D+0x40>
 800515e:	bf00      	nop
 8005160:	200002c2 	.word	0x200002c2
 8005164:	40013800 	.word	0x40013800

08005168 <putCharDirectToUart1>:
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8005168:	4b02      	ldr	r3, [pc, #8]	; (8005174 <putCharDirectToUart1+0xc>)
 800516a:	681a      	ldr	r2, [r3, #0]
	  putCharInBufferUart1(*s++);
}

void putCharDirectToUart1(uint8_t c)
{
	while (!LL_USART_IsActiveFlag_TXE(USART1));
 800516c:	0612      	lsls	r2, r2, #24
 800516e:	d5fc      	bpl.n	800516a <putCharDirectToUart1+0x2>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8005170:	6058      	str	r0, [r3, #4]
	LL_USART_TransmitData8(USART1, c);
	c++;
}
 8005172:	4770      	bx	lr
 8005174:	40013800 	.word	0x40013800

08005178 <putStringDirectToUart1>:

void putStringDirectToUart1(volatile char *s)
{
 8005178:	b508      	push	{r3, lr}
  while (*s != 0)
 800517a:	7803      	ldrb	r3, [r0, #0]
 800517c:	b903      	cbnz	r3, 8005180 <putStringDirectToUart1+0x8>
	  putCharDirectToUart1(*s++);
}
 800517e:	bd08      	pop	{r3, pc}
	  putCharDirectToUart1(*s++);
 8005180:	1c41      	adds	r1, r0, #1
 8005182:	7800      	ldrb	r0, [r0, #0]
 8005184:	f7ff fff0 	bl	8005168 <putCharDirectToUart1>
 8005188:	4608      	mov	r0, r1
 800518a:	e7f6      	b.n	800517a <putStringDirectToUart1+0x2>

0800518c <Print_to_USART1_d>:
{
 800518c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800518e:	9001      	str	r0, [sp, #4]
 8005190:	460d      	mov	r5, r1
		str = itoa(value);
 8005192:	9801      	ldr	r0, [sp, #4]
	if (koma == 0)
 8005194:	b972      	cbnz	r2, 80051b4 <Print_to_USART1_d+0x28>
		str = itoa(value);
 8005196:	f7fc f81d 	bl	80011d4 <itoa>
		str = itoa_koma(value,koma);
 800519a:	4604      	mov	r4, r0
	putStringDirectToUart1(string);
 800519c:	4628      	mov	r0, r5
 800519e:	f7ff ffeb 	bl	8005178 <putStringDirectToUart1>
	putStringDirectToUart1(str);
 80051a2:	4620      	mov	r0, r4
 80051a4:	f7ff ffe8 	bl	8005178 <putStringDirectToUart1>
	putCharDirectToUart1('\n');
 80051a8:	200a      	movs	r0, #10
}
 80051aa:	b003      	add	sp, #12
 80051ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	putCharDirectToUart1('\n');
 80051b0:	f7ff bfda 	b.w	8005168 <putCharDirectToUart1>
		str = itoa_koma(value,koma);
 80051b4:	4611      	mov	r1, r2
 80051b6:	f7fc f881 	bl	80012bc <itoa_koma>
 80051ba:	e7ee      	b.n	800519a <Print_to_USART1_d+0xe>

080051bc <Reset_Handler>:
 80051bc:	2100      	movs	r1, #0
 80051be:	e003      	b.n	80051c8 <LoopCopyDataInit>

080051c0 <CopyDataInit>:
 80051c0:	4b0b      	ldr	r3, [pc, #44]	; (80051f0 <LoopFillZerobss+0x14>)
 80051c2:	585b      	ldr	r3, [r3, r1]
 80051c4:	5043      	str	r3, [r0, r1]
 80051c6:	3104      	adds	r1, #4

080051c8 <LoopCopyDataInit>:
 80051c8:	480a      	ldr	r0, [pc, #40]	; (80051f4 <LoopFillZerobss+0x18>)
 80051ca:	4b0b      	ldr	r3, [pc, #44]	; (80051f8 <LoopFillZerobss+0x1c>)
 80051cc:	1842      	adds	r2, r0, r1
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d3f6      	bcc.n	80051c0 <CopyDataInit>
 80051d2:	4a0a      	ldr	r2, [pc, #40]	; (80051fc <LoopFillZerobss+0x20>)
 80051d4:	e002      	b.n	80051dc <LoopFillZerobss>

080051d6 <FillZerobss>:
 80051d6:	2300      	movs	r3, #0
 80051d8:	f842 3b04 	str.w	r3, [r2], #4

080051dc <LoopFillZerobss>:
 80051dc:	4b08      	ldr	r3, [pc, #32]	; (8005200 <LoopFillZerobss+0x24>)
 80051de:	429a      	cmp	r2, r3
 80051e0:	d3f9      	bcc.n	80051d6 <FillZerobss>
 80051e2:	f7ff fe3d 	bl	8004e60 <SystemInit>
 80051e6:	f000 fa19 	bl	800561c <__libc_init_array>
 80051ea:	f7ff f8dd 	bl	80043a8 <main>
 80051ee:	4770      	bx	lr
 80051f0:	08006c08 	.word	0x08006c08
 80051f4:	20000000 	.word	0x20000000
 80051f8:	20000294 	.word	0x20000294
 80051fc:	20000294 	.word	0x20000294
 8005200:	20000a04 	.word	0x20000a04

08005204 <ADC1_IRQHandler>:
 8005204:	e7fe      	b.n	8005204 <ADC1_IRQHandler>

08005206 <LL_ADC_Init>:
 8005206:	6883      	ldr	r3, [r0, #8]
 8005208:	b510      	push	{r4, lr}
 800520a:	f013 0301 	ands.w	r3, r3, #1
 800520e:	d10d      	bne.n	800522c <LL_ADC_Init+0x26>
 8005210:	6842      	ldr	r2, [r0, #4]
 8005212:	684c      	ldr	r4, [r1, #4]
 8005214:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005218:	4322      	orrs	r2, r4
 800521a:	6042      	str	r2, [r0, #4]
 800521c:	6882      	ldr	r2, [r0, #8]
 800521e:	6809      	ldr	r1, [r1, #0]
 8005220:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005224:	430a      	orrs	r2, r1
 8005226:	6082      	str	r2, [r0, #8]
 8005228:	4618      	mov	r0, r3
 800522a:	bd10      	pop	{r4, pc}
 800522c:	2001      	movs	r0, #1
 800522e:	e7fc      	b.n	800522a <LL_ADC_Init+0x24>

08005230 <LL_ADC_REG_Init>:
 8005230:	6883      	ldr	r3, [r0, #8]
 8005232:	b510      	push	{r4, lr}
 8005234:	07db      	lsls	r3, r3, #31
 8005236:	d41b      	bmi.n	8005270 <LL_ADC_REG_Init+0x40>
 8005238:	6843      	ldr	r3, [r0, #4]
 800523a:	684a      	ldr	r2, [r1, #4]
 800523c:	f423 4368 	bic.w	r3, r3, #59392	; 0xe800
 8005240:	b112      	cbz	r2, 8005248 <LL_ADC_REG_Init+0x18>
 8005242:	688c      	ldr	r4, [r1, #8]
 8005244:	4313      	orrs	r3, r2
 8005246:	4323      	orrs	r3, r4
 8005248:	6043      	str	r3, [r0, #4]
 800524a:	6883      	ldr	r3, [r0, #8]
 800524c:	680c      	ldr	r4, [r1, #0]
 800524e:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8005252:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005256:	4323      	orrs	r3, r4
 8005258:	68cc      	ldr	r4, [r1, #12]
 800525a:	6909      	ldr	r1, [r1, #16]
 800525c:	4323      	orrs	r3, r4
 800525e:	430b      	orrs	r3, r1
 8005260:	6083      	str	r3, [r0, #8]
 8005262:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005264:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005268:	4313      	orrs	r3, r2
 800526a:	62c3      	str	r3, [r0, #44]	; 0x2c
 800526c:	2000      	movs	r0, #0
 800526e:	bd10      	pop	{r4, pc}
 8005270:	2001      	movs	r0, #1
 8005272:	e7fc      	b.n	800526e <LL_ADC_REG_Init+0x3e>

08005274 <LL_DAC_Init>:
 8005274:	2301      	movs	r3, #1
 8005276:	b570      	push	{r4, r5, r6, lr}
 8005278:	f001 0110 	and.w	r1, r1, #16
 800527c:	6805      	ldr	r5, [r0, #0]
 800527e:	fa03 f401 	lsl.w	r4, r3, r1
 8005282:	43ac      	bics	r4, r5
 8005284:	d01d      	beq.n	80052c2 <LL_DAC_Init+0x4e>
 8005286:	e9d2 4300 	ldrd	r4, r3, [r2]
 800528a:	68d6      	ldr	r6, [r2, #12]
 800528c:	b17b      	cbz	r3, 80052ae <LL_DAC_Init+0x3a>
 800528e:	4323      	orrs	r3, r4
 8005290:	f640 74fa 	movw	r4, #4090	; 0xffa
 8005294:	6892      	ldr	r2, [r2, #8]
 8005296:	4333      	orrs	r3, r6
 8005298:	6805      	ldr	r5, [r0, #0]
 800529a:	4313      	orrs	r3, r2
 800529c:	408b      	lsls	r3, r1
 800529e:	fa04 f101 	lsl.w	r1, r4, r1
 80052a2:	ea25 0101 	bic.w	r1, r5, r1
 80052a6:	4319      	orrs	r1, r3
 80052a8:	6001      	str	r1, [r0, #0]
 80052aa:	2000      	movs	r0, #0
 80052ac:	bd70      	pop	{r4, r5, r6, pc}
 80052ae:	25fa      	movs	r5, #250	; 0xfa
 80052b0:	6802      	ldr	r2, [r0, #0]
 80052b2:	408d      	lsls	r5, r1
 80052b4:	4334      	orrs	r4, r6
 80052b6:	ea22 0205 	bic.w	r2, r2, r5
 80052ba:	fa04 f101 	lsl.w	r1, r4, r1
 80052be:	4311      	orrs	r1, r2
 80052c0:	e7f2      	b.n	80052a8 <LL_DAC_Init+0x34>
 80052c2:	4618      	mov	r0, r3
 80052c4:	e7f2      	b.n	80052ac <LL_DAC_Init+0x38>

080052c6 <LL_GPIO_Init>:
 80052c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ca:	680c      	ldr	r4, [r1, #0]
 80052cc:	f3c4 240f 	ubfx	r4, r4, #8, #16
 80052d0:	fa94 f2a4 	rbit	r2, r4
 80052d4:	f04f 0a0f 	mov.w	sl, #15
 80052d8:	fab2 f282 	clz	r2, r2
 80052dc:	f04f 0903 	mov.w	r9, #3
 80052e0:	2704      	movs	r7, #4
 80052e2:	f04f 1c01 	mov.w	ip, #65537	; 0x10001
 80052e6:	f240 1e01 	movw	lr, #257	; 0x101
 80052ea:	fa34 f302 	lsrs.w	r3, r4, r2
 80052ee:	d102      	bne.n	80052f6 <LL_GPIO_Init+0x30>
 80052f0:	4618      	mov	r0, r3
 80052f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052f6:	2301      	movs	r3, #1
 80052f8:	4093      	lsls	r3, r2
 80052fa:	4223      	tst	r3, r4
 80052fc:	d05e      	beq.n	80053bc <LL_GPIO_Init+0xf6>
 80052fe:	2a07      	cmp	r2, #7
 8005300:	bf85      	ittet	hi
 8005302:	f1a2 0308 	subhi.w	r3, r2, #8
 8005306:	fa0c f303 	lslhi.w	r3, ip, r3
 800530a:	fa0e f302 	lslls.w	r3, lr, r2
 800530e:	f043 6380 	orrhi.w	r3, r3, #67108864	; 0x4000000
 8005312:	68c5      	ldr	r5, [r0, #12]
 8005314:	0a1e      	lsrs	r6, r3, #8
 8005316:	fa96 f8a6 	rbit	r8, r6
 800531a:	fab8 f888 	clz	r8, r8
 800531e:	ea25 0606 	bic.w	r6, r5, r6
 8005322:	690d      	ldr	r5, [r1, #16]
 8005324:	fa05 f508 	lsl.w	r5, r5, r8
 8005328:	4335      	orrs	r5, r6
 800532a:	60c5      	str	r5, [r0, #12]
 800532c:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8005330:	fa93 f6a3 	rbit	r6, r3
 8005334:	fab6 f686 	clz	r6, r6
 8005338:	fa93 fba3 	rbit	fp, r3
 800533c:	fabb fb8b 	clz	fp, fp
 8005340:	00b6      	lsls	r6, r6, #2
 8005342:	fa0a f506 	lsl.w	r5, sl, r6
 8005346:	f850 6008 	ldr.w	r6, [r0, r8]
 800534a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800534e:	ea26 0605 	bic.w	r6, r6, r5
 8005352:	684d      	ldr	r5, [r1, #4]
 8005354:	fa05 fb0b 	lsl.w	fp, r5, fp
 8005358:	ea46 060b 	orr.w	r6, r6, fp
 800535c:	f840 6008 	str.w	r6, [r0, r8]
 8005360:	684d      	ldr	r5, [r1, #4]
 8005362:	f025 0508 	bic.w	r5, r5, #8
 8005366:	2d01      	cmp	r5, #1
 8005368:	d128      	bne.n	80053bc <LL_GPIO_Init+0xf6>
 800536a:	fa93 f5a3 	rbit	r5, r3
 800536e:	fab5 f585 	clz	r5, r5
 8005372:	fa93 fba3 	rbit	fp, r3
 8005376:	fabb fb8b 	clz	fp, fp
 800537a:	00ad      	lsls	r5, r5, #2
 800537c:	fa09 f505 	lsl.w	r5, r9, r5
 8005380:	ea26 0605 	bic.w	r6, r6, r5
 8005384:	688d      	ldr	r5, [r1, #8]
 8005386:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800538a:	fa05 fb0b 	lsl.w	fp, r5, fp
 800538e:	ea46 060b 	orr.w	r6, r6, fp
 8005392:	f840 6008 	str.w	r6, [r0, r8]
 8005396:	fa93 f5a3 	rbit	r5, r3
 800539a:	fab5 f585 	clz	r5, r5
 800539e:	fa93 f3a3 	rbit	r3, r3
 80053a2:	fab3 f383 	clz	r3, r3
 80053a6:	00ad      	lsls	r5, r5, #2
 80053a8:	fa07 f505 	lsl.w	r5, r7, r5
 80053ac:	ea26 0505 	bic.w	r5, r6, r5
 80053b0:	68ce      	ldr	r6, [r1, #12]
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	409e      	lsls	r6, r3
 80053b6:	432e      	orrs	r6, r5
 80053b8:	f840 6008 	str.w	r6, [r0, r8]
 80053bc:	3201      	adds	r2, #1
 80053be:	e794      	b.n	80052ea <LL_GPIO_Init+0x24>

080053c0 <RCC_GetHCLKClockFreq>:
 80053c0:	4b03      	ldr	r3, [pc, #12]	; (80053d0 <RCC_GetHCLKClockFreq+0x10>)
 80053c2:	4a04      	ldr	r2, [pc, #16]	; (80053d4 <RCC_GetHCLKClockFreq+0x14>)
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80053ca:	5cd3      	ldrb	r3, [r2, r3]
 80053cc:	40d8      	lsrs	r0, r3
 80053ce:	4770      	bx	lr
 80053d0:	40021000 	.word	0x40021000
 80053d4:	08006be6 	.word	0x08006be6

080053d8 <RCC_GetPCLK1ClockFreq>:
 80053d8:	4b03      	ldr	r3, [pc, #12]	; (80053e8 <RCC_GetPCLK1ClockFreq+0x10>)
 80053da:	4a04      	ldr	r2, [pc, #16]	; (80053ec <RCC_GetPCLK1ClockFreq+0x14>)
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80053e2:	5cd3      	ldrb	r3, [r2, r3]
 80053e4:	40d8      	lsrs	r0, r3
 80053e6:	4770      	bx	lr
 80053e8:	40021000 	.word	0x40021000
 80053ec:	08006bf6 	.word	0x08006bf6

080053f0 <RCC_GetPCLK2ClockFreq>:
 80053f0:	4b03      	ldr	r3, [pc, #12]	; (8005400 <RCC_GetPCLK2ClockFreq+0x10>)
 80053f2:	4a04      	ldr	r2, [pc, #16]	; (8005404 <RCC_GetPCLK2ClockFreq+0x14>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80053fa:	5cd3      	ldrb	r3, [r2, r3]
 80053fc:	40d8      	lsrs	r0, r3
 80053fe:	4770      	bx	lr
 8005400:	40021000 	.word	0x40021000
 8005404:	08006bf6 	.word	0x08006bf6

08005408 <RCC_PLL_GetFreqDomain_SYS>:
 8005408:	4b09      	ldr	r3, [pc, #36]	; (8005430 <RCC_PLL_GetFreqDomain_SYS+0x28>)
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8005410:	b162      	cbz	r2, 800542c <RCC_PLL_GetFreqDomain_SYS+0x24>
 8005412:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005414:	4a07      	ldr	r2, [pc, #28]	; (8005434 <RCC_PLL_GetFreqDomain_SYS+0x2c>)
 8005416:	f000 000f 	and.w	r0, r0, #15
 800541a:	3001      	adds	r0, #1
 800541c:	fbb2 f0f0 	udiv	r0, r2, r0
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f3c3 4383 	ubfx	r3, r3, #18, #4
 8005426:	3302      	adds	r3, #2
 8005428:	4358      	muls	r0, r3
 800542a:	4770      	bx	lr
 800542c:	4802      	ldr	r0, [pc, #8]	; (8005438 <RCC_PLL_GetFreqDomain_SYS+0x30>)
 800542e:	e7f7      	b.n	8005420 <RCC_PLL_GetFreqDomain_SYS+0x18>
 8005430:	40021000 	.word	0x40021000
 8005434:	007a1200 	.word	0x007a1200
 8005438:	003d0900 	.word	0x003d0900

0800543c <RCC_GetSystemClockFreq>:
 800543c:	4b04      	ldr	r3, [pc, #16]	; (8005450 <RCC_GetSystemClockFreq+0x14>)
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f003 030c 	and.w	r3, r3, #12
 8005444:	2b08      	cmp	r3, #8
 8005446:	d101      	bne.n	800544c <RCC_GetSystemClockFreq+0x10>
 8005448:	f7ff bfde 	b.w	8005408 <RCC_PLL_GetFreqDomain_SYS>
 800544c:	4801      	ldr	r0, [pc, #4]	; (8005454 <RCC_GetSystemClockFreq+0x18>)
 800544e:	4770      	bx	lr
 8005450:	40021000 	.word	0x40021000
 8005454:	007a1200 	.word	0x007a1200

08005458 <LL_RCC_GetSystemClocksFreq>:
 8005458:	b508      	push	{r3, lr}
 800545a:	4601      	mov	r1, r0
 800545c:	f7ff ffee 	bl	800543c <RCC_GetSystemClockFreq>
 8005460:	6008      	str	r0, [r1, #0]
 8005462:	f7ff ffad 	bl	80053c0 <RCC_GetHCLKClockFreq>
 8005466:	6048      	str	r0, [r1, #4]
 8005468:	f7ff ffb6 	bl	80053d8 <RCC_GetPCLK1ClockFreq>
 800546c:	6088      	str	r0, [r1, #8]
 800546e:	6848      	ldr	r0, [r1, #4]
 8005470:	f7ff ffbe 	bl	80053f0 <RCC_GetPCLK2ClockFreq>
 8005474:	60c8      	str	r0, [r1, #12]
 8005476:	bd08      	pop	{r3, pc}

08005478 <LL_TIM_Init>:
 8005478:	4a25      	ldr	r2, [pc, #148]	; (8005510 <LL_TIM_Init+0x98>)
 800547a:	6803      	ldr	r3, [r0, #0]
 800547c:	4290      	cmp	r0, r2
 800547e:	d00a      	beq.n	8005496 <LL_TIM_Init+0x1e>
 8005480:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005484:	d007      	beq.n	8005496 <LL_TIM_Init+0x1e>
 8005486:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800548a:	4290      	cmp	r0, r2
 800548c:	d003      	beq.n	8005496 <LL_TIM_Init+0x1e>
 800548e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005492:	4290      	cmp	r0, r2
 8005494:	d111      	bne.n	80054ba <LL_TIM_Init+0x42>
 8005496:	684a      	ldr	r2, [r1, #4]
 8005498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549c:	4313      	orrs	r3, r2
 800549e:	4a1c      	ldr	r2, [pc, #112]	; (8005510 <LL_TIM_Init+0x98>)
 80054a0:	4290      	cmp	r0, r2
 80054a2:	d015      	beq.n	80054d0 <LL_TIM_Init+0x58>
 80054a4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80054a8:	d012      	beq.n	80054d0 <LL_TIM_Init+0x58>
 80054aa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80054ae:	4290      	cmp	r0, r2
 80054b0:	d00e      	beq.n	80054d0 <LL_TIM_Init+0x58>
 80054b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054b6:	4290      	cmp	r0, r2
 80054b8:	d00a      	beq.n	80054d0 <LL_TIM_Init+0x58>
 80054ba:	4a16      	ldr	r2, [pc, #88]	; (8005514 <LL_TIM_Init+0x9c>)
 80054bc:	4290      	cmp	r0, r2
 80054be:	d007      	beq.n	80054d0 <LL_TIM_Init+0x58>
 80054c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054c4:	4290      	cmp	r0, r2
 80054c6:	d003      	beq.n	80054d0 <LL_TIM_Init+0x58>
 80054c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054cc:	4290      	cmp	r0, r2
 80054ce:	d103      	bne.n	80054d8 <LL_TIM_Init+0x60>
 80054d0:	68ca      	ldr	r2, [r1, #12]
 80054d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054d6:	4313      	orrs	r3, r2
 80054d8:	6003      	str	r3, [r0, #0]
 80054da:	688b      	ldr	r3, [r1, #8]
 80054dc:	62c3      	str	r3, [r0, #44]	; 0x2c
 80054de:	880b      	ldrh	r3, [r1, #0]
 80054e0:	6283      	str	r3, [r0, #40]	; 0x28
 80054e2:	4b0b      	ldr	r3, [pc, #44]	; (8005510 <LL_TIM_Init+0x98>)
 80054e4:	4298      	cmp	r0, r3
 80054e6:	d00b      	beq.n	8005500 <LL_TIM_Init+0x88>
 80054e8:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80054ec:	4298      	cmp	r0, r3
 80054ee:	d007      	beq.n	8005500 <LL_TIM_Init+0x88>
 80054f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054f4:	4298      	cmp	r0, r3
 80054f6:	d003      	beq.n	8005500 <LL_TIM_Init+0x88>
 80054f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054fc:	4298      	cmp	r0, r3
 80054fe:	d101      	bne.n	8005504 <LL_TIM_Init+0x8c>
 8005500:	690b      	ldr	r3, [r1, #16]
 8005502:	6303      	str	r3, [r0, #48]	; 0x30
 8005504:	6943      	ldr	r3, [r0, #20]
 8005506:	f043 0301 	orr.w	r3, r3, #1
 800550a:	6143      	str	r3, [r0, #20]
 800550c:	2000      	movs	r0, #0
 800550e:	4770      	bx	lr
 8005510:	40012c00 	.word	0x40012c00
 8005514:	40014000 	.word	0x40014000

08005518 <LL_USART_Init>:
 8005518:	b530      	push	{r4, r5, lr}
 800551a:	68c3      	ldr	r3, [r0, #12]
 800551c:	b085      	sub	sp, #20
 800551e:	049b      	lsls	r3, r3, #18
 8005520:	4604      	mov	r4, r0
 8005522:	460d      	mov	r5, r1
 8005524:	d502      	bpl.n	800552c <LL_USART_Init+0x14>
 8005526:	2001      	movs	r0, #1
 8005528:	b005      	add	sp, #20
 800552a:	bd30      	pop	{r4, r5, pc}
 800552c:	684b      	ldr	r3, [r1, #4]
 800552e:	68c9      	ldr	r1, [r1, #12]
 8005530:	68c2      	ldr	r2, [r0, #12]
 8005532:	430b      	orrs	r3, r1
 8005534:	6929      	ldr	r1, [r5, #16]
 8005536:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 800553a:	430b      	orrs	r3, r1
 800553c:	69a9      	ldr	r1, [r5, #24]
 800553e:	f022 020c 	bic.w	r2, r2, #12
 8005542:	430b      	orrs	r3, r1
 8005544:	4313      	orrs	r3, r2
 8005546:	60c3      	str	r3, [r0, #12]
 8005548:	6903      	ldr	r3, [r0, #16]
 800554a:	68aa      	ldr	r2, [r5, #8]
 800554c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005550:	4313      	orrs	r3, r2
 8005552:	6103      	str	r3, [r0, #16]
 8005554:	6943      	ldr	r3, [r0, #20]
 8005556:	696a      	ldr	r2, [r5, #20]
 8005558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800555c:	4313      	orrs	r3, r2
 800555e:	6143      	str	r3, [r0, #20]
 8005560:	4668      	mov	r0, sp
 8005562:	f7ff ff79 	bl	8005458 <LL_RCC_GetSystemClocksFreq>
 8005566:	4b20      	ldr	r3, [pc, #128]	; (80055e8 <LL_USART_Init+0xd0>)
 8005568:	429c      	cmp	r4, r3
 800556a:	d125      	bne.n	80055b8 <LL_USART_Init+0xa0>
 800556c:	9903      	ldr	r1, [sp, #12]
 800556e:	2900      	cmp	r1, #0
 8005570:	d0d9      	beq.n	8005526 <LL_USART_Init+0xe>
 8005572:	682a      	ldr	r2, [r5, #0]
 8005574:	2a00      	cmp	r2, #0
 8005576:	d0d6      	beq.n	8005526 <LL_USART_Init+0xe>
 8005578:	2319      	movs	r3, #25
 800557a:	434b      	muls	r3, r1
 800557c:	69a9      	ldr	r1, [r5, #24]
 800557e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005582:	f04f 0164 	mov.w	r1, #100	; 0x64
 8005586:	d120      	bne.n	80055ca <LL_USART_Init+0xb2>
 8005588:	0052      	lsls	r2, r2, #1
 800558a:	fbb3 f3f2 	udiv	r3, r3, r2
 800558e:	fbb3 f0f1 	udiv	r0, r3, r1
 8005592:	fb01 3310 	mls	r3, r1, r0, r3
 8005596:	00db      	lsls	r3, r3, #3
 8005598:	3332      	adds	r3, #50	; 0x32
 800559a:	fbb3 f3f1 	udiv	r3, r3, r1
 800559e:	b29b      	uxth	r3, r3
 80055a0:	f003 0207 	and.w	r2, r3, #7
 80055a4:	005b      	lsls	r3, r3, #1
 80055a6:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 80055aa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80055ae:	4413      	add	r3, r2
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	60a3      	str	r3, [r4, #8]
 80055b4:	2000      	movs	r0, #0
 80055b6:	e7b7      	b.n	8005528 <LL_USART_Init+0x10>
 80055b8:	4b0c      	ldr	r3, [pc, #48]	; (80055ec <LL_USART_Init+0xd4>)
 80055ba:	429c      	cmp	r4, r3
 80055bc:	d101      	bne.n	80055c2 <LL_USART_Init+0xaa>
 80055be:	9902      	ldr	r1, [sp, #8]
 80055c0:	e7d5      	b.n	800556e <LL_USART_Init+0x56>
 80055c2:	4b0b      	ldr	r3, [pc, #44]	; (80055f0 <LL_USART_Init+0xd8>)
 80055c4:	429c      	cmp	r4, r3
 80055c6:	d1ae      	bne.n	8005526 <LL_USART_Init+0xe>
 80055c8:	e7f9      	b.n	80055be <LL_USART_Init+0xa6>
 80055ca:	0092      	lsls	r2, r2, #2
 80055cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80055d0:	fbb3 f2f1 	udiv	r2, r3, r1
 80055d4:	fb01 3312 	mls	r3, r1, r2, r3
 80055d8:	011b      	lsls	r3, r3, #4
 80055da:	3332      	adds	r3, #50	; 0x32
 80055dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80055e0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80055e4:	e7e4      	b.n	80055b0 <LL_USART_Init+0x98>
 80055e6:	bf00      	nop
 80055e8:	40013800 	.word	0x40013800
 80055ec:	40004400 	.word	0x40004400
 80055f0:	40004800 	.word	0x40004800

080055f4 <LL_Init1msTick>:
 80055f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80055f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80055fc:	2200      	movs	r2, #0
 80055fe:	4b03      	ldr	r3, [pc, #12]	; (800560c <LL_Init1msTick+0x18>)
 8005600:	3801      	subs	r0, #1
 8005602:	6058      	str	r0, [r3, #4]
 8005604:	609a      	str	r2, [r3, #8]
 8005606:	2205      	movs	r2, #5
 8005608:	601a      	str	r2, [r3, #0]
 800560a:	4770      	bx	lr
 800560c:	e000e010 	.word	0xe000e010

08005610 <LL_SetSystemCoreClock>:
 8005610:	4b01      	ldr	r3, [pc, #4]	; (8005618 <LL_SetSystemCoreClock+0x8>)
 8005612:	6018      	str	r0, [r3, #0]
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	20000290 	.word	0x20000290

0800561c <__libc_init_array>:
 800561c:	b570      	push	{r4, r5, r6, lr}
 800561e:	2500      	movs	r5, #0
 8005620:	4e0c      	ldr	r6, [pc, #48]	; (8005654 <__libc_init_array+0x38>)
 8005622:	4c0d      	ldr	r4, [pc, #52]	; (8005658 <__libc_init_array+0x3c>)
 8005624:	1ba4      	subs	r4, r4, r6
 8005626:	10a4      	asrs	r4, r4, #2
 8005628:	42a5      	cmp	r5, r4
 800562a:	d109      	bne.n	8005640 <__libc_init_array+0x24>
 800562c:	f000 f82e 	bl	800568c <_init>
 8005630:	2500      	movs	r5, #0
 8005632:	4e0a      	ldr	r6, [pc, #40]	; (800565c <__libc_init_array+0x40>)
 8005634:	4c0a      	ldr	r4, [pc, #40]	; (8005660 <__libc_init_array+0x44>)
 8005636:	1ba4      	subs	r4, r4, r6
 8005638:	10a4      	asrs	r4, r4, #2
 800563a:	42a5      	cmp	r5, r4
 800563c:	d105      	bne.n	800564a <__libc_init_array+0x2e>
 800563e:	bd70      	pop	{r4, r5, r6, pc}
 8005640:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005644:	4798      	blx	r3
 8005646:	3501      	adds	r5, #1
 8005648:	e7ee      	b.n	8005628 <__libc_init_array+0xc>
 800564a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800564e:	4798      	blx	r3
 8005650:	3501      	adds	r5, #1
 8005652:	e7f2      	b.n	800563a <__libc_init_array+0x1e>
 8005654:	08006c00 	.word	0x08006c00
 8005658:	08006c00 	.word	0x08006c00
 800565c:	08006c00 	.word	0x08006c00
 8005660:	08006c04 	.word	0x08006c04

08005664 <memcpy>:
 8005664:	b510      	push	{r4, lr}
 8005666:	1e43      	subs	r3, r0, #1
 8005668:	440a      	add	r2, r1
 800566a:	4291      	cmp	r1, r2
 800566c:	d100      	bne.n	8005670 <memcpy+0xc>
 800566e:	bd10      	pop	{r4, pc}
 8005670:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005674:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005678:	e7f7      	b.n	800566a <memcpy+0x6>

0800567a <memset>:
 800567a:	4603      	mov	r3, r0
 800567c:	4402      	add	r2, r0
 800567e:	4293      	cmp	r3, r2
 8005680:	d100      	bne.n	8005684 <memset+0xa>
 8005682:	4770      	bx	lr
 8005684:	f803 1b01 	strb.w	r1, [r3], #1
 8005688:	e7f9      	b.n	800567e <memset+0x4>
	...

0800568c <_init>:
 800568c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800568e:	bf00      	nop
 8005690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005692:	bc08      	pop	{r3}
 8005694:	469e      	mov	lr, r3
 8005696:	4770      	bx	lr

08005698 <_fini>:
 8005698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800569a:	bf00      	nop
 800569c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800569e:	bc08      	pop	{r3}
 80056a0:	469e      	mov	lr, r3
 80056a2:	4770      	bx	lr
