
LinearPowerSupply_PS1401mA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000568c  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001564  0800585c  0800585c  0001585c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dc0  08006dc0  00020294  2**0
                  CONTENTS
  4 .ARM          00000000  08006dc0  08006dc0  00020294  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006dc0  08006dc0  00020294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dc0  08006dc0  00016dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dc4  08006dc4  00016dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000294  20000000  08006dc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000770  20000294  0800705c  00020294  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a04  0800705c  00020a04  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001240b  00000000  00000000  000202bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000281d  00000000  00000000  000326c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005320  00000000  00000000  00034ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000858  00000000  00000000  0003a208  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000e48  00000000  00000000  0003aa60  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000d56d  00000000  00000000  0003b8a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00007842  00000000  00000000  00048e15  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0004a329  00000000  00000000  00050657  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0009a980  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000017e0  00000000  00000000  0009a9fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000294 	.word	0x20000294
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005844 	.word	0x08005844

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000298 	.word	0x20000298
 800020c:	08005844 	.word	0x08005844

08000210 <flash_erase_page>:
	return !(FLASH->SR & FLASH_SR_EOP);
}

void flash_erase_page(uint32_t address)
{
	while (FLASH->SR & FLASH_SR_BSY);
 8000210:	4a0e      	ldr	r2, [pc, #56]	; (800024c <flash_erase_page+0x3c>)
 8000212:	4613      	mov	r3, r2
 8000214:	68d1      	ldr	r1, [r2, #12]
 8000216:	07c9      	lsls	r1, r1, #31
 8000218:	d4fc      	bmi.n	8000214 <flash_erase_page+0x4>

		if (FLASH->SR & FLASH_SR_EOP) {
 800021a:	68d1      	ldr	r1, [r2, #12]
 800021c:	0689      	lsls	r1, r1, #26
			FLASH->SR = FLASH_SR_EOP;
 800021e:	bf44      	itt	mi
 8000220:	2120      	movmi	r1, #32
 8000222:	60d1      	strmi	r1, [r2, #12]
		}

		FLASH->CR |= FLASH_CR_PER;
 8000224:	691a      	ldr	r2, [r3, #16]
 8000226:	f042 0202 	orr.w	r2, r2, #2
 800022a:	611a      	str	r2, [r3, #16]
		FLASH->AR = address;
 800022c:	6158      	str	r0, [r3, #20]
		FLASH->CR |= FLASH_CR_STRT;
 800022e:	691a      	ldr	r2, [r3, #16]
 8000230:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000234:	611a      	str	r2, [r3, #16]
		while (!(FLASH->SR & FLASH_SR_EOP));
 8000236:	4b05      	ldr	r3, [pc, #20]	; (800024c <flash_erase_page+0x3c>)
 8000238:	68da      	ldr	r2, [r3, #12]
 800023a:	0692      	lsls	r2, r2, #26
 800023c:	d5fc      	bpl.n	8000238 <flash_erase_page+0x28>
		FLASH->SR = FLASH_SR_EOP;
 800023e:	2220      	movs	r2, #32
 8000240:	60da      	str	r2, [r3, #12]
		FLASH->CR &= ~FLASH_CR_PER;
 8000242:	691a      	ldr	r2, [r3, #16]
 8000244:	f022 0202 	bic.w	r2, r2, #2
 8000248:	611a      	str	r2, [r3, #16]
}
 800024a:	4770      	bx	lr
 800024c:	40022000 	.word	0x40022000

08000250 <flash_unlock>:


void flash_unlock(void)
{
	  FLASH->KEYR = FLASH_KEY1;
 8000250:	4b03      	ldr	r3, [pc, #12]	; (8000260 <flash_unlock+0x10>)
 8000252:	4a04      	ldr	r2, [pc, #16]	; (8000264 <flash_unlock+0x14>)
 8000254:	605a      	str	r2, [r3, #4]
	  FLASH->KEYR = FLASH_KEY2;
 8000256:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800025a:	605a      	str	r2, [r3, #4]
}
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	40022000 	.word	0x40022000
 8000264:	45670123 	.word	0x45670123

08000268 <flash_lock>:

void flash_lock()
{
	FLASH->CR |= FLASH_CR_LOCK;
 8000268:	4a02      	ldr	r2, [pc, #8]	; (8000274 <flash_lock+0xc>)
 800026a:	6913      	ldr	r3, [r2, #16]
 800026c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000270:	6113      	str	r3, [r2, #16]
}
 8000272:	4770      	bx	lr
 8000274:	40022000 	.word	0x40022000

08000278 <flash_write>:

void flash_write(uint32_t address,uint32_t data)
{


	while (FLASH->SR & FLASH_SR_BSY);
 8000278:	4b11      	ldr	r3, [pc, #68]	; (80002c0 <flash_write+0x48>)
{
 800027a:	b510      	push	{r4, lr}
 800027c:	461a      	mov	r2, r3
	while (FLASH->SR & FLASH_SR_BSY);
 800027e:	68dc      	ldr	r4, [r3, #12]
 8000280:	07e4      	lsls	r4, r4, #31
 8000282:	d4fc      	bmi.n	800027e <flash_write+0x6>
	if (FLASH->SR & FLASH_SR_EOP) {
 8000284:	68dc      	ldr	r4, [r3, #12]
 8000286:	06a4      	lsls	r4, r4, #26
		FLASH->SR = FLASH_SR_EOP;
 8000288:	bf44      	itt	mi
 800028a:	2420      	movmi	r4, #32
 800028c:	60dc      	strmi	r4, [r3, #12]
	}

	FLASH->CR |= FLASH_CR_PG;
 800028e:	6913      	ldr	r3, [r2, #16]
 8000290:	f043 0301 	orr.w	r3, r3, #1
 8000294:	6113      	str	r3, [r2, #16]


    *(__IO uint16_t*)address = (uint16_t)data;
    while (!(FLASH->SR & FLASH_SR_EOP));
 8000296:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <flash_write+0x48>)
    *(__IO uint16_t*)address = (uint16_t)data;
 8000298:	b28b      	uxth	r3, r1
 800029a:	8003      	strh	r3, [r0, #0]
 800029c:	4613      	mov	r3, r2
    while (!(FLASH->SR & FLASH_SR_EOP));
 800029e:	68d4      	ldr	r4, [r2, #12]
 80002a0:	06a4      	lsls	r4, r4, #26
 80002a2:	d5fc      	bpl.n	800029e <flash_write+0x26>
    		FLASH->SR = FLASH_SR_EOP;
 80002a4:	2420      	movs	r4, #32


	address+=2;
	data>>=16;
    *(__IO uint16_t*)address = (uint16_t)data;
 80002a6:	0c09      	lsrs	r1, r1, #16
    		FLASH->SR = FLASH_SR_EOP;
 80002a8:	60d4      	str	r4, [r2, #12]
    *(__IO uint16_t*)address = (uint16_t)data;
 80002aa:	8041      	strh	r1, [r0, #2]
    while (!(FLASH->SR & FLASH_SR_EOP));
 80002ac:	68da      	ldr	r2, [r3, #12]
 80002ae:	0692      	lsls	r2, r2, #26
 80002b0:	d5fc      	bpl.n	80002ac <flash_write+0x34>
    		FLASH->SR = FLASH_SR_EOP;
 80002b2:	2220      	movs	r2, #32
 80002b4:	60da      	str	r2, [r3, #12]

    FLASH->CR &= ~(FLASH_CR_PG);
 80002b6:	691a      	ldr	r2, [r3, #16]
 80002b8:	f022 0201 	bic.w	r2, r2, #1
 80002bc:	611a      	str	r2, [r3, #16]

}
 80002be:	bd10      	pop	{r4, pc}
 80002c0:	40022000 	.word	0x40022000

080002c4 <flash_write_block>:
#define ADDRESS_FLASH_LOG          FLASH_BASE+1024*121
void flash_write_block()
{
 80002c4:	b570      	push	{r4, r5, r6, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002c6:	b672      	cpsid	i
	__disable_irq();
	flash_unlock();
 80002c8:	f7ff ffc2 	bl	8000250 <flash_unlock>
	uint32_t pageAdr;
	pageAdr = ADDRESS_FLASH_LOG;
	uint32_t size =  (uint32_t)sizeof(LoggingData);
	uint32_t *source_adr = (void *)&LoggingData;

	logDebugD("size: ",size,0);
 80002cc:	4812      	ldr	r0, [pc, #72]	; (8000318 <flash_write_block+0x54>)
 80002ce:	f004 ff3f 	bl	8005150 <printToBufferWithoutEndUART1>
	logDebugD("val: ",*(source_adr + 0),0);
 80002d2:	4d12      	ldr	r5, [pc, #72]	; (800031c <flash_write_block+0x58>)
	logDebugD("size: ",size,0);
 80002d4:	2200      	movs	r2, #0
 80002d6:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 80002da:	4811      	ldr	r0, [pc, #68]	; (8000320 <flash_write_block+0x5c>)
 80002dc:	f004 ff7c 	bl	80051d8 <printToBufferUART1D>
	logDebugD("val: ",*(source_adr + 0),0);
 80002e0:	480d      	ldr	r0, [pc, #52]	; (8000318 <flash_write_block+0x54>)
 80002e2:	f004 ff35 	bl	8005150 <printToBufferWithoutEndUART1>
 80002e6:	2200      	movs	r2, #0
 80002e8:	6829      	ldr	r1, [r5, #0]
 80002ea:	480e      	ldr	r0, [pc, #56]	; (8000324 <flash_write_block+0x60>)
 80002ec:	f004 ff74 	bl	80051d8 <printToBufferUART1D>


	flash_erase_page(pageAdr );
 80002f0:	480d      	ldr	r0, [pc, #52]	; (8000328 <flash_write_block+0x64>)
 80002f2:	f7ff ff8d 	bl	8000210 <flash_erase_page>
 80002f6:	4c0c      	ldr	r4, [pc, #48]	; (8000328 <flash_write_block+0x64>)
	for (i = 0; i < size/4; ++i)
 80002f8:	4e0c      	ldr	r6, [pc, #48]	; (800032c <flash_write_block+0x68>)
	{
		flash_write((uint32_t)(pageAdr + i*4), *(source_adr + i));        // ������� ����� �������� ������
 80002fa:	f104 4378 	add.w	r3, r4, #4160749568	; 0xf8000000
 80002fe:	f5a3 33f2 	sub.w	r3, r3, #123904	; 0x1e400
 8000302:	4620      	mov	r0, r4
 8000304:	58e9      	ldr	r1, [r5, r3]
 8000306:	3404      	adds	r4, #4
 8000308:	f7ff ffb6 	bl	8000278 <flash_write>
	for (i = 0; i < size/4; ++i)
 800030c:	42b4      	cmp	r4, r6
 800030e:	d1f4      	bne.n	80002fa <flash_write_block+0x36>
    }

	flash_lock();
 8000310:	f7ff ffaa 	bl	8000268 <flash_lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000314:	b662      	cpsie	i
	__enable_irq();
	return 1;
}
 8000316:	bd70      	pop	{r4, r5, r6, pc}
 8000318:	08005c50 	.word	0x08005c50
 800031c:	20000858 	.word	0x20000858
 8000320:	08005c58 	.word	0x08005c58
 8000324:	08005c5f 	.word	0x08005c5f
 8000328:	0801e400 	.word	0x0801e400
 800032c:	0801e59c 	.word	0x0801e59c

08000330 <flash_read_block>:
uint8_t flash_read_block()
{
 8000330:	b510      	push	{r4, lr}
 8000332:	4b07      	ldr	r3, [pc, #28]	; (8000350 <flash_read_block+0x20>)
	uint32_t *source_adr = ADDRESS_FLASH_LOG;
	uint32_t *dest_adr = (void *)&LoggingData;

	for (i=0; i < size/4; ++i)
	{
		*(dest_adr + i) = *(__IO uint32_t*)(source_adr + i);
 8000334:	4807      	ldr	r0, [pc, #28]	; (8000354 <flash_read_block+0x24>)
	for (i=0; i < size/4; ++i)
 8000336:	4908      	ldr	r1, [pc, #32]	; (8000358 <flash_read_block+0x28>)
		*(dest_adr + i) = *(__IO uint32_t*)(source_adr + i);
 8000338:	681c      	ldr	r4, [r3, #0]
 800033a:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 800033e:	3304      	adds	r3, #4
 8000340:	f5a2 32f2 	sub.w	r2, r2, #123904	; 0x1e400
	for (i=0; i < size/4; ++i)
 8000344:	428b      	cmp	r3, r1
		*(dest_adr + i) = *(__IO uint32_t*)(source_adr + i);
 8000346:	5014      	str	r4, [r2, r0]
	for (i=0; i < size/4; ++i)
 8000348:	d1f6      	bne.n	8000338 <flash_read_block+0x8>
	}

	return 1;

}
 800034a:	2001      	movs	r0, #1
 800034c:	bd10      	pop	{r4, pc}
 800034e:	bf00      	nop
 8000350:	0801e400 	.word	0x0801e400
 8000354:	20000858 	.word	0x20000858
 8000358:	0801e59c 	.word	0x0801e59c

0800035c <flash_read>:

uint32_t flash_read(uint32_t address, uint32_t MinValue, uint32_t MaxValue)
{
 800035c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t EEpromValue;
	EEpromValue = (*(__IO uint32_t*) address);
 800035e:	6804      	ldr	r4, [r0, #0]
{
 8000360:	4607      	mov	r7, r0
	if ((EEpromValue>=MinValue) && (EEpromValue<=MaxValue))
 8000362:	428c      	cmp	r4, r1
{
 8000364:	460e      	mov	r6, r1
	if ((EEpromValue>=MinValue) && (EEpromValue<=MaxValue))
 8000366:	d301      	bcc.n	800036c <flash_read+0x10>
 8000368:	4294      	cmp	r4, r2
 800036a:	d91b      	bls.n	80003a4 <flash_read+0x48>
	{
		return EEpromValue;
	}
	else // fail to read
	{
		EEpromReadStatus = 0;
 800036c:	2500      	movs	r5, #0
 800036e:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <flash_read+0x4c>)
		logDebugD("Fail to read address: ",address,0);
 8000370:	480e      	ldr	r0, [pc, #56]	; (80003ac <flash_read+0x50>)
		EEpromReadStatus = 0;
 8000372:	701d      	strb	r5, [r3, #0]
		logDebugD("Fail to read address: ",address,0);
 8000374:	f004 feec 	bl	8005150 <printToBufferWithoutEndUART1>
 8000378:	462a      	mov	r2, r5
 800037a:	4639      	mov	r1, r7
 800037c:	480c      	ldr	r0, [pc, #48]	; (80003b0 <flash_read+0x54>)
 800037e:	f004 ff2b 	bl	80051d8 <printToBufferUART1D>
		logDebugD("EEpromValue is : ",EEpromValue,0);
 8000382:	480a      	ldr	r0, [pc, #40]	; (80003ac <flash_read+0x50>)
 8000384:	f004 fee4 	bl	8005150 <printToBufferWithoutEndUART1>
 8000388:	4621      	mov	r1, r4
 800038a:	462a      	mov	r2, r5
 800038c:	4809      	ldr	r0, [pc, #36]	; (80003b4 <flash_read+0x58>)
 800038e:	f004 ff23 	bl	80051d8 <printToBufferUART1D>
		logDebugD("FLASH_BASE+1024*123 : ",FLASH_BASE+1024*123,0);
 8000392:	4806      	ldr	r0, [pc, #24]	; (80003ac <flash_read+0x50>)
 8000394:	f004 fedc 	bl	8005150 <printToBufferWithoutEndUART1>
 8000398:	462a      	mov	r2, r5
 800039a:	4907      	ldr	r1, [pc, #28]	; (80003b8 <flash_read+0x5c>)
 800039c:	4807      	ldr	r0, [pc, #28]	; (80003bc <flash_read+0x60>)
 800039e:	f004 ff1b 	bl	80051d8 <printToBufferUART1D>
		return MinValue;
 80003a2:	4634      	mov	r4, r6
	}
}
 80003a4:	4620      	mov	r0, r4
 80003a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80003a8:	20000000 	.word	0x20000000
 80003ac:	08005c50 	.word	0x08005c50
 80003b0:	08005c10 	.word	0x08005c10
 80003b4:	08005c27 	.word	0x08005c27
 80003b8:	0801ec00 	.word	0x0801ec00
 80003bc:	08005c39 	.word	0x08005c39

080003c0 <CalibrationWriteToFlash>:
	__enable_irq();

}

uint8_t CalibrationWriteToFlash(void)
{
 80003c0:	b510      	push	{r4, lr}
	flash_erase_page( CalibrationData.CRC_AddresInEEprom);
 80003c2:	4c19      	ldr	r4, [pc, #100]	; (8000428 <CalibrationWriteToFlash+0x68>)
 80003c4:	6860      	ldr	r0, [r4, #4]
 80003c6:	f7ff ff23 	bl	8000210 <flash_erase_page>
	flash_write( CalibrationData.CRC_AddresInEEprom, CalibrationData.CRC_data);
 80003ca:	e9d4 1000 	ldrd	r1, r0, [r4]
 80003ce:	f7ff ff53 	bl	8000278 <flash_write>
	flash_write( CalibrationData.Calibration0ValueForCurrent_AddresInEEprom, CalibrationData.Calibration0ValueForCurrent);
 80003d2:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 80003d6:	f7ff ff4f 	bl	8000278 <flash_write>
	flash_write( CalibrationData.Calibration0ValueForCurrent1_AddresInEEprom, CalibrationData.Calibration0ValueForCurrent1);
 80003da:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 80003de:	f7ff ff4b 	bl	8000278 <flash_write>
	flash_write( CalibrationData.CalibrationValueForCurrent_AddresInEEprom, CalibrationData.CalibrationValueForCurrent_x1);
 80003e2:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 80003e6:	f7ff ff47 	bl	8000278 <flash_write>
	flash_write( CalibrationData.CalibrationValueForCurrent1_AddresInEEprom, CalibrationData.CalibrationValueForCurrent_x50);
 80003ea:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 80003ee:	f7ff ff43 	bl	8000278 <flash_write>
	flash_write( CalibrationData.CalibrationValueForVoltage_AddresInEEprom, CalibrationData.CalibrationValueForTemperature);
 80003f2:	e9d4 100a 	ldrd	r1, r0, [r4, #40]	; 0x28
 80003f6:	f7ff ff3f 	bl	8000278 <flash_write>
	flash_write( CalibrationData.CalibrationValueForVoltage1_AddresInEEprom, CalibrationData.CalibrationValueForU_OUT);
 80003fa:	e9d4 100c 	ldrd	r1, r0, [r4, #48]	; 0x30
 80003fe:	f7ff ff3b 	bl	8000278 <flash_write>
	flash_write( CalibrationData.CalibrationValueForVoltage2_AddresInEEprom, CalibrationData.CalibrationValueForVoltage2);
 8000402:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
 8000406:	f7ff ff37 	bl	8000278 <flash_write>
	flash_write( CalibrationData.ResistanceComp_Ishunt_Wires_AddresInEEprom, CalibrationData.ResistanceComp_Ishunt_Wires);
 800040a:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
 800040e:	f7ff ff33 	bl	8000278 <flash_write>
	flash_write( CalibrationData.ResistanceComp_MOSFET_AddresInEEprom, CalibrationData.ResistanceComp_MOSFET);
 8000412:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
 8000416:	f7ff ff2f 	bl	8000278 <flash_write>
	logDebug("CalibrationWriteToFlash ");
 800041a:	4804      	ldr	r0, [pc, #16]	; (800042c <CalibrationWriteToFlash+0x6c>)
 800041c:	f004 fe98 	bl	8005150 <printToBufferWithoutEndUART1>
 8000420:	4803      	ldr	r0, [pc, #12]	; (8000430 <CalibrationWriteToFlash+0x70>)
 8000422:	f004 fe2b 	bl	800507c <printToBufferUART1>

}
 8000426:	bd10      	pop	{r4, pc}
 8000428:	20000004 	.word	0x20000004
 800042c:	08005c50 	.word	0x08005c50
 8000430:	080059b9 	.word	0x080059b9

08000434 <CalibrationFactoryWriteToFlash>:
uint8_t CalibrationFactoryWriteToFlash(void)
{
 8000434:	b510      	push	{r4, lr}
	flash_erase_page( CalibrationDataFactory.CRC_AddresInEEprom);
 8000436:	4c19      	ldr	r4, [pc, #100]	; (800049c <CalibrationFactoryWriteToFlash+0x68>)
 8000438:	6860      	ldr	r0, [r4, #4]
 800043a:	f7ff fee9 	bl	8000210 <flash_erase_page>
	flash_write( CalibrationDataFactory.CRC_AddresInEEprom, CalibrationDataFactory.CRC_data);
 800043e:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000442:	f7ff ff19 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.Calibration0ValueForCurrent_AddresInEEprom, CalibrationDataFactory.Calibration0ValueForCurrent);
 8000446:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 800044a:	f7ff ff15 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.Calibration0ValueForCurrent1_AddresInEEprom, CalibrationDataFactory.Calibration0ValueForCurrent1);
 800044e:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 8000452:	f7ff ff11 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForCurrent_AddresInEEprom, CalibrationDataFactory.CalibrationValueForCurrent_x1);
 8000456:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 800045a:	f7ff ff0d 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForCurrent1_AddresInEEprom, CalibrationDataFactory.CalibrationValueForCurrent_x50);
 800045e:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 8000462:	f7ff ff09 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForVoltage_AddresInEEprom, CalibrationDataFactory.CalibrationValueForTemperature);
 8000466:	e9d4 100a 	ldrd	r1, r0, [r4, #40]	; 0x28
 800046a:	f7ff ff05 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForVoltage1_AddresInEEprom, CalibrationDataFactory.CalibrationValueForU_OUT);
 800046e:	e9d4 100c 	ldrd	r1, r0, [r4, #48]	; 0x30
 8000472:	f7ff ff01 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.CalibrationValueForVoltage2_AddresInEEprom, CalibrationDataFactory.CalibrationValueForVoltage2);
 8000476:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
 800047a:	f7ff fefd 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.ResistanceComp_Ishunt_Wires_AddresInEEprom, CalibrationDataFactory.ResistanceComp_Ishunt_Wires);
 800047e:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
 8000482:	f7ff fef9 	bl	8000278 <flash_write>
	flash_write( CalibrationDataFactory.ResistanceComp_MOSFET_AddresInEEprom, CalibrationDataFactory.ResistanceComp_MOSFET);
 8000486:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
 800048a:	f7ff fef5 	bl	8000278 <flash_write>
	logDebug("CalibrationFactoryWriteToFlash ");
 800048e:	4804      	ldr	r0, [pc, #16]	; (80004a0 <CalibrationFactoryWriteToFlash+0x6c>)
 8000490:	f004 fe5e 	bl	8005150 <printToBufferWithoutEndUART1>
 8000494:	4803      	ldr	r0, [pc, #12]	; (80004a4 <CalibrationFactoryWriteToFlash+0x70>)
 8000496:	f004 fdf1 	bl	800507c <printToBufferUART1>
}
 800049a:	bd10      	pop	{r4, pc}
 800049c:	20000054 	.word	0x20000054
 80004a0:	08005c50 	.word	0x08005c50
 80004a4:	0800595c 	.word	0x0800595c

080004a8 <CalibrationReadFromFlash>:
uint8_t CalibrationReadFromFlash(void)
{
 80004a8:	b538      	push	{r3, r4, r5, lr}
	CalibrationData.CRC_data = flash_read(CalibrationData.CRC_AddresInEEprom,0,256);
 80004aa:	4c24      	ldr	r4, [pc, #144]	; (800053c <CalibrationReadFromFlash+0x94>)
 80004ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004b0:	2100      	movs	r1, #0
 80004b2:	6860      	ldr	r0, [r4, #4]
 80004b4:	f7ff ff52 	bl	800035c <flash_read>
	CalibrationData.Calibration0ValueForCurrent = flash_read(CalibrationData.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 80004b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	CalibrationData.CRC_data = flash_read(CalibrationData.CRC_AddresInEEprom,0,256);
 80004bc:	6020      	str	r0, [r4, #0]
	CalibrationData.Calibration0ValueForCurrent = flash_read(CalibrationData.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 80004be:	2100      	movs	r1, #0
 80004c0:	68e0      	ldr	r0, [r4, #12]
 80004c2:	f7ff ff4b 	bl	800035c <flash_read>
	CalibrationData.Calibration0ValueForCurrent1 = flash_read(CalibrationData.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 80004c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	CalibrationData.Calibration0ValueForCurrent = flash_read(CalibrationData.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 80004ca:	60a0      	str	r0, [r4, #8]
	CalibrationData.Calibration0ValueForCurrent1 = flash_read(CalibrationData.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 80004cc:	2100      	movs	r1, #0
 80004ce:	6960      	ldr	r0, [r4, #20]
 80004d0:	f7ff ff44 	bl	800035c <flash_read>
	CalibrationData.CalibrationValueForCurrent_x1 = flash_read(CalibrationData.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 80004d4:	4d1a      	ldr	r5, [pc, #104]	; (8000540 <CalibrationReadFromFlash+0x98>)
	CalibrationData.Calibration0ValueForCurrent1 = flash_read(CalibrationData.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 80004d6:	6120      	str	r0, [r4, #16]
	CalibrationData.CalibrationValueForCurrent_x1 = flash_read(CalibrationData.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 80004d8:	462a      	mov	r2, r5
 80004da:	210a      	movs	r1, #10
 80004dc:	69e0      	ldr	r0, [r4, #28]
 80004de:	f7ff ff3d 	bl	800035c <flash_read>
	CalibrationData.CalibrationValueForCurrent_x50 = flash_read(CalibrationData.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 80004e2:	462a      	mov	r2, r5
	CalibrationData.CalibrationValueForCurrent_x1 = flash_read(CalibrationData.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 80004e4:	61a0      	str	r0, [r4, #24]
	CalibrationData.CalibrationValueForCurrent_x50 = flash_read(CalibrationData.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 80004e6:	210a      	movs	r1, #10
 80004e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80004ea:	f7ff ff37 	bl	800035c <flash_read>
	CalibrationData.CalibrationValueForTemperature = flash_read(CalibrationData.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 80004ee:	462a      	mov	r2, r5
	CalibrationData.CalibrationValueForCurrent_x50 = flash_read(CalibrationData.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 80004f0:	6220      	str	r0, [r4, #32]
	CalibrationData.CalibrationValueForTemperature = flash_read(CalibrationData.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 80004f2:	210a      	movs	r1, #10
 80004f4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80004f6:	f7ff ff31 	bl	800035c <flash_read>
	CalibrationData.CalibrationValueForU_OUT = flash_read(CalibrationData.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 80004fa:	462a      	mov	r2, r5
	CalibrationData.CalibrationValueForTemperature = flash_read(CalibrationData.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 80004fc:	62a0      	str	r0, [r4, #40]	; 0x28
	CalibrationData.CalibrationValueForU_OUT = flash_read(CalibrationData.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 80004fe:	210a      	movs	r1, #10
 8000500:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8000502:	f7ff ff2b 	bl	800035c <flash_read>
	CalibrationData.CalibrationValueForVoltage2 = flash_read(CalibrationData.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 8000506:	462a      	mov	r2, r5
	CalibrationData.CalibrationValueForU_OUT = flash_read(CalibrationData.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 8000508:	6320      	str	r0, [r4, #48]	; 0x30
	CalibrationData.CalibrationValueForVoltage2 = flash_read(CalibrationData.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 800050a:	210a      	movs	r1, #10
 800050c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800050e:	f7ff ff25 	bl	800035c <flash_read>
	CalibrationData.ResistanceComp_Ishunt_Wires = flash_read(CalibrationData.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,200);
 8000512:	22c8      	movs	r2, #200	; 0xc8
	CalibrationData.CalibrationValueForVoltage2 = flash_read(CalibrationData.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 8000514:	63a0      	str	r0, [r4, #56]	; 0x38
	CalibrationData.ResistanceComp_Ishunt_Wires = flash_read(CalibrationData.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,200);
 8000516:	2146      	movs	r1, #70	; 0x46
 8000518:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800051a:	f7ff ff1f 	bl	800035c <flash_read>
	CalibrationData.ResistanceComp_MOSFET = flash_read(CalibrationData.ResistanceComp_MOSFET_AddresInEEprom,10,200);
 800051e:	22c8      	movs	r2, #200	; 0xc8
	CalibrationData.ResistanceComp_Ishunt_Wires = flash_read(CalibrationData.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,200);
 8000520:	6420      	str	r0, [r4, #64]	; 0x40
	CalibrationData.ResistanceComp_MOSFET = flash_read(CalibrationData.ResistanceComp_MOSFET_AddresInEEprom,10,200);
 8000522:	210a      	movs	r1, #10
 8000524:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8000526:	f7ff ff19 	bl	800035c <flash_read>
 800052a:	64a0      	str	r0, [r4, #72]	; 0x48
	logDebug("CalibrationReadFromFlash ");
 800052c:	4805      	ldr	r0, [pc, #20]	; (8000544 <CalibrationReadFromFlash+0x9c>)
 800052e:	f004 fe0f 	bl	8005150 <printToBufferWithoutEndUART1>
 8000532:	4805      	ldr	r0, [pc, #20]	; (8000548 <CalibrationReadFromFlash+0xa0>)
 8000534:	f004 fda2 	bl	800507c <printToBufferUART1>
}
 8000538:	bd38      	pop	{r3, r4, r5, pc}
 800053a:	bf00      	nop
 800053c:	20000004 	.word	0x20000004
 8000540:	000186a0 	.word	0x000186a0
 8000544:	08005c50 	.word	0x08005c50
 8000548:	0800597c 	.word	0x0800597c

0800054c <CalibrationReadFromFlashForVerify>:
uint8_t CalibrationReadFromFlashForVerify(void)
{
 800054c:	b538      	push	{r3, r4, r5, lr}
	CalibrationDataForVerify.CRC_data = flash_read(CalibrationDataForVerify.CRC_AddresInEEprom,0,256);
 800054e:	4c24      	ldr	r4, [pc, #144]	; (80005e0 <CalibrationReadFromFlashForVerify+0x94>)
 8000550:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000554:	2100      	movs	r1, #0
 8000556:	6860      	ldr	r0, [r4, #4]
 8000558:	f7ff ff00 	bl	800035c <flash_read>
	CalibrationDataForVerify.Calibration0ValueForCurrent = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 800055c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	CalibrationDataForVerify.CRC_data = flash_read(CalibrationDataForVerify.CRC_AddresInEEprom,0,256);
 8000560:	6020      	str	r0, [r4, #0]
	CalibrationDataForVerify.Calibration0ValueForCurrent = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 8000562:	2100      	movs	r1, #0
 8000564:	68e0      	ldr	r0, [r4, #12]
 8000566:	f7ff fef9 	bl	800035c <flash_read>
	CalibrationDataForVerify.Calibration0ValueForCurrent1 = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 800056a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	CalibrationDataForVerify.Calibration0ValueForCurrent = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent_AddresInEEprom,0,1000);
 800056e:	60a0      	str	r0, [r4, #8]
	CalibrationDataForVerify.Calibration0ValueForCurrent1 = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 8000570:	2100      	movs	r1, #0
 8000572:	6960      	ldr	r0, [r4, #20]
 8000574:	f7ff fef2 	bl	800035c <flash_read>
	CalibrationDataForVerify.CalibrationValueForCurrent_x1 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 8000578:	4d1a      	ldr	r5, [pc, #104]	; (80005e4 <CalibrationReadFromFlashForVerify+0x98>)
	CalibrationDataForVerify.Calibration0ValueForCurrent1 = flash_read(CalibrationDataForVerify.Calibration0ValueForCurrent1_AddresInEEprom,0,1000);
 800057a:	6120      	str	r0, [r4, #16]
	CalibrationDataForVerify.CalibrationValueForCurrent_x1 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 800057c:	462a      	mov	r2, r5
 800057e:	210a      	movs	r1, #10
 8000580:	69e0      	ldr	r0, [r4, #28]
 8000582:	f7ff feeb 	bl	800035c <flash_read>
	CalibrationDataForVerify.CalibrationValueForCurrent_x50 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 8000586:	462a      	mov	r2, r5
	CalibrationDataForVerify.CalibrationValueForCurrent_x1 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent_AddresInEEprom,10,100000);
 8000588:	61a0      	str	r0, [r4, #24]
	CalibrationDataForVerify.CalibrationValueForCurrent_x50 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 800058a:	210a      	movs	r1, #10
 800058c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800058e:	f7ff fee5 	bl	800035c <flash_read>
	CalibrationDataForVerify.CalibrationValueForTemperature = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 8000592:	462a      	mov	r2, r5
	CalibrationDataForVerify.CalibrationValueForCurrent_x50 = flash_read(CalibrationDataForVerify.CalibrationValueForCurrent1_AddresInEEprom,10,100000);
 8000594:	6220      	str	r0, [r4, #32]
	CalibrationDataForVerify.CalibrationValueForTemperature = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 8000596:	210a      	movs	r1, #10
 8000598:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800059a:	f7ff fedf 	bl	800035c <flash_read>
	CalibrationDataForVerify.CalibrationValueForU_OUT = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 800059e:	462a      	mov	r2, r5
	CalibrationDataForVerify.CalibrationValueForTemperature = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage_AddresInEEprom,10,100000);
 80005a0:	62a0      	str	r0, [r4, #40]	; 0x28
	CalibrationDataForVerify.CalibrationValueForU_OUT = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 80005a2:	210a      	movs	r1, #10
 80005a4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80005a6:	f7ff fed9 	bl	800035c <flash_read>
	CalibrationDataForVerify.CalibrationValueForVoltage2 = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 80005aa:	462a      	mov	r2, r5
	CalibrationDataForVerify.CalibrationValueForU_OUT = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage1_AddresInEEprom,10,100000);
 80005ac:	6320      	str	r0, [r4, #48]	; 0x30
	CalibrationDataForVerify.CalibrationValueForVoltage2 = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 80005ae:	210a      	movs	r1, #10
 80005b0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80005b2:	f7ff fed3 	bl	800035c <flash_read>
	CalibrationDataForVerify.ResistanceComp_Ishunt_Wires = flash_read(CalibrationDataForVerify.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,200);
 80005b6:	22c8      	movs	r2, #200	; 0xc8
	CalibrationDataForVerify.CalibrationValueForVoltage2 = flash_read(CalibrationDataForVerify.CalibrationValueForVoltage2_AddresInEEprom,10,100000);
 80005b8:	63a0      	str	r0, [r4, #56]	; 0x38
	CalibrationDataForVerify.ResistanceComp_Ishunt_Wires = flash_read(CalibrationDataForVerify.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,200);
 80005ba:	2146      	movs	r1, #70	; 0x46
 80005bc:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80005be:	f7ff fecd 	bl	800035c <flash_read>
	CalibrationDataForVerify.ResistanceComp_MOSFET = flash_read(CalibrationDataForVerify.ResistanceComp_MOSFET_AddresInEEprom,10,200);
 80005c2:	22c8      	movs	r2, #200	; 0xc8
	CalibrationDataForVerify.ResistanceComp_Ishunt_Wires = flash_read(CalibrationDataForVerify.ResistanceComp_Ishunt_Wires_AddresInEEprom,70,200);
 80005c4:	6420      	str	r0, [r4, #64]	; 0x40
	CalibrationDataForVerify.ResistanceComp_MOSFET = flash_read(CalibrationDataForVerify.ResistanceComp_MOSFET_AddresInEEprom,10,200);
 80005c6:	210a      	movs	r1, #10
 80005c8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80005ca:	f7ff fec7 	bl	800035c <flash_read>
 80005ce:	64a0      	str	r0, [r4, #72]	; 0x48
	logDebug("CalibrationReadFromFlashForVerify ");
 80005d0:	4805      	ldr	r0, [pc, #20]	; (80005e8 <CalibrationReadFromFlashForVerify+0x9c>)
 80005d2:	f004 fdbd 	bl	8005150 <printToBufferWithoutEndUART1>
 80005d6:	4805      	ldr	r0, [pc, #20]	; (80005ec <CalibrationReadFromFlashForVerify+0xa0>)
 80005d8:	f004 fd50 	bl	800507c <printToBufferUART1>
}
 80005dc:	bd38      	pop	{r3, r4, r5, pc}
 80005de:	bf00      	nop
 80005e0:	200000a4 	.word	0x200000a4
 80005e4:	000186a0 	.word	0x000186a0
 80005e8:	08005c50 	.word	0x08005c50
 80005ec:	08005996 	.word	0x08005996

080005f0 <SettingsWriteToFlash>:
//==============
uint8_t SettingsWriteToFlash(void)
{
 80005f0:	b510      	push	{r4, lr}
	flash_erase_page( SettingsData.CRC_AddresInEEprom);
 80005f2:	4c17      	ldr	r4, [pc, #92]	; (8000650 <SettingsWriteToFlash+0x60>)
 80005f4:	6860      	ldr	r0, [r4, #4]
 80005f6:	f7ff fe0b 	bl	8000210 <flash_erase_page>
	flash_write( SettingsData.CRC_AddresInEEprom, SettingsData.CRC_data);
 80005fa:	e9d4 1000 	ldrd	r1, r0, [r4]
 80005fe:	f7ff fe3b 	bl	8000278 <flash_write>
	flash_write( SettingsData.Option1_AddresInEEprom, SettingsData.Option1);
 8000602:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 8000606:	f7ff fe37 	bl	8000278 <flash_write>
	flash_write( SettingsData.ChargeTime_AddresInEEprom, SettingsData.ChargeTime);
 800060a:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 800060e:	f7ff fe33 	bl	8000278 <flash_write>
	flash_write( SettingsData.LowVoltage_AddresInEEprom, SettingsData.LowVoltage);
 8000612:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 8000616:	f7ff fe2f 	bl	8000278 <flash_write>
	flash_write( SettingsData.MaxVoltage_AddresInEEprom, SettingsData.MaxVoltage);
 800061a:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 800061e:	f7ff fe2b 	bl	8000278 <flash_write>
	flash_write( SettingsData.Swing_Chrg_time_AddresInEEprom, SettingsData.Swing_Chrg_time);
 8000622:	e9d4 100a 	ldrd	r1, r0, [r4, #40]	; 0x28
 8000626:	f7ff fe27 	bl	8000278 <flash_write>
	flash_write( SettingsData.Swing_DChrg_time_AddresInEEprom, SettingsData.Swing_DChrg_time);
 800062a:	e9d4 100c 	ldrd	r1, r0, [r4, #48]	; 0x30
 800062e:	f7ff fe23 	bl	8000278 <flash_write>
	flash_write( SettingsData.ChargeAdapt_AddresInEEprom, SettingsData.ChargeAdapt);
 8000632:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
 8000636:	f7ff fe1f 	bl	8000278 <flash_write>
	flash_write( SettingsData.Option2_AddresInEEprom, SettingsData.Option2);
 800063a:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
 800063e:	f7ff fe1b 	bl	8000278 <flash_write>
	logDebug("SettingsWriteToFlash ");
 8000642:	4804      	ldr	r0, [pc, #16]	; (8000654 <SettingsWriteToFlash+0x64>)
 8000644:	f004 fd84 	bl	8005150 <printToBufferWithoutEndUART1>
 8000648:	4803      	ldr	r0, [pc, #12]	; (8000658 <SettingsWriteToFlash+0x68>)
 800064a:	f004 fd17 	bl	800507c <printToBufferUART1>
}
 800064e:	bd10      	pop	{r4, pc}
 8000650:	20000154 	.word	0x20000154
 8000654:	08005c50 	.word	0x08005c50
 8000658:	08005bfa 	.word	0x08005bfa

0800065c <SettingsFactoryWriteToFlash>:
uint8_t SettingsFactoryWriteToFlash(void)
{
 800065c:	b510      	push	{r4, lr}
	flash_erase_page( SettingsDataFactory.CRC_AddresInEEprom);
 800065e:	4c17      	ldr	r4, [pc, #92]	; (80006bc <SettingsFactoryWriteToFlash+0x60>)
 8000660:	6860      	ldr	r0, [r4, #4]
 8000662:	f7ff fdd5 	bl	8000210 <flash_erase_page>
	flash_write( SettingsDataFactory.CRC_AddresInEEprom, SettingsDataFactory.CRC_data);
 8000666:	e9d4 1000 	ldrd	r1, r0, [r4]
 800066a:	f7ff fe05 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.Option1_AddresInEEprom, SettingsDataFactory.Option1);
 800066e:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 8000672:	f7ff fe01 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.ChargeTime_AddresInEEprom, SettingsDataFactory.ChargeTime);
 8000676:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 800067a:	f7ff fdfd 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.LowVoltage_AddresInEEprom, SettingsDataFactory.LowVoltage);
 800067e:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 8000682:	f7ff fdf9 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.MaxVoltage_AddresInEEprom, SettingsDataFactory.MaxVoltage);
 8000686:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 800068a:	f7ff fdf5 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.Swing_Chrg_time_AddresInEEprom, SettingsDataFactory.Swing_Chrg_time);
 800068e:	e9d4 100a 	ldrd	r1, r0, [r4, #40]	; 0x28
 8000692:	f7ff fdf1 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.Swing_DChrg_time_AddresInEEprom, SettingsDataFactory.Swing_DChrg_time);
 8000696:	e9d4 100c 	ldrd	r1, r0, [r4, #48]	; 0x30
 800069a:	f7ff fded 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.ChargeAdapt_AddresInEEprom, SettingsDataFactory.ChargeAdapt);
 800069e:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
 80006a2:	f7ff fde9 	bl	8000278 <flash_write>
	flash_write( SettingsDataFactory.Option2_AddresInEEprom, SettingsDataFactory.Option2);
 80006a6:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
 80006aa:	f7ff fde5 	bl	8000278 <flash_write>
	logDebug("SettingsFactoryWriteToFlash ");
 80006ae:	4804      	ldr	r0, [pc, #16]	; (80006c0 <SettingsFactoryWriteToFlash+0x64>)
 80006b0:	f004 fd4e 	bl	8005150 <printToBufferWithoutEndUART1>
 80006b4:	4803      	ldr	r0, [pc, #12]	; (80006c4 <SettingsFactoryWriteToFlash+0x68>)
 80006b6:	f004 fce1 	bl	800507c <printToBufferUART1>
}
 80006ba:	bd10      	pop	{r4, pc}
 80006bc:	2000019c 	.word	0x2000019c
 80006c0:	08005c50 	.word	0x08005c50
 80006c4:	08005ba6 	.word	0x08005ba6

080006c8 <SettingsReadFromFlash>:
uint8_t SettingsReadFromFlash(void)
{
 80006c8:	b510      	push	{r4, lr}
	SettingsData.CRC_data = flash_read(SettingsData.CRC_AddresInEEprom,0,256);
 80006ca:	4c22      	ldr	r4, [pc, #136]	; (8000754 <SettingsReadFromFlash+0x8c>)
 80006cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006d0:	2100      	movs	r1, #0
 80006d2:	6860      	ldr	r0, [r4, #4]
 80006d4:	f7ff fe42 	bl	800035c <flash_read>
	SettingsData.Option1 =  flash_read(SettingsData.Option1_AddresInEEprom,1,10);
 80006d8:	220a      	movs	r2, #10
	SettingsData.CRC_data = flash_read(SettingsData.CRC_AddresInEEprom,0,256);
 80006da:	6020      	str	r0, [r4, #0]
	SettingsData.Option1 =  flash_read(SettingsData.Option1_AddresInEEprom,1,10);
 80006dc:	2101      	movs	r1, #1
 80006de:	68e0      	ldr	r0, [r4, #12]
 80006e0:	f7ff fe3c 	bl	800035c <flash_read>
	SettingsData.ChargeTime =  flash_read(SettingsData.ChargeTime_AddresInEEprom,1,1000);
 80006e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	SettingsData.Option1 =  flash_read(SettingsData.Option1_AddresInEEprom,1,10);
 80006e8:	60a0      	str	r0, [r4, #8]
	SettingsData.ChargeTime =  flash_read(SettingsData.ChargeTime_AddresInEEprom,1,1000);
 80006ea:	2101      	movs	r1, #1
 80006ec:	6960      	ldr	r0, [r4, #20]
 80006ee:	f7ff fe35 	bl	800035c <flash_read>
	SettingsData.LowVoltage =  flash_read(SettingsData.LowVoltage_AddresInEEprom,1,4000);
 80006f2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
	SettingsData.ChargeTime =  flash_read(SettingsData.ChargeTime_AddresInEEprom,1,1000);
 80006f6:	6120      	str	r0, [r4, #16]
	SettingsData.LowVoltage =  flash_read(SettingsData.LowVoltage_AddresInEEprom,1,4000);
 80006f8:	2101      	movs	r1, #1
 80006fa:	69e0      	ldr	r0, [r4, #28]
 80006fc:	f7ff fe2e 	bl	800035c <flash_read>
	SettingsData.MaxVoltage =  flash_read(SettingsData.MaxVoltage_AddresInEEprom,1,4000);
 8000700:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
	SettingsData.LowVoltage =  flash_read(SettingsData.LowVoltage_AddresInEEprom,1,4000);
 8000704:	61a0      	str	r0, [r4, #24]
	SettingsData.MaxVoltage =  flash_read(SettingsData.MaxVoltage_AddresInEEprom,1,4000);
 8000706:	2101      	movs	r1, #1
 8000708:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800070a:	f7ff fe27 	bl	800035c <flash_read>
	SettingsData.Swing_Chrg_time =  flash_read(SettingsData.Swing_Chrg_time_AddresInEEprom,0,10000);
 800070e:	f242 7210 	movw	r2, #10000	; 0x2710
	SettingsData.MaxVoltage =  flash_read(SettingsData.MaxVoltage_AddresInEEprom,1,4000);
 8000712:	6220      	str	r0, [r4, #32]
	SettingsData.Swing_Chrg_time =  flash_read(SettingsData.Swing_Chrg_time_AddresInEEprom,0,10000);
 8000714:	2100      	movs	r1, #0
 8000716:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000718:	f7ff fe20 	bl	800035c <flash_read>
	SettingsData.Swing_DChrg_time =  flash_read(SettingsData.Swing_DChrg_time_AddresInEEprom,0,10000);
 800071c:	f242 7210 	movw	r2, #10000	; 0x2710
	SettingsData.Swing_Chrg_time =  flash_read(SettingsData.Swing_Chrg_time_AddresInEEprom,0,10000);
 8000720:	62a0      	str	r0, [r4, #40]	; 0x28
	SettingsData.Swing_DChrg_time =  flash_read(SettingsData.Swing_DChrg_time_AddresInEEprom,0,10000);
 8000722:	2100      	movs	r1, #0
 8000724:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8000726:	f7ff fe19 	bl	800035c <flash_read>
	SettingsData.ChargeAdapt = flash_read(SettingsData.ChargeAdapt_AddresInEEprom,0,100);
 800072a:	2264      	movs	r2, #100	; 0x64
	SettingsData.Swing_DChrg_time =  flash_read(SettingsData.Swing_DChrg_time_AddresInEEprom,0,10000);
 800072c:	6320      	str	r0, [r4, #48]	; 0x30
	SettingsData.ChargeAdapt = flash_read(SettingsData.ChargeAdapt_AddresInEEprom,0,100);
 800072e:	2100      	movs	r1, #0
 8000730:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000732:	f7ff fe13 	bl	800035c <flash_read>
	SettingsData.Option2 =  flash_read(SettingsData.Option2_AddresInEEprom,1,3);
 8000736:	2203      	movs	r2, #3
	SettingsData.ChargeAdapt = flash_read(SettingsData.ChargeAdapt_AddresInEEprom,0,100);
 8000738:	63a0      	str	r0, [r4, #56]	; 0x38
	SettingsData.Option2 =  flash_read(SettingsData.Option2_AddresInEEprom,1,3);
 800073a:	2101      	movs	r1, #1
 800073c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800073e:	f7ff fe0d 	bl	800035c <flash_read>
 8000742:	6420      	str	r0, [r4, #64]	; 0x40
	logDebug("SettingsReadFromFlash ");
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <SettingsReadFromFlash+0x90>)
 8000746:	f004 fd03 	bl	8005150 <printToBufferWithoutEndUART1>
 800074a:	4804      	ldr	r0, [pc, #16]	; (800075c <SettingsReadFromFlash+0x94>)
 800074c:	f004 fc96 	bl	800507c <printToBufferUART1>
}
 8000750:	bd10      	pop	{r4, pc}
 8000752:	bf00      	nop
 8000754:	20000154 	.word	0x20000154
 8000758:	08005c50 	.word	0x08005c50
 800075c:	08005bc3 	.word	0x08005bc3

08000760 <SettingsReadFromFlashForVerify>:
uint8_t SettingsReadFromFlashForVerify(void)
{
 8000760:	b510      	push	{r4, lr}
	SettingsDataForVerify.CRC_data = flash_read(SettingsDataForVerify.CRC_AddresInEEprom,0,256);
 8000762:	4c22      	ldr	r4, [pc, #136]	; (80007ec <SettingsReadFromFlashForVerify+0x8c>)
 8000764:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000768:	2100      	movs	r1, #0
 800076a:	6860      	ldr	r0, [r4, #4]
 800076c:	f7ff fdf6 	bl	800035c <flash_read>
	SettingsDataForVerify.Option1 =  flash_read(SettingsDataForVerify.Option1_AddresInEEprom,1,10);
 8000770:	220a      	movs	r2, #10
	SettingsDataForVerify.CRC_data = flash_read(SettingsDataForVerify.CRC_AddresInEEprom,0,256);
 8000772:	6020      	str	r0, [r4, #0]
	SettingsDataForVerify.Option1 =  flash_read(SettingsDataForVerify.Option1_AddresInEEprom,1,10);
 8000774:	2101      	movs	r1, #1
 8000776:	68e0      	ldr	r0, [r4, #12]
 8000778:	f7ff fdf0 	bl	800035c <flash_read>
	SettingsDataForVerify.ChargeTime =  flash_read(SettingsDataForVerify.ChargeTime_AddresInEEprom,1,1000);
 800077c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	SettingsDataForVerify.Option1 =  flash_read(SettingsDataForVerify.Option1_AddresInEEprom,1,10);
 8000780:	60a0      	str	r0, [r4, #8]
	SettingsDataForVerify.ChargeTime =  flash_read(SettingsDataForVerify.ChargeTime_AddresInEEprom,1,1000);
 8000782:	2101      	movs	r1, #1
 8000784:	6960      	ldr	r0, [r4, #20]
 8000786:	f7ff fde9 	bl	800035c <flash_read>
	SettingsDataForVerify.LowVoltage =  flash_read(SettingsDataForVerify.LowVoltage_AddresInEEprom,1,4000);
 800078a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
	SettingsDataForVerify.ChargeTime =  flash_read(SettingsDataForVerify.ChargeTime_AddresInEEprom,1,1000);
 800078e:	6120      	str	r0, [r4, #16]
	SettingsDataForVerify.LowVoltage =  flash_read(SettingsDataForVerify.LowVoltage_AddresInEEprom,1,4000);
 8000790:	2101      	movs	r1, #1
 8000792:	69e0      	ldr	r0, [r4, #28]
 8000794:	f7ff fde2 	bl	800035c <flash_read>
	SettingsDataForVerify.MaxVoltage =  flash_read(SettingsDataForVerify.MaxVoltage_AddresInEEprom,1,4000);
 8000798:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
	SettingsDataForVerify.LowVoltage =  flash_read(SettingsDataForVerify.LowVoltage_AddresInEEprom,1,4000);
 800079c:	61a0      	str	r0, [r4, #24]
	SettingsDataForVerify.MaxVoltage =  flash_read(SettingsDataForVerify.MaxVoltage_AddresInEEprom,1,4000);
 800079e:	2101      	movs	r1, #1
 80007a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80007a2:	f7ff fddb 	bl	800035c <flash_read>
	SettingsDataForVerify.Swing_Chrg_time =  flash_read(SettingsDataForVerify.Swing_Chrg_time_AddresInEEprom,0,10000);
 80007a6:	f242 7210 	movw	r2, #10000	; 0x2710
	SettingsDataForVerify.MaxVoltage =  flash_read(SettingsDataForVerify.MaxVoltage_AddresInEEprom,1,4000);
 80007aa:	6220      	str	r0, [r4, #32]
	SettingsDataForVerify.Swing_Chrg_time =  flash_read(SettingsDataForVerify.Swing_Chrg_time_AddresInEEprom,0,10000);
 80007ac:	2100      	movs	r1, #0
 80007ae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80007b0:	f7ff fdd4 	bl	800035c <flash_read>
	SettingsDataForVerify.Swing_DChrg_time =  flash_read(SettingsDataForVerify.Swing_DChrg_time_AddresInEEprom,0,10000);
 80007b4:	f242 7210 	movw	r2, #10000	; 0x2710
	SettingsDataForVerify.Swing_Chrg_time =  flash_read(SettingsDataForVerify.Swing_Chrg_time_AddresInEEprom,0,10000);
 80007b8:	62a0      	str	r0, [r4, #40]	; 0x28
	SettingsDataForVerify.Swing_DChrg_time =  flash_read(SettingsDataForVerify.Swing_DChrg_time_AddresInEEprom,0,10000);
 80007ba:	2100      	movs	r1, #0
 80007bc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80007be:	f7ff fdcd 	bl	800035c <flash_read>
	SettingsDataForVerify.ChargeAdapt = flash_read(SettingsDataForVerify.ChargeAdapt_AddresInEEprom,0,100);
 80007c2:	2264      	movs	r2, #100	; 0x64
	SettingsDataForVerify.Swing_DChrg_time =  flash_read(SettingsDataForVerify.Swing_DChrg_time_AddresInEEprom,0,10000);
 80007c4:	6320      	str	r0, [r4, #48]	; 0x30
	SettingsDataForVerify.ChargeAdapt = flash_read(SettingsDataForVerify.ChargeAdapt_AddresInEEprom,0,100);
 80007c6:	2100      	movs	r1, #0
 80007c8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80007ca:	f7ff fdc7 	bl	800035c <flash_read>
	SettingsDataForVerify.Option2 =  flash_read(SettingsDataForVerify.Option2_AddresInEEprom,1,3);
 80007ce:	2203      	movs	r2, #3
	SettingsDataForVerify.ChargeAdapt = flash_read(SettingsDataForVerify.ChargeAdapt_AddresInEEprom,0,100);
 80007d0:	63a0      	str	r0, [r4, #56]	; 0x38
	SettingsDataForVerify.Option2 =  flash_read(SettingsDataForVerify.Option2_AddresInEEprom,1,3);
 80007d2:	2101      	movs	r1, #1
 80007d4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80007d6:	f7ff fdc1 	bl	800035c <flash_read>
 80007da:	6420      	str	r0, [r4, #64]	; 0x40
	logDebug("SettingsReadFromFlashForVerify ");
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <SettingsReadFromFlashForVerify+0x90>)
 80007de:	f004 fcb7 	bl	8005150 <printToBufferWithoutEndUART1>
 80007e2:	4804      	ldr	r0, [pc, #16]	; (80007f4 <SettingsReadFromFlashForVerify+0x94>)
 80007e4:	f004 fc4a 	bl	800507c <printToBufferUART1>
}
 80007e8:	bd10      	pop	{r4, pc}
 80007ea:	bf00      	nop
 80007ec:	200001e4 	.word	0x200001e4
 80007f0:	08005c50 	.word	0x08005c50
 80007f4:	08005bda 	.word	0x08005bda

080007f8 <DataWhenPowerOff_Factory_WriteToFlash>:
	flash_write( SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent_AddresInEEprom, SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent);
	flash_write( SaveDataWhenPowerOff.OutState_AddresInEEprom, SaveDataWhenPowerOff.OutState);
	logDebug("DataWhenPowerOffWriteToFlash ");
}
uint8_t DataWhenPowerOff_Factory_WriteToFlash(void)
{
 80007f8:	b510      	push	{r4, lr}
	flash_erase_page( SaveDataWhenPowerOffFactory.CRC_AddresInEEprom);
 80007fa:	4c0d      	ldr	r4, [pc, #52]	; (8000830 <DataWhenPowerOff_Factory_WriteToFlash+0x38>)
 80007fc:	6860      	ldr	r0, [r4, #4]
 80007fe:	f7ff fd07 	bl	8000210 <flash_erase_page>
	flash_write( SaveDataWhenPowerOffFactory.CRC_AddresInEEprom, SaveDataWhenPowerOffFactory.CRC_data);
 8000802:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000806:	f7ff fd37 	bl	8000278 <flash_write>
	flash_write( SaveDataWhenPowerOffFactory.BatteryCapacityDischargePrevious_AddresInEEprom, SaveDataWhenPowerOffFactory.BatteryCapacityDischargePreviousValue);
 800080a:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 800080e:	f7ff fd33 	bl	8000278 <flash_write>
	flash_write( SaveDataWhenPowerOffFactory.BatteryCapacityDischargeCurrent_AddresInEEprom, SaveDataWhenPowerOffFactory.BatteryCapacityDischargeCurrent);
 8000812:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 8000816:	f7ff fd2f 	bl	8000278 <flash_write>
	flash_write( SaveDataWhenPowerOffFactory.OutState_AddresInEEprom, SaveDataWhenPowerOffFactory.OutState);
 800081a:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
 800081e:	f7ff fd2b 	bl	8000278 <flash_write>
	logDebug("DataWhenPowerOff_Factory_WriteToFlash ");
 8000822:	4804      	ldr	r0, [pc, #16]	; (8000834 <DataWhenPowerOff_Factory_WriteToFlash+0x3c>)
 8000824:	f004 fc94 	bl	8005150 <printToBufferWithoutEndUART1>
 8000828:	4803      	ldr	r0, [pc, #12]	; (8000838 <DataWhenPowerOff_Factory_WriteToFlash+0x40>)
 800082a:	f004 fc27 	bl	800507c <printToBufferUART1>
}
 800082e:	bd10      	pop	{r4, pc}
 8000830:	20000114 	.word	0x20000114
 8000834:	08005c50 	.word	0x08005c50
 8000838:	08005a19 	.word	0x08005a19

0800083c <DataWhenPowerOffReadFromFlash>:
uint8_t DataWhenPowerOffReadFromFlash(void)
{
 800083c:	b538      	push	{r3, r4, r5, lr}
	SaveDataWhenPowerOff.CRC_data = flash_read(SaveDataWhenPowerOff.CRC_AddresInEEprom,0,256);
 800083e:	4c11      	ldr	r4, [pc, #68]	; (8000884 <DataWhenPowerOffReadFromFlash+0x48>)
 8000840:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000844:	2100      	movs	r1, #0
 8000846:	6860      	ldr	r0, [r4, #4]
 8000848:	f7ff fd88 	bl	800035c <flash_read>
	SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 800084c:	4d0e      	ldr	r5, [pc, #56]	; (8000888 <DataWhenPowerOffReadFromFlash+0x4c>)
	SaveDataWhenPowerOff.CRC_data = flash_read(SaveDataWhenPowerOff.CRC_AddresInEEprom,0,256);
 800084e:	6020      	str	r0, [r4, #0]
	SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 8000850:	462a      	mov	r2, r5
 8000852:	2100      	movs	r1, #0
 8000854:	68e0      	ldr	r0, [r4, #12]
 8000856:	f7ff fd81 	bl	800035c <flash_read>
	SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 800085a:	462a      	mov	r2, r5
	SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 800085c:	60a0      	str	r0, [r4, #8]
	SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 800085e:	2100      	movs	r1, #0
 8000860:	6960      	ldr	r0, [r4, #20]
 8000862:	f7ff fd7b 	bl	800035c <flash_read>
	SaveDataWhenPowerOff.OutState = flash_read(SaveDataWhenPowerOff.OutState_AddresInEEprom,0,1);
 8000866:	2201      	movs	r2, #1
	SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 8000868:	6120      	str	r0, [r4, #16]
	SaveDataWhenPowerOff.OutState = flash_read(SaveDataWhenPowerOff.OutState_AddresInEEprom,0,1);
 800086a:	2100      	movs	r1, #0
 800086c:	69e0      	ldr	r0, [r4, #28]
 800086e:	f7ff fd75 	bl	800035c <flash_read>
 8000872:	61a0      	str	r0, [r4, #24]
	logDebug("DataWhenPowerOffReadFromFlash ");
 8000874:	4805      	ldr	r0, [pc, #20]	; (800088c <DataWhenPowerOffReadFromFlash+0x50>)
 8000876:	f004 fc6b 	bl	8005150 <printToBufferWithoutEndUART1>
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <DataWhenPowerOffReadFromFlash+0x54>)
 800087c:	f004 fbfe 	bl	800507c <printToBufferUART1>
}
 8000880:	bd38      	pop	{r3, r4, r5, pc}
 8000882:	bf00      	nop
 8000884:	200000f4 	.word	0x200000f4
 8000888:	ee6b2800 	.word	0xee6b2800
 800088c:	08005c50 	.word	0x08005c50
 8000890:	080059d2 	.word	0x080059d2

08000894 <DataWhenPowerOffReadFromFlashForVerify>:
uint8_t DataWhenPowerOffReadFromFlashForVerify(void)
{
 8000894:	b538      	push	{r3, r4, r5, lr}
	SaveDataWhenPowerOffForVerify.CRC_data = flash_read(SaveDataWhenPowerOffForVerify.CRC_AddresInEEprom,0,256);
 8000896:	4c11      	ldr	r4, [pc, #68]	; (80008dc <DataWhenPowerOffReadFromFlashForVerify+0x48>)
 8000898:	f44f 7280 	mov.w	r2, #256	; 0x100
 800089c:	2100      	movs	r1, #0
 800089e:	6860      	ldr	r0, [r4, #4]
 80008a0:	f7ff fd5c 	bl	800035c <flash_read>
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 80008a4:	4d0e      	ldr	r5, [pc, #56]	; (80008e0 <DataWhenPowerOffReadFromFlashForVerify+0x4c>)
	SaveDataWhenPowerOffForVerify.CRC_data = flash_read(SaveDataWhenPowerOffForVerify.CRC_AddresInEEprom,0,256);
 80008a6:	6020      	str	r0, [r4, #0]
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 80008a8:	462a      	mov	r2, r5
 80008aa:	2100      	movs	r1, #0
 80008ac:	68e0      	ldr	r0, [r4, #12]
 80008ae:	f7ff fd55 	bl	800035c <flash_read>
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 80008b2:	462a      	mov	r2, r5
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePreviousValue =  flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargePrevious_AddresInEEprom,0,4000000000);
 80008b4:	60a0      	str	r0, [r4, #8]
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 80008b6:	2100      	movs	r1, #0
 80008b8:	6960      	ldr	r0, [r4, #20]
 80008ba:	f7ff fd4f 	bl	800035c <flash_read>
	SaveDataWhenPowerOffForVerify.OutState = flash_read(SaveDataWhenPowerOffForVerify.OutState_AddresInEEprom,0,1);
 80008be:	2201      	movs	r2, #1
	SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent = flash_read(SaveDataWhenPowerOffForVerify.BatteryCapacityDischargeCurrent_AddresInEEprom,0,4000000000);
 80008c0:	6120      	str	r0, [r4, #16]
	SaveDataWhenPowerOffForVerify.OutState = flash_read(SaveDataWhenPowerOffForVerify.OutState_AddresInEEprom,0,1);
 80008c2:	2100      	movs	r1, #0
 80008c4:	69e0      	ldr	r0, [r4, #28]
 80008c6:	f7ff fd49 	bl	800035c <flash_read>
 80008ca:	61a0      	str	r0, [r4, #24]
	logDebug("DataWhenPowerOffReadFromFlashForVerify ");
 80008cc:	4805      	ldr	r0, [pc, #20]	; (80008e4 <DataWhenPowerOffReadFromFlashForVerify+0x50>)
 80008ce:	f004 fc3f 	bl	8005150 <printToBufferWithoutEndUART1>
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <DataWhenPowerOffReadFromFlashForVerify+0x54>)
 80008d4:	f004 fbd2 	bl	800507c <printToBufferUART1>
}
 80008d8:	bd38      	pop	{r3, r4, r5, pc}
 80008da:	bf00      	nop
 80008dc:	20000134 	.word	0x20000134
 80008e0:	ee6b2800 	.word	0xee6b2800
 80008e4:	08005c50 	.word	0x08005c50
 80008e8:	080059f1 	.word	0x080059f1

080008ec <ReadFromFlash>:




uint8_t ReadFromFlash(void)
{
 80008ec:	b570      	push	{r4, r5, r6, lr}
		EEpromReadStatus = 1;
 80008ee:	2401      	movs	r4, #1
 80008f0:	4d0e      	ldr	r5, [pc, #56]	; (800092c <ReadFromFlash+0x40>)
 80008f2:	702c      	strb	r4, [r5, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
	    __disable_irq();

	    DataWhenPowerOffReadFromFlash();
 80008f6:	f7ff ffa1 	bl	800083c <DataWhenPowerOffReadFromFlash>
	    SettingsReadFromFlash();
 80008fa:	f7ff fee5 	bl	80006c8 <SettingsReadFromFlash>
	    CalibrationReadFromFlash();
 80008fe:	f7ff fdd3 	bl	80004a8 <CalibrationReadFromFlash>
  __ASM volatile ("cpsie i" : : : "memory");
 8000902:	b662      	cpsie	i


		__enable_irq();
		if (EEpromReadStatus == 0)
 8000904:	782e      	ldrb	r6, [r5, #0]
		{
			logDebug("Read from EEprom - FAIL ");
 8000906:	480a      	ldr	r0, [pc, #40]	; (8000930 <ReadFromFlash+0x44>)
		if (EEpromReadStatus == 0)
 8000908:	b93e      	cbnz	r6, 800091a <ReadFromFlash+0x2e>
			logDebug("Read from EEprom - FAIL ");
 800090a:	f004 fc21 	bl	8005150 <printToBufferWithoutEndUART1>
 800090e:	4809      	ldr	r0, [pc, #36]	; (8000934 <ReadFromFlash+0x48>)
 8000910:	f004 fbb4 	bl	800507c <printToBufferUART1>
			EEpromReadStatus = 1;
 8000914:	702c      	strb	r4, [r5, #0]
		{
			logDebug("Read from EEprom - SUCCESS");
			EEpromReadStatus = 1;
			return 1;
		}
}
 8000916:	4630      	mov	r0, r6
 8000918:	bd70      	pop	{r4, r5, r6, pc}
			logDebug("Read from EEprom - SUCCESS");
 800091a:	f004 fc19 	bl	8005150 <printToBufferWithoutEndUART1>
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <ReadFromFlash+0x4c>)
 8000920:	f004 fbac 	bl	800507c <printToBufferUART1>
			return 1;
 8000924:	4626      	mov	r6, r4
			EEpromReadStatus = 1;
 8000926:	702c      	strb	r4, [r5, #0]
			return 1;
 8000928:	e7f5      	b.n	8000916 <ReadFromFlash+0x2a>
 800092a:	bf00      	nop
 800092c:	20000000 	.word	0x20000000
 8000930:	08005c50 	.word	0x08005c50
 8000934:	08005b72 	.word	0x08005b72
 8000938:	08005b8b 	.word	0x08005b8b

0800093c <CalcCRC8>:



char CalcCRC8(char *Ptr, char Num, char CRC1)
{
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	4615      	mov	r5, r2
 8000940:	460c      	mov	r4, r1
 8000942:	b0c0      	sub	sp, #256	; 0x100
 8000944:	4606      	mov	r6, r0
   const char CrcTable[256] = {
 8000946:	f44f 7280 	mov.w	r2, #256	; 0x100
 800094a:	4909      	ldr	r1, [pc, #36]	; (8000970 <CalcCRC8+0x34>)
 800094c:	4668      	mov	r0, sp
 800094e:	f004 ff65 	bl	800581c <memcpy>
 8000952:	4628      	mov	r0, r5
 8000954:	3c01      	subs	r4, #1
 8000956:	b2e4      	uxtb	r4, r4
 8000958:	3401      	adds	r4, #1
 800095a:	4434      	add	r4, r6
    0xAE, 0xA9, 0xA0, 0xA7, 0xB2, 0xB5, 0xBC, 0xBB, // e0
    0x96, 0x91, 0x98, 0x9F, 0x8A, 0x8D, 0x84, 0x83, // e8
    0xDE, 0xD9, 0xD0, 0xD7, 0xC2, 0xC5, 0xCC, 0xCB, // f0
    0xE6, 0xE1, 0xE8, 0xEF, 0xFA, 0xFD, 0xF4, 0xF3 // f8
  };
  do  CRC1 = CrcTable[CRC1 ^ *Ptr++]; while (--Num);
 800095c:	f816 3b01 	ldrb.w	r3, [r6], #1
 8000960:	4058      	eors	r0, r3
 8000962:	42a6      	cmp	r6, r4
 8000964:	f81d 0000 	ldrb.w	r0, [sp, r0]
 8000968:	d1f8      	bne.n	800095c <CalcCRC8+0x20>
  return CRC1;
}
 800096a:	b040      	add	sp, #256	; 0x100
 800096c:	bd70      	pop	{r4, r5, r6, pc}
 800096e:	bf00      	nop
 8000970:	0800585c 	.word	0x0800585c

08000974 <CalibrationWriteToFlash_CRC>:
{
 8000974:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8000976:	b672      	cpsid	i
	CRC_Calibration = CalcCRC8(((unsigned char *) &CalibrationData)+4,((unsigned char)sizeof(CalibrationData))-4,0);
 8000978:	4d14      	ldr	r5, [pc, #80]	; (80009cc <CalibrationWriteToFlash_CRC+0x58>)
 800097a:	2200      	movs	r2, #0
 800097c:	214c      	movs	r1, #76	; 0x4c
 800097e:	4628      	mov	r0, r5
 8000980:	f7ff ffdc 	bl	800093c <CalcCRC8>
 8000984:	4604      	mov	r4, r0
	CalibrationData.CRC_data = CRC_Calibration;
 8000986:	f845 0c04 	str.w	r0, [r5, #-4]
	flash_unlock();
 800098a:	f7ff fc61 	bl	8000250 <flash_unlock>
	CalibrationWriteToFlash();
 800098e:	f7ff fd17 	bl	80003c0 <CalibrationWriteToFlash>
	CalibrationReadFromFlashForVerify();
 8000992:	f7ff fddb 	bl	800054c <CalibrationReadFromFlashForVerify>
	CRC_CalibrationVerify = CalcCRC8(((unsigned char *) &CalibrationDataForVerify)+4,((unsigned char)sizeof(CalibrationDataForVerify))-4,0);
 8000996:	2200      	movs	r2, #0
 8000998:	214c      	movs	r1, #76	; 0x4c
 800099a:	480d      	ldr	r0, [pc, #52]	; (80009d0 <CalibrationWriteToFlash_CRC+0x5c>)
 800099c:	f7ff ffce 	bl	800093c <CalcCRC8>
	if (CRC_Calibration == CRC_CalibrationVerify )
 80009a0:	4284      	cmp	r4, r0
		logDebug("Calibration write to Flash success ");
 80009a2:	480c      	ldr	r0, [pc, #48]	; (80009d4 <CalibrationWriteToFlash_CRC+0x60>)
	if (CRC_Calibration == CRC_CalibrationVerify )
 80009a4:	d109      	bne.n	80009ba <CalibrationWriteToFlash_CRC+0x46>
		logDebug("Calibration write to Flash success ");
 80009a6:	f004 fbd3 	bl	8005150 <printToBufferWithoutEndUART1>
 80009aa:	480b      	ldr	r0, [pc, #44]	; (80009d8 <CalibrationWriteToFlash_CRC+0x64>)
 80009ac:	f004 fb66 	bl	800507c <printToBufferUART1>
	flash_lock();
 80009b0:	f7ff fc5a 	bl	8000268 <flash_lock>
  __ASM volatile ("cpsie i" : : : "memory");
 80009b4:	b662      	cpsie	i
}
 80009b6:	2001      	movs	r0, #1
 80009b8:	bd38      	pop	{r3, r4, r5, pc}
		logDebug("Calibration write to Flash Fail, try again... ");
 80009ba:	f004 fbc9 	bl	8005150 <printToBufferWithoutEndUART1>
 80009be:	4807      	ldr	r0, [pc, #28]	; (80009dc <CalibrationWriteToFlash_CRC+0x68>)
 80009c0:	f004 fb5c 	bl	800507c <printToBufferUART1>
		CalibrationWriteToFlash();
 80009c4:	f7ff fcfc 	bl	80003c0 <CalibrationWriteToFlash>
 80009c8:	e7f2      	b.n	80009b0 <CalibrationWriteToFlash_CRC+0x3c>
 80009ca:	bf00      	nop
 80009cc:	20000008 	.word	0x20000008
 80009d0:	200000a8 	.word	0x200000a8
 80009d4:	08005c50 	.word	0x08005c50
 80009d8:	08005a59 	.word	0x08005a59
 80009dc:	08005a7e 	.word	0x08005a7e

080009e0 <SettingsWriteToFlash_CRC>:
{
 80009e0:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 80009e2:	b672      	cpsid	i
	CRC_Settings = CalcCRC8(((unsigned char *) &SettingsData)+4,((unsigned char)sizeof(SettingsData))-4,0);
 80009e4:	4d24      	ldr	r5, [pc, #144]	; (8000a78 <SettingsWriteToFlash_CRC+0x98>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	2144      	movs	r1, #68	; 0x44
 80009ea:	4628      	mov	r0, r5
 80009ec:	f7ff ffa6 	bl	800093c <CalcCRC8>
 80009f0:	4604      	mov	r4, r0
	logDebugD("CRC is : ",CRC_Settings,0);
 80009f2:	4822      	ldr	r0, [pc, #136]	; (8000a7c <SettingsWriteToFlash_CRC+0x9c>)
 80009f4:	f004 fbac 	bl	8005150 <printToBufferWithoutEndUART1>
 80009f8:	2200      	movs	r2, #0
 80009fa:	4621      	mov	r1, r4
 80009fc:	4820      	ldr	r0, [pc, #128]	; (8000a80 <SettingsWriteToFlash_CRC+0xa0>)
 80009fe:	f004 fbeb 	bl	80051d8 <printToBufferUART1D>
	logDebugD("Size is : ",((unsigned char)sizeof(SettingsData))-4,0);
 8000a02:	481e      	ldr	r0, [pc, #120]	; (8000a7c <SettingsWriteToFlash_CRC+0x9c>)
 8000a04:	f004 fba4 	bl	8005150 <printToBufferWithoutEndUART1>
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2144      	movs	r1, #68	; 0x44
 8000a0c:	481d      	ldr	r0, [pc, #116]	; (8000a84 <SettingsWriteToFlash_CRC+0xa4>)
 8000a0e:	f004 fbe3 	bl	80051d8 <printToBufferUART1D>
	SettingsData.CRC_data = CRC_Settings;
 8000a12:	f845 4c04 	str.w	r4, [r5, #-4]
	flash_unlock();
 8000a16:	f7ff fc1b 	bl	8000250 <flash_unlock>
	SettingsWriteToFlash();
 8000a1a:	f7ff fde9 	bl	80005f0 <SettingsWriteToFlash>
	SettingsReadFromFlashForVerify();
 8000a1e:	f7ff fe9f 	bl	8000760 <SettingsReadFromFlashForVerify>
	CRC_SettingsVerify = CalcCRC8(((unsigned char *) &SettingsDataForVerify)+4,((unsigned char)sizeof(SettingsDataForVerify))-4,0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2144      	movs	r1, #68	; 0x44
 8000a26:	4818      	ldr	r0, [pc, #96]	; (8000a88 <SettingsWriteToFlash_CRC+0xa8>)
 8000a28:	f7ff ff88 	bl	800093c <CalcCRC8>
 8000a2c:	4605      	mov	r5, r0
	logDebugD("CRC is : ",CRC_SettingsVerify,0);
 8000a2e:	4813      	ldr	r0, [pc, #76]	; (8000a7c <SettingsWriteToFlash_CRC+0x9c>)
 8000a30:	f004 fb8e 	bl	8005150 <printToBufferWithoutEndUART1>
 8000a34:	2200      	movs	r2, #0
 8000a36:	4629      	mov	r1, r5
 8000a38:	4811      	ldr	r0, [pc, #68]	; (8000a80 <SettingsWriteToFlash_CRC+0xa0>)
 8000a3a:	f004 fbcd 	bl	80051d8 <printToBufferUART1D>
	logDebugD("Size is : ",((unsigned char)sizeof(SettingsDataForVerify))-4,0);
 8000a3e:	480f      	ldr	r0, [pc, #60]	; (8000a7c <SettingsWriteToFlash_CRC+0x9c>)
 8000a40:	f004 fb86 	bl	8005150 <printToBufferWithoutEndUART1>
 8000a44:	480f      	ldr	r0, [pc, #60]	; (8000a84 <SettingsWriteToFlash_CRC+0xa4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	2144      	movs	r1, #68	; 0x44
 8000a4a:	f004 fbc5 	bl	80051d8 <printToBufferUART1D>
	if (CRC_Settings == CRC_SettingsVerify )
 8000a4e:	42ac      	cmp	r4, r5
		logDebug("Settings write to Flash success ");
 8000a50:	480a      	ldr	r0, [pc, #40]	; (8000a7c <SettingsWriteToFlash_CRC+0x9c>)
	if (CRC_Settings == CRC_SettingsVerify )
 8000a52:	d109      	bne.n	8000a68 <SettingsWriteToFlash_CRC+0x88>
		logDebug("Settings write to Flash success ");
 8000a54:	f004 fb7c 	bl	8005150 <printToBufferWithoutEndUART1>
 8000a58:	480c      	ldr	r0, [pc, #48]	; (8000a8c <SettingsWriteToFlash_CRC+0xac>)
 8000a5a:	f004 fb0f 	bl	800507c <printToBufferUART1>
	flash_lock();
 8000a5e:	f7ff fc03 	bl	8000268 <flash_lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000a62:	b662      	cpsie	i
}
 8000a64:	2001      	movs	r0, #1
 8000a66:	bd38      	pop	{r3, r4, r5, pc}
		logDebug("Settings write to Flash Fail, try again... ");
 8000a68:	f004 fb72 	bl	8005150 <printToBufferWithoutEndUART1>
 8000a6c:	4808      	ldr	r0, [pc, #32]	; (8000a90 <SettingsWriteToFlash_CRC+0xb0>)
 8000a6e:	f004 fb05 	bl	800507c <printToBufferUART1>
		SettingsWriteToFlash();
 8000a72:	f7ff fdbd 	bl	80005f0 <SettingsWriteToFlash>
 8000a76:	e7f2      	b.n	8000a5e <SettingsWriteToFlash_CRC+0x7e>
 8000a78:	20000158 	.word	0x20000158
 8000a7c:	08005c50 	.word	0x08005c50
 8000a80:	08005aae 	.word	0x08005aae
 8000a84:	08005ab9 	.word	0x08005ab9
 8000a88:	200001e8 	.word	0x200001e8
 8000a8c:	08005ac5 	.word	0x08005ac5
 8000a90:	08005ae7 	.word	0x08005ae7

08000a94 <FactoryWriteToFlash_CRC>:
{
 8000a94:	b538      	push	{r3, r4, r5, lr}
	logDebug("FactoryWriteToFlash_CRC");
 8000a96:	484a      	ldr	r0, [pc, #296]	; (8000bc0 <FactoryWriteToFlash_CRC+0x12c>)
 8000a98:	f004 fb5a 	bl	8005150 <printToBufferWithoutEndUART1>
 8000a9c:	4849      	ldr	r0, [pc, #292]	; (8000bc4 <FactoryWriteToFlash_CRC+0x130>)
 8000a9e:	f004 faed 	bl	800507c <printToBufferUART1>
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa2:	b672      	cpsid	i
	CRC_Calibration = CalcCRC8(((unsigned char *) &CalibrationDataFactory)+4,((unsigned char)sizeof(CalibrationDataFactory))-4,0);
 8000aa4:	4d48      	ldr	r5, [pc, #288]	; (8000bc8 <FactoryWriteToFlash_CRC+0x134>)
	flash_unlock();
 8000aa6:	f7ff fbd3 	bl	8000250 <flash_unlock>
	CRC_Calibration = CalcCRC8(((unsigned char *) &CalibrationDataFactory)+4,((unsigned char)sizeof(CalibrationDataFactory))-4,0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	214c      	movs	r1, #76	; 0x4c
 8000aae:	4628      	mov	r0, r5
 8000ab0:	f7ff ff44 	bl	800093c <CalcCRC8>
 8000ab4:	4604      	mov	r4, r0
	CalibrationDataFactory.CRC_data = CRC_Calibration;
 8000ab6:	f845 0c04 	str.w	r0, [r5, #-4]
	CalibrationFactoryWriteToFlash();
 8000aba:	f7ff fcbb 	bl	8000434 <CalibrationFactoryWriteToFlash>
	CalibrationReadFromFlashForVerify();
 8000abe:	f7ff fd45 	bl	800054c <CalibrationReadFromFlashForVerify>
	CRC_CalibrationVerify = CalcCRC8(((unsigned char *) &CalibrationDataForVerify)+4,((unsigned char)sizeof(CalibrationDataForVerify))-4,0);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	214c      	movs	r1, #76	; 0x4c
 8000ac6:	4841      	ldr	r0, [pc, #260]	; (8000bcc <FactoryWriteToFlash_CRC+0x138>)
 8000ac8:	f7ff ff38 	bl	800093c <CalcCRC8>
	if (CRC_Calibration == CRC_CalibrationVerify )
 8000acc:	4284      	cmp	r4, r0
		logDebug("FCalibration write to Flash success ");
 8000ace:	483c      	ldr	r0, [pc, #240]	; (8000bc0 <FactoryWriteToFlash_CRC+0x12c>)
	if (CRC_Calibration == CRC_CalibrationVerify )
 8000ad0:	d15d      	bne.n	8000b8e <FactoryWriteToFlash_CRC+0xfa>
		logDebug("FCalibration write to Flash success ");
 8000ad2:	f004 fb3d 	bl	8005150 <printToBufferWithoutEndUART1>
 8000ad6:	483e      	ldr	r0, [pc, #248]	; (8000bd0 <FactoryWriteToFlash_CRC+0x13c>)
 8000ad8:	f004 fad0 	bl	800507c <printToBufferUART1>
	CRC_Settings = CalcCRC8(((unsigned char *) &SettingsDataFactory)+4,((unsigned char)sizeof(SettingsDataFactory))-4,0);
 8000adc:	4d3d      	ldr	r5, [pc, #244]	; (8000bd4 <FactoryWriteToFlash_CRC+0x140>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2144      	movs	r1, #68	; 0x44
 8000ae2:	4628      	mov	r0, r5
 8000ae4:	f7ff ff2a 	bl	800093c <CalcCRC8>
 8000ae8:	4604      	mov	r4, r0
	logDebugD("FCRC is : ",CRC_Settings,0);
 8000aea:	4835      	ldr	r0, [pc, #212]	; (8000bc0 <FactoryWriteToFlash_CRC+0x12c>)
 8000aec:	f004 fb30 	bl	8005150 <printToBufferWithoutEndUART1>
 8000af0:	2200      	movs	r2, #0
 8000af2:	4621      	mov	r1, r4
 8000af4:	4838      	ldr	r0, [pc, #224]	; (8000bd8 <FactoryWriteToFlash_CRC+0x144>)
 8000af6:	f004 fb6f 	bl	80051d8 <printToBufferUART1D>
	logDebugD("FSize is : ",((unsigned char)sizeof(SettingsDataFactory))-4,0);
 8000afa:	4831      	ldr	r0, [pc, #196]	; (8000bc0 <FactoryWriteToFlash_CRC+0x12c>)
 8000afc:	f004 fb28 	bl	8005150 <printToBufferWithoutEndUART1>
 8000b00:	2200      	movs	r2, #0
 8000b02:	2144      	movs	r1, #68	; 0x44
 8000b04:	4835      	ldr	r0, [pc, #212]	; (8000bdc <FactoryWriteToFlash_CRC+0x148>)
 8000b06:	f004 fb67 	bl	80051d8 <printToBufferUART1D>
	SettingsDataFactory.CRC_data = CRC_Settings;
 8000b0a:	f845 4c04 	str.w	r4, [r5, #-4]
	SettingsFactoryWriteToFlash();
 8000b0e:	f7ff fda5 	bl	800065c <SettingsFactoryWriteToFlash>
	SettingsReadFromFlashForVerify();
 8000b12:	f7ff fe25 	bl	8000760 <SettingsReadFromFlashForVerify>
	CRC_SettingsVerify = CalcCRC8(((unsigned char *) &SettingsDataForVerify)+4,((unsigned char)sizeof(SettingsDataForVerify))-4,0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2144      	movs	r1, #68	; 0x44
 8000b1a:	4831      	ldr	r0, [pc, #196]	; (8000be0 <FactoryWriteToFlash_CRC+0x14c>)
 8000b1c:	f7ff ff0e 	bl	800093c <CalcCRC8>
 8000b20:	4605      	mov	r5, r0
	logDebugD("FCRC is : ",CRC_SettingsVerify,0);
 8000b22:	4827      	ldr	r0, [pc, #156]	; (8000bc0 <FactoryWriteToFlash_CRC+0x12c>)
 8000b24:	f004 fb14 	bl	8005150 <printToBufferWithoutEndUART1>
 8000b28:	2200      	movs	r2, #0
 8000b2a:	4629      	mov	r1, r5
 8000b2c:	482a      	ldr	r0, [pc, #168]	; (8000bd8 <FactoryWriteToFlash_CRC+0x144>)
 8000b2e:	f004 fb53 	bl	80051d8 <printToBufferUART1D>
	logDebugD("FSize is : ",((unsigned char)sizeof(SettingsDataForVerify))-4,0);
 8000b32:	4823      	ldr	r0, [pc, #140]	; (8000bc0 <FactoryWriteToFlash_CRC+0x12c>)
 8000b34:	f004 fb0c 	bl	8005150 <printToBufferWithoutEndUART1>
 8000b38:	4828      	ldr	r0, [pc, #160]	; (8000bdc <FactoryWriteToFlash_CRC+0x148>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2144      	movs	r1, #68	; 0x44
 8000b3e:	f004 fb4b 	bl	80051d8 <printToBufferUART1D>
	if (CRC_Settings == CRC_SettingsVerify )
 8000b42:	42ac      	cmp	r4, r5
		logDebug("FSettings write to Flash success ");
 8000b44:	481e      	ldr	r0, [pc, #120]	; (8000bc0 <FactoryWriteToFlash_CRC+0x12c>)
	if (CRC_Settings == CRC_SettingsVerify )
 8000b46:	d12a      	bne.n	8000b9e <FactoryWriteToFlash_CRC+0x10a>
		logDebug("FSettings write to Flash success ");
 8000b48:	f004 fb02 	bl	8005150 <printToBufferWithoutEndUART1>
 8000b4c:	4825      	ldr	r0, [pc, #148]	; (8000be4 <FactoryWriteToFlash_CRC+0x150>)
 8000b4e:	f004 fa95 	bl	800507c <printToBufferUART1>
	CRC_DataWhenPowerOff = CalcCRC8(((unsigned char *) &SaveDataWhenPowerOffFactory)+4,((unsigned char)sizeof(SaveDataWhenPowerOffFactory))-4,0);
 8000b52:	4d25      	ldr	r5, [pc, #148]	; (8000be8 <FactoryWriteToFlash_CRC+0x154>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	211c      	movs	r1, #28
 8000b58:	4628      	mov	r0, r5
 8000b5a:	f7ff feef 	bl	800093c <CalcCRC8>
 8000b5e:	4604      	mov	r4, r0
	SaveDataWhenPowerOffFactory.CRC_data = CRC_DataWhenPowerOff;
 8000b60:	f845 0c04 	str.w	r0, [r5, #-4]
	DataWhenPowerOff_Factory_WriteToFlash();
 8000b64:	f7ff fe48 	bl	80007f8 <DataWhenPowerOff_Factory_WriteToFlash>
	DataWhenPowerOffReadFromFlashForVerify();
 8000b68:	f7ff fe94 	bl	8000894 <DataWhenPowerOffReadFromFlashForVerify>
	CRC_DataWhenPowerOffVerify = CalcCRC8(((unsigned char *) &SaveDataWhenPowerOffForVerify)+4,((unsigned char)sizeof(SaveDataWhenPowerOffForVerify))-4,0);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	211c      	movs	r1, #28
 8000b70:	481e      	ldr	r0, [pc, #120]	; (8000bec <FactoryWriteToFlash_CRC+0x158>)
 8000b72:	f7ff fee3 	bl	800093c <CalcCRC8>
	if (CRC_DataWhenPowerOff == CRC_DataWhenPowerOffVerify )
 8000b76:	4284      	cmp	r4, r0
		logDebug("FDataWhenPowerOff write to Flash success ");
 8000b78:	4811      	ldr	r0, [pc, #68]	; (8000bc0 <FactoryWriteToFlash_CRC+0x12c>)
	if (CRC_DataWhenPowerOff == CRC_DataWhenPowerOffVerify )
 8000b7a:	d118      	bne.n	8000bae <FactoryWriteToFlash_CRC+0x11a>
		logDebug("FDataWhenPowerOff write to Flash success ");
 8000b7c:	f004 fae8 	bl	8005150 <printToBufferWithoutEndUART1>
 8000b80:	481b      	ldr	r0, [pc, #108]	; (8000bf0 <FactoryWriteToFlash_CRC+0x15c>)
 8000b82:	f004 fa7b 	bl	800507c <printToBufferUART1>
	flash_lock();
 8000b86:	f7ff fb6f 	bl	8000268 <flash_lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b8a:	b662      	cpsie	i
}
 8000b8c:	bd38      	pop	{r3, r4, r5, pc}
		logDebug("FCalibration write to Flash Fail, try again... ");
 8000b8e:	f004 fadf 	bl	8005150 <printToBufferWithoutEndUART1>
 8000b92:	4818      	ldr	r0, [pc, #96]	; (8000bf4 <FactoryWriteToFlash_CRC+0x160>)
 8000b94:	f004 fa72 	bl	800507c <printToBufferUART1>
		CalibrationFactoryWriteToFlash();
 8000b98:	f7ff fc4c 	bl	8000434 <CalibrationFactoryWriteToFlash>
 8000b9c:	e79e      	b.n	8000adc <FactoryWriteToFlash_CRC+0x48>
		logDebug("FSettings write to Flash Fail, try again... ");
 8000b9e:	f004 fad7 	bl	8005150 <printToBufferWithoutEndUART1>
 8000ba2:	4815      	ldr	r0, [pc, #84]	; (8000bf8 <FactoryWriteToFlash_CRC+0x164>)
 8000ba4:	f004 fa6a 	bl	800507c <printToBufferUART1>
		SettingsFactoryWriteToFlash();
 8000ba8:	f7ff fd58 	bl	800065c <SettingsFactoryWriteToFlash>
 8000bac:	e7d1      	b.n	8000b52 <FactoryWriteToFlash_CRC+0xbe>
		logDebug("FDataWhenPowerOff write to Flash Fail, try again... ");
 8000bae:	f004 facf 	bl	8005150 <printToBufferWithoutEndUART1>
 8000bb2:	4812      	ldr	r0, [pc, #72]	; (8000bfc <FactoryWriteToFlash_CRC+0x168>)
 8000bb4:	f004 fa62 	bl	800507c <printToBufferUART1>
		DataWhenPowerOff_Factory_WriteToFlash();
 8000bb8:	f7ff fe1e 	bl	80007f8 <DataWhenPowerOff_Factory_WriteToFlash>
 8000bbc:	e7e3      	b.n	8000b86 <FactoryWriteToFlash_CRC+0xf2>
 8000bbe:	bf00      	nop
 8000bc0:	08005c50 	.word	0x08005c50
 8000bc4:	08005a40 	.word	0x08005a40
 8000bc8:	20000058 	.word	0x20000058
 8000bcc:	200000a8 	.word	0x200000a8
 8000bd0:	08005a58 	.word	0x08005a58
 8000bd4:	200001a0 	.word	0x200001a0
 8000bd8:	08005aad 	.word	0x08005aad
 8000bdc:	08005ab8 	.word	0x08005ab8
 8000be0:	200001e8 	.word	0x200001e8
 8000be4:	08005ac4 	.word	0x08005ac4
 8000be8:	20000118 	.word	0x20000118
 8000bec:	20000138 	.word	0x20000138
 8000bf0:	08005b13 	.word	0x08005b13
 8000bf4:	08005a7d 	.word	0x08005a7d
 8000bf8:	08005ae6 	.word	0x08005ae6
 8000bfc:	08005b3d 	.word	0x08005b3d

08000c00 <Generation_Coefficients_R_A_B>:
		{80,1950},
		{100,900},
		{150,500}
};
void Generation_Coefficients_R_A_B()
{
 8000c00:	4916      	ldr	r1, [pc, #88]	; (8000c5c <Generation_Coefficients_R_A_B+0x5c>)
 8000c02:	4817      	ldr	r0, [pc, #92]	; (8000c60 <Generation_Coefficients_R_A_B+0x60>)
 8000c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int8_t i;
	for (i=0;i<(TLT-1);i++)
	{
		Temp_R_A_B[i].R = T_Table[i].R;
		Temp_R_A_B[i].A10000 = (T_Table[i+1].T - T_Table[i].T)*10000/(T_Table[i+1].R - T_Table[i].R);
 8000c08:	f242 7c10 	movw	ip, #10000	; 0x2710
 8000c0c:	460d      	mov	r5, r1
 8000c0e:	4604      	mov	r4, r0
		Temp_R_A_B[i].B = T_Table[i].T - Temp_R_A_B[i].A10000 * T_Table[i].R/10000;
 8000c10:	4f14      	ldr	r7, [pc, #80]	; (8000c64 <Generation_Coefficients_R_A_B+0x64>)
 8000c12:	f101 061c 	add.w	r6, r1, #28
		Temp_R_A_B[i].A10000 = (T_Table[i+1].T - T_Table[i].T)*10000/(T_Table[i+1].R - T_Table[i].R);
 8000c16:	f9b1 e000 	ldrsh.w	lr, [r1]
 8000c1a:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
		Temp_R_A_B[i].R = T_Table[i].R;
 8000c1e:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
		Temp_R_A_B[i].A10000 = (T_Table[i+1].T - T_Table[i].T)*10000/(T_Table[i+1].R - T_Table[i].R);
 8000c22:	eba2 020e 	sub.w	r2, r2, lr
 8000c26:	fb0c f202 	mul.w	r2, ip, r2
 8000c2a:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8000c2e:	3104      	adds	r1, #4
 8000c30:	eba3 0308 	sub.w	r3, r3, r8
 8000c34:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c38:	6043      	str	r3, [r0, #4]
		Temp_R_A_B[i].B = T_Table[i].T - Temp_R_A_B[i].A10000 * T_Table[i].R/10000;
 8000c3a:	fb03 f308 	mul.w	r3, r3, r8
 8000c3e:	fb93 f3f7 	sdiv	r3, r3, r7
	for (i=0;i<(TLT-1);i++)
 8000c42:	428e      	cmp	r6, r1
		Temp_R_A_B[i].B = T_Table[i].T - Temp_R_A_B[i].A10000 * T_Table[i].R/10000;
 8000c44:	4473      	add	r3, lr
		Temp_R_A_B[i].R = T_Table[i].R;
 8000c46:	f8c0 8000 	str.w	r8, [r0]
		Temp_R_A_B[i].B = T_Table[i].T - Temp_R_A_B[i].A10000 * T_Table[i].R/10000;
 8000c4a:	6083      	str	r3, [r0, #8]
 8000c4c:	f100 000c 	add.w	r0, r0, #12
	for (i=0;i<(TLT-1);i++)
 8000c50:	d1e1      	bne.n	8000c16 <Generation_Coefficients_R_A_B+0x16>
	}
	Temp_R_A_B[i].R = T_Table[i].R;
 8000c52:	f9b5 301e 	ldrsh.w	r3, [r5, #30]
 8000c56:	6563      	str	r3, [r4, #84]	; 0x54
	    c=(Temp_R_A_B[i].R-Temp_R_A_B[i+1].R)/2+Temp_R_A_B[i+1].R;
	    Print_to_USART1_d(c,"c= ",0);
	    Print_to_USART1_d(Temp_R_A_B[i].A10000*c/10000+Temp_R_A_B[i].B,"T:",0);
	}
*/
}
 8000c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c5c:	2000022c 	.word	0x2000022c
 8000c60:	200007dc 	.word	0x200007dc
 8000c64:	ffffd8f0 	.word	0xffffd8f0

08000c68 <WriteInLOG>:
	}
	return 200;
}

void WriteInLOG(char  str [17])
{
 8000c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint16_t i_log=0;
	uint8_t i;
	uint8_t j;

	char *number;
	number = itoa(LoggingData.RecordsQuantity);
 8000c6c:	4c53      	ldr	r4, [pc, #332]	; (8000dbc <WriteInLOG+0x154>)
{
 8000c6e:	4607      	mov	r7, r0
	number = itoa(LoggingData.RecordsQuantity);
 8000c70:	6820      	ldr	r0, [r4, #0]
 8000c72:	f000 faaf 	bl	80011d4 <itoa>


	for(i=0;number[i]!='\0';i++)
 8000c76:	2300      	movs	r3, #0
	{
		LoggingData.Records[LoggingData.RecordsQuantity][i] = number[i];
 8000c78:	6826      	ldr	r6, [r4, #0]
 8000c7a:	0131      	lsls	r1, r6, #4
 8000c7c:	198a      	adds	r2, r1, r6
 8000c7e:	4422      	add	r2, r4
	for(i=0;number[i]!='\0';i++)
 8000c80:	f810 c003 	ldrb.w	ip, [r0, r3]
 8000c84:	461d      	mov	r5, r3
 8000c86:	3301      	adds	r3, #1
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	f1bc 0f00 	cmp.w	ip, #0
 8000c8e:	d116      	bne.n	8000cbe <WriteInLOG+0x56>
	}
	LoggingData.Records[LoggingData.RecordsQuantity][i] = ':';
 8000c90:	198a      	adds	r2, r1, r6
 8000c92:	18a0      	adds	r0, r4, r2
 8000c94:	4405      	add	r5, r0
 8000c96:	203a      	movs	r0, #58	; 0x3a
	i++;

	for(j=0;str[j]!='\0';i++,j++)
 8000c98:	1aff      	subs	r7, r7, r3
	LoggingData.Records[LoggingData.RecordsQuantity][i] = ':';
 8000c9a:	7128      	strb	r0, [r5, #4]
	for(j=0;str[j]!='\0';i++,j++)
 8000c9c:	f817 c003 	ldrb.w	ip, [r7, r3]
 8000ca0:	b2dd      	uxtb	r5, r3
 8000ca2:	f1bc 0f00 	cmp.w	ip, #0
 8000ca6:	d10e      	bne.n	8000cc6 <WriteInLOG+0x5e>
			break;
		}
	}
	for (;i<16;i++)
	{
		LoggingData.Records[LoggingData.RecordsQuantity][i] = ' ';
 8000ca8:	2320      	movs	r3, #32
 8000caa:	442a      	add	r2, r5
 8000cac:	3203      	adds	r2, #3
 8000cae:	4422      	add	r2, r4
	for (;i<16;i++)
 8000cb0:	2d0f      	cmp	r5, #15
 8000cb2:	d815      	bhi.n	8000ce0 <WriteInLOG+0x78>
 8000cb4:	3501      	adds	r5, #1
		LoggingData.Records[LoggingData.RecordsQuantity][i] = ' ';
 8000cb6:	f802 3f01 	strb.w	r3, [r2, #1]!
	for (;i<16;i++)
 8000cba:	b2ed      	uxtb	r5, r5
 8000cbc:	e7f8      	b.n	8000cb0 <WriteInLOG+0x48>
		LoggingData.Records[LoggingData.RecordsQuantity][i] = number[i];
 8000cbe:	4415      	add	r5, r2
 8000cc0:	f885 c004 	strb.w	ip, [r5, #4]
 8000cc4:	e7dc      	b.n	8000c80 <WriteInLOG+0x18>
		if (i<16) LoggingData.Records[LoggingData.RecordsQuantity][i] = str[j];
 8000cc6:	2d0f      	cmp	r5, #15
 8000cc8:	d805      	bhi.n	8000cd6 <WriteInLOG+0x6e>
 8000cca:	1898      	adds	r0, r3, r2
 8000ccc:	4420      	add	r0, r4
 8000cce:	f880 c004 	strb.w	ip, [r0, #4]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	e7e2      	b.n	8000c9c <WriteInLOG+0x34>
			LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	4431      	add	r1, r6
 8000cda:	4421      	add	r1, r4
 8000cdc:	440b      	add	r3, r1
 8000cde:	711a      	strb	r2, [r3, #4]
	}
	logDebugD("ii: ",i,0);
 8000ce0:	4837      	ldr	r0, [pc, #220]	; (8000dc0 <WriteInLOG+0x158>)
 8000ce2:	f004 fa35 	bl	8005150 <printToBufferWithoutEndUART1>
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	4629      	mov	r1, r5
 8000cea:	4836      	ldr	r0, [pc, #216]	; (8000dc4 <WriteInLOG+0x15c>)
 8000cec:	f004 fa74 	bl	80051d8 <printToBufferUART1D>
	LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000cf0:	6823      	ldr	r3, [r4, #0]
 8000cf2:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8000cf6:	4422      	add	r2, r4
 8000cf8:	442a      	add	r2, r5
 8000cfa:	2500      	movs	r5, #0

	LoggingData.RecordsQuantity++;
 8000cfc:	3301      	adds	r3, #1
	if (LoggingData.RecordsQuantity>=(MAX_LOG_ITEMS))
 8000cfe:	2b17      	cmp	r3, #23
	LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000d00:	7115      	strb	r5, [r2, #4]
	LoggingData.RecordsQuantity++;
 8000d02:	6023      	str	r3, [r4, #0]
	if (LoggingData.RecordsQuantity>=(MAX_LOG_ITEMS))
 8000d04:	d937      	bls.n	8000d76 <WriteInLOG+0x10e>
 8000d06:	260a      	movs	r6, #10
	{
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
		{
			number = itoa(i);
			uint8_t k;
			for(k=0;number[k]!='\0';k++)
 8000d08:	46a8      	mov	r8, r5
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
			}
			j--;
			for (;j<16;j++)
			{
				LoggingData.Records[i][j] = ' ';
 8000d0a:	f04f 0920 	mov.w	r9, #32
 8000d0e:	4f2b      	ldr	r7, [pc, #172]	; (8000dbc <WriteInLOG+0x154>)
			number = itoa(i);
 8000d10:	4628      	mov	r0, r5
 8000d12:	f000 fa5f 	bl	80011d4 <itoa>
			for(k=0;number[k]!='\0';k++)
 8000d16:	2300      	movs	r3, #0
 8000d18:	012a      	lsls	r2, r5, #4
				LoggingData.Records[i][k] = number[k];
 8000d1a:	eb02 0c05 	add.w	ip, r2, r5
 8000d1e:	44a4      	add	ip, r4
			for(k=0;number[k]!='\0';k++)
 8000d20:	f810 e003 	ldrb.w	lr, [r0, r3]
 8000d24:	4619      	mov	r1, r3
 8000d26:	3301      	adds	r3, #1
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	f1be 0f00 	cmp.w	lr, #0
 8000d2e:	d12e      	bne.n	8000d8e <WriteInLOG+0x126>
			LoggingData.Records[i][k] = ':';
 8000d30:	f04f 0c3a 	mov.w	ip, #58	; 0x3a
 8000d34:	1950      	adds	r0, r2, r5
 8000d36:	4420      	add	r0, r4
 8000d38:	4401      	add	r1, r0
 8000d3a:	f881 c004 	strb.w	ip, [r1, #4]
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 8000d3e:	eb06 1106 	add.w	r1, r6, r6, lsl #4
 8000d42:	4421      	add	r1, r4
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 8000d44:	eb00 0c03 	add.w	ip, r0, r3
 8000d48:	f89c e004 	ldrb.w	lr, [ip, #4]
 8000d4c:	f1be 0f00 	cmp.w	lr, #0
 8000d50:	d121      	bne.n	8000d96 <WriteInLOG+0x12e>
			j--;
 8000d52:	3b01      	subs	r3, #1
 8000d54:	b2db      	uxtb	r3, r3
			for (;j<16;j++)
 8000d56:	b2d9      	uxtb	r1, r3
 8000d58:	290f      	cmp	r1, #15
 8000d5a:	d929      	bls.n	8000db0 <WriteInLOG+0x148>
			}
			LoggingData.Records[i][j] = '\0';
 8000d5c:	442a      	add	r2, r5
 8000d5e:	4422      	add	r2, r4
 8000d60:	3501      	adds	r5, #1
 8000d62:	4413      	add	r3, r2
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 8000d64:	2d0e      	cmp	r5, #14
			LoggingData.Records[i][j] = '\0';
 8000d66:	f883 8004 	strb.w	r8, [r3, #4]
 8000d6a:	f107 0711 	add.w	r7, r7, #17
 8000d6e:	f106 0601 	add.w	r6, r6, #1
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 8000d72:	d1cd      	bne.n	8000d10 <WriteInLOG+0xa8>
		}

		LoggingData.RecordsQuantity=MAX_LOG_ITEMS-10;
 8000d74:	6025      	str	r5, [r4, #0]
	}
	flash_write_block();
 8000d76:	f7ff faa5 	bl	80002c4 <flash_write_block>
	logDebugD("Q: ",LoggingData.RecordsQuantity,0);
 8000d7a:	4811      	ldr	r0, [pc, #68]	; (8000dc0 <WriteInLOG+0x158>)
 8000d7c:	f004 f9e8 	bl	8005150 <printToBufferWithoutEndUART1>
 8000d80:	6821      	ldr	r1, [r4, #0]
 8000d82:	2200      	movs	r2, #0
}
 8000d84:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	logDebugD("Q: ",LoggingData.RecordsQuantity,0);
 8000d88:	480f      	ldr	r0, [pc, #60]	; (8000dc8 <WriteInLOG+0x160>)
 8000d8a:	f004 ba25 	b.w	80051d8 <printToBufferUART1D>
				LoggingData.Records[i][k] = number[k];
 8000d8e:	4461      	add	r1, ip
 8000d90:	f881 e004 	strb.w	lr, [r1, #4]
 8000d94:	e7c4      	b.n	8000d20 <WriteInLOG+0xb8>
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j];
 8000d96:	eb01 0e03 	add.w	lr, r1, r3
				if (i>=10)
 8000d9a:	2d09      	cmp	r5, #9
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j];
 8000d9c:	bf8c      	ite	hi
 8000d9e:	f89e e004 	ldrbhi.w	lr, [lr, #4]
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 8000da2:	f89e e005 	ldrbls.w	lr, [lr, #5]
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 8000da6:	3301      	adds	r3, #1
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 8000da8:	f88c e004 	strb.w	lr, [ip, #4]
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	e7c9      	b.n	8000d44 <WriteInLOG+0xdc>
				LoggingData.Records[i][j] = ' ';
 8000db0:	18f9      	adds	r1, r7, r3
 8000db2:	f881 9004 	strb.w	r9, [r1, #4]
 8000db6:	3301      	adds	r3, #1
 8000db8:	e7cd      	b.n	8000d56 <WriteInLOG+0xee>
 8000dba:	bf00      	nop
 8000dbc:	20000858 	.word	0x20000858
 8000dc0:	08005c50 	.word	0x08005c50
 8000dc4:	08005eb5 	.word	0x08005eb5
 8000dc8:	08005eba 	.word	0x08005eba

08000dcc <WriteInLOGc>:

void WriteInLOGc(char  str [17],char c)
{
 8000dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	static uint16_t i_log=0;
	uint8_t i;
	uint8_t j;

	char *number;
	number = itoa(LoggingData.RecordsQuantity);
 8000dd0:	4c53      	ldr	r4, [pc, #332]	; (8000f20 <WriteInLOGc+0x154>)
{
 8000dd2:	4680      	mov	r8, r0
	number = itoa(LoggingData.RecordsQuantity);
 8000dd4:	6820      	ldr	r0, [r4, #0]
{
 8000dd6:	460e      	mov	r6, r1
	number = itoa(LoggingData.RecordsQuantity);
 8000dd8:	f000 f9fc 	bl	80011d4 <itoa>


	for(i=0;number[i]!='\0';i++)
 8000ddc:	2300      	movs	r3, #0
	{
		LoggingData.Records[LoggingData.RecordsQuantity][i] = number[i];
 8000dde:	6827      	ldr	r7, [r4, #0]
 8000de0:	0139      	lsls	r1, r7, #4
 8000de2:	19ca      	adds	r2, r1, r7
 8000de4:	4422      	add	r2, r4
	for(i=0;number[i]!='\0';i++)
 8000de6:	f810 c003 	ldrb.w	ip, [r0, r3]
 8000dea:	461d      	mov	r5, r3
 8000dec:	3301      	adds	r3, #1
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	f1bc 0f00 	cmp.w	ip, #0
 8000df4:	d116      	bne.n	8000e24 <WriteInLOGc+0x58>
	}
	LoggingData.Records[LoggingData.RecordsQuantity][i] = c;
 8000df6:	19ca      	adds	r2, r1, r7
 8000df8:	18a0      	adds	r0, r4, r2
 8000dfa:	4405      	add	r5, r0
 8000dfc:	712e      	strb	r6, [r5, #4]
	i++;

	for(j=0;str[j]!='\0';i++,j++)
 8000dfe:	eba8 0803 	sub.w	r8, r8, r3
 8000e02:	f818 c003 	ldrb.w	ip, [r8, r3]
 8000e06:	b2dd      	uxtb	r5, r3
 8000e08:	f1bc 0f00 	cmp.w	ip, #0
 8000e0c:	d10e      	bne.n	8000e2c <WriteInLOGc+0x60>
			break;
		}
	}
	for (;i<16;i++)
	{
		LoggingData.Records[LoggingData.RecordsQuantity][i] = ' ';
 8000e0e:	2320      	movs	r3, #32
 8000e10:	442a      	add	r2, r5
 8000e12:	3203      	adds	r2, #3
 8000e14:	4422      	add	r2, r4
	for (;i<16;i++)
 8000e16:	2d0f      	cmp	r5, #15
 8000e18:	d815      	bhi.n	8000e46 <WriteInLOGc+0x7a>
 8000e1a:	3501      	adds	r5, #1
		LoggingData.Records[LoggingData.RecordsQuantity][i] = ' ';
 8000e1c:	f802 3f01 	strb.w	r3, [r2, #1]!
	for (;i<16;i++)
 8000e20:	b2ed      	uxtb	r5, r5
 8000e22:	e7f8      	b.n	8000e16 <WriteInLOGc+0x4a>
		LoggingData.Records[LoggingData.RecordsQuantity][i] = number[i];
 8000e24:	4415      	add	r5, r2
 8000e26:	f885 c004 	strb.w	ip, [r5, #4]
 8000e2a:	e7dc      	b.n	8000de6 <WriteInLOGc+0x1a>
		if (i<16) LoggingData.Records[LoggingData.RecordsQuantity][i] = str[j];
 8000e2c:	2d0f      	cmp	r5, #15
 8000e2e:	d805      	bhi.n	8000e3c <WriteInLOGc+0x70>
 8000e30:	1898      	adds	r0, r3, r2
 8000e32:	4420      	add	r0, r4
 8000e34:	f880 c004 	strb.w	ip, [r0, #4]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	e7e2      	b.n	8000e02 <WriteInLOGc+0x36>
			LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	4439      	add	r1, r7
 8000e40:	4421      	add	r1, r4
 8000e42:	440b      	add	r3, r1
 8000e44:	711a      	strb	r2, [r3, #4]
	}
	logDebugD("ii: ",i,0);
 8000e46:	4837      	ldr	r0, [pc, #220]	; (8000f24 <WriteInLOGc+0x158>)
 8000e48:	f004 f982 	bl	8005150 <printToBufferWithoutEndUART1>
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	4629      	mov	r1, r5
 8000e50:	4835      	ldr	r0, [pc, #212]	; (8000f28 <WriteInLOGc+0x15c>)
 8000e52:	f004 f9c1 	bl	80051d8 <printToBufferUART1D>
	LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000e56:	6823      	ldr	r3, [r4, #0]
 8000e58:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8000e5c:	4422      	add	r2, r4
 8000e5e:	442a      	add	r2, r5
 8000e60:	2500      	movs	r5, #0

	LoggingData.RecordsQuantity++;
 8000e62:	3301      	adds	r3, #1
	if (LoggingData.RecordsQuantity>=(MAX_LOG_ITEMS))
 8000e64:	2b17      	cmp	r3, #23
	LoggingData.Records[LoggingData.RecordsQuantity][i] = '\0';
 8000e66:	7115      	strb	r5, [r2, #4]
	LoggingData.RecordsQuantity++;
 8000e68:	6023      	str	r3, [r4, #0]
	if (LoggingData.RecordsQuantity>=(MAX_LOG_ITEMS))
 8000e6a:	d935      	bls.n	8000ed8 <WriteInLOGc+0x10c>
 8000e6c:	270a      	movs	r7, #10
	{
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
		{
			number = itoa(i);
			uint8_t k;
			for(k=0;number[k]!='\0';k++)
 8000e6e:	46a9      	mov	r9, r5
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
			}
			j--;
			for (;j<16;j++)
			{
				LoggingData.Records[i][j] = ' ';
 8000e70:	f04f 0a20 	mov.w	sl, #32
 8000e74:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8000f20 <WriteInLOGc+0x154>
			number = itoa(i);
 8000e78:	4628      	mov	r0, r5
 8000e7a:	f000 f9ab 	bl	80011d4 <itoa>
			for(k=0;number[k]!='\0';k++)
 8000e7e:	2300      	movs	r3, #0
 8000e80:	012a      	lsls	r2, r5, #4
				LoggingData.Records[i][k] = number[k];
 8000e82:	eb02 0c05 	add.w	ip, r2, r5
 8000e86:	44a4      	add	ip, r4
			for(k=0;number[k]!='\0';k++)
 8000e88:	f810 e003 	ldrb.w	lr, [r0, r3]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	3301      	adds	r3, #1
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	f1be 0f00 	cmp.w	lr, #0
 8000e96:	d12b      	bne.n	8000ef0 <WriteInLOGc+0x124>
			LoggingData.Records[i][k] = c;
 8000e98:	1950      	adds	r0, r2, r5
 8000e9a:	4420      	add	r0, r4
 8000e9c:	4401      	add	r1, r0
 8000e9e:	710e      	strb	r6, [r1, #4]
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 8000ea0:	eb07 1107 	add.w	r1, r7, r7, lsl #4
 8000ea4:	4421      	add	r1, r4
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 8000ea6:	eb00 0c03 	add.w	ip, r0, r3
 8000eaa:	f89c e004 	ldrb.w	lr, [ip, #4]
 8000eae:	f1be 0f00 	cmp.w	lr, #0
 8000eb2:	d121      	bne.n	8000ef8 <WriteInLOGc+0x12c>
			j--;
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	b2db      	uxtb	r3, r3
			for (;j<16;j++)
 8000eb8:	b2d9      	uxtb	r1, r3
 8000eba:	290f      	cmp	r1, #15
 8000ebc:	d929      	bls.n	8000f12 <WriteInLOGc+0x146>
			}
			LoggingData.Records[i][j] = '\0';
 8000ebe:	442a      	add	r2, r5
 8000ec0:	4422      	add	r2, r4
 8000ec2:	3501      	adds	r5, #1
 8000ec4:	4413      	add	r3, r2
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 8000ec6:	2d0e      	cmp	r5, #14
			LoggingData.Records[i][j] = '\0';
 8000ec8:	f883 9004 	strb.w	r9, [r3, #4]
 8000ecc:	f108 0811 	add.w	r8, r8, #17
 8000ed0:	f107 0701 	add.w	r7, r7, #1
		for (i=0;i<MAX_LOG_ITEMS-10;i++)
 8000ed4:	d1d0      	bne.n	8000e78 <WriteInLOGc+0xac>
		}

		LoggingData.RecordsQuantity=MAX_LOG_ITEMS-10;
 8000ed6:	6025      	str	r5, [r4, #0]
	}
	flash_write_block();
 8000ed8:	f7ff f9f4 	bl	80002c4 <flash_write_block>
	logDebugD("Q: ",LoggingData.RecordsQuantity,0);
 8000edc:	4811      	ldr	r0, [pc, #68]	; (8000f24 <WriteInLOGc+0x158>)
 8000ede:	f004 f937 	bl	8005150 <printToBufferWithoutEndUART1>
 8000ee2:	6821      	ldr	r1, [r4, #0]
 8000ee4:	2200      	movs	r2, #0
}
 8000ee6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	logDebugD("Q: ",LoggingData.RecordsQuantity,0);
 8000eea:	4810      	ldr	r0, [pc, #64]	; (8000f2c <WriteInLOGc+0x160>)
 8000eec:	f004 b974 	b.w	80051d8 <printToBufferUART1D>
				LoggingData.Records[i][k] = number[k];
 8000ef0:	4461      	add	r1, ip
 8000ef2:	f881 e004 	strb.w	lr, [r1, #4]
 8000ef6:	e7c7      	b.n	8000e88 <WriteInLOGc+0xbc>
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j];
 8000ef8:	eb01 0e03 	add.w	lr, r1, r3
				if (i>=10)
 8000efc:	2d09      	cmp	r5, #9
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j];
 8000efe:	bf8c      	ite	hi
 8000f00:	f89e e004 	ldrbhi.w	lr, [lr, #4]
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 8000f04:	f89e e005 	ldrbls.w	lr, [lr, #5]
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 8000f08:	3301      	adds	r3, #1
					LoggingData.Records[i][j] = LoggingData.Records[i+10][j+1];
 8000f0a:	f88c e004 	strb.w	lr, [ip, #4]
			for (j=k+1;LoggingData.Records[i][j]!='\0';j++)
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	e7c9      	b.n	8000ea6 <WriteInLOGc+0xda>
				LoggingData.Records[i][j] = ' ';
 8000f12:	eb08 0103 	add.w	r1, r8, r3
 8000f16:	f881 a004 	strb.w	sl, [r1, #4]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	e7cc      	b.n	8000eb8 <WriteInLOGc+0xec>
 8000f1e:	bf00      	nop
 8000f20:	20000858 	.word	0x20000858
 8000f24:	08005c50 	.word	0x08005c50
 8000f28:	08005eb5 	.word	0x08005eb5
 8000f2c:	08005eba 	.word	0x08005eba

08000f30 <delay_us>:
	logInfoD("SystemCoreClock: ", SystemCoreClock, 0);
	delay_ms(50);
}
void delay_us(uint32_t us)
{
	volatile uint32_t n = 0;
 8000f30:	2300      	movs	r3, #0
{
 8000f32:	b084      	sub	sp, #16
	if (us==1) n=1;//в тактах процесора
 8000f34:	2801      	cmp	r0, #1
	volatile uint32_t n = 0;
 8000f36:	9300      	str	r3, [sp, #0]
	if (us==1) n=1;//в тактах процесора
 8000f38:	d101      	bne.n	8000f3e <delay_us+0xe>
	if (us==2) n=2;//в тактах процесора
	if (us==3) n=18;//в тактах процесора
	if (us > 3)n=(SystemCoreClock/1000000)*(us-3);//в тактах процесора
 8000f3a:	9000      	str	r0, [sp, #0]
 8000f3c:	e005      	b.n	8000f4a <delay_us+0x1a>
	if (us==2) n=2;//в тактах процесора
 8000f3e:	2802      	cmp	r0, #2
 8000f40:	d0fb      	beq.n	8000f3a <delay_us+0xa>
	if (us==3) n=18;//в тактах процесора
 8000f42:	2803      	cmp	r0, #3
 8000f44:	d11b      	bne.n	8000f7e <delay_us+0x4e>
 8000f46:	2312      	movs	r3, #18
 8000f48:	9300      	str	r3, [sp, #0]
	//uint32_t n=(SystemCoreClock/1000000)*us;//в тактах процесора
    volatile  uint32_t n0=SysTick->VAL;// Начальное значение счётчика SysTick.
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <delay_us+0x60>)
 8000f4c:	689a      	ldr	r2, [r3, #8]
 8000f4e:	9201      	str	r2, [sp, #4]
    volatile uint32_t np=n0;  // Предыдущее значение счётчика.
 8000f50:	9a01      	ldr	r2, [sp, #4]
 8000f52:	9202      	str	r2, [sp, #8]
    volatile int32_t nc;// Текущее значение счётчика SysTick.

    // Выполняем цикл до тех пор, пока не пройдёт заданное количество тактов процессора.
    do{
    	nc=SysTick->VAL;
 8000f54:	689a      	ldr	r2, [r3, #8]
 8000f56:	9203      	str	r2, [sp, #12]
        // Проверка на переполнение, корректировка на модуль пересчёта в случае переполнения.
        if(nc>=np)
 8000f58:	9903      	ldr	r1, [sp, #12]
 8000f5a:	9a02      	ldr	r2, [sp, #8]
 8000f5c:	4291      	cmp	r1, r2
 8000f5e:	d304      	bcc.n	8000f6a <delay_us+0x3a>
            n0+=SysTick->LOAD+1;
 8000f60:	685a      	ldr	r2, [r3, #4]
 8000f62:	9901      	ldr	r1, [sp, #4]
 8000f64:	440a      	add	r2, r1
 8000f66:	3201      	adds	r2, #1
 8000f68:	9201      	str	r2, [sp, #4]
        np=nc;
 8000f6a:	9a03      	ldr	r2, [sp, #12]
 8000f6c:	9202      	str	r2, [sp, #8]
    }while(n0-nc<n);
 8000f6e:	9a01      	ldr	r2, [sp, #4]
 8000f70:	9803      	ldr	r0, [sp, #12]
 8000f72:	9900      	ldr	r1, [sp, #0]
 8000f74:	1a12      	subs	r2, r2, r0
 8000f76:	428a      	cmp	r2, r1
 8000f78:	d3ec      	bcc.n	8000f54 <delay_us+0x24>
}
 8000f7a:	b004      	add	sp, #16
 8000f7c:	4770      	bx	lr
	if (us > 3)n=(SystemCoreClock/1000000)*(us-3);//в тактах процесора
 8000f7e:	d9e4      	bls.n	8000f4a <delay_us+0x1a>
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <delay_us+0x64>)
 8000f82:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <delay_us+0x68>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	3803      	subs	r0, #3
 8000f88:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f8c:	4358      	muls	r0, r3
 8000f8e:	e7d4      	b.n	8000f3a <delay_us+0xa>
 8000f90:	e000e010 	.word	0xe000e010
 8000f94:	20000290 	.word	0x20000290
 8000f98:	000f4240 	.word	0x000f4240

08000f9c <delay_ms>:
// t1=SysTick->VAL;
// t2=SysTick->VAL;

void delay_ms(volatile uint32_t value)
{
 8000f9c:	b507      	push	{r0, r1, r2, lr}
 8000f9e:	9001      	str	r0, [sp, #4]
	while(value>0)
 8000fa0:	9b01      	ldr	r3, [sp, #4]
 8000fa2:	b913      	cbnz	r3, 8000faa <delay_ms+0xe>
	{
		delay_us(1000);
		value--;
	}
}
 8000fa4:	b003      	add	sp, #12
 8000fa6:	f85d fb04 	ldr.w	pc, [sp], #4
		delay_us(1000);
 8000faa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fae:	f7ff ffbf 	bl	8000f30 <delay_us>
		value--;
 8000fb2:	9b01      	ldr	r3, [sp, #4]
 8000fb4:	3b01      	subs	r3, #1
 8000fb6:	9301      	str	r3, [sp, #4]
 8000fb8:	e7f2      	b.n	8000fa0 <delay_ms+0x4>
	...

08000fbc <InfoToUARTBeforeStart>:
{
 8000fbc:	b538      	push	{r3, r4, r5, lr}
	logInfoD("CRC(Calibration) =",CalibrationData.CRC_data,0);
 8000fbe:	4c68      	ldr	r4, [pc, #416]	; (8001160 <InfoToUARTBeforeStart+0x1a4>)
 8000fc0:	4d68      	ldr	r5, [pc, #416]	; (8001164 <InfoToUARTBeforeStart+0x1a8>)
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	f004 f8c4 	bl	8005150 <printToBufferWithoutEndUART1>
 8000fc8:	6829      	ldr	r1, [r5, #0]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	4866      	ldr	r0, [pc, #408]	; (8001168 <InfoToUARTBeforeStart+0x1ac>)
 8000fce:	f004 f903 	bl	80051d8 <printToBufferUART1D>
	logInfoD("Calibration0ValueForCurrent =",CalibrationData.Calibration0ValueForCurrent ,0);
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	f004 f8bc 	bl	8005150 <printToBufferWithoutEndUART1>
 8000fd8:	68a9      	ldr	r1, [r5, #8]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	4863      	ldr	r0, [pc, #396]	; (800116c <InfoToUARTBeforeStart+0x1b0>)
 8000fde:	f004 f8fb 	bl	80051d8 <printToBufferUART1D>
	logInfoD("Calibration0ValueForCurrent1 =",CalibrationData.Calibration0ValueForCurrent1 ,0);
 8000fe2:	4620      	mov	r0, r4
 8000fe4:	f004 f8b4 	bl	8005150 <printToBufferWithoutEndUART1>
 8000fe8:	6929      	ldr	r1, [r5, #16]
 8000fea:	2200      	movs	r2, #0
 8000fec:	4860      	ldr	r0, [pc, #384]	; (8001170 <InfoToUARTBeforeStart+0x1b4>)
 8000fee:	f004 f8f3 	bl	80051d8 <printToBufferUART1D>
	logInfoD("CalibrationValueForCurrent_x1 =",CalibrationData.CalibrationValueForCurrent_x1 ,0);
 8000ff2:	4620      	mov	r0, r4
 8000ff4:	f004 f8ac 	bl	8005150 <printToBufferWithoutEndUART1>
 8000ff8:	69a9      	ldr	r1, [r5, #24]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	485d      	ldr	r0, [pc, #372]	; (8001174 <InfoToUARTBeforeStart+0x1b8>)
 8000ffe:	f004 f8eb 	bl	80051d8 <printToBufferUART1D>
	logInfoD("CalibrationValueForCurrent_x50 =",CalibrationData.CalibrationValueForCurrent_x50 ,0);
 8001002:	4620      	mov	r0, r4
 8001004:	f004 f8a4 	bl	8005150 <printToBufferWithoutEndUART1>
 8001008:	6a29      	ldr	r1, [r5, #32]
 800100a:	2200      	movs	r2, #0
 800100c:	485a      	ldr	r0, [pc, #360]	; (8001178 <InfoToUARTBeforeStart+0x1bc>)
 800100e:	f004 f8e3 	bl	80051d8 <printToBufferUART1D>
	logInfoD("CalibrationValueForTemperature =",CalibrationData.CalibrationValueForTemperature ,0);
 8001012:	4620      	mov	r0, r4
 8001014:	f004 f89c 	bl	8005150 <printToBufferWithoutEndUART1>
 8001018:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800101a:	2200      	movs	r2, #0
 800101c:	4857      	ldr	r0, [pc, #348]	; (800117c <InfoToUARTBeforeStart+0x1c0>)
 800101e:	f004 f8db 	bl	80051d8 <printToBufferUART1D>
	logInfoD("CalibrationValueForU_OUT =",CalibrationData.CalibrationValueForU_OUT ,0);
 8001022:	4620      	mov	r0, r4
 8001024:	f004 f894 	bl	8005150 <printToBufferWithoutEndUART1>
 8001028:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800102a:	2200      	movs	r2, #0
 800102c:	4854      	ldr	r0, [pc, #336]	; (8001180 <InfoToUARTBeforeStart+0x1c4>)
 800102e:	f004 f8d3 	bl	80051d8 <printToBufferUART1D>
	logInfoD("CalibrationValueForVoltage2 =",CalibrationData.CalibrationValueForVoltage2 ,0);
 8001032:	4620      	mov	r0, r4
 8001034:	f004 f88c 	bl	8005150 <printToBufferWithoutEndUART1>
 8001038:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800103a:	2200      	movs	r2, #0
 800103c:	4851      	ldr	r0, [pc, #324]	; (8001184 <InfoToUARTBeforeStart+0x1c8>)
 800103e:	f004 f8cb 	bl	80051d8 <printToBufferUART1D>
	logInfoD("ResistanceComp_Ishunt_Wires =",CalibrationData.ResistanceComp_Ishunt_Wires ,0) ;
 8001042:	4620      	mov	r0, r4
 8001044:	f004 f884 	bl	8005150 <printToBufferWithoutEndUART1>
 8001048:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800104a:	2200      	movs	r2, #0
 800104c:	484e      	ldr	r0, [pc, #312]	; (8001188 <InfoToUARTBeforeStart+0x1cc>)
 800104e:	f004 f8c3 	bl	80051d8 <printToBufferUART1D>
	logInfoD("ResistanceComp_MOSFET =",CalibrationData.ResistanceComp_MOSFET ,0) ;
 8001052:	4620      	mov	r0, r4
 8001054:	f004 f87c 	bl	8005150 <printToBufferWithoutEndUART1>
 8001058:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800105a:	2200      	movs	r2, #0
 800105c:	484b      	ldr	r0, [pc, #300]	; (800118c <InfoToUARTBeforeStart+0x1d0>)
	logInfoD("CRC(SettingsData) =",SettingsData.CRC_data,0);
 800105e:	4d4c      	ldr	r5, [pc, #304]	; (8001190 <InfoToUARTBeforeStart+0x1d4>)
	logInfoD("ResistanceComp_MOSFET =",CalibrationData.ResistanceComp_MOSFET ,0) ;
 8001060:	f004 f8ba 	bl	80051d8 <printToBufferUART1D>
	delay_ms(50);
 8001064:	2032      	movs	r0, #50	; 0x32
 8001066:	f7ff ff99 	bl	8000f9c <delay_ms>
	logInfoD("CRC(SettingsData) =",SettingsData.CRC_data,0);
 800106a:	4620      	mov	r0, r4
 800106c:	f004 f870 	bl	8005150 <printToBufferWithoutEndUART1>
 8001070:	6829      	ldr	r1, [r5, #0]
 8001072:	2200      	movs	r2, #0
 8001074:	4847      	ldr	r0, [pc, #284]	; (8001194 <InfoToUARTBeforeStart+0x1d8>)
 8001076:	f004 f8af 	bl	80051d8 <printToBufferUART1D>
	logInfoD("Option1(menu position) =",SettingsData.Option1 ,0);
 800107a:	4620      	mov	r0, r4
 800107c:	f004 f868 	bl	8005150 <printToBufferWithoutEndUART1>
 8001080:	68a9      	ldr	r1, [r5, #8]
 8001082:	2200      	movs	r2, #0
 8001084:	4844      	ldr	r0, [pc, #272]	; (8001198 <InfoToUARTBeforeStart+0x1dc>)
 8001086:	f004 f8a7 	bl	80051d8 <printToBufferUART1D>
	logInfoD("ChargeTime =",SettingsData.ChargeTime ,0);
 800108a:	4620      	mov	r0, r4
 800108c:	f004 f860 	bl	8005150 <printToBufferWithoutEndUART1>
 8001090:	6929      	ldr	r1, [r5, #16]
 8001092:	2200      	movs	r2, #0
 8001094:	4841      	ldr	r0, [pc, #260]	; (800119c <InfoToUARTBeforeStart+0x1e0>)
 8001096:	f004 f89f 	bl	80051d8 <printToBufferUART1D>
	logInfoD("LowVoltage =",SettingsData.LowVoltage ,0);
 800109a:	4620      	mov	r0, r4
 800109c:	f004 f858 	bl	8005150 <printToBufferWithoutEndUART1>
 80010a0:	69a9      	ldr	r1, [r5, #24]
 80010a2:	2200      	movs	r2, #0
 80010a4:	483e      	ldr	r0, [pc, #248]	; (80011a0 <InfoToUARTBeforeStart+0x1e4>)
 80010a6:	f004 f897 	bl	80051d8 <printToBufferUART1D>
	logInfoD("MaxVoltage =",SettingsData.MaxVoltage ,0);
 80010aa:	4620      	mov	r0, r4
 80010ac:	f004 f850 	bl	8005150 <printToBufferWithoutEndUART1>
 80010b0:	6a29      	ldr	r1, [r5, #32]
 80010b2:	2200      	movs	r2, #0
 80010b4:	483b      	ldr	r0, [pc, #236]	; (80011a4 <InfoToUARTBeforeStart+0x1e8>)
 80010b6:	f004 f88f 	bl	80051d8 <printToBufferUART1D>
	logInfoD("ChargeAdapt =",SettingsData.ChargeAdapt ,0);
 80010ba:	4620      	mov	r0, r4
 80010bc:	f004 f848 	bl	8005150 <printToBufferWithoutEndUART1>
 80010c0:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80010c2:	2200      	movs	r2, #0
 80010c4:	4838      	ldr	r0, [pc, #224]	; (80011a8 <InfoToUARTBeforeStart+0x1ec>)
 80010c6:	f004 f887 	bl	80051d8 <printToBufferUART1D>
	logInfoD("Swing_Chrg_time =",SettingsData.Swing_Chrg_time ,0);
 80010ca:	4620      	mov	r0, r4
 80010cc:	f004 f840 	bl	8005150 <printToBufferWithoutEndUART1>
 80010d0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80010d2:	2200      	movs	r2, #0
 80010d4:	4835      	ldr	r0, [pc, #212]	; (80011ac <InfoToUARTBeforeStart+0x1f0>)
 80010d6:	f004 f87f 	bl	80051d8 <printToBufferUART1D>
	logInfoD("Swing_DChrg_time =",SettingsData.Swing_DChrg_time ,0);
 80010da:	4620      	mov	r0, r4
 80010dc:	f004 f838 	bl	8005150 <printToBufferWithoutEndUART1>
 80010e0:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80010e2:	2200      	movs	r2, #0
 80010e4:	4832      	ldr	r0, [pc, #200]	; (80011b0 <InfoToUARTBeforeStart+0x1f4>)
 80010e6:	f004 f877 	bl	80051d8 <printToBufferUART1D>
	logInfoD("Option2(OUT after powerUp) =",SettingsData.Option2 ,0);
 80010ea:	4620      	mov	r0, r4
 80010ec:	f004 f830 	bl	8005150 <printToBufferWithoutEndUART1>
 80010f0:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80010f2:	2200      	movs	r2, #0
 80010f4:	482f      	ldr	r0, [pc, #188]	; (80011b4 <InfoToUARTBeforeStart+0x1f8>)
 80010f6:	f004 f86f 	bl	80051d8 <printToBufferUART1D>
	logInfoD("CRC(SaveDataWhenPowerOff) =",SaveDataWhenPowerOff.CRC_data,0);
 80010fa:	4d2f      	ldr	r5, [pc, #188]	; (80011b8 <InfoToUARTBeforeStart+0x1fc>)
	delay_ms(50);
 80010fc:	2032      	movs	r0, #50	; 0x32
 80010fe:	f7ff ff4d 	bl	8000f9c <delay_ms>
	logInfoD("CRC(SaveDataWhenPowerOff) =",SaveDataWhenPowerOff.CRC_data,0);
 8001102:	4620      	mov	r0, r4
 8001104:	f004 f824 	bl	8005150 <printToBufferWithoutEndUART1>
 8001108:	6829      	ldr	r1, [r5, #0]
 800110a:	2200      	movs	r2, #0
 800110c:	482b      	ldr	r0, [pc, #172]	; (80011bc <InfoToUARTBeforeStart+0x200>)
 800110e:	f004 f863 	bl	80051d8 <printToBufferUART1D>
	logInfoD("BatteryCapacityDischargePreviousValue =",SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue ,0);
 8001112:	4620      	mov	r0, r4
 8001114:	f004 f81c 	bl	8005150 <printToBufferWithoutEndUART1>
 8001118:	68a9      	ldr	r1, [r5, #8]
 800111a:	2200      	movs	r2, #0
 800111c:	4828      	ldr	r0, [pc, #160]	; (80011c0 <InfoToUARTBeforeStart+0x204>)
 800111e:	f004 f85b 	bl	80051d8 <printToBufferUART1D>
	logInfoD("BatteryCapacityDischargeCurrent =",SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent ,0);
 8001122:	4620      	mov	r0, r4
 8001124:	f004 f814 	bl	8005150 <printToBufferWithoutEndUART1>
 8001128:	6929      	ldr	r1, [r5, #16]
 800112a:	2200      	movs	r2, #0
 800112c:	4825      	ldr	r0, [pc, #148]	; (80011c4 <InfoToUARTBeforeStart+0x208>)
 800112e:	f004 f853 	bl	80051d8 <printToBufferUART1D>
	logInfoD("OutState = ",SaveDataWhenPowerOff.OutState ,0);
 8001132:	4620      	mov	r0, r4
 8001134:	f004 f80c 	bl	8005150 <printToBufferWithoutEndUART1>
 8001138:	69a9      	ldr	r1, [r5, #24]
 800113a:	2200      	movs	r2, #0
 800113c:	4822      	ldr	r0, [pc, #136]	; (80011c8 <InfoToUARTBeforeStart+0x20c>)
 800113e:	f004 f84b 	bl	80051d8 <printToBufferUART1D>
	logInfoD("SystemCoreClock: ", SystemCoreClock, 0);
 8001142:	4620      	mov	r0, r4
 8001144:	f004 f804 	bl	8005150 <printToBufferWithoutEndUART1>
 8001148:	4b20      	ldr	r3, [pc, #128]	; (80011cc <InfoToUARTBeforeStart+0x210>)
 800114a:	4821      	ldr	r0, [pc, #132]	; (80011d0 <InfoToUARTBeforeStart+0x214>)
 800114c:	6819      	ldr	r1, [r3, #0]
 800114e:	2200      	movs	r2, #0
 8001150:	f004 f842 	bl	80051d8 <printToBufferUART1D>
}
 8001154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delay_ms(50);
 8001158:	2032      	movs	r0, #50	; 0x32
 800115a:	f7ff bf1f 	b.w	8000f9c <delay_ms>
 800115e:	bf00      	nop
 8001160:	08005c65 	.word	0x08005c65
 8001164:	20000004 	.word	0x20000004
 8001168:	08005c6c 	.word	0x08005c6c
 800116c:	08005c7f 	.word	0x08005c7f
 8001170:	08005c9d 	.word	0x08005c9d
 8001174:	08005cbc 	.word	0x08005cbc
 8001178:	08005cdc 	.word	0x08005cdc
 800117c:	08005cfd 	.word	0x08005cfd
 8001180:	08005d1e 	.word	0x08005d1e
 8001184:	08005d39 	.word	0x08005d39
 8001188:	08005d57 	.word	0x08005d57
 800118c:	08005d75 	.word	0x08005d75
 8001190:	20000154 	.word	0x20000154
 8001194:	08005d8d 	.word	0x08005d8d
 8001198:	08005da1 	.word	0x08005da1
 800119c:	08005dba 	.word	0x08005dba
 80011a0:	08005dc7 	.word	0x08005dc7
 80011a4:	08005dd4 	.word	0x08005dd4
 80011a8:	08005de1 	.word	0x08005de1
 80011ac:	08005def 	.word	0x08005def
 80011b0:	08005e01 	.word	0x08005e01
 80011b4:	08005e14 	.word	0x08005e14
 80011b8:	200000f4 	.word	0x200000f4
 80011bc:	08005e31 	.word	0x08005e31
 80011c0:	08005e4d 	.word	0x08005e4d
 80011c4:	08005e75 	.word	0x08005e75
 80011c8:	08005e97 	.word	0x08005e97
 80011cc:	20000290 	.word	0x20000290
 80011d0:	08005ea3 	.word	0x08005ea3

080011d4 <itoa>:
#include "Lib.h"
char * itoa(int32_t n)
{
 80011d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80011d6:	2200      	movs	r2, #0
	static char s1[16];
     if ((sign = n) < 0)
         n = -n;
     i = 0;
     do {
         s[i++] = n % 10 + '0';
 80011d8:	260a      	movs	r6, #10
 80011da:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
 80011de:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
 80011e2:	ad04      	add	r5, sp, #16
 80011e4:	b2d4      	uxtb	r4, r2
 80011e6:	442a      	add	r2, r5
 80011e8:	fb91 f5f6 	sdiv	r5, r1, r6
 80011ec:	fb06 1115 	mls	r1, r6, r5, r1
 80011f0:	1c63      	adds	r3, r4, #1
 80011f2:	3130      	adds	r1, #48	; 0x30
 80011f4:	f802 1c10 	strb.w	r1, [r2, #-16]
 80011f8:	b25b      	sxtb	r3, r3
     } while ((n /= 10) > 0);
 80011fa:	1e29      	subs	r1, r5, #0
 80011fc:	461a      	mov	r2, r3
 80011fe:	dcf0      	bgt.n	80011e2 <itoa+0xe>
     if (sign < 0)
 8001200:	2800      	cmp	r0, #0
 8001202:	da06      	bge.n	8001212 <itoa+0x3e>
         s[i++] = '-';
 8001204:	a904      	add	r1, sp, #16
 8001206:	440a      	add	r2, r1
 8001208:	212d      	movs	r1, #45	; 0x2d
 800120a:	1ca3      	adds	r3, r4, #2
 800120c:	f802 1c10 	strb.w	r1, [r2, #-16]
 8001210:	b25b      	sxtb	r3, r3
     s[i] = '\0';
 8001212:	2200      	movs	r2, #0
 8001214:	a904      	add	r1, sp, #16
 8001216:	4419      	add	r1, r3
 8001218:	4c0a      	ldr	r4, [pc, #40]	; (8001244 <itoa+0x70>)
 800121a:	f801 2c10 	strb.w	r2, [r1, #-16]
 800121e:	b2d0      	uxtb	r0, r2
 8001220:	1a19      	subs	r1, r3, r0

     k=0;
     while (i)
 8001222:	4293      	cmp	r3, r2
 8001224:	b249      	sxtb	r1, r1
 8001226:	d104      	bne.n	8001232 <itoa+0x5e>
     {
    	s1[k]=s[i-1];
    	i--;
    	k++;
     }
     s1[k] = '\0';
 8001228:	2200      	movs	r2, #0
     return s1;
}
 800122a:	4806      	ldr	r0, [pc, #24]	; (8001244 <itoa+0x70>)
     s1[k] = '\0';
 800122c:	54e2      	strb	r2, [r4, r3]
}
 800122e:	b004      	add	sp, #16
 8001230:	bd70      	pop	{r4, r5, r6, pc}
    	s1[k]=s[i-1];
 8001232:	ad04      	add	r5, sp, #16
 8001234:	4429      	add	r1, r5
 8001236:	f811 1c11 	ldrb.w	r1, [r1, #-17]
 800123a:	54a1      	strb	r1, [r4, r2]
    	k++;
 800123c:	1c42      	adds	r2, r0, #1
 800123e:	b252      	sxtb	r2, r2
 8001240:	e7ed      	b.n	800121e <itoa+0x4a>
 8001242:	bf00      	nop
 8001244:	20000744 	.word	0x20000744

08001248 <itoaP>:

char * itoaP(int32_t n,char *s1)
{
 8001248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124a:	2300      	movs	r3, #0

     if ((sign = n) < 0)
         n = -n;
     i = 0;
     do {
         s[i++] = n % 10 + '0';
 800124c:	270a      	movs	r7, #10
 800124e:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
{
 8001252:	b085      	sub	sp, #20
 8001254:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
         s[i++] = n % 10 + '0';
 8001258:	ae04      	add	r6, sp, #16
 800125a:	b2dd      	uxtb	r5, r3
 800125c:	4433      	add	r3, r6
 800125e:	fb94 f6f7 	sdiv	r6, r4, r7
 8001262:	fb07 4416 	mls	r4, r7, r6, r4
 8001266:	1c6a      	adds	r2, r5, #1
 8001268:	3430      	adds	r4, #48	; 0x30
 800126a:	f803 4c10 	strb.w	r4, [r3, #-16]
 800126e:	b252      	sxtb	r2, r2
     } while ((n /= 10) > 0);
 8001270:	1e34      	subs	r4, r6, #0
 8001272:	4613      	mov	r3, r2
 8001274:	dcf0      	bgt.n	8001258 <itoaP+0x10>
     if (sign < 0)
 8001276:	2800      	cmp	r0, #0
 8001278:	da06      	bge.n	8001288 <itoaP+0x40>
         s[i++] = '-';
 800127a:	a804      	add	r0, sp, #16
 800127c:	4403      	add	r3, r0
 800127e:	202d      	movs	r0, #45	; 0x2d
 8001280:	1caa      	adds	r2, r5, #2
 8001282:	f803 0c10 	strb.w	r0, [r3, #-16]
 8001286:	b252      	sxtb	r2, r2
     s[i] = '\0';
 8001288:	2300      	movs	r3, #0
 800128a:	a804      	add	r0, sp, #16
 800128c:	4410      	add	r0, r2
 800128e:	f800 3c10 	strb.w	r3, [r0, #-16]
 8001292:	b2dd      	uxtb	r5, r3
 8001294:	1b54      	subs	r4, r2, r5

     k=0;
     while (i)
 8001296:	429a      	cmp	r2, r3
 8001298:	b264      	sxtb	r4, r4
 800129a:	eb01 0003 	add.w	r0, r1, r3
 800129e:	d104      	bne.n	80012aa <itoaP+0x62>
     {
    	s1[k]=s[i-1];
    	i--;
    	k++;
     }
     s1[k] = '\0';
 80012a0:	2300      	movs	r3, #0
 80012a2:	7003      	strb	r3, [r0, #0]
     return s1;
}
 80012a4:	4608      	mov	r0, r1
 80012a6:	b005      	add	sp, #20
 80012a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	s1[k]=s[i-1];
 80012aa:	a804      	add	r0, sp, #16
 80012ac:	4404      	add	r4, r0
 80012ae:	f814 0c11 	ldrb.w	r0, [r4, #-17]
 80012b2:	54c8      	strb	r0, [r1, r3]
    	k++;
 80012b4:	1c6b      	adds	r3, r5, #1
 80012b6:	b25b      	sxtb	r3, r3
 80012b8:	e7eb      	b.n	8001292 <itoaP+0x4a>
	...

080012bc <itoa_koma>:

char * itoa_koma(int32_t n,uint8_t koma)
{
 80012bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012be:	2300      	movs	r3, #0
    if ((sign = n) < 0)
    	n = -n;
     i = 0;
     do
     {
         s[i++] = n % 10 + '0';
 80012c0:	270a      	movs	r7, #10
 80012c2:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
{
 80012c6:	b08b      	sub	sp, #44	; 0x2c
 80012c8:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
         s[i++] = n % 10 + '0';
 80012cc:	ae0a      	add	r6, sp, #40	; 0x28
 80012ce:	b2dd      	uxtb	r5, r3
 80012d0:	4433      	add	r3, r6
 80012d2:	fb94 f6f7 	sdiv	r6, r4, r7
 80012d6:	fb07 4416 	mls	r4, r7, r6, r4
 80012da:	1c6a      	adds	r2, r5, #1
 80012dc:	3430      	adds	r4, #48	; 0x30
 80012de:	f803 4c28 	strb.w	r4, [r3, #-40]
 80012e2:	b252      	sxtb	r2, r2
     } while ((n /= 10) > 0);
 80012e4:	1e34      	subs	r4, r6, #0
 80012e6:	4613      	mov	r3, r2
 80012e8:	dcf0      	bgt.n	80012cc <itoa_koma+0x10>
     s[i] = '\0';
     if (i<=1)
 80012ea:	2a01      	cmp	r2, #1
     {
       	 s[i] = '0';
 80012ec:	bfd8      	it	le
 80012ee:	2230      	movle	r2, #48	; 0x30
 80012f0:	ac0a      	add	r4, sp, #40	; 0x28
 80012f2:	4423      	add	r3, r4
     s[i] = '\0';
 80012f4:	bfcf      	iteee	gt
 80012f6:	2400      	movgt	r4, #0
       	 s[i] = '0';
 80012f8:	f803 2c28 	strble.w	r2, [r3, #-40]
       	 i++;
 80012fc:	1caa      	addle	r2, r5, #2
 80012fe:	b252      	sxtble	r2, r2
     s[i] = '\0';
 8001300:	bfc8      	it	gt
 8001302:	f803 4c28 	strbgt.w	r4, [r3, #-40]
     }
     if (i<=2&&koma>1)
 8001306:	2a02      	cmp	r2, #2
 8001308:	dc08      	bgt.n	800131c <itoa_koma+0x60>
 800130a:	2901      	cmp	r1, #1
 800130c:	d906      	bls.n	800131c <itoa_koma+0x60>
     {
    	 s[i] = '0';
 800130e:	2430      	movs	r4, #48	; 0x30
 8001310:	ab0a      	add	r3, sp, #40	; 0x28
 8001312:	4413      	add	r3, r2
    	 i++;
 8001314:	3201      	adds	r2, #1
    	 s[i] = '0';
 8001316:	f803 4c28 	strb.w	r4, [r3, #-40]
    	 i++;
 800131a:	b252      	sxtb	r2, r2
     }
     k=0;
     j=0;
     while (j<i)
 800131c:	2400      	movs	r4, #0
     {
    	 if (k==koma)
         {
         	 sKoma[k]='.';
 800131e:	262e      	movs	r6, #46	; 0x2e
     k=0;
 8001320:	4623      	mov	r3, r4
     while (j<i)
 8001322:	b265      	sxtb	r5, r4
 8001324:	42aa      	cmp	r2, r5
 8001326:	dc0b      	bgt.n	8001340 <itoa_koma+0x84>
         }
    	 sKoma[k]=s[j];
         j++;
         k++;
      }
     if (sign < 0) sKoma[k++] = '-';
 8001328:	2800      	cmp	r0, #0
 800132a:	da06      	bge.n	800133a <itoa_koma+0x7e>
 800132c:	a90a      	add	r1, sp, #40	; 0x28
 800132e:	1c5a      	adds	r2, r3, #1
 8001330:	440b      	add	r3, r1
 8001332:	212d      	movs	r1, #45	; 0x2d
 8001334:	f803 1c14 	strb.w	r1, [r3, #-20]
 8001338:	b253      	sxtb	r3, r2
 800133a:	2200      	movs	r2, #0
 800133c:	4c12      	ldr	r4, [pc, #72]	; (8001388 <itoa_koma+0xcc>)
 800133e:	e019      	b.n	8001374 <itoa_koma+0xb8>
    	 if (k==koma)
 8001340:	428b      	cmp	r3, r1
 8001342:	461d      	mov	r5, r3
 8001344:	d105      	bne.n	8001352 <itoa_koma+0x96>
         	 sKoma[k]='.';
 8001346:	af0a      	add	r7, sp, #40	; 0x28
 8001348:	3301      	adds	r3, #1
 800134a:	443d      	add	r5, r7
 800134c:	b25b      	sxtb	r3, r3
 800134e:	f805 6c14 	strb.w	r6, [r5, #-20]
    	 sKoma[k]=s[j];
 8001352:	f81d 7004 	ldrb.w	r7, [sp, r4]
 8001356:	ad0a      	add	r5, sp, #40	; 0x28
 8001358:	441d      	add	r5, r3
         k++;
 800135a:	3301      	adds	r3, #1
    	 sKoma[k]=s[j];
 800135c:	f805 7c14 	strb.w	r7, [r5, #-20]
         k++;
 8001360:	b25b      	sxtb	r3, r3
 8001362:	3401      	adds	r4, #1
 8001364:	e7dd      	b.n	8001322 <itoa_koma+0x66>
     i=0;
     while (k)
     {
    	s1[i]=sKoma[k-1];
 8001366:	ad0a      	add	r5, sp, #40	; 0x28
 8001368:	4429      	add	r1, r5
 800136a:	f811 1c15 	ldrb.w	r1, [r1, #-21]
 800136e:	54a1      	strb	r1, [r4, r2]
    	k--;
    	i++;
 8001370:	1c42      	adds	r2, r0, #1
 8001372:	b252      	sxtb	r2, r2
 8001374:	b2d0      	uxtb	r0, r2
 8001376:	1a19      	subs	r1, r3, r0
     while (k)
 8001378:	429a      	cmp	r2, r3
 800137a:	b249      	sxtb	r1, r1
 800137c:	d1f3      	bne.n	8001366 <itoa_koma+0xaa>
     }
     s1[i] = '\0';
 800137e:	2300      	movs	r3, #0
     return s1;
}
 8001380:	4801      	ldr	r0, [pc, #4]	; (8001388 <itoa_koma+0xcc>)
     s1[i] = '\0';
 8001382:	54a3      	strb	r3, [r4, r2]
}
 8001384:	b00b      	add	sp, #44	; 0x2c
 8001386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001388:	20000754 	.word	0x20000754

0800138c <Module16>:
     s1[i] = '\0';
     return s1;
}
int16_t Module16 (int16_t value)
{
	if (value == 0) return 0;
 800138c:	2800      	cmp	r0, #0
 800138e:	d002      	beq.n	8001396 <Module16+0xa>
	if (value > 0) return value;
	if (value < 0) return (-1)*value;
 8001390:	bfdc      	itt	le
 8001392:	4240      	negle	r0, r0
 8001394:	b200      	sxthle	r0, r0
}
 8001396:	4770      	bx	lr

08001398 <strlen1>:
}

uint8_t strlen1(char string[])
{
	uint8_t i=0;
	while(string[i]!='\0')
 8001398:	2300      	movs	r3, #0
 800139a:	b2da      	uxtb	r2, r3
 800139c:	5c81      	ldrb	r1, [r0, r2]
 800139e:	3301      	adds	r3, #1
 80013a0:	2900      	cmp	r1, #0
 80013a2:	d1fa      	bne.n	800139a <strlen1+0x2>
		i++;
	return i;
}
 80013a4:	4610      	mov	r0, r2
 80013a6:	4770      	bx	lr

080013a8 <Merge2Strings>:

char * Merge2Strings(char * str1in, char * str2in, char * strout)
{
 80013a8:	b570      	push	{r4, r5, r6, lr}
	int8_t i, j;
	for (i=0; str1in[i]!='\0'; i++)
 80013aa:	2400      	movs	r4, #0
 80013ac:	b265      	sxtb	r5, r4
 80013ae:	5d43      	ldrb	r3, [r0, r5]
 80013b0:	1c66      	adds	r6, r4, #1
 80013b2:	b94b      	cbnz	r3, 80013c8 <Merge2Strings+0x20>
	{
		strout[i] = str1in[i];
	}
	for (j=0; str2in[j]!='\0'; j++,i++)
 80013b4:	b258      	sxtb	r0, r3
 80013b6:	5c0d      	ldrb	r5, [r1, r0]
 80013b8:	1918      	adds	r0, r3, r4
 80013ba:	b240      	sxtb	r0, r0
 80013bc:	1816      	adds	r6, r2, r0
 80013be:	3301      	adds	r3, #1
 80013c0:	b92d      	cbnz	r5, 80013ce <Merge2Strings+0x26>
	{
		strout[i] = str2in[j];
	}
	strout[i] = '\0';
 80013c2:	7035      	strb	r5, [r6, #0]
	return strout;
}
 80013c4:	4610      	mov	r0, r2
 80013c6:	bd70      	pop	{r4, r5, r6, pc}
		strout[i] = str1in[i];
 80013c8:	5553      	strb	r3, [r2, r5]
 80013ca:	4634      	mov	r4, r6
 80013cc:	e7ee      	b.n	80013ac <Merge2Strings+0x4>
		strout[i] = str2in[j];
 80013ce:	5415      	strb	r5, [r2, r0]
 80013d0:	e7f0      	b.n	80013b4 <Merge2Strings+0xc>

080013d2 <Merge3Strings>:
char * Merge3Strings(char * str1in, char * str2in,char * str3in, char * strout)
{
 80013d2:	b5f0      	push	{r4, r5, r6, r7, lr}
	int8_t i, j,k;
	for (i=0; str1in[i]!='\0'; i++)
 80013d4:	2700      	movs	r7, #0
 80013d6:	b27c      	sxtb	r4, r7
 80013d8:	5d05      	ldrb	r5, [r0, r4]
 80013da:	1c7e      	adds	r6, r7, #1
 80013dc:	b98d      	cbnz	r5, 8001402 <Merge3Strings+0x30>
	{
		strout[i] = str1in[i];
	}
	for (j=0; str2in[j]!='\0'; j++,i++)
 80013de:	b268      	sxtb	r0, r5
 80013e0:	197e      	adds	r6, r7, r5
 80013e2:	5c0c      	ldrb	r4, [r1, r0]
 80013e4:	b2f6      	uxtb	r6, r6
 80013e6:	b270      	sxtb	r0, r6
 80013e8:	3501      	adds	r5, #1
 80013ea:	b96c      	cbnz	r4, 8001408 <Merge3Strings+0x36>
 80013ec:	4621      	mov	r1, r4
	{
		strout[i] = str2in[j];
	}
	for (k=0; str3in[k]!='\0'; k++,i++)
 80013ee:	b248      	sxtb	r0, r1
 80013f0:	5c14      	ldrb	r4, [r2, r0]
 80013f2:	1870      	adds	r0, r6, r1
 80013f4:	b240      	sxtb	r0, r0
 80013f6:	181d      	adds	r5, r3, r0
 80013f8:	3101      	adds	r1, #1
 80013fa:	b93c      	cbnz	r4, 800140c <Merge3Strings+0x3a>
	{
		strout[i] = str3in[k];
	}
	strout[i] = '\0';
 80013fc:	702c      	strb	r4, [r5, #0]
	return strout;
}
 80013fe:	4618      	mov	r0, r3
 8001400:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strout[i] = str1in[i];
 8001402:	551d      	strb	r5, [r3, r4]
 8001404:	4637      	mov	r7, r6
 8001406:	e7e6      	b.n	80013d6 <Merge3Strings+0x4>
		strout[i] = str2in[j];
 8001408:	541c      	strb	r4, [r3, r0]
 800140a:	e7e8      	b.n	80013de <Merge3Strings+0xc>
		strout[i] = str3in[k];
 800140c:	541c      	strb	r4, [r3, r0]
 800140e:	e7ee      	b.n	80013ee <Merge3Strings+0x1c>

08001410 <ClockStringWithSec>:

char *ClockStringWithSec(uint32_t time, char *OutStr)
{
 8001410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001414:	4680      	mov	r8, r0
	int8_t i, j,k;
	char s[17];
	itoaP(time/3600,s);
 8001416:	f44f 6061 	mov.w	r0, #3600	; 0xe10
{
 800141a:	b086      	sub	sp, #24
 800141c:	460d      	mov	r5, r1
	itoaP(time/3600,s);
 800141e:	fbb8 f0f0 	udiv	r0, r8, r0
 8001422:	a901      	add	r1, sp, #4
 8001424:	f7ff ff10 	bl	8001248 <itoaP>
	i=0;
	if (strlen1(s)<2)
 8001428:	a801      	add	r0, sp, #4
 800142a:	f7ff ffb5 	bl	8001398 <strlen1>
 800142e:	2801      	cmp	r0, #1
	{
		OutStr[i] = '0';
		i++;
 8001430:	bf96      	itet	ls
 8001432:	2201      	movls	r2, #1
	i=0;
 8001434:	2200      	movhi	r2, #0
		OutStr[i] = '0';
 8001436:	2330      	movls	r3, #48	; 0x30
	i=0;
 8001438:	4614      	mov	r4, r2
		OutStr[i] = '0';
 800143a:	bf98      	it	ls
 800143c:	702b      	strbls	r3, [r5, #0]
 800143e:	b2e6      	uxtb	r6, r4
	}

	for (k=0; s[k]!='\0';k++, i++)
 8001440:	1ab3      	subs	r3, r6, r2
 8001442:	a906      	add	r1, sp, #24
 8001444:	b25b      	sxtb	r3, r3
 8001446:	440b      	add	r3, r1
 8001448:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 800144c:	192b      	adds	r3, r5, r4
 800144e:	1c74      	adds	r4, r6, #1
 8001450:	b264      	sxtb	r4, r4
 8001452:	2900      	cmp	r1, #0
 8001454:	d145      	bne.n	80014e2 <ClockStringWithSec+0xd2>
	{
		OutStr[i] = s[k];
	}

	OutStr[i] = ':';
 8001456:	223a      	movs	r2, #58	; 0x3a
 8001458:	701a      	strb	r2, [r3, #0]
	i++;
	itoaP((time/60)%60,s);
 800145a:	233c      	movs	r3, #60	; 0x3c
 800145c:	fbb8 f2f3 	udiv	r2, r8, r3
 8001460:	fbb2 f0f3 	udiv	r0, r2, r3
 8001464:	a901      	add	r1, sp, #4
 8001466:	fb03 2010 	mls	r0, r3, r0, r2
 800146a:	f7ff feed 	bl	8001248 <itoaP>
	if (strlen1(s)<2)
 800146e:	a801      	add	r0, sp, #4
 8001470:	f7ff ff92 	bl	8001398 <strlen1>
 8001474:	2801      	cmp	r0, #1
	{
		OutStr[i] = '0';
 8001476:	bf9f      	itttt	ls
 8001478:	2330      	movls	r3, #48	; 0x30
 800147a:	552b      	strbls	r3, [r5, r4]
		i++;
 800147c:	1cb4      	addls	r4, r6, #2
 800147e:	b264      	sxtbls	r4, r4
	i=0;
 8001480:	4626      	mov	r6, r4
 8001482:	b2f7      	uxtb	r7, r6
	}
	for (j=0; s[j]!='\0'; i++,j++)
 8001484:	1b3b      	subs	r3, r7, r4
 8001486:	aa06      	add	r2, sp, #24
 8001488:	b25b      	sxtb	r3, r3
 800148a:	4413      	add	r3, r2
 800148c:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8001490:	19ab      	adds	r3, r5, r6
 8001492:	1c7e      	adds	r6, r7, #1
 8001494:	b276      	sxtb	r6, r6
 8001496:	bb32      	cbnz	r2, 80014e6 <ClockStringWithSec+0xd6>
	{
		OutStr[i] = s[j];
	}

	OutStr[i] = ':';
 8001498:	223a      	movs	r2, #58	; 0x3a
 800149a:	701a      	strb	r2, [r3, #0]
	i++;

	itoaP(time%60,s);
 800149c:	233c      	movs	r3, #60	; 0x3c
 800149e:	fbb8 f0f3 	udiv	r0, r8, r3
 80014a2:	a901      	add	r1, sp, #4
 80014a4:	fb03 8010 	mls	r0, r3, r0, r8
 80014a8:	f7ff fece 	bl	8001248 <itoaP>
	if (strlen1(s)<2)
 80014ac:	a801      	add	r0, sp, #4
 80014ae:	f7ff ff73 	bl	8001398 <strlen1>
 80014b2:	2801      	cmp	r0, #1
	{
		OutStr[i] = '0';
 80014b4:	bf9c      	itt	ls
 80014b6:	2330      	movls	r3, #48	; 0x30
 80014b8:	55ab      	strbls	r3, [r5, r6]
	i=0;
 80014ba:	f04f 0300 	mov.w	r3, #0
		i++;
 80014be:	bf9c      	itt	ls
 80014c0:	1cbe      	addls	r6, r7, #2
 80014c2:	b276      	sxtbls	r6, r6
	}
	for (j=0; s[j]!='\0'; i++,j++)
 80014c4:	b25a      	sxtb	r2, r3
 80014c6:	a906      	add	r1, sp, #24
 80014c8:	440a      	add	r2, r1
 80014ca:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 80014ce:	18f2      	adds	r2, r6, r3
 80014d0:	b252      	sxtb	r2, r2
 80014d2:	18a8      	adds	r0, r5, r2
 80014d4:	3301      	adds	r3, #1
 80014d6:	b941      	cbnz	r1, 80014ea <ClockStringWithSec+0xda>
	{
		OutStr[i] = s[j];
	}

	OutStr[i] = '\0';
 80014d8:	7001      	strb	r1, [r0, #0]
	return OutStr;
}
 80014da:	4628      	mov	r0, r5
 80014dc:	b006      	add	sp, #24
 80014de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		OutStr[i] = s[k];
 80014e2:	7019      	strb	r1, [r3, #0]
 80014e4:	e7ab      	b.n	800143e <ClockStringWithSec+0x2e>
		OutStr[i] = s[j];
 80014e6:	701a      	strb	r2, [r3, #0]
 80014e8:	e7cb      	b.n	8001482 <ClockStringWithSec+0x72>
		OutStr[i] = s[j];
 80014ea:	54a9      	strb	r1, [r5, r2]
 80014ec:	e7ea      	b.n	80014c4 <ClockStringWithSec+0xb4>

080014ee <ClockStringNoSec>:

char *ClockStringNoSec(uint32_t time, char *OutStr)
{
 80014ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f0:	4607      	mov	r7, r0

	int8_t i, j,k;
	char s[17];
	itoaP(time/3600,s);
 80014f2:	f44f 6061 	mov.w	r0, #3600	; 0xe10
{
 80014f6:	b087      	sub	sp, #28
 80014f8:	460d      	mov	r5, r1
	itoaP(time/3600,s);
 80014fa:	fbb7 f0f0 	udiv	r0, r7, r0
 80014fe:	a901      	add	r1, sp, #4
 8001500:	f7ff fea2 	bl	8001248 <itoaP>
	i=0;
	if (strlen1(s)<2)
 8001504:	a801      	add	r0, sp, #4
 8001506:	f7ff ff47 	bl	8001398 <strlen1>
 800150a:	2801      	cmp	r0, #1
	{
		OutStr[i] = '0';
		i++;
 800150c:	bf96      	itet	ls
 800150e:	2201      	movls	r2, #1
	i=0;
 8001510:	2200      	movhi	r2, #0
		OutStr[i] = '0';
 8001512:	2330      	movls	r3, #48	; 0x30
	i=0;
 8001514:	4614      	mov	r4, r2
		OutStr[i] = '0';
 8001516:	bf98      	it	ls
 8001518:	702b      	strbls	r3, [r5, #0]
 800151a:	b2e6      	uxtb	r6, r4
	}

	for (k=0; s[k]!='\0';k++, i++)
 800151c:	1ab3      	subs	r3, r6, r2
 800151e:	a906      	add	r1, sp, #24
 8001520:	b25b      	sxtb	r3, r3
 8001522:	440b      	add	r3, r1
 8001524:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 8001528:	192b      	adds	r3, r5, r4
 800152a:	1c74      	adds	r4, r6, #1
 800152c:	b264      	sxtb	r4, r4
 800152e:	bb29      	cbnz	r1, 800157c <ClockStringNoSec+0x8e>
	{
		OutStr[i] = s[k];
	}

	OutStr[i] = ':';
 8001530:	223a      	movs	r2, #58	; 0x3a
 8001532:	701a      	strb	r2, [r3, #0]
	i++;
	itoaP((time/60)%60,s);
 8001534:	233c      	movs	r3, #60	; 0x3c
 8001536:	fbb7 f7f3 	udiv	r7, r7, r3
 800153a:	fbb7 f0f3 	udiv	r0, r7, r3
 800153e:	a901      	add	r1, sp, #4
 8001540:	fb03 7010 	mls	r0, r3, r0, r7
 8001544:	f7ff fe80 	bl	8001248 <itoaP>
	if (strlen1(s)<2)
 8001548:	a801      	add	r0, sp, #4
 800154a:	f7ff ff25 	bl	8001398 <strlen1>
 800154e:	2801      	cmp	r0, #1
	{
		OutStr[i] = '0';
 8001550:	bf9c      	itt	ls
 8001552:	2330      	movls	r3, #48	; 0x30
 8001554:	552b      	strbls	r3, [r5, r4]
	i=0;
 8001556:	f04f 0300 	mov.w	r3, #0
		i++;
 800155a:	bf9c      	itt	ls
 800155c:	1cb4      	addls	r4, r6, #2
 800155e:	b264      	sxtbls	r4, r4
	}
	for (j=0; s[j]!='\0'; i++,j++)
 8001560:	b25a      	sxtb	r2, r3
 8001562:	a906      	add	r1, sp, #24
 8001564:	440a      	add	r2, r1
 8001566:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 800156a:	18e2      	adds	r2, r4, r3
 800156c:	b252      	sxtb	r2, r2
 800156e:	18a8      	adds	r0, r5, r2
 8001570:	3301      	adds	r3, #1
 8001572:	b929      	cbnz	r1, 8001580 <ClockStringNoSec+0x92>
	{
		OutStr[i] = s[j];
	}


	OutStr[i] = '\0';
 8001574:	7001      	strb	r1, [r0, #0]
	return OutStr;
}
 8001576:	4628      	mov	r0, r5
 8001578:	b007      	add	sp, #28
 800157a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		OutStr[i] = s[k];
 800157c:	7019      	strb	r1, [r3, #0]
 800157e:	e7cc      	b.n	800151a <ClockStringNoSec+0x2c>
		OutStr[i] = s[j];
 8001580:	54a9      	strb	r1, [r5, r2]
 8001582:	e7ed      	b.n	8001560 <ClockStringNoSec+0x72>

08001584 <middle_of_3Imax1>:


int32_t middle_of_3Imax1(int32_t value)
{
 8001584:	4602      	mov	r2, r0
   static int32_t InputValueI1[3]={0,0,0};
   int32_t middle,a,b,c;
   InputValueI1[2] = InputValueI1[1];
 8001586:	490d      	ldr	r1, [pc, #52]	; (80015bc <middle_of_3Imax1+0x38>)
 8001588:	684b      	ldr	r3, [r1, #4]
   InputValueI1[1] = InputValueI1[0];
 800158a:	6808      	ldr	r0, [r1, #0]
   InputValueI1[2] = InputValueI1[1];
 800158c:	608b      	str	r3, [r1, #8]
   InputValueI1[0] = value;
   a = InputValueI1[2];
   b = InputValueI1[1];
   c = InputValueI1[0];
   if ((a <= b) && (a <= c)){
 800158e:	4283      	cmp	r3, r0
   InputValueI1[0] = value;
 8001590:	e9c1 2000 	strd	r2, r0, [r1]
   if ((a <= b) && (a <= c)){
 8001594:	dc07      	bgt.n	80015a6 <middle_of_3Imax1+0x22>
 8001596:	4293      	cmp	r3, r2
 8001598:	dc03      	bgt.n	80015a2 <middle_of_3Imax1+0x1e>
      middle = (b <= c) ? b : c;
 800159a:	4290      	cmp	r0, r2
 800159c:	bfa8      	it	ge
 800159e:	4610      	movge	r0, r2
 80015a0:	4770      	bx	lr
   }
   else{
      if ((b <= a) && (b <= c)){
 80015a2:	4283      	cmp	r3, r0
 80015a4:	db06      	blt.n	80015b4 <middle_of_3Imax1+0x30>
 80015a6:	4290      	cmp	r0, r2
 80015a8:	dc04      	bgt.n	80015b4 <middle_of_3Imax1+0x30>
         middle = (a <= c) ? a : c;
 80015aa:	4293      	cmp	r3, r2
 80015ac:	bfa8      	it	ge
 80015ae:	4613      	movge	r3, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	4770      	bx	lr
      }
      else{
         middle = (a <= b) ? a : b;
 80015b4:	4298      	cmp	r0, r3
 80015b6:	bfa8      	it	ge
 80015b8:	4618      	movge	r0, r3
      }
   }

   return middle;
}
 80015ba:	4770      	bx	lr
 80015bc:	20000720 	.word	0x20000720

080015c0 <middle_of_3Imax2>:

int32_t middle_of_3Imax2(int32_t value)
{
 80015c0:	4602      	mov	r2, r0
   static int32_t InputValueI2[3]={0,0,0};
   int32_t middle,a,b,c;
   InputValueI2[2] = InputValueI2[1];
 80015c2:	490d      	ldr	r1, [pc, #52]	; (80015f8 <middle_of_3Imax2+0x38>)
 80015c4:	684b      	ldr	r3, [r1, #4]
   InputValueI2[1] = InputValueI2[0];
 80015c6:	6808      	ldr	r0, [r1, #0]
   InputValueI2[2] = InputValueI2[1];
 80015c8:	608b      	str	r3, [r1, #8]
   InputValueI2[0] = value;
   a = InputValueI2[2];
   b = InputValueI2[1];
   c = InputValueI2[0];
   if ((a <= b) && (a <= c)){
 80015ca:	4283      	cmp	r3, r0
   InputValueI2[0] = value;
 80015cc:	e9c1 2000 	strd	r2, r0, [r1]
   if ((a <= b) && (a <= c)){
 80015d0:	dc07      	bgt.n	80015e2 <middle_of_3Imax2+0x22>
 80015d2:	4293      	cmp	r3, r2
 80015d4:	dc03      	bgt.n	80015de <middle_of_3Imax2+0x1e>
      middle = (b <= c) ? b : c;
 80015d6:	4290      	cmp	r0, r2
 80015d8:	bfa8      	it	ge
 80015da:	4610      	movge	r0, r2
 80015dc:	4770      	bx	lr
   }
   else{
      if ((b <= a) && (b <= c)){
 80015de:	4283      	cmp	r3, r0
 80015e0:	db06      	blt.n	80015f0 <middle_of_3Imax2+0x30>
 80015e2:	4290      	cmp	r0, r2
 80015e4:	dc04      	bgt.n	80015f0 <middle_of_3Imax2+0x30>
         middle = (a <= c) ? a : c;
 80015e6:	4293      	cmp	r3, r2
 80015e8:	bfa8      	it	ge
 80015ea:	4613      	movge	r3, r2
 80015ec:	4618      	mov	r0, r3
 80015ee:	4770      	bx	lr
      }
      else{
         middle = (a <= b) ? a : b;
 80015f0:	4298      	cmp	r0, r3
 80015f2:	bfa8      	it	ge
 80015f4:	4618      	movge	r0, r3
      }
   }

   return middle;
}
 80015f6:	4770      	bx	lr
 80015f8:	2000072c 	.word	0x2000072c

080015fc <middle_of_3Umax1>:

int32_t middle_of_3Umax1(int32_t value)
{
 80015fc:	4602      	mov	r2, r0
   static int32_t InputValueU1[3]={0,0,0};
   int32_t middle,a,b,c;
   InputValueU1[2] = InputValueU1[1];
 80015fe:	490d      	ldr	r1, [pc, #52]	; (8001634 <middle_of_3Umax1+0x38>)
 8001600:	684b      	ldr	r3, [r1, #4]
   InputValueU1[1] = InputValueU1[0];
 8001602:	6808      	ldr	r0, [r1, #0]
   InputValueU1[2] = InputValueU1[1];
 8001604:	608b      	str	r3, [r1, #8]
   InputValueU1[0] = value;
   a = InputValueU1[2];
   b = InputValueU1[1];
   c = InputValueU1[0];
   if ((a <= b) && (a <= c)){
 8001606:	4283      	cmp	r3, r0
   InputValueU1[0] = value;
 8001608:	e9c1 2000 	strd	r2, r0, [r1]
   if ((a <= b) && (a <= c)){
 800160c:	dc07      	bgt.n	800161e <middle_of_3Umax1+0x22>
 800160e:	4293      	cmp	r3, r2
 8001610:	dc03      	bgt.n	800161a <middle_of_3Umax1+0x1e>
      middle = (b <= c) ? b : c;
 8001612:	4290      	cmp	r0, r2
 8001614:	bfa8      	it	ge
 8001616:	4610      	movge	r0, r2
 8001618:	4770      	bx	lr
   }
   else{
      if ((b <= a) && (b <= c)){
 800161a:	4283      	cmp	r3, r0
 800161c:	db06      	blt.n	800162c <middle_of_3Umax1+0x30>
 800161e:	4290      	cmp	r0, r2
 8001620:	dc04      	bgt.n	800162c <middle_of_3Umax1+0x30>
         middle = (a <= c) ? a : c;
 8001622:	4293      	cmp	r3, r2
 8001624:	bfa8      	it	ge
 8001626:	4613      	movge	r3, r2
 8001628:	4618      	mov	r0, r3
 800162a:	4770      	bx	lr
      }
      else{
         middle = (a <= b) ? a : b;
 800162c:	4298      	cmp	r0, r3
 800162e:	bfa8      	it	ge
 8001630:	4618      	movge	r0, r3
      }
   }

   return middle;
}
 8001632:	4770      	bx	lr
 8001634:	20000738 	.word	0x20000738

08001638 <RunningAverageI1>:
	int8_t k = 1;  // 1 - 10
	newValue = newValue*10;
	static int32_t filteredlValueI1 = 0;
	filteredlValueI1 += (newValue - filteredlValueI1) * k;
	return filteredlValueI1/10;
}
 8001638:	4770      	bx	lr

0800163a <RunningAverageI2>:
	int8_t k = 1;  // 1 - 10
	newValue = newValue*10;
	static int32_t filteredlValueI2 = 0;
	filteredlValueI2 += (newValue - filteredlValueI2) * k;
	return filteredlValueI2/10;
}
 800163a:	4770      	bx	lr

0800163c <RunningAverageU1>:
	int8_t k = 1;  // 1 - 10
	newValue = newValue*10;
	static int32_t filteredlValueU1 = 0;
	filteredlValueU1 += (newValue - filteredlValueU1) * k;
	return filteredlValueU1/10;
}
 800163c:	4770      	bx	lr
	...

08001640 <Menu_GetCurrentMenu>:


Menu_Item_t* Menu_GetCurrentMenu(void)
{
 return CurrentMenuItem;
}
 8001640:	4b01      	ldr	r3, [pc, #4]	; (8001648 <Menu_GetCurrentMenu+0x8>)
 8001642:	6818      	ldr	r0, [r3, #0]
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	2000024c 	.word	0x2000024c

0800164c <Menu_Navigate>:

void Menu_Navigate(Menu_Item_t* const NewMenu)
{
 if ((NewMenu == &NULL_MENU) || (NewMenu == NULL))
 800164c:	4b09      	ldr	r3, [pc, #36]	; (8001674 <Menu_Navigate+0x28>)
{
 800164e:	b510      	push	{r4, lr}
 if ((NewMenu == &NULL_MENU) || (NewMenu == NULL))
 8001650:	4298      	cmp	r0, r3
 8001652:	d00d      	beq.n	8001670 <Menu_Navigate+0x24>
 8001654:	b160      	cbz	r0, 8001670 <Menu_Navigate+0x24>
  return;

 CurrentMenuItem = NewMenu;

 if (MenuWriteFunc)
 8001656:	4a08      	ldr	r2, [pc, #32]	; (8001678 <Menu_Navigate+0x2c>)
 CurrentMenuItem = NewMenu;
 8001658:	4c08      	ldr	r4, [pc, #32]	; (800167c <Menu_Navigate+0x30>)
 if (MenuWriteFunc)
 800165a:	6812      	ldr	r2, [r2, #0]
 CurrentMenuItem = NewMenu;
 800165c:	6020      	str	r0, [r4, #0]
 if (MenuWriteFunc)
 800165e:	b10a      	cbz	r2, 8001664 <Menu_Navigate+0x18>
  MenuWriteFunc(CurrentMenuItem->Text);
 8001660:	3018      	adds	r0, #24
 8001662:	4790      	blx	r2

 void (*EnterCallback)(void) = CurrentMenuItem->EnterCallback;
 8001664:	6823      	ldr	r3, [r4, #0]
 8001666:	691b      	ldr	r3, [r3, #16]

 if (EnterCallback)
 8001668:	b113      	cbz	r3, 8001670 <Menu_Navigate+0x24>
  EnterCallback();
}
 800166a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  EnterCallback();
 800166e:	4718      	bx	r3
}
 8001670:	bd10      	pop	{r4, pc}
 8001672:	bf00      	nop
 8001674:	08005ec0 	.word	0x08005ec0
 8001678:	20000768 	.word	0x20000768
 800167c:	2000024c 	.word	0x2000024c

08001680 <Menu_SetGenericWriteCallback>:

void Menu_SetGenericWriteCallback(void (*WriteFunc)( char* Text))
{
 MenuWriteFunc = WriteFunc;
 8001680:	4b02      	ldr	r3, [pc, #8]	; (800168c <Menu_SetGenericWriteCallback+0xc>)
 8001682:	6018      	str	r0, [r3, #0]
 Menu_Navigate(CurrentMenuItem);
 8001684:	4b02      	ldr	r3, [pc, #8]	; (8001690 <Menu_SetGenericWriteCallback+0x10>)
 8001686:	6818      	ldr	r0, [r3, #0]
 8001688:	f7ff bfe0 	b.w	800164c <Menu_Navigate>
 800168c:	20000768 	.word	0x20000768
 8001690:	2000024c 	.word	0x2000024c

08001694 <Menu_SelectItem>:
}

void Menu_SelectItem(Key_Pressed_t key)
{
 if ((CurrentMenuItem == &NULL_MENU) || (CurrentMenuItem == NULL))
 8001694:	4b04      	ldr	r3, [pc, #16]	; (80016a8 <Menu_SelectItem+0x14>)
 8001696:	4a05      	ldr	r2, [pc, #20]	; (80016ac <Menu_SelectItem+0x18>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4293      	cmp	r3, r2
 800169c:	d003      	beq.n	80016a6 <Menu_SelectItem+0x12>
 800169e:	b113      	cbz	r3, 80016a6 <Menu_SelectItem+0x12>
  return;

 void (*SelectCallback)(Key_Pressed_t) = CurrentMenuItem->SelectCallback;
 80016a0:	695b      	ldr	r3, [r3, #20]

 if (SelectCallback)
 80016a2:	b103      	cbz	r3, 80016a6 <Menu_SelectItem+0x12>
  SelectCallback(key);
 80016a4:	4718      	bx	r3
}
 80016a6:	4770      	bx	lr
 80016a8:	2000024c 	.word	0x2000024c
 80016ac:	08005ec0 	.word	0x08005ec0

080016b0 <strobe>:
uint8_t pos_x = 0;
uint8_t pos_y = 0;

void strobe(void)
{
	LCD_PORT->BSRR=LCD_EN_BS;
 80016b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
{
 80016b4:	b510      	push	{r4, lr}
	LCD_PORT->BSRR=LCD_EN_BS;
 80016b6:	4c06      	ldr	r4, [pc, #24]	; (80016d0 <strobe+0x20>)
	delay_us(2);
 80016b8:	2002      	movs	r0, #2
	LCD_PORT->BSRR=LCD_EN_BS;
 80016ba:	6123      	str	r3, [r4, #16]
	delay_us(2);
 80016bc:	f7ff fc38 	bl	8000f30 <delay_us>
	LCD_PORT->BSRR=LCD_EN_BC;
 80016c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	delay_us(2);
 80016c4:	2002      	movs	r0, #2
	LCD_PORT->BSRR=LCD_EN_BC;
 80016c6:	6123      	str	r3, [r4, #16]
}
 80016c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delay_us(2);
 80016cc:	f7ff bc30 	b.w	8000f30 <delay_us>
 80016d0:	40010c00 	.word	0x40010c00

080016d4 <lcd_set_4bit_mode>:
			}
		}
	}
}

void lcd_set_4bit_mode(void) {
 80016d4:	b570      	push	{r4, r5, r6, lr}


	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 80016d6:	f04f 457c 	mov.w	r5, #4227858432	; 0xfc000000
	LCD_PORT->BSRR=(LCD_DB5_BS);
 80016da:	f44f 5680 	mov.w	r6, #4096	; 0x1000
	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 80016de:	4c0d      	ldr	r4, [pc, #52]	; (8001714 <lcd_set_4bit_mode+0x40>)
 80016e0:	6125      	str	r5, [r4, #16]
	LCD_PORT->BSRR=(LCD_DB5_BS);
 80016e2:	6126      	str	r6, [r4, #16]

	//LCD_PORT->BSRR=LCD_EN_BS;
	//delay_ms(1);
	//LCD_PORT->BSRR=LCD_EN_BC;

	strobe();
 80016e4:	f7ff ffe4 	bl	80016b0 <strobe>
	delay_ms(1);
 80016e8:	2001      	movs	r0, #1
 80016ea:	f7ff fc57 	bl	8000f9c <delay_ms>

	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 80016ee:	6125      	str	r5, [r4, #16]
	LCD_PORT->BSRR=(LCD_DB5_BS);
 80016f0:	6126      	str	r6, [r4, #16]

	strobe();
 80016f2:	f7ff ffdd 	bl	80016b0 <strobe>
	delay_ms(1);
 80016f6:	2001      	movs	r0, #1
 80016f8:	f7ff fc50 	bl	8000f9c <delay_ms>

	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
	LCD_PORT->BSRR=(LCD_DB7_BS);
 80016fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 8001700:	6125      	str	r5, [r4, #16]
	LCD_PORT->BSRR=(LCD_DB7_BS);
 8001702:	6123      	str	r3, [r4, #16]

	strobe();
 8001704:	f7ff ffd4 	bl	80016b0 <strobe>
	delay_ms(1);

}
 8001708:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	delay_ms(1);
 800170c:	2001      	movs	r0, #1
 800170e:	f7ff bc45 	b.w	8000f9c <delay_ms>
 8001712:	bf00      	nop
 8001714:	40010c00 	.word	0x40010c00

08001718 <lcd_send>:

void lcd_send(uint8_t byte, dat_or_comm dc)  {

	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 8001718:	f04f 427c 	mov.w	r2, #4227858432	; 0xfc000000
 800171c:	4b24      	ldr	r3, [pc, #144]	; (80017b0 <lcd_send+0x98>)
void lcd_send(uint8_t byte, dat_or_comm dc)  {
 800171e:	b570      	push	{r4, r5, r6, lr}
 8001720:	4604      	mov	r4, r0
	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 8001722:	611a      	str	r2, [r3, #16]

	if (dc) {
 8001724:	460e      	mov	r6, r1
 8001726:	b111      	cbz	r1, 800172e <lcd_send+0x16>
		LCD_PORT->BSRR=LCD_CD_BS;
 8001728:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800172c:	611a      	str	r2, [r3, #16]
	}

	if (byte & 0x10) {
 800172e:	06e2      	lsls	r2, r4, #27
		LCD_PORT->BSRR=LCD_DB4_BS;
 8001730:	bf44      	itt	mi
 8001732:	f44f 5200 	movmi.w	r2, #8192	; 0x2000
 8001736:	611a      	strmi	r2, [r3, #16]
	}
	if (byte & 0x20) {
 8001738:	f014 0f20 	tst.w	r4, #32
		LCD_PORT->BSRR=LCD_DB5_BS;
 800173c:	bf18      	it	ne
 800173e:	f44f 5280 	movne.w	r2, #4096	; 0x1000
 8001742:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <lcd_send+0x98>)
 8001744:	bf18      	it	ne
 8001746:	611a      	strne	r2, [r3, #16]
	}
	if (byte & 0x40) {
 8001748:	0665      	lsls	r5, r4, #25
		LCD_PORT->BSRR=LCD_DB6_BS;
 800174a:	bf44      	itt	mi
 800174c:	f44f 6200 	movmi.w	r2, #2048	; 0x800
 8001750:	611a      	strmi	r2, [r3, #16]
	}
	if (byte & 0x80) {
 8001752:	f014 0f80 	tst.w	r4, #128	; 0x80
		LCD_PORT->BSRR=LCD_DB7_BS;
 8001756:	bf18      	it	ne
 8001758:	f44f 6380 	movne.w	r3, #1024	; 0x400
 800175c:	4d14      	ldr	r5, [pc, #80]	; (80017b0 <lcd_send+0x98>)
 800175e:	bf18      	it	ne
 8001760:	612b      	strne	r3, [r5, #16]
	}

	strobe();
 8001762:	f7ff ffa5 	bl	80016b0 <strobe>


	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC );
 8001766:	f04f 5370 	mov.w	r3, #1006632960	; 0x3c000000

	if (byte & 0x01) {
 800176a:	07e0      	lsls	r0, r4, #31
	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC );
 800176c:	612b      	str	r3, [r5, #16]
		LCD_PORT->BSRR=LCD_DB4_BS;
 800176e:	bf44      	itt	mi
 8001770:	f44f 5300 	movmi.w	r3, #8192	; 0x2000
 8001774:	612b      	strmi	r3, [r5, #16]
	}
	if (byte & 0x02) {
 8001776:	07a1      	lsls	r1, r4, #30
		LCD_PORT->BSRR=LCD_DB5_BS;
 8001778:	bf42      	ittt	mi
 800177a:	f44f 5280 	movmi.w	r2, #4096	; 0x1000
 800177e:	4b0c      	ldrmi	r3, [pc, #48]	; (80017b0 <lcd_send+0x98>)
 8001780:	611a      	strmi	r2, [r3, #16]
	}
	if (byte & 0x04) {
 8001782:	0762      	lsls	r2, r4, #29
		LCD_PORT->BSRR=LCD_DB6_BS;
 8001784:	bf42      	ittt	mi
 8001786:	f44f 6200 	movmi.w	r2, #2048	; 0x800
 800178a:	4b09      	ldrmi	r3, [pc, #36]	; (80017b0 <lcd_send+0x98>)
 800178c:	611a      	strmi	r2, [r3, #16]
	}
	if (byte & 0x08) {
 800178e:	0723      	lsls	r3, r4, #28
		LCD_PORT->BSRR=LCD_DB7_BS;
 8001790:	bf42      	ittt	mi
 8001792:	f44f 6280 	movmi.w	r2, #1024	; 0x400
 8001796:	4b06      	ldrmi	r3, [pc, #24]	; (80017b0 <lcd_send+0x98>)
 8001798:	611a      	strmi	r2, [r3, #16]
	}



	strobe();
 800179a:	f7ff ff89 	bl	80016b0 <strobe>
	delay_ms(2);
 800179e:	2002      	movs	r0, #2
 80017a0:	f7ff fbfc 	bl	8000f9c <delay_ms>
	if (dc) {
 80017a4:	b11e      	cbz	r6, 80017ae <lcd_send+0x96>
			LCD_PORT->BSRR=LCD_CD_BC;
 80017a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017aa:	4b01      	ldr	r3, [pc, #4]	; (80017b0 <lcd_send+0x98>)
 80017ac:	611a      	str	r2, [r3, #16]
		}

}
 80017ae:	bd70      	pop	{r4, r5, r6, pc}
 80017b0:	40010c00 	.word	0x40010c00

080017b4 <lcd_set_user_char>:
	lcd_send(((1<<6) | (char_num * 8) ), COMMAND);
 80017b4:	00c0      	lsls	r0, r0, #3
 80017b6:	f040 0040 	orr.w	r0, r0, #64	; 0x40
void lcd_set_user_char(uint8_t char_num, char * char_data) {
 80017ba:	b538      	push	{r3, r4, r5, lr}
	lcd_send(((1<<6) | (char_num * 8) ), COMMAND);
 80017bc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
void lcd_set_user_char(uint8_t char_num, char * char_data) {
 80017c0:	460c      	mov	r4, r1
	lcd_send(((1<<6) | (char_num * 8) ), COMMAND);
 80017c2:	2100      	movs	r1, #0
 80017c4:	f7ff ffa8 	bl	8001718 <lcd_send>
 80017c8:	1e65      	subs	r5, r4, #1
 80017ca:	3407      	adds	r4, #7
		lcd_send(char_data[i],DATA);
 80017cc:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80017d0:	2101      	movs	r1, #1
 80017d2:	f7ff ffa1 	bl	8001718 <lcd_send>
	for (i=0;i<=7;i++) {
 80017d6:	42a5      	cmp	r5, r4
 80017d8:	d1f8      	bne.n	80017cc <lcd_set_user_char+0x18>
}
 80017da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lcd_send((1<<7), COMMAND);
 80017de:	2100      	movs	r1, #0
 80017e0:	2080      	movs	r0, #128	; 0x80
 80017e2:	f7ff bf99 	b.w	8001718 <lcd_send>
	...

080017e8 <SetSymbols>:
{
 80017e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	sym[3]=0b00100;
 80017ea:	4c1f      	ldr	r4, [pc, #124]	; (8001868 <SetSymbols+0x80>)
 80017ec:	4d1f      	ldr	r5, [pc, #124]	; (800186c <SetSymbols+0x84>)
	lcd_set_user_char(0,sym);//charge
 80017ee:	4669      	mov	r1, sp
 80017f0:	2000      	movs	r0, #0
	sym[3]=0b00100;
 80017f2:	e9cd 4500 	strd	r4, r5, [sp]
	sym[3]=0b00000;
 80017f6:	4e1e      	ldr	r6, [pc, #120]	; (8001870 <SetSymbols+0x88>)
	lcd_set_user_char(0,sym);//charge
 80017f8:	f7ff ffdc 	bl	80017b4 <lcd_set_user_char>
	sym[3]=0b00000;
 80017fc:	4b1d      	ldr	r3, [pc, #116]	; (8001874 <SetSymbols+0x8c>)
	lcd_set_user_char(1,sym);//charge
 80017fe:	4669      	mov	r1, sp
 8001800:	2001      	movs	r0, #1
	sym[3]=0b00000;
 8001802:	e9cd 3600 	strd	r3, r6, [sp]
	lcd_set_user_char(1,sym);//charge
 8001806:	f7ff ffd5 	bl	80017b4 <lcd_set_user_char>
	sym[0]=0b00000;
 800180a:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <SetSymbols+0x90>)
	lcd_set_user_char(2,sym);//discharge
 800180c:	4669      	mov	r1, sp
	sym[3]=0b10101;
 800180e:	e9cd 3500 	strd	r3, r5, [sp]
	lcd_set_user_char(2,sym);//discharge
 8001812:	2002      	movs	r0, #2
	sym[0]=0b00100;
 8001814:	4d19      	ldr	r5, [pc, #100]	; (800187c <SetSymbols+0x94>)
	lcd_set_user_char(2,sym);//discharge
 8001816:	f7ff ffcd 	bl	80017b4 <lcd_set_user_char>
	lcd_set_user_char(3,sym);//discharge
 800181a:	4669      	mov	r1, sp
 800181c:	2003      	movs	r0, #3
	sym[3]=0b00100;
 800181e:	e9cd 5600 	strd	r5, r6, [sp]
	lcd_set_user_char(3,sym);//discharge
 8001822:	f7ff ffc7 	bl	80017b4 <lcd_set_user_char>
	lcd_set_user_char(4,sym);//training
 8001826:	4669      	mov	r1, sp
 8001828:	2004      	movs	r0, #4
	sym[3]=0b00100;
 800182a:	e9cd 5400 	strd	r5, r4, [sp]
	lcd_set_user_char(4,sym);//training
 800182e:	f7ff ffc1 	bl	80017b4 <lcd_set_user_char>
	sym[3]=0b01010;
 8001832:	4a13      	ldr	r2, [pc, #76]	; (8001880 <SetSymbols+0x98>)
 8001834:	4b13      	ldr	r3, [pc, #76]	; (8001884 <SetSymbols+0x9c>)
	lcd_set_user_char(5,sym);//swing
 8001836:	4669      	mov	r1, sp
 8001838:	2005      	movs	r0, #5
	sym[3]=0b01010;
 800183a:	e9cd 2300 	strd	r2, r3, [sp]
	lcd_set_user_char(5,sym);//swing
 800183e:	f7ff ffb9 	bl	80017b4 <lcd_set_user_char>
	sym[3]=0b00101;
 8001842:	4b11      	ldr	r3, [pc, #68]	; (8001888 <SetSymbols+0xa0>)
 8001844:	4911      	ldr	r1, [pc, #68]	; (800188c <SetSymbols+0xa4>)
	lcd_set_user_char(6,sym);//Л
 8001846:	2006      	movs	r0, #6
	sym[3]=0b00101;
 8001848:	e9cd 1300 	strd	r1, r3, [sp]
	lcd_set_user_char(6,sym);//Л
 800184c:	4669      	mov	r1, sp
 800184e:	f7ff ffb1 	bl	80017b4 <lcd_set_user_char>
	sym[3]=0b11111;
 8001852:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <SetSymbols+0xa8>)
 8001854:	480f      	ldr	r0, [pc, #60]	; (8001894 <SetSymbols+0xac>)
	lcd_set_user_char(7,sym);//Ч
 8001856:	4669      	mov	r1, sp
	sym[3]=0b11111;
 8001858:	e9cd 0300 	strd	r0, r3, [sp]
	lcd_set_user_char(7,sym);//Ч
 800185c:	2007      	movs	r0, #7
 800185e:	f7ff ffa9 	bl	80017b4 <lcd_set_user_char>
}
 8001862:	b002      	add	sp, #8
 8001864:	bd70      	pop	{r4, r5, r6, pc}
 8001866:	bf00      	nop
 8001868:	040e1504 	.word	0x040e1504
 800186c:	1f1f0400 	.word	0x1f1f0400
 8001870:	1f040000 	.word	0x1f040000
 8001874:	00040e15 	.word	0x00040e15
 8001878:	150e0400 	.word	0x150e0400
 800187c:	04150e04 	.word	0x04150e04
 8001880:	0a070702 	.word	0x0a070702
 8001884:	081c1c0a 	.word	0x081c1c0a
 8001888:	00091505 	.word	0x00091505
 800188c:	0505050f 	.word	0x0505050f
 8001890:	00010101 	.word	0x00010101
 8001894:	1f111111 	.word	0x1f111111

08001898 <lcd_set_xy>:
	pos_x = x;
 8001898:	4a06      	ldr	r2, [pc, #24]	; (80018b4 <lcd_set_xy+0x1c>)
 800189a:	7010      	strb	r0, [r2, #0]
	pos_y = y;
 800189c:	4a06      	ldr	r2, [pc, #24]	; (80018b8 <lcd_set_xy+0x20>)
 800189e:	7011      	strb	r1, [r2, #0]
	if (y==0) {
 80018a0:	b919      	cbnz	r1, 80018aa <lcd_set_xy+0x12>
		lcd_send( ((1<<7) | (x)),COMMAND);
 80018a2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
		lcd_send( ((3<<6) | (x)),COMMAND);
 80018a6:	f7ff bf37 	b.w	8001718 <lcd_send>
 80018aa:	2100      	movs	r1, #0
 80018ac:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 80018b0:	e7f9      	b.n	80018a6 <lcd_set_xy+0xe>
 80018b2:	bf00      	nop
 80018b4:	2000076c 	.word	0x2000076c
 80018b8:	2000076d 	.word	0x2000076d

080018bc <lcd_out>:
void lcd_out(char * txt,uint8_t TypeOfLCD) {
 80018bc:	b570      	push	{r4, r5, r6, lr}
 80018be:	460d      	mov	r5, r1
	while(*txt)
 80018c0:	4604      	mov	r4, r0
		if ((TypeOfLCD ==1)&&(i==7) )
 80018c2:	43c6      	mvns	r6, r0
	while(*txt)
 80018c4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80018c8:	b900      	cbnz	r0, 80018cc <lcd_out+0x10>
}
 80018ca:	bd70      	pop	{r4, r5, r6, pc}
		lcd_send(*txt,DATA);
 80018cc:	2101      	movs	r1, #1
 80018ce:	f7ff ff23 	bl	8001718 <lcd_send>
		if ((TypeOfLCD ==1)&&(i==7) )
 80018d2:	2d01      	cmp	r5, #1
 80018d4:	d1f6      	bne.n	80018c4 <lcd_out+0x8>
 80018d6:	1933      	adds	r3, r6, r4
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b07      	cmp	r3, #7
 80018dc:	d1f2      	bne.n	80018c4 <lcd_out+0x8>
			lcd_set_xy(0,1);
 80018de:	4629      	mov	r1, r5
 80018e0:	2000      	movs	r0, #0
 80018e2:	f7ff ffd9 	bl	8001898 <lcd_set_xy>
 80018e6:	e7ed      	b.n	80018c4 <lcd_out+0x8>

080018e8 <LcdOutbyNumber>:
	lcd_send(num,DATA);
 80018e8:	2101      	movs	r1, #1
 80018ea:	b2c0      	uxtb	r0, r0
 80018ec:	f7ff bf14 	b.w	8001718 <lcd_send>

080018f0 <LcdOut>:
{
 80018f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018f4:	460f      	mov	r7, r1
			lcd_send(russ[*txt-192],DATA);
 80018f6:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8001970 <LcdOut+0x80>
		pos_x++;
 80018fa:	4c1b      	ldr	r4, [pc, #108]	; (8001968 <LcdOut+0x78>)
		if ((pos_y == 0 )&&(pos_x == 8) &&(Line ==2))
 80018fc:	4e1b      	ldr	r6, [pc, #108]	; (800196c <LcdOut+0x7c>)
 80018fe:	1e45      	subs	r5, r0, #1
	while(*txt)
 8001900:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8001904:	b908      	cbnz	r0, 800190a <LcdOut+0x1a>
}
 8001906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if(*txt==178)//І
 800190a:	28b2      	cmp	r0, #178	; 0xb2
 800190c:	d119      	bne.n	8001942 <LcdOut+0x52>
			lcd_send(73,DATA);
 800190e:	2101      	movs	r1, #1
 8001910:	2049      	movs	r0, #73	; 0x49
			lcd_send(russ[*txt-192],DATA);
 8001912:	f7ff ff01 	bl	8001718 <lcd_send>
		pos_x++;
 8001916:	7823      	ldrb	r3, [r4, #0]
		if ((pos_y == 0 )&&(pos_x == 8) &&(Line ==2))
 8001918:	f896 9000 	ldrb.w	r9, [r6]
		pos_x++;
 800191c:	3301      	adds	r3, #1
 800191e:	b2db      	uxtb	r3, r3
 8001920:	7023      	strb	r3, [r4, #0]
		if ((pos_y == 0 )&&(pos_x == 8) &&(Line ==2))
 8001922:	f1b9 0f00 	cmp.w	r9, #0
 8001926:	d1eb      	bne.n	8001900 <LcdOut+0x10>
 8001928:	2b08      	cmp	r3, #8
 800192a:	d1e9      	bne.n	8001900 <LcdOut+0x10>
 800192c:	2f02      	cmp	r7, #2
 800192e:	d1e7      	bne.n	8001900 <LcdOut+0x10>
			lcd_set_xy(0,1);
 8001930:	2101      	movs	r1, #1
 8001932:	4648      	mov	r0, r9
 8001934:	f7ff ffb0 	bl	8001898 <lcd_set_xy>
			pos_y = 1;
 8001938:	2301      	movs	r3, #1
			pos_x = 0;
 800193a:	f884 9000 	strb.w	r9, [r4]
			pos_y = 1;
 800193e:	7033      	strb	r3, [r6, #0]
 8001940:	e7de      	b.n	8001900 <LcdOut+0x10>
		}else if(*txt==175)//Ї
 8001942:	28af      	cmp	r0, #175	; 0xaf
 8001944:	d102      	bne.n	800194c <LcdOut+0x5c>
			lcd_send(3,DATA);
 8001946:	2101      	movs	r1, #1
 8001948:	2003      	movs	r0, #3
 800194a:	e7e2      	b.n	8001912 <LcdOut+0x22>
		}else if(*txt==170)//Є
 800194c:	28aa      	cmp	r0, #170	; 0xaa
 800194e:	d102      	bne.n	8001956 <LcdOut+0x66>
			lcd_send(2,DATA);
 8001950:	2101      	movs	r1, #1
 8001952:	2002      	movs	r0, #2
 8001954:	e7dd      	b.n	8001912 <LcdOut+0x22>
		}else if(*txt<192)
 8001956:	28bf      	cmp	r0, #191	; 0xbf
			lcd_send(russ[*txt-192],DATA);
 8001958:	bf89      	itett	hi
 800195a:	4440      	addhi	r0, r8
			lcd_send(*txt,DATA);
 800195c:	2101      	movls	r1, #1
			lcd_send(russ[*txt-192],DATA);
 800195e:	2101      	movhi	r1, #1
 8001960:	f810 0cc0 	ldrbhi.w	r0, [r0, #-192]
 8001964:	e7d5      	b.n	8001912 <LcdOut+0x22>
 8001966:	bf00      	nop
 8001968:	2000076c 	.word	0x2000076c
 800196c:	2000076d 	.word	0x2000076d
 8001970:	20000250 	.word	0x20000250

08001974 <lcd_clear>:
	lcd_send(0x01,COMMAND);
 8001974:	2100      	movs	r1, #0
 8001976:	2001      	movs	r0, #1
 8001978:	f7ff bece 	b.w	8001718 <lcd_send>

0800197c <lcd_init>:
void lcd_init() {
 800197c:	b508      	push	{r3, lr}
	delay_ms(100);
 800197e:	2064      	movs	r0, #100	; 0x64
 8001980:	f7ff fb0c 	bl	8000f9c <delay_ms>
	lcd_set_4bit_mode();
 8001984:	f7ff fea6 	bl	80016d4 <lcd_set_4bit_mode>
				lcd_send(0x0E,COMMAND);
 8001988:	2100      	movs	r1, #0
 800198a:	200e      	movs	r0, #14
 800198c:	f7ff fec4 	bl	8001718 <lcd_send>
}
 8001990:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lcd_clear();
 8001994:	f7ff bfee 	b.w	8001974 <lcd_clear>

08001998 <PrintToLCD>:


void PrintToLCD(char* str )
{
	LcdOut(str,2);
 8001998:	2102      	movs	r1, #2
 800199a:	f7ff bfa9 	b.w	80018f0 <LcdOut>

0800199e <PrintToLCD_xy>:
	//Send_String_to_UART(str);
}

void PrintToLCD_xy(char* str ,uint8_t x, uint8_t y)
{
 800199e:	b510      	push	{r4, lr}
 80019a0:	4604      	mov	r4, r0
 80019a2:	4608      	mov	r0, r1
	lcd_set_xy(x,y);
 80019a4:	4611      	mov	r1, r2
 80019a6:	f7ff ff77 	bl	8001898 <lcd_set_xy>

	LcdOut(str,2);
 80019aa:	4620      	mov	r0, r4
	//Send_String_to_UART(str);
}
 80019ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LcdOut(str,2);
 80019b0:	2102      	movs	r1, #2
 80019b2:	f7ff bf9d 	b.w	80018f0 <LcdOut>

080019b6 <InitLCD>:

{
	PrintToLCD(itoa_koma(x,k));
}
void InitLCD()
{
 80019b6:	b508      	push	{r3, lr}



	lcd_init();
 80019b8:	f7ff ffe0 	bl	800197c <lcd_init>
	lcd_clear();
 80019bc:	f7ff ffda 	bl	8001974 <lcd_clear>
	lcd_set_state(LCD_ENABLE, CURSOR_DISABLE, NO_BLINK);
}
 80019c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				lcd_send(0x0C,COMMAND);
 80019c4:	2100      	movs	r1, #0
 80019c6:	200c      	movs	r0, #12
 80019c8:	f7ff bea6 	b.w	8001718 <lcd_send>

080019cc <LL_APB1_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <LL_APB1_GRP1_EnableClock+0x18>)
{
 80019ce:	b082      	sub	sp, #8
  SET_BIT(RCC->APB1ENR, Periphs);
 80019d0:	69da      	ldr	r2, [r3, #28]
 80019d2:	4302      	orrs	r2, r0
 80019d4:	61da      	str	r2, [r3, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	4018      	ands	r0, r3
 80019da:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 80019dc:	9b01      	ldr	r3, [sp, #4]
}
 80019de:	b002      	add	sp, #8
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40021000 	.word	0x40021000

080019e8 <LL_APB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <LL_APB2_GRP1_EnableClock+0x18>)
{
 80019ea:	b082      	sub	sp, #8
  SET_BIT(RCC->APB2ENR, Periphs);
 80019ec:	699a      	ldr	r2, [r3, #24]
 80019ee:	4302      	orrs	r2, r0
 80019f0:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	4018      	ands	r0, r3
 80019f6:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 80019f8:	9b01      	ldr	r3, [sp, #4]
}
 80019fa:	b002      	add	sp, #8
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	40021000 	.word	0x40021000

08001a04 <MenuLog_Enter>:
			ClockOnLCD_noSec(DischargeTimeSec);
		}
}
void MenuLog_Enter()
{
	i_LogItems = 0;
 8001a04:	2200      	movs	r2, #0
 8001a06:	4b01      	ldr	r3, [pc, #4]	; (8001a0c <MenuLog_Enter+0x8>)
 8001a08:	801a      	strh	r2, [r3, #0]
}
 8001a0a:	4770      	bx	lr
 8001a0c:	200007c8 	.word	0x200007c8

08001a10 <MenuCalibrationWriteToFlash_Enter>:
			break;
	}
}

void MenuCalibrationWriteToFlash_Enter(Key_Pressed_t key)
{
 8001a10:	b508      	push	{r3, lr}
	CalibrationWriteToFlash_CRC();
 8001a12:	f7fe ffaf 	bl	8000974 <CalibrationWriteToFlash_CRC>
	WriteInLOG("Calibration");
}
 8001a16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	WriteInLOG("Calibration");
 8001a1a:	4801      	ldr	r0, [pc, #4]	; (8001a20 <MenuCalibrationWriteToFlash_Enter+0x10>)
 8001a1c:	f7ff b924 	b.w	8000c68 <WriteInLOG>
 8001a20:	08005eea 	.word	0x08005eea

08001a24 <MenuSettingsBatteryType_Enter>:
{
 8001a24:	b510      	push	{r4, lr}
	if(CountShowBT == 0)
 8001a26:	4c3b      	ldr	r4, [pc, #236]	; (8001b14 <MenuSettingsBatteryType_Enter+0xf0>)
 8001a28:	f994 1000 	ldrsb.w	r1, [r4]
 8001a2c:	b961      	cbnz	r1, 8001a48 <MenuSettingsBatteryType_Enter+0x24>
		lcd_set_xy(0,0);
 8001a2e:	4608      	mov	r0, r1
 8001a30:	f7ff ff32 	bl	8001898 <lcd_set_xy>
		PrintToLCD(" 10.8V  14.6V   ");
 8001a34:	4838      	ldr	r0, [pc, #224]	; (8001b18 <MenuSettingsBatteryType_Enter+0xf4>)
 8001a36:	f7ff ffaf 	bl	8001998 <PrintToLCD>
		SettingsData.LowVoltage = 1080;
 8001a3a:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8001a3e:	4b37      	ldr	r3, [pc, #220]	; (8001b1c <MenuSettingsBatteryType_Enter+0xf8>)
 8001a40:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 1460;
 8001a42:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8001a46:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 1)
 8001a48:	f994 3000 	ldrsb.w	r3, [r4]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d10d      	bne.n	8001a6c <MenuSettingsBatteryType_Enter+0x48>
		lcd_set_xy(0,0);
 8001a50:	2100      	movs	r1, #0
 8001a52:	4608      	mov	r0, r1
 8001a54:	f7ff ff20 	bl	8001898 <lcd_set_xy>
		PrintToLCD("  3.0V   4.2V   ");
 8001a58:	4831      	ldr	r0, [pc, #196]	; (8001b20 <MenuSettingsBatteryType_Enter+0xfc>)
 8001a5a:	f7ff ff9d 	bl	8001998 <PrintToLCD>
		SettingsData.LowVoltage = 300;
 8001a5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a62:	4b2e      	ldr	r3, [pc, #184]	; (8001b1c <MenuSettingsBatteryType_Enter+0xf8>)
 8001a64:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 420;
 8001a66:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001a6a:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 2)
 8001a6c:	f994 3000 	ldrsb.w	r3, [r4]
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d10d      	bne.n	8001a90 <MenuSettingsBatteryType_Enter+0x6c>
		lcd_set_xy(0,0);
 8001a74:	2100      	movs	r1, #0
 8001a76:	4608      	mov	r0, r1
 8001a78:	f7ff ff0e 	bl	8001898 <lcd_set_xy>
		PrintToLCD("  2.8V   3.7V   ");
 8001a7c:	4829      	ldr	r0, [pc, #164]	; (8001b24 <MenuSettingsBatteryType_Enter+0x100>)
 8001a7e:	f7ff ff8b 	bl	8001998 <PrintToLCD>
		SettingsData.LowVoltage = 280;
 8001a82:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001a86:	4b25      	ldr	r3, [pc, #148]	; (8001b1c <MenuSettingsBatteryType_Enter+0xf8>)
 8001a88:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 370;
 8001a8a:	f44f 72b9 	mov.w	r2, #370	; 0x172
 8001a8e:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 3)
 8001a90:	f994 3000 	ldrsb.w	r3, [r4]
 8001a94:	2b03      	cmp	r3, #3
 8001a96:	d10c      	bne.n	8001ab2 <MenuSettingsBatteryType_Enter+0x8e>
		lcd_set_xy(0,0);
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4608      	mov	r0, r1
 8001a9c:	f7ff fefc 	bl	8001898 <lcd_set_xy>
		PrintToLCD("  1.6V   2.8V   ");
 8001aa0:	4821      	ldr	r0, [pc, #132]	; (8001b28 <MenuSettingsBatteryType_Enter+0x104>)
 8001aa2:	f7ff ff79 	bl	8001998 <PrintToLCD>
		SettingsData.LowVoltage = 160;
 8001aa6:	22a0      	movs	r2, #160	; 0xa0
 8001aa8:	4b1c      	ldr	r3, [pc, #112]	; (8001b1c <MenuSettingsBatteryType_Enter+0xf8>)
 8001aaa:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 280;
 8001aac:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001ab0:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 4)
 8001ab2:	f994 3000 	ldrsb.w	r3, [r4]
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	d10d      	bne.n	8001ad6 <MenuSettingsBatteryType_Enter+0xb2>
		lcd_set_xy(0,0);
 8001aba:	2100      	movs	r1, #0
 8001abc:	4608      	mov	r0, r1
 8001abe:	f7ff feeb 	bl	8001898 <lcd_set_xy>
		PrintToLCD("   8V  13.6V    ");
 8001ac2:	481a      	ldr	r0, [pc, #104]	; (8001b2c <MenuSettingsBatteryType_Enter+0x108>)
 8001ac4:	f7ff ff68 	bl	8001998 <PrintToLCD>
		SettingsData.LowVoltage = 800;
 8001ac8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <MenuSettingsBatteryType_Enter+0xf8>)
 8001ace:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 1360;
 8001ad0:	f44f 62aa 	mov.w	r2, #1360	; 0x550
 8001ad4:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 5)
 8001ad6:	f994 3000 	ldrsb.w	r3, [r4]
 8001ada:	2b05      	cmp	r3, #5
 8001adc:	d10c      	bne.n	8001af8 <MenuSettingsBatteryType_Enter+0xd4>
		lcd_set_xy(0,0);
 8001ade:	2100      	movs	r1, #0
 8001ae0:	4608      	mov	r0, r1
 8001ae2:	f7ff fed9 	bl	8001898 <lcd_set_xy>
		PrintToLCD("  1V    20V     ");
 8001ae6:	4812      	ldr	r0, [pc, #72]	; (8001b30 <MenuSettingsBatteryType_Enter+0x10c>)
 8001ae8:	f7ff ff56 	bl	8001998 <PrintToLCD>
		SettingsData.LowVoltage = 100;
 8001aec:	2264      	movs	r2, #100	; 0x64
 8001aee:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <MenuSettingsBatteryType_Enter+0xf8>)
 8001af0:	619a      	str	r2, [r3, #24]
		SettingsData.MaxVoltage = 2000;
 8001af2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001af6:	621a      	str	r2, [r3, #32]
	if(CountShowBT == 6)
 8001af8:	f994 3000 	ldrsb.w	r3, [r4]
 8001afc:	2b06      	cmp	r3, #6
		CountShowBT = 0;
 8001afe:	bf04      	itt	eq
 8001b00:	2300      	moveq	r3, #0
 8001b02:	7023      	strbeq	r3, [r4, #0]
	SettingsWriteToFlash_CRC();
 8001b04:	f7fe ff6c 	bl	80009e0 <SettingsWriteToFlash_CRC>
}
 8001b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay_ms(600);
 8001b0c:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001b10:	f7ff ba44 	b.w	8000f9c <delay_ms>
 8001b14:	20000787 	.word	0x20000787
 8001b18:	080060b0 	.word	0x080060b0
 8001b1c:	20000154 	.word	0x20000154
 8001b20:	080060c1 	.word	0x080060c1
 8001b24:	080060d2 	.word	0x080060d2
 8001b28:	080060e3 	.word	0x080060e3
 8001b2c:	080060f4 	.word	0x080060f4
 8001b30:	08006105 	.word	0x08006105

08001b34 <MenuSettingsWriteToFlash_Enter>:

void MenuSettingsWriteToFlash_Enter(Key_Pressed_t key)
{
	SettingsWriteToFlash_CRC();
 8001b34:	f7fe bf54 	b.w	80009e0 <SettingsWriteToFlash_CRC>

08001b38 <MenuOption_Enter>:
	}

}

void MenuOption_Enter(Key_Pressed_t key)
{
 8001b38:	b508      	push	{r3, lr}
	lcd_set_xy(7,1);
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	2007      	movs	r0, #7
 8001b3e:	f7ff feab 	bl	8001898 <lcd_set_xy>
	lcd_send(255,DATA);
 8001b42:	2101      	movs	r1, #1
 8001b44:	20ff      	movs	r0, #255	; 0xff
 8001b46:	f7ff fde7 	bl	8001718 <lcd_send>
	SettingsWriteToFlash_CRC();
 8001b4a:	f7fe ff49 	bl	80009e0 <SettingsWriteToFlash_CRC>
	SelectedOptionValue = SettingsData.Option1;
 8001b4e:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <MenuOption_Enter+0x28>)
	delay_ms(200);
 8001b50:	20c8      	movs	r0, #200	; 0xc8
	SelectedOptionValue = SettingsData.Option1;
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <MenuOption_Enter+0x2c>)
 8001b56:	601a      	str	r2, [r3, #0]
}
 8001b58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_ms(200);
 8001b5c:	f7ff ba1e 	b.w	8000f9c <delay_ms>
 8001b60:	20000154 	.word	0x20000154
 8001b64:	20000a00 	.word	0x20000a00

08001b68 <MenuOption_Enter1>:

void MenuOption_Enter1(Key_Pressed_t key)
{
 8001b68:	b508      	push	{r3, lr}
	lcd_set_xy(7,1);
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	2007      	movs	r0, #7
 8001b6e:	f7ff fe93 	bl	8001898 <lcd_set_xy>
	lcd_send(255,DATA);
 8001b72:	2101      	movs	r1, #1
 8001b74:	20ff      	movs	r0, #255	; 0xff
 8001b76:	f7ff fdcf 	bl	8001718 <lcd_send>
	SettingsWriteToFlash_CRC();
 8001b7a:	f7fe ff31 	bl	80009e0 <SettingsWriteToFlash_CRC>
	SelectedOptionValue1 = SettingsData.Option2;
 8001b7e:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <MenuOption_Enter1+0x28>)
	delay_ms(200);
 8001b80:	20c8      	movs	r0, #200	; 0xc8
	SelectedOptionValue1 = SettingsData.Option2;
 8001b82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b84:	4b03      	ldr	r3, [pc, #12]	; (8001b94 <MenuOption_Enter1+0x2c>)
 8001b86:	601a      	str	r2, [r3, #0]
}
 8001b88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_ms(200);
 8001b8c:	f7ff ba06 	b.w	8000f9c <delay_ms>
 8001b90:	20000154 	.word	0x20000154
 8001b94:	200009f8 	.word	0x200009f8

08001b98 <Generic_Write>:
	if (Text) PrintToLCD_xy(Text,0,0);
 8001b98:	b118      	cbz	r0, 8001ba2 <Generic_Write+0xa>
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	4611      	mov	r1, r2
 8001b9e:	f7ff befe 	b.w	800199e <PrintToLCD_xy>
}
 8001ba2:	4770      	bx	lr

08001ba4 <MenuDischarge_Enter>:
	if (BatteryCapacityDischargeCurrent/3600>10)
 8001ba4:	f649 23af 	movw	r3, #39599	; 0x9aaf
{
 8001ba8:	b510      	push	{r4, lr}
	if (BatteryCapacityDischargeCurrent/3600>10)
 8001baa:	4c0e      	ldr	r4, [pc, #56]	; (8001be4 <MenuDischarge_Enter+0x40>)
{
 8001bac:	b090      	sub	sp, #64	; 0x40
	if (BatteryCapacityDischargeCurrent/3600>10)
 8001bae:	6822      	ldr	r2, [r4, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d915      	bls.n	8001be0 <MenuDischarge_Enter+0x3c>
		ClockStringNoSec(DischargeTimeSec,s_clock);
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <MenuDischarge_Enter+0x44>)
 8001bb6:	a90b      	add	r1, sp, #44	; 0x2c
 8001bb8:	6818      	ldr	r0, [r3, #0]
 8001bba:	f7ff fc98 	bl	80014ee <ClockStringNoSec>
		Merge3Strings(itoaP(BatteryCapacityDischargeCurrent/3600,str),"mAh",s_clock,strout);
 8001bbe:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001bc2:	6820      	ldr	r0, [r4, #0]
 8001bc4:	a901      	add	r1, sp, #4
 8001bc6:	fbb0 f0f3 	udiv	r0, r0, r3
 8001bca:	f7ff fb3d 	bl	8001248 <itoaP>
 8001bce:	4907      	ldr	r1, [pc, #28]	; (8001bec <MenuDischarge_Enter+0x48>)
 8001bd0:	ab06      	add	r3, sp, #24
 8001bd2:	aa0b      	add	r2, sp, #44	; 0x2c
 8001bd4:	f7ff fbfd 	bl	80013d2 <Merge3Strings>
		WriteInLOGc(strout,DISCHARGE_l);
 8001bd8:	2102      	movs	r1, #2
 8001bda:	a806      	add	r0, sp, #24
 8001bdc:	f7ff f8f6 	bl	8000dcc <WriteInLOGc>
}
 8001be0:	b010      	add	sp, #64	; 0x40
 8001be2:	bd10      	pop	{r4, pc}
 8001be4:	20000774 	.word	0x20000774
 8001be8:	2000078c 	.word	0x2000078c
 8001bec:	08005ffd 	.word	0x08005ffd

08001bf0 <MenuCharge_Enter>:
{
 8001bf0:	b510      	push	{r4, lr}
	logDebugD("charge=",BatteryCapacityCharge,0);
 8001bf2:	4c16      	ldr	r4, [pc, #88]	; (8001c4c <MenuCharge_Enter+0x5c>)
{
 8001bf4:	b090      	sub	sp, #64	; 0x40
	logDebugD("charge=",BatteryCapacityCharge,0);
 8001bf6:	4816      	ldr	r0, [pc, #88]	; (8001c50 <MenuCharge_Enter+0x60>)
 8001bf8:	f003 faaa 	bl	8005150 <printToBufferWithoutEndUART1>
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	6821      	ldr	r1, [r4, #0]
 8001c00:	4814      	ldr	r0, [pc, #80]	; (8001c54 <MenuCharge_Enter+0x64>)
 8001c02:	f003 fae9 	bl	80051d8 <printToBufferUART1D>
	if (BatteryCapacityCharge/3600>10)
 8001c06:	f649 23af 	movw	r3, #39599	; 0x9aaf
 8001c0a:	6822      	ldr	r2, [r4, #0]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d91b      	bls.n	8001c48 <MenuCharge_Enter+0x58>
		ClockStringNoSec(ChargeTimeSec,s_clock);
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <MenuCharge_Enter+0x68>)
 8001c12:	a90b      	add	r1, sp, #44	; 0x2c
 8001c14:	6818      	ldr	r0, [r3, #0]
 8001c16:	f7ff fc6a 	bl	80014ee <ClockStringNoSec>
		Merge3Strings(itoaP(BatteryCapacityCharge/3600,str),"mAh",s_clock,strout);
 8001c1a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001c1e:	6820      	ldr	r0, [r4, #0]
 8001c20:	a901      	add	r1, sp, #4
 8001c22:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c26:	f7ff fb0f 	bl	8001248 <itoaP>
 8001c2a:	ab06      	add	r3, sp, #24
 8001c2c:	aa0b      	add	r2, sp, #44	; 0x2c
 8001c2e:	490b      	ldr	r1, [pc, #44]	; (8001c5c <MenuCharge_Enter+0x6c>)
 8001c30:	f7ff fbcf 	bl	80013d2 <Merge3Strings>
		WriteInLOGc(strout,CHARGE_H);
 8001c34:	2101      	movs	r1, #1
 8001c36:	a806      	add	r0, sp, #24
 8001c38:	f7ff f8c8 	bl	8000dcc <WriteInLOGc>
		logDebug(strout);
 8001c3c:	4804      	ldr	r0, [pc, #16]	; (8001c50 <MenuCharge_Enter+0x60>)
 8001c3e:	f003 fa87 	bl	8005150 <printToBufferWithoutEndUART1>
 8001c42:	a806      	add	r0, sp, #24
 8001c44:	f003 fa1a 	bl	800507c <printToBufferUART1>
}
 8001c48:	b010      	add	sp, #64	; 0x40
 8001c4a:	bd10      	pop	{r4, pc}
 8001c4c:	20000770 	.word	0x20000770
 8001c50:	08005c50 	.word	0x08005c50
 8001c54:	08005f92 	.word	0x08005f92
 8001c58:	20000780 	.word	0x20000780
 8001c5c:	08005ffd 	.word	0x08005ffd

08001c60 <SelectedOption.part.8>:
void SelectedOption(void)
 8001c60:	b508      	push	{r3, lr}
		lcd_set_xy(7,1);
 8001c62:	2101      	movs	r1, #1
 8001c64:	2007      	movs	r0, #7
 8001c66:	f7ff fe17 	bl	8001898 <lcd_set_xy>
}
 8001c6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		lcd_send(255,DATA);
 8001c6e:	2101      	movs	r1, #1
 8001c70:	20ff      	movs	r0, #255	; 0xff
 8001c72:	f7ff bd51 	b.w	8001718 <lcd_send>
	...

08001c78 <LL_ADC_SetChannelSamplingTime.constprop.31>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_55CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
 8001c78:	b570      	push	{r4, r5, r6, lr}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c7e:	fa91 f1a1 	rbit	r1, r1
{
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001c82:	fab1 f381 	clz	r3, r1
 8001c86:	4c10      	ldr	r4, [pc, #64]	; (8001cc8 <LL_ADC_SetChannelSamplingTime.constprop.31+0x50>)
 8001c88:	f000 7100 	and.w	r1, r0, #33554432	; 0x2000000
 8001c8c:	40d9      	lsrs	r1, r3
  
  MODIFY_REG(*preg,
 8001c8e:	f854 5021 	ldr.w	r5, [r4, r1, lsl #2]
 8001c92:	f000 70f8 	and.w	r0, r0, #32505856	; 0x1f00000
 8001c96:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001c9a:	fa92 f3a2 	rbit	r3, r2
 8001c9e:	fab3 f383 	clz	r3, r3
 8001ca2:	fa92 f2a2 	rbit	r2, r2
 8001ca6:	2607      	movs	r6, #7
 8001ca8:	fab2 f282 	clz	r2, r2
 8001cac:	fa20 f303 	lsr.w	r3, r0, r3
 8001cb0:	fa06 f303 	lsl.w	r3, r6, r3
 8001cb4:	40d0      	lsrs	r0, r2
 8001cb6:	ea25 0303 	bic.w	r3, r5, r3
 8001cba:	fa06 f000 	lsl.w	r0, r6, r0
 8001cbe:	4318      	orrs	r0, r3
 8001cc0:	f844 0021 	str.w	r0, [r4, r1, lsl #2]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8001cc4:	bd70      	pop	{r4, r5, r6, pc}
 8001cc6:	bf00      	nop
 8001cc8:	4001240c 	.word	0x4001240c

08001ccc <LL_ADC_REG_SetSequencerRanks.constprop.32>:
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
 8001ccc:	b530      	push	{r4, r5, lr}
 8001cce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cd2:	fa93 f3a3 	rbit	r3, r3
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001cd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cda:	fab3 f383 	clz	r3, r3
  MODIFY_REG(*preg,
 8001cde:	241f      	movs	r4, #31
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001ce0:	4d07      	ldr	r5, [pc, #28]	; (8001d00 <LL_ADC_REG_SetSequencerRanks.constprop.32+0x34>)
 8001ce2:	40da      	lsrs	r2, r3
  MODIFY_REG(*preg,
 8001ce4:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
 8001ce8:	f000 001f 	and.w	r0, r0, #31
 8001cec:	4084      	lsls	r4, r0
 8001cee:	f001 011f 	and.w	r1, r1, #31
 8001cf2:	ea23 0304 	bic.w	r3, r3, r4
 8001cf6:	4081      	lsls	r1, r0
 8001cf8:	4319      	orrs	r1, r3
 8001cfa:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
}
 8001cfe:	bd30      	pop	{r4, r5, pc}
 8001d00:	4001242c 	.word	0x4001242c

08001d04 <NVIC_EncodePriority.constprop.33>:

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8001d04:	2000      	movs	r0, #0
 8001d06:	4770      	bx	lr

08001d08 <MenuPowerSupply>:
	lcd_set_xy(0,0);
 8001d08:	2100      	movs	r1, #0
	EnterInMenu_Status = 1;
 8001d0a:	2201      	movs	r2, #1
{
 8001d0c:	b510      	push	{r4, lr}
 8001d0e:	4604      	mov	r4, r0
	EnterInMenu_Status = 1;
 8001d10:	4b2a      	ldr	r3, [pc, #168]	; (8001dbc <MenuPowerSupply+0xb4>)
	lcd_set_xy(0,0);
 8001d12:	4608      	mov	r0, r1
	EnterInMenu_Status = 1;
 8001d14:	701a      	strb	r2, [r3, #0]
	lcd_set_xy(0,0);
 8001d16:	f7ff fdbf 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa_koma(U_OUT,2));
 8001d1a:	4b29      	ldr	r3, [pc, #164]	; (8001dc0 <MenuPowerSupply+0xb8>)
 8001d1c:	2102      	movs	r1, #2
 8001d1e:	8818      	ldrh	r0, [r3, #0]
 8001d20:	f7ff facc 	bl	80012bc <itoa_koma>
 8001d24:	f7ff fe38 	bl	8001998 <PrintToLCD>
	PrintToLCD("V  ");
 8001d28:	4826      	ldr	r0, [pc, #152]	; (8001dc4 <MenuPowerSupply+0xbc>)
 8001d2a:	f7ff fe35 	bl	8001998 <PrintToLCD>
	lcd_set_xy(7,0);
 8001d2e:	2100      	movs	r1, #0
 8001d30:	2007      	movs	r0, #7
 8001d32:	f7ff fdb1 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa(Current));
 8001d36:	4b24      	ldr	r3, [pc, #144]	; (8001dc8 <MenuPowerSupply+0xc0>)
 8001d38:	8818      	ldrh	r0, [r3, #0]
 8001d3a:	b200      	sxth	r0, r0
 8001d3c:	f7ff fa4a 	bl	80011d4 <itoa>
 8001d40:	f7ff fe2a 	bl	8001998 <PrintToLCD>
	PrintToLCD("mA        ");
 8001d44:	4821      	ldr	r0, [pc, #132]	; (8001dcc <MenuPowerSupply+0xc4>)
 8001d46:	f7ff fe27 	bl	8001998 <PrintToLCD>
	if (key == KEY_CURR)
 8001d4a:	2c06      	cmp	r4, #6
 8001d4c:	d110      	bne.n	8001d70 <MenuPowerSupply+0x68>
		Menu_Navigate(MENU_CHILD);
 8001d4e:	f7ff fc77 	bl	8001640 <Menu_GetCurrentMenu>
 8001d52:	68c0      	ldr	r0, [r0, #12]
 8001d54:	f7ff fc7a 	bl	800164c <Menu_Navigate>
		Menu_Navigate(MENU_NEXT);
 8001d58:	f7ff fc72 	bl	8001640 <Menu_GetCurrentMenu>
 8001d5c:	6800      	ldr	r0, [r0, #0]
 8001d5e:	f7ff fc75 	bl	800164c <Menu_Navigate>
		Menu_Navigate(MENU_CHILD);
 8001d62:	f7ff fc6d 	bl	8001640 <Menu_GetCurrentMenu>
}
 8001d66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Menu_Navigate(MENU_CHILD);
 8001d6a:	68c0      	ldr	r0, [r0, #12]
 8001d6c:	f7ff bc6e 	b.w	800164c <Menu_Navigate>
    if (key == KEY_NEXT)
 8001d70:	2c02      	cmp	r4, #2
 8001d72:	d113      	bne.n	8001d9c <MenuPowerSupply+0x94>
    	DAC_VoltageCounter = DAC_VoltageCounter+DAC_step;
 8001d74:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <MenuPowerSupply+0xc8>)
 8001d76:	4a17      	ldr	r2, [pc, #92]	; (8001dd4 <MenuPowerSupply+0xcc>)
 8001d78:	8819      	ldrh	r1, [r3, #0]
 8001d7a:	8812      	ldrh	r2, [r2, #0]
 8001d7c:	440a      	add	r2, r1
 8001d7e:	b212      	sxth	r2, r2
 8001d80:	801a      	strh	r2, [r3, #0]
    	if (DAC_VoltageCounter>4095) DAC_VoltageCounter = 4095;
 8001d82:	881a      	ldrh	r2, [r3, #0]
 8001d84:	b212      	sxth	r2, r2
 8001d86:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001d8a:	db02      	blt.n	8001d92 <MenuPowerSupply+0x8a>
 8001d8c:	f640 72ff 	movw	r2, #4095	; 0xfff
    	if (DAC_VoltageCounter<=0) DAC_VoltageCounter = 0;
 8001d90:	801a      	strh	r2, [r3, #0]
    	DAC->DHR12R1 = DAC_VoltageCounter;
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	4a10      	ldr	r2, [pc, #64]	; (8001dd8 <MenuPowerSupply+0xd0>)
 8001d96:	b21b      	sxth	r3, r3
 8001d98:	6093      	str	r3, [r2, #8]
}
 8001d9a:	bd10      	pop	{r4, pc}
    if (key == KEY_BACK)
 8001d9c:	2c01      	cmp	r4, #1
 8001d9e:	d1fc      	bne.n	8001d9a <MenuPowerSupply+0x92>
    	DAC_VoltageCounter = DAC_VoltageCounter-DAC_step;
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <MenuPowerSupply+0xc8>)
 8001da2:	490c      	ldr	r1, [pc, #48]	; (8001dd4 <MenuPowerSupply+0xcc>)
 8001da4:	881a      	ldrh	r2, [r3, #0]
 8001da6:	8809      	ldrh	r1, [r1, #0]
 8001da8:	1a52      	subs	r2, r2, r1
 8001daa:	b212      	sxth	r2, r2
 8001dac:	801a      	strh	r2, [r3, #0]
    	if (DAC_VoltageCounter<=0) DAC_VoltageCounter = 0;
 8001dae:	881a      	ldrh	r2, [r3, #0]
 8001db0:	b212      	sxth	r2, r2
 8001db2:	2a00      	cmp	r2, #0
 8001db4:	dced      	bgt.n	8001d92 <MenuPowerSupply+0x8a>
 8001db6:	2200      	movs	r2, #0
 8001db8:	e7ea      	b.n	8001d90 <MenuPowerSupply+0x88>
 8001dba:	bf00      	nop
 8001dbc:	20000794 	.word	0x20000794
 8001dc0:	2000084e 	.word	0x2000084e
 8001dc4:	0800602c 	.word	0x0800602c
 8001dc8:	2000083e 	.word	0x2000083e
 8001dcc:	08006030 	.word	0x08006030
 8001dd0:	20000788 	.word	0x20000788
 8001dd4:	20000274 	.word	0x20000274
 8001dd8:	40007400 	.word	0x40007400

08001ddc <MenuLoad>:
	EnterInMenu_Status = 1;
 8001ddc:	2201      	movs	r2, #1
 8001dde:	4b33      	ldr	r3, [pc, #204]	; (8001eac <MenuLoad+0xd0>)
	if (key == KEY_CURR)
 8001de0:	2806      	cmp	r0, #6
{
 8001de2:	b510      	push	{r4, lr}
	EnterInMenu_Status = 1;
 8001de4:	701a      	strb	r2, [r3, #0]
 8001de6:	4c32      	ldr	r4, [pc, #200]	; (8001eb0 <MenuLoad+0xd4>)
	if (key == KEY_CURR)
 8001de8:	d13c      	bne.n	8001e64 <MenuLoad+0x88>
		Menu_Navigate(MENU_CHILD);
 8001dea:	f7ff fc29 	bl	8001640 <Menu_GetCurrentMenu>
 8001dee:	68c0      	ldr	r0, [r0, #12]
 8001df0:	f7ff fc2c 	bl	800164c <Menu_Navigate>
		Menu_Navigate(MENU_PREVIOUS);
 8001df4:	f7ff fc24 	bl	8001640 <Menu_GetCurrentMenu>
 8001df8:	6840      	ldr	r0, [r0, #4]
 8001dfa:	f7ff fc27 	bl	800164c <Menu_Navigate>
		Menu_Navigate(MENU_CHILD);
 8001dfe:	f7ff fc1f 	bl	8001640 <Menu_GetCurrentMenu>
 8001e02:	68c0      	ldr	r0, [r0, #12]
 8001e04:	f7ff fc22 	bl	800164c <Menu_Navigate>
	lcd_set_xy(0,0);
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4608      	mov	r0, r1
 8001e0c:	f7ff fd44 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa_koma(U_OUT,2));
 8001e10:	4b28      	ldr	r3, [pc, #160]	; (8001eb4 <MenuLoad+0xd8>)
 8001e12:	2102      	movs	r1, #2
 8001e14:	8818      	ldrh	r0, [r3, #0]
 8001e16:	f7ff fa51 	bl	80012bc <itoa_koma>
 8001e1a:	f7ff fdbd 	bl	8001998 <PrintToLCD>
	PrintToLCD("V ");
 8001e1e:	4826      	ldr	r0, [pc, #152]	; (8001eb8 <MenuLoad+0xdc>)
 8001e20:	f7ff fdba 	bl	8001998 <PrintToLCD>
	lcd_set_xy(7,0);
 8001e24:	2100      	movs	r1, #0
 8001e26:	2007      	movs	r0, #7
 8001e28:	f7ff fd36 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa(Current));
 8001e2c:	4b23      	ldr	r3, [pc, #140]	; (8001ebc <MenuLoad+0xe0>)
 8001e2e:	8818      	ldrh	r0, [r3, #0]
 8001e30:	b200      	sxth	r0, r0
 8001e32:	f7ff f9cf 	bl	80011d4 <itoa>
 8001e36:	f7ff fdaf 	bl	8001998 <PrintToLCD>
	PrintToLCD("mA   ");
 8001e3a:	4821      	ldr	r0, [pc, #132]	; (8001ec0 <MenuLoad+0xe4>)
 8001e3c:	f7ff fdac 	bl	8001998 <PrintToLCD>
	lcd_set_xy(3,1);
 8001e40:	2101      	movs	r1, #1
 8001e42:	2003      	movs	r0, #3
 8001e44:	f7ff fd28 	bl	8001898 <lcd_set_xy>
	PrintToLCD("I");
 8001e48:	481e      	ldr	r0, [pc, #120]	; (8001ec4 <MenuLoad+0xe8>)
 8001e4a:	f7ff fda5 	bl	8001998 <PrintToLCD>
	PrintToLCD(itoa(DAC_CurrentCounter));
 8001e4e:	8820      	ldrh	r0, [r4, #0]
 8001e50:	b200      	sxth	r0, r0
 8001e52:	f7ff f9bf 	bl	80011d4 <itoa>
 8001e56:	f7ff fd9f 	bl	8001998 <PrintToLCD>
}
 8001e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("   ");
 8001e5e:	481a      	ldr	r0, [pc, #104]	; (8001ec8 <MenuLoad+0xec>)
 8001e60:	f7ff bd9a 	b.w	8001998 <PrintToLCD>
    if (key == KEY_NEXT)
 8001e64:	2802      	cmp	r0, #2
 8001e66:	d112      	bne.n	8001e8e <MenuLoad+0xb2>
    	DAC_CurrentCounter = DAC_CurrentCounter+DAC_step;
 8001e68:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <MenuLoad+0xf0>)
 8001e6a:	8822      	ldrh	r2, [r4, #0]
 8001e6c:	881b      	ldrh	r3, [r3, #0]
 8001e6e:	4413      	add	r3, r2
 8001e70:	b21b      	sxth	r3, r3
 8001e72:	8023      	strh	r3, [r4, #0]
    	if (DAC_CurrentCounter>4095) DAC_CurrentCounter = 4095;
 8001e74:	8823      	ldrh	r3, [r4, #0]
 8001e76:	b21b      	sxth	r3, r3
 8001e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e7c:	db02      	blt.n	8001e84 <MenuLoad+0xa8>
 8001e7e:	f640 73ff 	movw	r3, #4095	; 0xfff
    	if (DAC_CurrentCounter<=0) DAC_CurrentCounter = 0;
 8001e82:	8023      	strh	r3, [r4, #0]
    	DAC->DHR12R2 = DAC_CurrentCounter;
 8001e84:	8823      	ldrh	r3, [r4, #0]
 8001e86:	4a12      	ldr	r2, [pc, #72]	; (8001ed0 <MenuLoad+0xf4>)
 8001e88:	b21b      	sxth	r3, r3
 8001e8a:	6153      	str	r3, [r2, #20]
 8001e8c:	e7bc      	b.n	8001e08 <MenuLoad+0x2c>
    if (key == KEY_BACK)
 8001e8e:	2801      	cmp	r0, #1
 8001e90:	d1ba      	bne.n	8001e08 <MenuLoad+0x2c>
    	DAC_CurrentCounter = DAC_CurrentCounter-DAC_step;
 8001e92:	4a0e      	ldr	r2, [pc, #56]	; (8001ecc <MenuLoad+0xf0>)
 8001e94:	8823      	ldrh	r3, [r4, #0]
 8001e96:	8812      	ldrh	r2, [r2, #0]
 8001e98:	1a9b      	subs	r3, r3, r2
 8001e9a:	b21b      	sxth	r3, r3
 8001e9c:	8023      	strh	r3, [r4, #0]
    	if (DAC_CurrentCounter<=0) DAC_CurrentCounter = 0;
 8001e9e:	8823      	ldrh	r3, [r4, #0]
 8001ea0:	b21b      	sxth	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	dcee      	bgt.n	8001e84 <MenuLoad+0xa8>
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	e7eb      	b.n	8001e82 <MenuLoad+0xa6>
 8001eaa:	bf00      	nop
 8001eac:	20000794 	.word	0x20000794
 8001eb0:	20000272 	.word	0x20000272
 8001eb4:	2000084e 	.word	0x2000084e
 8001eb8:	08006001 	.word	0x08006001
 8001ebc:	2000083e 	.word	0x2000083e
 8001ec0:	08006004 	.word	0x08006004
 8001ec4:	0800600a 	.word	0x0800600a
 8001ec8:	0800613c 	.word	0x0800613c
 8001ecc:	20000274 	.word	0x20000274
 8001ed0:	40007400 	.word	0x40007400

08001ed4 <MenuChargeCC_CV>:
	EnterInMenu_Status = 1;
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	4b35      	ldr	r3, [pc, #212]	; (8001fac <MenuChargeCC_CV+0xd8>)
	if (key == KEY_VOLT)
 8001ed8:	2805      	cmp	r0, #5
{
 8001eda:	b510      	push	{r4, lr}
	EnterInMenu_Status = 1;
 8001edc:	701a      	strb	r2, [r3, #0]
 8001ede:	4c34      	ldr	r4, [pc, #208]	; (8001fb0 <MenuChargeCC_CV+0xdc>)
	if (key == KEY_VOLT)
 8001ee0:	d141      	bne.n	8001f66 <MenuChargeCC_CV+0x92>
		Menu_Navigate(MENU_CHILD);
 8001ee2:	f7ff fbad 	bl	8001640 <Menu_GetCurrentMenu>
 8001ee6:	68c0      	ldr	r0, [r0, #12]
 8001ee8:	f7ff fbb0 	bl	800164c <Menu_Navigate>
		Menu_Navigate(MENU_PREVIOUS);
 8001eec:	f7ff fba8 	bl	8001640 <Menu_GetCurrentMenu>
 8001ef0:	6840      	ldr	r0, [r0, #4]
 8001ef2:	f7ff fbab 	bl	800164c <Menu_Navigate>
		Menu_Navigate(MENU_PREVIOUS);
 8001ef6:	f7ff fba3 	bl	8001640 <Menu_GetCurrentMenu>
 8001efa:	6840      	ldr	r0, [r0, #4]
 8001efc:	f7ff fba6 	bl	800164c <Menu_Navigate>
		Menu_Navigate(MENU_CHILD);
 8001f00:	f7ff fb9e 	bl	8001640 <Menu_GetCurrentMenu>
 8001f04:	68c0      	ldr	r0, [r0, #12]
 8001f06:	f7ff fba1 	bl	800164c <Menu_Navigate>
	lcd_set_xy(0,0);
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4608      	mov	r0, r1
 8001f0e:	f7ff fcc3 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa_koma(U_OUT,2));
 8001f12:	4b28      	ldr	r3, [pc, #160]	; (8001fb4 <MenuChargeCC_CV+0xe0>)
 8001f14:	2102      	movs	r1, #2
 8001f16:	8818      	ldrh	r0, [r3, #0]
 8001f18:	f7ff f9d0 	bl	80012bc <itoa_koma>
 8001f1c:	f7ff fd3c 	bl	8001998 <PrintToLCD>
	PrintToLCD("V  ");
 8001f20:	4825      	ldr	r0, [pc, #148]	; (8001fb8 <MenuChargeCC_CV+0xe4>)
 8001f22:	f7ff fd39 	bl	8001998 <PrintToLCD>
	lcd_set_xy(6,0);
 8001f26:	2100      	movs	r1, #0
 8001f28:	2006      	movs	r0, #6
 8001f2a:	f7ff fcb5 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa(Current_x1));
 8001f2e:	4b23      	ldr	r3, [pc, #140]	; (8001fbc <MenuChargeCC_CV+0xe8>)
 8001f30:	8818      	ldrh	r0, [r3, #0]
 8001f32:	b200      	sxth	r0, r0
 8001f34:	f7ff f94e 	bl	80011d4 <itoa>
 8001f38:	f7ff fd2e 	bl	8001998 <PrintToLCD>
	PrintToLCD("m   ");
 8001f3c:	4820      	ldr	r0, [pc, #128]	; (8001fc0 <MenuChargeCC_CV+0xec>)
 8001f3e:	f7ff fd2b 	bl	8001998 <PrintToLCD>
	lcd_set_xy(3,1);
 8001f42:	2101      	movs	r1, #1
 8001f44:	2003      	movs	r0, #3
 8001f46:	f7ff fca7 	bl	8001898 <lcd_set_xy>
	PrintToLCD("V");
 8001f4a:	481e      	ldr	r0, [pc, #120]	; (8001fc4 <MenuChargeCC_CV+0xf0>)
 8001f4c:	f7ff fd24 	bl	8001998 <PrintToLCD>
	PrintToLCD(itoa(DAC_VoltageCounter));
 8001f50:	8820      	ldrh	r0, [r4, #0]
 8001f52:	b200      	sxth	r0, r0
 8001f54:	f7ff f93e 	bl	80011d4 <itoa>
 8001f58:	f7ff fd1e 	bl	8001998 <PrintToLCD>
}
 8001f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("   ");
 8001f60:	4819      	ldr	r0, [pc, #100]	; (8001fc8 <MenuChargeCC_CV+0xf4>)
 8001f62:	f7ff bd19 	b.w	8001998 <PrintToLCD>
    if (key == KEY_NEXT)
 8001f66:	2802      	cmp	r0, #2
 8001f68:	d112      	bne.n	8001f90 <MenuChargeCC_CV+0xbc>
    	DAC_VoltageCounter = DAC_VoltageCounter+DAC_step;
 8001f6a:	4b18      	ldr	r3, [pc, #96]	; (8001fcc <MenuChargeCC_CV+0xf8>)
 8001f6c:	8822      	ldrh	r2, [r4, #0]
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	4413      	add	r3, r2
 8001f72:	b21b      	sxth	r3, r3
 8001f74:	8023      	strh	r3, [r4, #0]
    	if (DAC_VoltageCounter>4095) DAC_VoltageCounter = 4095;
 8001f76:	8823      	ldrh	r3, [r4, #0]
 8001f78:	b21b      	sxth	r3, r3
 8001f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f7e:	db02      	blt.n	8001f86 <MenuChargeCC_CV+0xb2>
 8001f80:	f640 73ff 	movw	r3, #4095	; 0xfff
    	if (DAC_VoltageCounter<=0) DAC_VoltageCounter = 0;
 8001f84:	8023      	strh	r3, [r4, #0]
    	DAC->DHR12R1 = DAC_VoltageCounter;
 8001f86:	8823      	ldrh	r3, [r4, #0]
 8001f88:	4a11      	ldr	r2, [pc, #68]	; (8001fd0 <MenuChargeCC_CV+0xfc>)
 8001f8a:	b21b      	sxth	r3, r3
 8001f8c:	6093      	str	r3, [r2, #8]
 8001f8e:	e7bc      	b.n	8001f0a <MenuChargeCC_CV+0x36>
    if (key == KEY_BACK)
 8001f90:	2801      	cmp	r0, #1
 8001f92:	d1ba      	bne.n	8001f0a <MenuChargeCC_CV+0x36>
    	DAC_VoltageCounter = DAC_VoltageCounter-DAC_step;
 8001f94:	4a0d      	ldr	r2, [pc, #52]	; (8001fcc <MenuChargeCC_CV+0xf8>)
 8001f96:	8823      	ldrh	r3, [r4, #0]
 8001f98:	8812      	ldrh	r2, [r2, #0]
 8001f9a:	1a9b      	subs	r3, r3, r2
 8001f9c:	b21b      	sxth	r3, r3
 8001f9e:	8023      	strh	r3, [r4, #0]
    	if (DAC_VoltageCounter<=0) DAC_VoltageCounter = 0;
 8001fa0:	8823      	ldrh	r3, [r4, #0]
 8001fa2:	b21b      	sxth	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	dcee      	bgt.n	8001f86 <MenuChargeCC_CV+0xb2>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	e7eb      	b.n	8001f84 <MenuChargeCC_CV+0xb0>
 8001fac:	20000794 	.word	0x20000794
 8001fb0:	20000788 	.word	0x20000788
 8001fb4:	2000084e 	.word	0x2000084e
 8001fb8:	0800602c 	.word	0x0800602c
 8001fbc:	200002b6 	.word	0x200002b6
 8001fc0:	08005f8d 	.word	0x08005f8d
 8001fc4:	0800609e 	.word	0x0800609e
 8001fc8:	0800613c 	.word	0x0800613c
 8001fcc:	20000274 	.word	0x20000274
 8001fd0:	40007400 	.word	0x40007400

08001fd4 <MenuTraining_WriteInLOG>:
	s[1] = '\0';
 8001fd4:	2300      	movs	r3, #0
{
 8001fd6:	b510      	push	{r4, lr}
 8001fd8:	b096      	sub	sp, #88	; 0x58
 8001fda:	4604      	mov	r4, r0
 8001fdc:	4608      	mov	r0, r1
	ClockStringNoSec(Time,s_clock);
 8001fde:	a911      	add	r1, sp, #68	; 0x44
	s[0] = c;
 8001fe0:	f88d 2004 	strb.w	r2, [sp, #4]
	s[1] = '\0';
 8001fe4:	f88d 3005 	strb.w	r3, [sp, #5]
	ClockStringNoSec(Time,s_clock);
 8001fe8:	f7ff fa81 	bl	80014ee <ClockStringNoSec>
	Merge3Strings(itoaP(Capacity/3600,str),"mAh",s_clock,strout);
 8001fec:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8001ff0:	a902      	add	r1, sp, #8
 8001ff2:	fbb4 f0f0 	udiv	r0, r4, r0
 8001ff6:	f7ff f927 	bl	8001248 <itoaP>
 8001ffa:	ab07      	add	r3, sp, #28
 8001ffc:	aa11      	add	r2, sp, #68	; 0x44
 8001ffe:	4907      	ldr	r1, [pc, #28]	; (800201c <MenuTraining_WriteInLOG+0x48>)
 8002000:	f7ff f9e7 	bl	80013d2 <Merge3Strings>
	Merge2Strings(s,strout,strout1);
 8002004:	aa0c      	add	r2, sp, #48	; 0x30
 8002006:	a907      	add	r1, sp, #28
 8002008:	a801      	add	r0, sp, #4
 800200a:	f7ff f9cd 	bl	80013a8 <Merge2Strings>
	WriteInLOGc(strout1,TRAINING_);
 800200e:	2104      	movs	r1, #4
 8002010:	a80c      	add	r0, sp, #48	; 0x30
 8002012:	f7fe fedb 	bl	8000dcc <WriteInLOGc>
}
 8002016:	b016      	add	sp, #88	; 0x58
 8002018:	bd10      	pop	{r4, pc}
 800201a:	bf00      	nop
 800201c:	08005ffd 	.word	0x08005ffd

08002020 <MenuLog>:
	if (key == KEY_NEXT)
 8002020:	2802      	cmp	r0, #2
{
 8002022:	b538      	push	{r3, r4, r5, lr}
 8002024:	4c1f      	ldr	r4, [pc, #124]	; (80020a4 <MenuLog+0x84>)
 8002026:	4d20      	ldr	r5, [pc, #128]	; (80020a8 <MenuLog+0x88>)
	if (key == KEY_NEXT)
 8002028:	d12a      	bne.n	8002080 <MenuLog+0x60>
		i_LogItems++;
 800202a:	8823      	ldrh	r3, [r4, #0]
		if (i_LogItems>=LoggingData.RecordsQuantity) i_LogItems=0;
 800202c:	682a      	ldr	r2, [r5, #0]
		i_LogItems++;
 800202e:	3301      	adds	r3, #1
 8002030:	b21b      	sxth	r3, r3
		if (i_LogItems>=LoggingData.RecordsQuantity) i_LogItems=0;
 8002032:	4293      	cmp	r3, r2
		i_LogItems++;
 8002034:	8023      	strh	r3, [r4, #0]
		if (i_LogItems>=LoggingData.RecordsQuantity) i_LogItems=0;
 8002036:	d301      	bcc.n	800203c <MenuLog+0x1c>
 8002038:	2300      	movs	r3, #0
 800203a:	8023      	strh	r3, [r4, #0]
	lcd_set_xy(0,0);
 800203c:	2100      	movs	r1, #0
 800203e:	4608      	mov	r0, r1
 8002040:	f7ff fc2a 	bl	8001898 <lcd_set_xy>
	PrintToLCD(LoggingData.Records[LoggingData.RecordsQuantity - i_LogItems-1]);
 8002044:	6828      	ldr	r0, [r5, #0]
 8002046:	f9b4 3000 	ldrsh.w	r3, [r4]
 800204a:	3801      	subs	r0, #1
 800204c:	1ac0      	subs	r0, r0, r3
 800204e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8002052:	3004      	adds	r0, #4
 8002054:	4428      	add	r0, r5
 8002056:	f7ff fc9f 	bl	8001998 <PrintToLCD>
	logDebugD("i_LogItems: ",i_LogItems,0);
 800205a:	4814      	ldr	r0, [pc, #80]	; (80020ac <MenuLog+0x8c>)
 800205c:	f003 f878 	bl	8005150 <printToBufferWithoutEndUART1>
 8002060:	f9b4 1000 	ldrsh.w	r1, [r4]
 8002064:	2200      	movs	r2, #0
 8002066:	4812      	ldr	r0, [pc, #72]	; (80020b0 <MenuLog+0x90>)
 8002068:	f003 f8b6 	bl	80051d8 <printToBufferUART1D>
	logDebugD("MRecordsQuantity: ",LoggingData.RecordsQuantity,0);
 800206c:	480f      	ldr	r0, [pc, #60]	; (80020ac <MenuLog+0x8c>)
 800206e:	f003 f86f 	bl	8005150 <printToBufferWithoutEndUART1>
 8002072:	6829      	ldr	r1, [r5, #0]
 8002074:	2200      	movs	r2, #0
}
 8002076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	logDebugD("MRecordsQuantity: ",LoggingData.RecordsQuantity,0);
 800207a:	480e      	ldr	r0, [pc, #56]	; (80020b4 <MenuLog+0x94>)
 800207c:	f003 b8ac 	b.w	80051d8 <printToBufferUART1D>
	if (key == KEY_BACK)
 8002080:	2801      	cmp	r0, #1
 8002082:	d1db      	bne.n	800203c <MenuLog+0x1c>
		i_LogItems--;
 8002084:	8823      	ldrh	r3, [r4, #0]
 8002086:	3b01      	subs	r3, #1
 8002088:	b21b      	sxth	r3, r3
		if (i_LogItems<0) i_LogItems=LoggingData.RecordsQuantity-1;
 800208a:	2b00      	cmp	r3, #0
		i_LogItems--;
 800208c:	8023      	strh	r3, [r4, #0]
		if (i_LogItems<0) i_LogItems=LoggingData.RecordsQuantity-1;
 800208e:	bfbe      	ittt	lt
 8002090:	682b      	ldrlt	r3, [r5, #0]
 8002092:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8002096:	8023      	strhlt	r3, [r4, #0]
		if (i_LogItems<0) i_LogItems=0;
 8002098:	f9b4 3000 	ldrsh.w	r3, [r4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	dacd      	bge.n	800203c <MenuLog+0x1c>
 80020a0:	e7ca      	b.n	8002038 <MenuLog+0x18>
 80020a2:	bf00      	nop
 80020a4:	200007c8 	.word	0x200007c8
 80020a8:	20000858 	.word	0x20000858
 80020ac:	08005c50 	.word	0x08005c50
 80020b0:	0800600c 	.word	0x0800600c
 80020b4:	08006019 	.word	0x08006019

080020b8 <MenuCalibration_Current_x1_to_0>:
		lcd_set_xy(0,0);
 80020b8:	2100      	movs	r1, #0
{
 80020ba:	b510      	push	{r4, lr}
 80020bc:	4604      	mov	r4, r0
		lcd_set_xy(0,0);
 80020be:	4608      	mov	r0, r1
 80020c0:	f7ff fbea 	bl	8001898 <lcd_set_xy>
		PrintToLCD(itoa(Current));
 80020c4:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <MenuCalibration_Current_x1_to_0+0x38>)
 80020c6:	8818      	ldrh	r0, [r3, #0]
 80020c8:	b200      	sxth	r0, r0
 80020ca:	f7ff f883 	bl	80011d4 <itoa>
 80020ce:	f7ff fc63 	bl	8001998 <PrintToLCD>
		PrintToLCD("mA >> set 0   ");
 80020d2:	4808      	ldr	r0, [pc, #32]	; (80020f4 <MenuCalibration_Current_x1_to_0+0x3c>)
 80020d4:	f7ff fc60 	bl	8001998 <PrintToLCD>
		if (key == KEY_NEXT)
 80020d8:	2c02      	cmp	r4, #2
 80020da:	d108      	bne.n	80020ee <MenuCalibration_Current_x1_to_0+0x36>
}
 80020dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			CalibrationData.Calibration0ValueForCurrent = Current_x1;
 80020e0:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <MenuCalibration_Current_x1_to_0+0x40>)
 80020e2:	4a06      	ldr	r2, [pc, #24]	; (80020fc <MenuCalibration_Current_x1_to_0+0x44>)
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	b21b      	sxth	r3, r3
 80020e8:	6093      	str	r3, [r2, #8]
			CalibrationWriteToFlash_CRC();
 80020ea:	f7fe bc43 	b.w	8000974 <CalibrationWriteToFlash_CRC>
}
 80020ee:	bd10      	pop	{r4, pc}
 80020f0:	2000083e 	.word	0x2000083e
 80020f4:	08005f4e 	.word	0x08005f4e
 80020f8:	200002b6 	.word	0x200002b6
 80020fc:	20000004 	.word	0x20000004

08002100 <MenuCalibration_Current_x50_to_0>:
	lcd_set_xy(0,0);
 8002100:	2100      	movs	r1, #0
{
 8002102:	b510      	push	{r4, lr}
 8002104:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 8002106:	4608      	mov	r0, r1
 8002108:	f7ff fbc6 	bl	8001898 <lcd_set_xy>
	PrintToLCD(	itoa(Current));
 800210c:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <MenuCalibration_Current_x50_to_0+0x38>)
 800210e:	8818      	ldrh	r0, [r3, #0]
 8002110:	b200      	sxth	r0, r0
 8002112:	f7ff f85f 	bl	80011d4 <itoa>
 8002116:	f7ff fc3f 	bl	8001998 <PrintToLCD>
	PrintToLCD("mA >> set 0   ");
 800211a:	4808      	ldr	r0, [pc, #32]	; (800213c <MenuCalibration_Current_x50_to_0+0x3c>)
 800211c:	f7ff fc3c 	bl	8001998 <PrintToLCD>
	if (key == KEY_NEXT)
 8002120:	2c02      	cmp	r4, #2
 8002122:	d108      	bne.n	8002136 <MenuCalibration_Current_x50_to_0+0x36>
}
 8002124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		CalibrationData.Calibration0ValueForCurrent1 = Current_x50;
 8002128:	4b05      	ldr	r3, [pc, #20]	; (8002140 <MenuCalibration_Current_x50_to_0+0x40>)
 800212a:	4a06      	ldr	r2, [pc, #24]	; (8002144 <MenuCalibration_Current_x50_to_0+0x44>)
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	b21b      	sxth	r3, r3
 8002130:	6113      	str	r3, [r2, #16]
		CalibrationWriteToFlash_CRC();
 8002132:	f7fe bc1f 	b.w	8000974 <CalibrationWriteToFlash_CRC>
}
 8002136:	bd10      	pop	{r4, pc}
 8002138:	2000083e 	.word	0x2000083e
 800213c:	08005f4e 	.word	0x08005f4e
 8002140:	200002b8 	.word	0x200002b8
 8002144:	20000004 	.word	0x20000004

08002148 <MenuCalibration_BackToFactory>:
	lcd_set_xy(0,0);
 8002148:	2100      	movs	r1, #0
{
 800214a:	b510      	push	{r4, lr}
 800214c:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 800214e:	4608      	mov	r0, r1
 8002150:	f7ff fba2 	bl	8001898 <lcd_set_xy>
	PrintToLCD("Factory-press >>");
 8002154:	481f      	ldr	r0, [pc, #124]	; (80021d4 <MenuCalibration_BackToFactory+0x8c>)
 8002156:	f7ff fc1f 	bl	8001998 <PrintToLCD>
	if (key == KEY_NEXT)
 800215a:	2c02      	cmp	r4, #2
 800215c:	d130      	bne.n	80021c0 <MenuCalibration_BackToFactory+0x78>
		FactoryWriteToFlash_CRC();
 800215e:	f7fe fc99 	bl	8000a94 <FactoryWriteToFlash_CRC>
		EEpromReadStatus = ReadFromFlash();
 8002162:	f7fe fbc3 	bl	80008ec <ReadFromFlash>
		lcd_set_xy(0,0);
 8002166:	2100      	movs	r1, #0
		EEpromReadStatus = ReadFromFlash();
 8002168:	4604      	mov	r4, r0
		lcd_set_xy(0,0);
 800216a:	4608      	mov	r0, r1
 800216c:	f7ff fb94 	bl	8001898 <lcd_set_xy>
		PrintToLCD("In Proccess ....");
 8002170:	4819      	ldr	r0, [pc, #100]	; (80021d8 <MenuCalibration_BackToFactory+0x90>)
 8002172:	f7ff fc11 	bl	8001998 <PrintToLCD>
		delay_ms(2000);
 8002176:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800217a:	f7fe ff0f 	bl	8000f9c <delay_ms>
		lcd_set_xy(0,0);
 800217e:	2100      	movs	r1, #0
 8002180:	4608      	mov	r0, r1
 8002182:	f7ff fb89 	bl	8001898 <lcd_set_xy>
		if (EEpromReadStatus == 1)
 8002186:	2c01      	cmp	r4, #1
 8002188:	d11b      	bne.n	80021c2 <MenuCalibration_BackToFactory+0x7a>
			PrintToLCD("Factory are OK  ");
 800218a:	4814      	ldr	r0, [pc, #80]	; (80021dc <MenuCalibration_BackToFactory+0x94>)
 800218c:	f7ff fc04 	bl	8001998 <PrintToLCD>
			WriteInLOG("Factory are OK");
 8002190:	4813      	ldr	r0, [pc, #76]	; (80021e0 <MenuCalibration_BackToFactory+0x98>)
 8002192:	f7fe fd69 	bl	8000c68 <WriteInLOG>
			delay_ms(2000);
 8002196:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800219a:	f7fe feff 	bl	8000f9c <delay_ms>
		    BatteryCapacityDischargeCurrentAfterPOwerUp = SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent;
 800219e:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <MenuCalibration_BackToFactory+0x9c>)
 80021a0:	691a      	ldr	r2, [r3, #16]
 80021a2:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <MenuCalibration_BackToFactory+0xa0>)
 80021a4:	601a      	str	r2, [r3, #0]
		    ChargeDurationSec = SettingsData.ChargeTime*3600;
 80021a6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80021aa:	4b10      	ldr	r3, [pc, #64]	; (80021ec <MenuCalibration_BackToFactory+0xa4>)
 80021ac:	6919      	ldr	r1, [r3, #16]
 80021ae:	434a      	muls	r2, r1
 80021b0:	490f      	ldr	r1, [pc, #60]	; (80021f0 <MenuCalibration_BackToFactory+0xa8>)
 80021b2:	600a      	str	r2, [r1, #0]
		    SelectedOptionValue = SettingsData.Option1;
 80021b4:	6899      	ldr	r1, [r3, #8]
 80021b6:	4a0f      	ldr	r2, [pc, #60]	; (80021f4 <MenuCalibration_BackToFactory+0xac>)
 80021b8:	6011      	str	r1, [r2, #0]
		    SelectedOptionValue1 = SettingsData.Option2;
 80021ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021bc:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <MenuCalibration_BackToFactory+0xb0>)
 80021be:	601a      	str	r2, [r3, #0]
}
 80021c0:	bd10      	pop	{r4, pc}
			PrintToLCD("EEprom read FAIL");
 80021c2:	480e      	ldr	r0, [pc, #56]	; (80021fc <MenuCalibration_BackToFactory+0xb4>)
 80021c4:	f7ff fbe8 	bl	8001998 <PrintToLCD>
}
 80021c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			delay_ms(4000);
 80021cc:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80021d0:	f7fe bee4 	b.w	8000f9c <delay_ms>
 80021d4:	08005ef6 	.word	0x08005ef6
 80021d8:	08005f07 	.word	0x08005f07
 80021dc:	08005f18 	.word	0x08005f18
 80021e0:	08005f29 	.word	0x08005f29
 80021e4:	200000f4 	.word	0x200000f4
 80021e8:	20000778 	.word	0x20000778
 80021ec:	20000154 	.word	0x20000154
 80021f0:	200009fc 	.word	0x200009fc
 80021f4:	20000a00 	.word	0x20000a00
 80021f8:	200009f8 	.word	0x200009f8
 80021fc:	08005f38 	.word	0x08005f38

08002200 <MenuSettingsChargeTime>:
	if (key == KEY_NEXT) SettingsData.ChargeTime++;
 8002200:	2802      	cmp	r0, #2
{
 8002202:	b510      	push	{r4, lr}
 8002204:	4c0e      	ldr	r4, [pc, #56]	; (8002240 <MenuSettingsChargeTime+0x40>)
	if (key == KEY_NEXT) SettingsData.ChargeTime++;
 8002206:	d115      	bne.n	8002234 <MenuSettingsChargeTime+0x34>
 8002208:	6923      	ldr	r3, [r4, #16]
 800220a:	3301      	adds	r3, #1
	if (key == KEY_BACK) SettingsData.ChargeTime--;
 800220c:	6123      	str	r3, [r4, #16]
	lcd_set_xy(0,0);
 800220e:	2100      	movs	r1, #0
 8002210:	4608      	mov	r0, r1
 8002212:	f7ff fb41 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa(SettingsData.ChargeTime));
 8002216:	6920      	ldr	r0, [r4, #16]
 8002218:	f7fe ffdc 	bl	80011d4 <itoa>
 800221c:	f7ff fbbc 	bl	8001998 <PrintToLCD>
	PrintToLCD("h   ");
 8002220:	4808      	ldr	r0, [pc, #32]	; (8002244 <MenuSettingsChargeTime+0x44>)
 8002222:	f7ff fbb9 	bl	8001998 <PrintToLCD>
    ChargeDurationSec = SettingsData.ChargeTime*3600;
 8002226:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800222a:	6922      	ldr	r2, [r4, #16]
 800222c:	4353      	muls	r3, r2
 800222e:	4a06      	ldr	r2, [pc, #24]	; (8002248 <MenuSettingsChargeTime+0x48>)
 8002230:	6013      	str	r3, [r2, #0]
}
 8002232:	bd10      	pop	{r4, pc}
	if (key == KEY_BACK) SettingsData.ChargeTime--;
 8002234:	2801      	cmp	r0, #1
 8002236:	d1ea      	bne.n	800220e <MenuSettingsChargeTime+0xe>
 8002238:	6923      	ldr	r3, [r4, #16]
 800223a:	3b01      	subs	r3, #1
 800223c:	e7e6      	b.n	800220c <MenuSettingsChargeTime+0xc>
 800223e:	bf00      	nop
 8002240:	20000154 	.word	0x20000154
 8002244:	08006119 	.word	0x08006119
 8002248:	200009fc 	.word	0x200009fc

0800224c <MenuSettingsBatteryType>:
{
 800224c:	b510      	push	{r4, lr}
 800224e:	4c30      	ldr	r4, [pc, #192]	; (8002310 <MenuSettingsBatteryType+0xc4>)
	if (key == KEY_NEXT)
 8002250:	2802      	cmp	r0, #2
 8002252:	f994 3000 	ldrsb.w	r3, [r4]
 8002256:	d152      	bne.n	80022fe <MenuSettingsBatteryType+0xb2>
		CountShowBT++;
 8002258:	3301      	adds	r3, #1
 800225a:	b25b      	sxtb	r3, r3
		if (CountShowBT==MAXITEM_BT) CountShowBT=0;
 800225c:	2b07      	cmp	r3, #7
 800225e:	bf08      	it	eq
 8002260:	2300      	moveq	r3, #0
		if (CountShowBT<0) CountShowBT=MAXITEM_BT-1;
 8002262:	7023      	strb	r3, [r4, #0]
	if(CountShowBT == 0)
 8002264:	f994 1000 	ldrsb.w	r1, [r4]
 8002268:	b929      	cbnz	r1, 8002276 <MenuSettingsBatteryType+0x2a>
		lcd_set_xy(0,0);
 800226a:	4608      	mov	r0, r1
 800226c:	f7ff fb14 	bl	8001898 <lcd_set_xy>
		PrintToLCD("12V Pb Battery  ");
 8002270:	4828      	ldr	r0, [pc, #160]	; (8002314 <MenuSettingsBatteryType+0xc8>)
 8002272:	f7ff fb91 	bl	8001998 <PrintToLCD>
	if(CountShowBT == 1)
 8002276:	f994 3000 	ldrsb.w	r3, [r4]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d106      	bne.n	800228c <MenuSettingsBatteryType+0x40>
		lcd_set_xy(0,0);
 800227e:	2100      	movs	r1, #0
 8002280:	4608      	mov	r0, r1
 8002282:	f7ff fb09 	bl	8001898 <lcd_set_xy>
		PrintToLCD("Li ion  Battery  ");
 8002286:	4824      	ldr	r0, [pc, #144]	; (8002318 <MenuSettingsBatteryType+0xcc>)
 8002288:	f7ff fb86 	bl	8001998 <PrintToLCD>
	if(CountShowBT == 2)
 800228c:	f994 3000 	ldrsb.w	r3, [r4]
 8002290:	2b02      	cmp	r3, #2
 8002292:	d106      	bne.n	80022a2 <MenuSettingsBatteryType+0x56>
		lcd_set_xy(0,0);
 8002294:	2100      	movs	r1, #0
 8002296:	4608      	mov	r0, r1
 8002298:	f7ff fafe 	bl	8001898 <lcd_set_xy>
		PrintToLCD("LiFePo4 Battery ");
 800229c:	481f      	ldr	r0, [pc, #124]	; (800231c <MenuSettingsBatteryType+0xd0>)
 800229e:	f7ff fb7b 	bl	8001998 <PrintToLCD>
	if(CountShowBT == 3)
 80022a2:	f994 3000 	ldrsb.w	r3, [r4]
 80022a6:	2b03      	cmp	r3, #3
 80022a8:	d106      	bne.n	80022b8 <MenuSettingsBatteryType+0x6c>
		lcd_set_xy(0,0);
 80022aa:	2100      	movs	r1, #0
 80022ac:	4608      	mov	r0, r1
 80022ae:	f7ff faf3 	bl	8001898 <lcd_set_xy>
		PrintToLCD("LiTo Battery   ");
 80022b2:	481b      	ldr	r0, [pc, #108]	; (8002320 <MenuSettingsBatteryType+0xd4>)
 80022b4:	f7ff fb70 	bl	8001998 <PrintToLCD>
	if(CountShowBT == 4)
 80022b8:	f994 3000 	ldrsb.w	r3, [r4]
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d106      	bne.n	80022ce <MenuSettingsBatteryType+0x82>
		lcd_set_xy(0,0);
 80022c0:	2100      	movs	r1, #0
 80022c2:	4608      	mov	r0, r1
 80022c4:	f7ff fae8 	bl	8001898 <lcd_set_xy>
		PrintToLCD("NIMh 9.6V Bat.  ");
 80022c8:	4816      	ldr	r0, [pc, #88]	; (8002324 <MenuSettingsBatteryType+0xd8>)
 80022ca:	f7ff fb65 	bl	8001998 <PrintToLCD>
	if(CountShowBT == 5)
 80022ce:	f994 3000 	ldrsb.w	r3, [r4]
 80022d2:	2b05      	cmp	r3, #5
 80022d4:	d106      	bne.n	80022e4 <MenuSettingsBatteryType+0x98>
		lcd_set_xy(0,0);
 80022d6:	2100      	movs	r1, #0
 80022d8:	4608      	mov	r0, r1
 80022da:	f7ff fadd 	bl	8001898 <lcd_set_xy>
		PrintToLCD("Min 1V  MAX 20V");
 80022de:	4812      	ldr	r0, [pc, #72]	; (8002328 <MenuSettingsBatteryType+0xdc>)
 80022e0:	f7ff fb5a 	bl	8001998 <PrintToLCD>
	if(CountShowBT == 6)
 80022e4:	f994 3000 	ldrsb.w	r3, [r4]
 80022e8:	2b06      	cmp	r3, #6
 80022ea:	d110      	bne.n	800230e <MenuSettingsBatteryType+0xc2>
		lcd_set_xy(0,0);
 80022ec:	2100      	movs	r1, #0
 80022ee:	4608      	mov	r0, r1
 80022f0:	f7ff fad2 	bl	8001898 <lcd_set_xy>
}
 80022f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PrintToLCD("   OK to Exit  ");
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <MenuSettingsBatteryType+0xe0>)
 80022fa:	f7ff bb4d 	b.w	8001998 <PrintToLCD>
	if (key == KEY_BACK)
 80022fe:	2801      	cmp	r0, #1
 8002300:	d1b0      	bne.n	8002264 <MenuSettingsBatteryType+0x18>
		CountShowBT--;
 8002302:	3b01      	subs	r3, #1
 8002304:	b25b      	sxtb	r3, r3
		if (CountShowBT<0) CountShowBT=MAXITEM_BT-1;
 8002306:	2b00      	cmp	r3, #0
 8002308:	bfb8      	it	lt
 800230a:	2306      	movlt	r3, #6
 800230c:	e7a9      	b.n	8002262 <MenuSettingsBatteryType+0x16>
}
 800230e:	bd10      	pop	{r4, pc}
 8002310:	20000787 	.word	0x20000787
 8002314:	0800603b 	.word	0x0800603b
 8002318:	0800604c 	.word	0x0800604c
 800231c:	0800605e 	.word	0x0800605e
 8002320:	0800606f 	.word	0x0800606f
 8002324:	0800607f 	.word	0x0800607f
 8002328:	08006090 	.word	0x08006090
 800232c:	080060a0 	.word	0x080060a0

08002330 <MenuSettingsLowVolt>:
	if (key == KEY_NEXT) SettingsData.LowVoltage = SettingsData.LowVoltage + 10;
 8002330:	2802      	cmp	r0, #2
{
 8002332:	b510      	push	{r4, lr}
 8002334:	4c0d      	ldr	r4, [pc, #52]	; (800236c <MenuSettingsLowVolt+0x3c>)
	if (key == KEY_NEXT) SettingsData.LowVoltage = SettingsData.LowVoltage + 10;
 8002336:	d114      	bne.n	8002362 <MenuSettingsLowVolt+0x32>
 8002338:	69a3      	ldr	r3, [r4, #24]
 800233a:	330a      	adds	r3, #10
	if (key == KEY_BACK) SettingsData.LowVoltage = SettingsData.LowVoltage - 10;
 800233c:	61a3      	str	r3, [r4, #24]
	lcd_set_xy(0,0);
 800233e:	2100      	movs	r1, #0
 8002340:	4608      	mov	r0, r1
 8002342:	f7ff faa9 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 8002346:	230a      	movs	r3, #10
 8002348:	69a0      	ldr	r0, [r4, #24]
 800234a:	2101      	movs	r1, #1
 800234c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002350:	f7fe ffb4 	bl	80012bc <itoa_koma>
 8002354:	f7ff fb20 	bl	8001998 <PrintToLCD>
}
 8002358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V   ");
 800235c:	4804      	ldr	r0, [pc, #16]	; (8002370 <MenuSettingsLowVolt+0x40>)
 800235e:	f7ff bb1b 	b.w	8001998 <PrintToLCD>
	if (key == KEY_BACK) SettingsData.LowVoltage = SettingsData.LowVoltage - 10;
 8002362:	2801      	cmp	r0, #1
 8002364:	d1eb      	bne.n	800233e <MenuSettingsLowVolt+0xe>
 8002366:	69a3      	ldr	r3, [r4, #24]
 8002368:	3b0a      	subs	r3, #10
 800236a:	e7e7      	b.n	800233c <MenuSettingsLowVolt+0xc>
 800236c:	20000154 	.word	0x20000154
 8002370:	080060cd 	.word	0x080060cd

08002374 <MenuSettingsMaxVolt>:
	if (key == KEY_NEXT) SettingsData.MaxVoltage = SettingsData.MaxVoltage + 10;
 8002374:	2802      	cmp	r0, #2
{
 8002376:	b510      	push	{r4, lr}
 8002378:	4c0d      	ldr	r4, [pc, #52]	; (80023b0 <MenuSettingsMaxVolt+0x3c>)
	if (key == KEY_NEXT) SettingsData.MaxVoltage = SettingsData.MaxVoltage + 10;
 800237a:	d114      	bne.n	80023a6 <MenuSettingsMaxVolt+0x32>
 800237c:	6a23      	ldr	r3, [r4, #32]
 800237e:	330a      	adds	r3, #10
	if (key == KEY_BACK) SettingsData.MaxVoltage = SettingsData.MaxVoltage - 10;
 8002380:	6223      	str	r3, [r4, #32]
	lcd_set_xy(0,0);
 8002382:	2100      	movs	r1, #0
 8002384:	4608      	mov	r0, r1
 8002386:	f7ff fa87 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 800238a:	230a      	movs	r3, #10
 800238c:	6a20      	ldr	r0, [r4, #32]
 800238e:	2101      	movs	r1, #1
 8002390:	fbb0 f0f3 	udiv	r0, r0, r3
 8002394:	f7fe ff92 	bl	80012bc <itoa_koma>
 8002398:	f7ff fafe 	bl	8001998 <PrintToLCD>
}
 800239c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V   ");
 80023a0:	4804      	ldr	r0, [pc, #16]	; (80023b4 <MenuSettingsMaxVolt+0x40>)
 80023a2:	f7ff baf9 	b.w	8001998 <PrintToLCD>
	if (key == KEY_BACK) SettingsData.MaxVoltage = SettingsData.MaxVoltage - 10;
 80023a6:	2801      	cmp	r0, #1
 80023a8:	d1eb      	bne.n	8002382 <MenuSettingsMaxVolt+0xe>
 80023aa:	6a23      	ldr	r3, [r4, #32]
 80023ac:	3b0a      	subs	r3, #10
 80023ae:	e7e7      	b.n	8002380 <MenuSettingsMaxVolt+0xc>
 80023b0:	20000154 	.word	0x20000154
 80023b4:	080060cd 	.word	0x080060cd

080023b8 <MenuSettingsSwngChrgTime>:
	if (key == KEY_NEXT)  SettingsData.Swing_Chrg_time++;
 80023b8:	2802      	cmp	r0, #2
{
 80023ba:	b510      	push	{r4, lr}
 80023bc:	4c0b      	ldr	r4, [pc, #44]	; (80023ec <MenuSettingsSwngChrgTime+0x34>)
	if (key == KEY_NEXT)  SettingsData.Swing_Chrg_time++;
 80023be:	d110      	bne.n	80023e2 <MenuSettingsSwngChrgTime+0x2a>
 80023c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80023c2:	3301      	adds	r3, #1
	if (key == KEY_BACK)  SettingsData.Swing_Chrg_time--;
 80023c4:	62a3      	str	r3, [r4, #40]	; 0x28
	lcd_set_xy(0,0);
 80023c6:	2100      	movs	r1, #0
 80023c8:	4608      	mov	r0, r1
 80023ca:	f7ff fa65 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa(SettingsData.Swing_Chrg_time));
 80023ce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80023d0:	f7fe ff00 	bl	80011d4 <itoa>
 80023d4:	f7ff fae0 	bl	8001998 <PrintToLCD>
}
 80023d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD(" sec.   ");
 80023dc:	4804      	ldr	r0, [pc, #16]	; (80023f0 <MenuSettingsSwngChrgTime+0x38>)
 80023de:	f7ff badb 	b.w	8001998 <PrintToLCD>
	if (key == KEY_BACK)  SettingsData.Swing_Chrg_time--;
 80023e2:	2801      	cmp	r0, #1
 80023e4:	d1ef      	bne.n	80023c6 <MenuSettingsSwngChrgTime+0xe>
 80023e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80023e8:	3b01      	subs	r3, #1
 80023ea:	e7eb      	b.n	80023c4 <MenuSettingsSwngChrgTime+0xc>
 80023ec:	20000154 	.word	0x20000154
 80023f0:	080061c8 	.word	0x080061c8

080023f4 <MenuSettingsSwngDChrgTime>:
	if (key == KEY_NEXT)  SettingsData.Swing_DChrg_time++;
 80023f4:	2802      	cmp	r0, #2
{
 80023f6:	b510      	push	{r4, lr}
 80023f8:	4c0b      	ldr	r4, [pc, #44]	; (8002428 <MenuSettingsSwngDChrgTime+0x34>)
	if (key == KEY_NEXT)  SettingsData.Swing_DChrg_time++;
 80023fa:	d110      	bne.n	800241e <MenuSettingsSwngDChrgTime+0x2a>
 80023fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80023fe:	3301      	adds	r3, #1
	if (key == KEY_BACK)  SettingsData.Swing_DChrg_time--;
 8002400:	6323      	str	r3, [r4, #48]	; 0x30
	lcd_set_xy(0,0);
 8002402:	2100      	movs	r1, #0
 8002404:	4608      	mov	r0, r1
 8002406:	f7ff fa47 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa(SettingsData.Swing_DChrg_time));
 800240a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800240c:	f7fe fee2 	bl	80011d4 <itoa>
 8002410:	f7ff fac2 	bl	8001998 <PrintToLCD>
}
 8002414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD(" sec.   ");
 8002418:	4804      	ldr	r0, [pc, #16]	; (800242c <MenuSettingsSwngDChrgTime+0x38>)
 800241a:	f7ff babd 	b.w	8001998 <PrintToLCD>
	if (key == KEY_BACK)  SettingsData.Swing_DChrg_time--;
 800241e:	2801      	cmp	r0, #1
 8002420:	d1ef      	bne.n	8002402 <MenuSettingsSwngDChrgTime+0xe>
 8002422:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002424:	3b01      	subs	r3, #1
 8002426:	e7eb      	b.n	8002400 <MenuSettingsSwngDChrgTime+0xc>
 8002428:	20000154 	.word	0x20000154
 800242c:	080061c8 	.word	0x080061c8

08002430 <MenuSettingsChargeAddapt>:
	if (key == KEY_NEXT)  SettingsData.ChargeAdapt++;
 8002430:	2802      	cmp	r0, #2
{
 8002432:	b538      	push	{r3, r4, r5, lr}
 8002434:	4c1a      	ldr	r4, [pc, #104]	; (80024a0 <MenuSettingsChargeAddapt+0x70>)
	if (key == KEY_NEXT)  SettingsData.ChargeAdapt++;
 8002436:	d12d      	bne.n	8002494 <MenuSettingsChargeAddapt+0x64>
 8002438:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800243a:	3301      	adds	r3, #1
	if (key == KEY_BACK)  SettingsData.ChargeAdapt--;
 800243c:	63a3      	str	r3, [r4, #56]	; 0x38
	lcd_set_xy(0,0);
 800243e:	2100      	movs	r1, #0
	PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8002440:	250a      	movs	r5, #10
	lcd_set_xy(0,0);
 8002442:	4608      	mov	r0, r1
 8002444:	f7ff fa28 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa(SettingsData.ChargeAdapt));
 8002448:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800244a:	f7fe fec3 	bl	80011d4 <itoa>
 800244e:	f7ff faa3 	bl	8001998 <PrintToLCD>
	PrintToLCD("% ");
 8002452:	4814      	ldr	r0, [pc, #80]	; (80024a4 <MenuSettingsChargeAddapt+0x74>)
 8002454:	f7ff faa0 	bl	8001998 <PrintToLCD>
	PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8002458:	6a20      	ldr	r0, [r4, #32]
 800245a:	2101      	movs	r1, #1
 800245c:	fbb0 f0f5 	udiv	r0, r0, r5
 8002460:	f7fe ff2c 	bl	80012bc <itoa_koma>
 8002464:	f7ff fa98 	bl	8001998 <PrintToLCD>
	PrintToLCD("V ");
 8002468:	480f      	ldr	r0, [pc, #60]	; (80024a8 <MenuSettingsChargeAddapt+0x78>)
 800246a:	f7ff fa95 	bl	8001998 <PrintToLCD>
	PrintToLCD(itoa_koma((SettingsData.MaxVoltage-(SettingsData.MaxVoltage * SettingsData.ChargeAdapt/100))/10,1));
 800246e:	2264      	movs	r2, #100	; 0x64
 8002470:	6a23      	ldr	r3, [r4, #32]
 8002472:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002474:	2101      	movs	r1, #1
 8002476:	4358      	muls	r0, r3
 8002478:	fbb0 f0f2 	udiv	r0, r0, r2
 800247c:	1a18      	subs	r0, r3, r0
 800247e:	fbb0 f0f5 	udiv	r0, r0, r5
 8002482:	f7fe ff1b 	bl	80012bc <itoa_koma>
 8002486:	f7ff fa87 	bl	8001998 <PrintToLCD>
}
 800248a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PrintToLCD("V   ");
 800248e:	4807      	ldr	r0, [pc, #28]	; (80024ac <MenuSettingsChargeAddapt+0x7c>)
 8002490:	f7ff ba82 	b.w	8001998 <PrintToLCD>
	if (key == KEY_BACK)  SettingsData.ChargeAdapt--;
 8002494:	2801      	cmp	r0, #1
 8002496:	d1d2      	bne.n	800243e <MenuSettingsChargeAddapt+0xe>
 8002498:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800249a:	3b01      	subs	r3, #1
 800249c:	e7ce      	b.n	800243c <MenuSettingsChargeAddapt+0xc>
 800249e:	bf00      	nop
 80024a0:	20000154 	.word	0x20000154
 80024a4:	08006116 	.word	0x08006116
 80024a8:	08006001 	.word	0x08006001
 80024ac:	080060cd 	.word	0x080060cd

080024b0 <SelectedOption>:
	if (SelectedOptionValue == SettingsData.Option1)
 80024b0:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <SelectedOption+0x14>)
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <SelectedOption+0x18>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d101      	bne.n	80024c0 <SelectedOption+0x10>
 80024bc:	f7ff bbd0 	b.w	8001c60 <SelectedOption.part.8>
}
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	20000154 	.word	0x20000154
 80024c8:	20000a00 	.word	0x20000a00

080024cc <SelectedOption1>:
	if (SelectedOptionValue1 == SettingsData.Option2)
 80024cc:	4b04      	ldr	r3, [pc, #16]	; (80024e0 <SelectedOption1+0x14>)
 80024ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024d0:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <SelectedOption1+0x18>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d101      	bne.n	80024dc <SelectedOption1+0x10>
 80024d8:	f7ff bbc2 	b.w	8001c60 <SelectedOption.part.8>
}
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	20000154 	.word	0x20000154
 80024e4:	200009f8 	.word	0x200009f8

080024e8 <MenuSettingsSaveMenuPosWhenOFF>:
	lcd_set_xy(0,0);
 80024e8:	2100      	movs	r1, #0
{
 80024ea:	b510      	push	{r4, lr}
 80024ec:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 80024ee:	4608      	mov	r0, r1
 80024f0:	f7ff f9d2 	bl	8001898 <lcd_set_xy>
	if (key == KEY_NEXT)
 80024f4:	2c02      	cmp	r4, #2
 80024f6:	4b17      	ldr	r3, [pc, #92]	; (8002554 <MenuSettingsSaveMenuPosWhenOFF+0x6c>)
 80024f8:	d10f      	bne.n	800251a <MenuSettingsSaveMenuPosWhenOFF+0x32>
		SettingsData.Option1++;
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	3201      	adds	r2, #1
		if (SettingsData.Option1==QUANTITY_OPTIONS+1) SettingsData.Option1=1;
 80024fe:	2a08      	cmp	r2, #8
 8002500:	bf08      	it	eq
 8002502:	2201      	moveq	r2, #1
		if (SettingsData.Option1==0) SettingsData.Option1 = QUANTITY_OPTIONS;
 8002504:	609a      	str	r2, [r3, #8]
	switch (SettingsData.Option1)
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	3a01      	subs	r2, #1
 800250a:	2a06      	cmp	r2, #6
 800250c:	d81f      	bhi.n	800254e <MenuSettingsSaveMenuPosWhenOFF+0x66>
 800250e:	e8df f002 	tbb	[pc, r2]
 8002512:	120b      	.short	0x120b
 8002514:	1a181614 	.word	0x1a181614
 8002518:	1c          	.byte	0x1c
 8002519:	00          	.byte	0x00
	if (key == KEY_BACK)
 800251a:	2c01      	cmp	r4, #1
 800251c:	d1f3      	bne.n	8002506 <MenuSettingsSaveMenuPosWhenOFF+0x1e>
		SettingsData.Option1--;
 800251e:	689a      	ldr	r2, [r3, #8]
		if (SettingsData.Option1==0) SettingsData.Option1 = QUANTITY_OPTIONS;
 8002520:	3a01      	subs	r2, #1
 8002522:	bf08      	it	eq
 8002524:	2207      	moveq	r2, #7
 8002526:	e7ed      	b.n	8002504 <MenuSettingsSaveMenuPosWhenOFF+0x1c>
			PrintToLCD("PowerSupply     ");
 8002528:	480b      	ldr	r0, [pc, #44]	; (8002558 <MenuSettingsSaveMenuPosWhenOFF+0x70>)
			PrintToLCD("Swing           ");
 800252a:	f7ff fa35 	bl	8001998 <PrintToLCD>
}
 800252e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			SelectedOption();
 8002532:	f7ff bfbd 	b.w	80024b0 <SelectedOption>
			PrintToLCD("Load Menu       ");
 8002536:	4809      	ldr	r0, [pc, #36]	; (800255c <MenuSettingsSaveMenuPosWhenOFF+0x74>)
 8002538:	e7f7      	b.n	800252a <MenuSettingsSaveMenuPosWhenOFF+0x42>
			PrintToLCD("Charge CC CV    ");
 800253a:	4809      	ldr	r0, [pc, #36]	; (8002560 <MenuSettingsSaveMenuPosWhenOFF+0x78>)
 800253c:	e7f5      	b.n	800252a <MenuSettingsSaveMenuPosWhenOFF+0x42>
			PrintToLCD("Charge addapt   ");
 800253e:	4809      	ldr	r0, [pc, #36]	; (8002564 <MenuSettingsSaveMenuPosWhenOFF+0x7c>)
 8002540:	e7f3      	b.n	800252a <MenuSettingsSaveMenuPosWhenOFF+0x42>
			PrintToLCD("DisCharge       ");
 8002542:	4809      	ldr	r0, [pc, #36]	; (8002568 <MenuSettingsSaveMenuPosWhenOFF+0x80>)
 8002544:	e7f1      	b.n	800252a <MenuSettingsSaveMenuPosWhenOFF+0x42>
			PrintToLCD("Training        ");
 8002546:	4809      	ldr	r0, [pc, #36]	; (800256c <MenuSettingsSaveMenuPosWhenOFF+0x84>)
 8002548:	e7ef      	b.n	800252a <MenuSettingsSaveMenuPosWhenOFF+0x42>
			PrintToLCD("Swing           ");
 800254a:	4809      	ldr	r0, [pc, #36]	; (8002570 <MenuSettingsSaveMenuPosWhenOFF+0x88>)
 800254c:	e7ed      	b.n	800252a <MenuSettingsSaveMenuPosWhenOFF+0x42>
			SettingsData.Option1 =1;
 800254e:	2201      	movs	r2, #1
 8002550:	609a      	str	r2, [r3, #8]
}
 8002552:	bd10      	pop	{r4, pc}
 8002554:	20000154 	.word	0x20000154
 8002558:	08006151 	.word	0x08006151
 800255c:	08006162 	.word	0x08006162
 8002560:	08006173 	.word	0x08006173
 8002564:	08006184 	.word	0x08006184
 8002568:	08006195 	.word	0x08006195
 800256c:	080061a6 	.word	0x080061a6
 8002570:	080061b7 	.word	0x080061b7

08002574 <MenuSettingsOutAfterPowerUp>:
	lcd_set_xy(0,0);
 8002574:	2100      	movs	r1, #0
{
 8002576:	b510      	push	{r4, lr}
 8002578:	4604      	mov	r4, r0
	lcd_set_xy(0,0);
 800257a:	4608      	mov	r0, r1
 800257c:	f7ff f98c 	bl	8001898 <lcd_set_xy>
	if (key == KEY_NEXT)
 8002580:	2c02      	cmp	r4, #2
 8002582:	4b12      	ldr	r3, [pc, #72]	; (80025cc <MenuSettingsOutAfterPowerUp+0x58>)
 8002584:	d113      	bne.n	80025ae <MenuSettingsOutAfterPowerUp+0x3a>
		SettingsData.Option2++;
 8002586:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002588:	3201      	adds	r2, #1
		if (SettingsData.Option2==QUANTITY_OPTIONS1+1) SettingsData.Option2=1;
 800258a:	2a04      	cmp	r2, #4
 800258c:	bf08      	it	eq
 800258e:	2201      	moveq	r2, #1
		if (SettingsData.Option2==0) SettingsData.Option2 = QUANTITY_OPTIONS1;
 8002590:	641a      	str	r2, [r3, #64]	; 0x40
	switch (SettingsData.Option2)
 8002592:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002594:	2a02      	cmp	r2, #2
 8002596:	d011      	beq.n	80025bc <MenuSettingsOutAfterPowerUp+0x48>
 8002598:	2a03      	cmp	r2, #3
 800259a:	d011      	beq.n	80025c0 <MenuSettingsOutAfterPowerUp+0x4c>
 800259c:	2a01      	cmp	r2, #1
 800259e:	d111      	bne.n	80025c4 <MenuSettingsOutAfterPowerUp+0x50>
			PrintToLCD("OFF             ");
 80025a0:	480b      	ldr	r0, [pc, #44]	; (80025d0 <MenuSettingsOutAfterPowerUp+0x5c>)
			PrintToLCD("Previous        ");
 80025a2:	f7ff f9f9 	bl	8001998 <PrintToLCD>
}
 80025a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			SelectedOption1();
 80025aa:	f7ff bf8f 	b.w	80024cc <SelectedOption1>
	if (key == KEY_BACK)
 80025ae:	2c01      	cmp	r4, #1
 80025b0:	d1ef      	bne.n	8002592 <MenuSettingsOutAfterPowerUp+0x1e>
		SettingsData.Option2--;
 80025b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		if (SettingsData.Option2==0) SettingsData.Option2 = QUANTITY_OPTIONS1;
 80025b4:	3a01      	subs	r2, #1
 80025b6:	bf08      	it	eq
 80025b8:	2203      	moveq	r2, #3
 80025ba:	e7e9      	b.n	8002590 <MenuSettingsOutAfterPowerUp+0x1c>
			PrintToLCD("ON              ");
 80025bc:	4805      	ldr	r0, [pc, #20]	; (80025d4 <MenuSettingsOutAfterPowerUp+0x60>)
 80025be:	e7f0      	b.n	80025a2 <MenuSettingsOutAfterPowerUp+0x2e>
			PrintToLCD("Previous        ");
 80025c0:	4805      	ldr	r0, [pc, #20]	; (80025d8 <MenuSettingsOutAfterPowerUp+0x64>)
 80025c2:	e7ee      	b.n	80025a2 <MenuSettingsOutAfterPowerUp+0x2e>
			SettingsData.Option2 =1;
 80025c4:	2201      	movs	r2, #1
 80025c6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80025c8:	bd10      	pop	{r4, pc}
 80025ca:	bf00      	nop
 80025cc:	20000154 	.word	0x20000154
 80025d0:	0800611e 	.word	0x0800611e
 80025d4:	0800612f 	.word	0x0800612f
 80025d8:	08006140 	.word	0x08006140

080025dc <ENC_PollEncoder>:
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80025dc:	4a27      	ldr	r2, [pc, #156]	; (800267c <ENC_PollEncoder+0xa0>)

Key_Pressed_t bufEnc = 0; //буфер энкодера
int16_t comp = 0;

void ENC_PollEncoder(void)
{
 80025de:	b510      	push	{r4, lr}
 80025e0:	6893      	ldr	r3, [r2, #8]
 80025e2:	6891      	ldr	r1, [r2, #8]
 80025e4:	43db      	mvns	r3, r3
	Key_Pressed_t key;
	//провер¤ем состо¤ние выводов микроконтроллера


	if (!LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_11)) {SetBit(currentState,0);}
	if (!LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_8)) {SetBit(currentState,1);}
 80025e6:	05c9      	lsls	r1, r1, #23
 80025e8:	4925      	ldr	r1, [pc, #148]	; (8002680 <ENC_PollEncoder+0xa4>)
	unsigned char currentState = 0;
 80025ea:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 80025ee:	6888      	ldr	r0, [r1, #8]
	if (!LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_8)) {SetBit(currentState,1);}
 80025f0:	bf58      	it	pl
 80025f2:	f043 0302 	orrpl.w	r3, r3, #2
	if (!LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_4))
 80025f6:	f010 0f10 	tst.w	r0, #16
 80025fa:	4822      	ldr	r0, [pc, #136]	; (8002684 <ENC_PollEncoder+0xa8>)
 80025fc:	d01e      	beq.n	800263c <ENC_PollEncoder+0x60>
 80025fe:	688c      	ldr	r4, [r1, #8]
		key = KEY_OK;
	else if (!LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_5))
 8002600:	06a4      	lsls	r4, r4, #26
 8002602:	d528      	bpl.n	8002656 <ENC_PollEncoder+0x7a>
 8002604:	688c      	ldr	r4, [r1, #8]
		key = KEY_VOLT;
	else if (!LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_6))
 8002606:	0664      	lsls	r4, r4, #25
 8002608:	d527      	bpl.n	800265a <ENC_PollEncoder+0x7e>
 800260a:	6889      	ldr	r1, [r1, #8]
		key = KEY_CURR;
	else if (!LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_7))
 800260c:	0609      	lsls	r1, r1, #24
 800260e:	d526      	bpl.n	800265e <ENC_PollEncoder+0x82>
 8002610:	6892      	ldr	r2, [r2, #8]
 8002612:	43d2      	mvns	r2, r2
		key = KEY_FINE;
	else if (!LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_12))
 8002614:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002618:	d123      	bne.n	8002662 <ENC_PollEncoder+0x86>
	      {
	    	  bufEnc = key;
	        return;
	      }
	    }
	    else comp=0;
 800261a:	8002      	strh	r2, [r0, #0]
	//если равно предыдущему, то выходим
	tmp = stateEnc;
 800261c:	4a1a      	ldr	r2, [pc, #104]	; (8002688 <ENC_PollEncoder+0xac>)
 800261e:	7811      	ldrb	r1, [r2, #0]
	if (currentState == (tmp & b00000011)) return;
 8002620:	f001 0003 	and.w	r0, r1, #3
 8002624:	4283      	cmp	r3, r0
 8002626:	d015      	beq.n	8002654 <ENC_PollEncoder+0x78>

	//если не равно, то сдвигаем и сохран¤ем в озу
	tmp = (tmp<<2)|currentState;
 8002628:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 800262c:	b2db      	uxtb	r3, r3
	stateEnc = tmp;

	//сравниваем получившуюс¤ последовательность
	if (tmp == b11100001)
 800262e:	2be1      	cmp	r3, #225	; 0xe1
	stateEnc = tmp;
 8002630:	7013      	strb	r3, [r2, #0]
	if (tmp == b11100001)
 8002632:	d11e      	bne.n	8002672 <ENC_PollEncoder+0x96>
		bufEnc = KEY_NEXT;
 8002634:	2202      	movs	r2, #2
 8002636:	4b15      	ldr	r3, [pc, #84]	; (800268c <ENC_PollEncoder+0xb0>)
	if (tmp == b11010010)
		bufEnc = KEY_BACK;
 8002638:	701a      	strb	r2, [r3, #0]
 800263a:	e00b      	b.n	8002654 <ENC_PollEncoder+0x78>
		key = KEY_OK;
 800263c:	2103      	movs	r1, #3
	      if (comp > THRESHOLD2)
 800263e:	f240 54dc 	movw	r4, #1500	; 0x5dc
 8002642:	f9b0 2000 	ldrsh.w	r2, [r0]
 8002646:	42a2      	cmp	r2, r4
 8002648:	dd0d      	ble.n	8002666 <ENC_PollEncoder+0x8a>
	        comp = THRESHOLD2 - 40;
 800264a:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800264e:	8003      	strh	r3, [r0, #0]
	    	  bufEnc = key;
 8002650:	4b0e      	ldr	r3, [pc, #56]	; (800268c <ENC_PollEncoder+0xb0>)
 8002652:	7019      	strb	r1, [r3, #0]

	return;
}
 8002654:	bd10      	pop	{r4, pc}
		key = KEY_VOLT;
 8002656:	2105      	movs	r1, #5
 8002658:	e7f1      	b.n	800263e <ENC_PollEncoder+0x62>
		key = KEY_CURR;
 800265a:	2106      	movs	r1, #6
 800265c:	e7ef      	b.n	800263e <ENC_PollEncoder+0x62>
		key = KEY_FINE;
 800265e:	2107      	movs	r1, #7
 8002660:	e7ed      	b.n	800263e <ENC_PollEncoder+0x62>
		key = KEY_OUT;
 8002662:	2108      	movs	r1, #8
 8002664:	e7eb      	b.n	800263e <ENC_PollEncoder+0x62>
	      else comp++;
 8002666:	3201      	adds	r2, #1
 8002668:	b212      	sxth	r2, r2
	      if (comp == THRESHOLD)
 800266a:	2a14      	cmp	r2, #20
	      else comp++;
 800266c:	8002      	strh	r2, [r0, #0]
	      if (comp == THRESHOLD)
 800266e:	d1d5      	bne.n	800261c <ENC_PollEncoder+0x40>
 8002670:	e7ee      	b.n	8002650 <ENC_PollEncoder+0x74>
	if (tmp == b11010010)
 8002672:	2bd2      	cmp	r3, #210	; 0xd2
 8002674:	d1ee      	bne.n	8002654 <ENC_PollEncoder+0x78>
		bufEnc = KEY_BACK;
 8002676:	4b05      	ldr	r3, [pc, #20]	; (800268c <ENC_PollEncoder+0xb0>)
 8002678:	2201      	movs	r2, #1
 800267a:	e7dd      	b.n	8002638 <ENC_PollEncoder+0x5c>
 800267c:	40010800 	.word	0x40010800
 8002680:	40010c00 	.word	0x40010c00
 8002684:	200007c6 	.word	0x200007c6
 8002688:	200007ca 	.word	0x200007ca
 800268c:	200007c4 	.word	0x200007c4

08002690 <Start_Timer_sec>:



void Start_Timer_sec()
{
	Timer_Sec = 0;
 8002690:	2200      	movs	r2, #0
 8002692:	4b03      	ldr	r3, [pc, #12]	; (80026a0 <Start_Timer_sec+0x10>)
 8002694:	601a      	str	r2, [r3, #0]
	Status_Timer_Sec = 1;
 8002696:	2201      	movs	r2, #1
 8002698:	4b02      	ldr	r3, [pc, #8]	; (80026a4 <Start_Timer_sec+0x14>)
 800269a:	701a      	strb	r2, [r3, #0]
}
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	200007b8 	.word	0x200007b8
 80026a4:	20000799 	.word	0x20000799

080026a8 <ClockOnLCD_noSec>:
	if (strlen1(string)<2) lcd_out("0",1);
	lcd_out(string,1);

}
void ClockOnLCD_noSec (uint32_t time)
{
 80026a8:	b538      	push	{r3, r4, r5, lr}
 80026aa:	4604      	mov	r4, r0
	char *string;
	//(" ",1);
	string = itoa(time/3600);
 80026ac:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80026b0:	fbb4 f0f0 	udiv	r0, r4, r0
 80026b4:	f7fe fd8e 	bl	80011d4 <itoa>
 80026b8:	4605      	mov	r5, r0
	if (strlen1(string)<2) lcd_out("0",1);
 80026ba:	f7fe fe6d 	bl	8001398 <strlen1>
 80026be:	2801      	cmp	r0, #1
 80026c0:	d803      	bhi.n	80026ca <ClockOnLCD_noSec+0x22>
 80026c2:	2101      	movs	r1, #1
 80026c4:	4811      	ldr	r0, [pc, #68]	; (800270c <ClockOnLCD_noSec+0x64>)
 80026c6:	f7ff f8f9 	bl	80018bc <lcd_out>
	lcd_out(string,1);
 80026ca:	2101      	movs	r1, #1
 80026cc:	4628      	mov	r0, r5
 80026ce:	f7ff f8f5 	bl	80018bc <lcd_out>

	lcd_out(":",1);
 80026d2:	2101      	movs	r1, #1
 80026d4:	480e      	ldr	r0, [pc, #56]	; (8002710 <ClockOnLCD_noSec+0x68>)
 80026d6:	f7ff f8f1 	bl	80018bc <lcd_out>
	string = itoa((time/60)%60);
 80026da:	233c      	movs	r3, #60	; 0x3c
 80026dc:	fbb4 f4f3 	udiv	r4, r4, r3
 80026e0:	fbb4 f0f3 	udiv	r0, r4, r3
 80026e4:	fb03 4010 	mls	r0, r3, r0, r4
 80026e8:	f7fe fd74 	bl	80011d4 <itoa>
 80026ec:	4604      	mov	r4, r0
	if (strlen1(string)<2) lcd_out("0",1);
 80026ee:	f7fe fe53 	bl	8001398 <strlen1>
 80026f2:	2801      	cmp	r0, #1
 80026f4:	d803      	bhi.n	80026fe <ClockOnLCD_noSec+0x56>
 80026f6:	2101      	movs	r1, #1
 80026f8:	4804      	ldr	r0, [pc, #16]	; (800270c <ClockOnLCD_noSec+0x64>)
 80026fa:	f7ff f8df 	bl	80018bc <lcd_out>
	lcd_out(string,1);
 80026fe:	4620      	mov	r0, r4


}
 8002700:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lcd_out(string,1);
 8002704:	2101      	movs	r1, #1
 8002706:	f7ff b8d9 	b.w	80018bc <lcd_out>
 800270a:	bf00      	nop
 800270c:	08005ed8 	.word	0x08005ed8
 8002710:	08005f72 	.word	0x08005f72

08002714 <OUT_OFF>:
*/

void OUT_OFF()
{
	//GPIOB->BSRR =  GPIO_BSRR_BR0;//Diode 1 OUT ON//OFF
	GPIOB->BSRR =  GPIO_BSRR_BR1;//ON-OFF OUT
 8002714:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002718:	4b06      	ldr	r3, [pc, #24]	; (8002734 <OUT_OFF+0x20>)
 800271a:	611a      	str	r2, [r3, #16]
	//GPIOB->BSRR =  GPIO_BSRR_BR1; //load1

	GPIOA->BSRR =  GPIO_BSRR_BR0;//led out on/off
 800271c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002720:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002724:	611a      	str	r2, [r3, #16]

	On_off = 0;
 8002726:	2300      	movs	r3, #0
 8002728:	4a03      	ldr	r2, [pc, #12]	; (8002738 <OUT_OFF+0x24>)
 800272a:	7013      	strb	r3, [r2, #0]
   	//Print_to_USART1_d(On_off,"Select OFF:",0);
	Status_Out = 0;
 800272c:	4a03      	ldr	r2, [pc, #12]	; (800273c <OUT_OFF+0x28>)
 800272e:	7013      	strb	r3, [r2, #0]

}
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	40010c00 	.word	0x40010c00
 8002738:	20000796 	.word	0x20000796
 800273c:	20000798 	.word	0x20000798

08002740 <OUT_ON>:
void OUT_ON()
{
	//GPIOB->BSRR =  GPIO_BSRR_BR0;//Diode 1 OUT ON//OFF
	GPIOB->BSRR =  GPIO_BSRR_BS1;//ON-OFF OUT
 8002740:	2202      	movs	r2, #2
 8002742:	4b05      	ldr	r3, [pc, #20]	; (8002758 <OUT_ON+0x18>)
 8002744:	611a      	str	r2, [r3, #16]
	//GPIOB->BSRR =  GPIO_BSRR_BR1; //load1

	On_off = 1;
 8002746:	2301      	movs	r3, #1
 8002748:	4a04      	ldr	r2, [pc, #16]	; (800275c <OUT_ON+0x1c>)
 800274a:	7013      	strb	r3, [r2, #0]
   	//Print_to_USART1_d(On_off,"SelectON:",0);
	Status_Out = 1;
 800274c:	4a04      	ldr	r2, [pc, #16]	; (8002760 <OUT_ON+0x20>)
 800274e:	7013      	strb	r3, [r2, #0]
	GPIOA->BSRR =  GPIO_BSRR_BS0;//led out on/off
 8002750:	4a04      	ldr	r2, [pc, #16]	; (8002764 <OUT_ON+0x24>)
 8002752:	6113      	str	r3, [r2, #16]
}
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40010c00 	.word	0x40010c00
 800275c:	20000796 	.word	0x20000796
 8002760:	20000798 	.word	0x20000798
 8002764:	40010800 	.word	0x40010800

08002768 <OUTStateAfterPowerUpFunction>:
    if (OutStateAfterPowerUp ==2)
 8002768:	4909      	ldr	r1, [pc, #36]	; (8002790 <OUTStateAfterPowerUpFunction+0x28>)
{
 800276a:	b508      	push	{r3, lr}
    if (OutStateAfterPowerUp ==2)
 800276c:	680b      	ldr	r3, [r1, #0]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d103      	bne.n	800277a <OUTStateAfterPowerUpFunction+0x12>
    	OUT_ON();
 8002772:	f7ff ffe5 	bl	8002740 <OUT_ON>
    	OutStateAfterPowerUp = 1;
 8002776:	2301      	movs	r3, #1
 8002778:	600b      	str	r3, [r1, #0]
    if (OutStateAfterPowerUp ==3)
 800277a:	680b      	ldr	r3, [r1, #0]
 800277c:	2b03      	cmp	r3, #3
 800277e:	d106      	bne.n	800278e <OUTStateAfterPowerUpFunction+0x26>
    	if (SaveDataWhenPowerOff.OutState==1)
 8002780:	4b04      	ldr	r3, [pc, #16]	; (8002794 <OUTStateAfterPowerUpFunction+0x2c>)
 8002782:	6998      	ldr	r0, [r3, #24]
 8002784:	2801      	cmp	r0, #1
 8002786:	d102      	bne.n	800278e <OUTStateAfterPowerUpFunction+0x26>
    		OUT_ON();
 8002788:	f7ff ffda 	bl	8002740 <OUT_ON>
    		OutStateAfterPowerUp = 1;
 800278c:	6008      	str	r0, [r1, #0]
}
 800278e:	bd08      	pop	{r3, pc}
 8002790:	20000278 	.word	0x20000278
 8002794:	200000f4 	.word	0x200000f4

08002798 <MenuCalibration_Current_x1>:
	EnterInMenu_Status=1;
 8002798:	2201      	movs	r2, #1
 800279a:	4b16      	ldr	r3, [pc, #88]	; (80027f4 <MenuCalibration_Current_x1+0x5c>)
{
 800279c:	b510      	push	{r4, lr}
	EnterInMenu_Status=1;
 800279e:	701a      	strb	r2, [r3, #0]
	OUT_ON();
 80027a0:	f7ff ffce 	bl	8002740 <OUT_ON>
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForCurrent_x1++;
 80027a4:	2802      	cmp	r0, #2
 80027a6:	4c14      	ldr	r4, [pc, #80]	; (80027f8 <MenuCalibration_Current_x1+0x60>)
 80027a8:	d11e      	bne.n	80027e8 <MenuCalibration_Current_x1+0x50>
 80027aa:	69a3      	ldr	r3, [r4, #24]
 80027ac:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationValueForCurrent_x1--;
 80027ae:	61a3      	str	r3, [r4, #24]
	lcd_set_xy(0,0);
 80027b0:	2100      	movs	r1, #0
 80027b2:	4608      	mov	r0, r1
 80027b4:	f7ff f870 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForCurrent_x1));
 80027b8:	69a0      	ldr	r0, [r4, #24]
 80027ba:	f7fe fd0b 	bl	80011d4 <itoa>
 80027be:	f7ff f8eb 	bl	8001998 <PrintToLCD>
	PrintToLCD("   ");
 80027c2:	480e      	ldr	r0, [pc, #56]	; (80027fc <MenuCalibration_Current_x1+0x64>)
 80027c4:	f7ff f8e8 	bl	8001998 <PrintToLCD>
	lcd_set_xy(0,1);
 80027c8:	2101      	movs	r1, #1
 80027ca:	2000      	movs	r0, #0
 80027cc:	f7ff f864 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa(Current_x1));
 80027d0:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <MenuCalibration_Current_x1+0x68>)
 80027d2:	8818      	ldrh	r0, [r3, #0]
 80027d4:	b200      	sxth	r0, r0
 80027d6:	f7fe fcfd 	bl	80011d4 <itoa>
 80027da:	f7ff f8dd 	bl	8001998 <PrintToLCD>
}
 80027de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("mA  ");
 80027e2:	4808      	ldr	r0, [pc, #32]	; (8002804 <MenuCalibration_Current_x1+0x6c>)
 80027e4:	f7ff b8d8 	b.w	8001998 <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForCurrent_x1--;
 80027e8:	2801      	cmp	r0, #1
 80027ea:	d1e1      	bne.n	80027b0 <MenuCalibration_Current_x1+0x18>
 80027ec:	69a3      	ldr	r3, [r4, #24]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	e7dd      	b.n	80027ae <MenuCalibration_Current_x1+0x16>
 80027f2:	bf00      	nop
 80027f4:	20000794 	.word	0x20000794
 80027f8:	20000004 	.word	0x20000004
 80027fc:	0800613c 	.word	0x0800613c
 8002800:	200002b6 	.word	0x200002b6
 8002804:	08005f49 	.word	0x08005f49

08002808 <MenuCalibration_VoltagePS>:
	EnterInMenu_Status=1;
 8002808:	2201      	movs	r2, #1
 800280a:	4b16      	ldr	r3, [pc, #88]	; (8002864 <MenuCalibration_VoltagePS+0x5c>)
{
 800280c:	b510      	push	{r4, lr}
	EnterInMenu_Status=1;
 800280e:	701a      	strb	r2, [r3, #0]
	OUT_ON();
 8002810:	f7ff ff96 	bl	8002740 <OUT_ON>
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForTemperature++;
 8002814:	2802      	cmp	r0, #2
 8002816:	4c14      	ldr	r4, [pc, #80]	; (8002868 <MenuCalibration_VoltagePS+0x60>)
 8002818:	d11e      	bne.n	8002858 <MenuCalibration_VoltagePS+0x50>
 800281a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800281c:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationValueForTemperature--;
 800281e:	62a3      	str	r3, [r4, #40]	; 0x28
	lcd_set_xy(0,0);
 8002820:	2100      	movs	r1, #0
 8002822:	4608      	mov	r0, r1
 8002824:	f7ff f838 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForTemperature));
 8002828:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800282a:	f7fe fcd3 	bl	80011d4 <itoa>
 800282e:	f7ff f8b3 	bl	8001998 <PrintToLCD>
	PrintToLCD("   ");
 8002832:	480e      	ldr	r0, [pc, #56]	; (800286c <MenuCalibration_VoltagePS+0x64>)
 8002834:	f7ff f8b0 	bl	8001998 <PrintToLCD>
	lcd_set_xy(0,1);
 8002838:	2101      	movs	r1, #1
 800283a:	2000      	movs	r0, #0
 800283c:	f7ff f82c 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa_koma(U_PS,2));
 8002840:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <MenuCalibration_VoltagePS+0x68>)
 8002842:	2102      	movs	r1, #2
 8002844:	8818      	ldrh	r0, [r3, #0]
 8002846:	f7fe fd39 	bl	80012bc <itoa_koma>
 800284a:	f7ff f8a5 	bl	8001998 <PrintToLCD>
}
 800284e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V  ");
 8002852:	4808      	ldr	r0, [pc, #32]	; (8002874 <MenuCalibration_VoltagePS+0x6c>)
 8002854:	f7ff b8a0 	b.w	8001998 <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForTemperature--;
 8002858:	2801      	cmp	r0, #1
 800285a:	d1e1      	bne.n	8002820 <MenuCalibration_VoltagePS+0x18>
 800285c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800285e:	3b01      	subs	r3, #1
 8002860:	e7dd      	b.n	800281e <MenuCalibration_VoltagePS+0x16>
 8002862:	bf00      	nop
 8002864:	20000794 	.word	0x20000794
 8002868:	20000004 	.word	0x20000004
 800286c:	0800613c 	.word	0x0800613c
 8002870:	20000854 	.word	0x20000854
 8002874:	0800602c 	.word	0x0800602c

08002878 <MenuCalibration_VoltageOut>:
	EnterInMenu_Status=1;
 8002878:	2201      	movs	r2, #1
 800287a:	4b16      	ldr	r3, [pc, #88]	; (80028d4 <MenuCalibration_VoltageOut+0x5c>)
{
 800287c:	b510      	push	{r4, lr}
	EnterInMenu_Status=1;
 800287e:	701a      	strb	r2, [r3, #0]
	OUT_ON();
 8002880:	f7ff ff5e 	bl	8002740 <OUT_ON>
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForU_OUT++;
 8002884:	2802      	cmp	r0, #2
 8002886:	4c14      	ldr	r4, [pc, #80]	; (80028d8 <MenuCalibration_VoltageOut+0x60>)
 8002888:	d11e      	bne.n	80028c8 <MenuCalibration_VoltageOut+0x50>
 800288a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800288c:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationValueForU_OUT--;
 800288e:	6323      	str	r3, [r4, #48]	; 0x30
	lcd_set_xy(0,0);
 8002890:	2100      	movs	r1, #0
 8002892:	4608      	mov	r0, r1
 8002894:	f7ff f800 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForU_OUT));
 8002898:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800289a:	f7fe fc9b 	bl	80011d4 <itoa>
 800289e:	f7ff f87b 	bl	8001998 <PrintToLCD>
	PrintToLCD("   ");
 80028a2:	480e      	ldr	r0, [pc, #56]	; (80028dc <MenuCalibration_VoltageOut+0x64>)
 80028a4:	f7ff f878 	bl	8001998 <PrintToLCD>
	lcd_set_xy(0,1);
 80028a8:	2101      	movs	r1, #1
 80028aa:	2000      	movs	r0, #0
 80028ac:	f7fe fff4 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa_koma(U_OUT,2));
 80028b0:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <MenuCalibration_VoltageOut+0x68>)
 80028b2:	2102      	movs	r1, #2
 80028b4:	8818      	ldrh	r0, [r3, #0]
 80028b6:	f7fe fd01 	bl	80012bc <itoa_koma>
 80028ba:	f7ff f86d 	bl	8001998 <PrintToLCD>
}
 80028be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V  ");
 80028c2:	4808      	ldr	r0, [pc, #32]	; (80028e4 <MenuCalibration_VoltageOut+0x6c>)
 80028c4:	f7ff b868 	b.w	8001998 <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForU_OUT--;
 80028c8:	2801      	cmp	r0, #1
 80028ca:	d1e1      	bne.n	8002890 <MenuCalibration_VoltageOut+0x18>
 80028cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80028ce:	3b01      	subs	r3, #1
 80028d0:	e7dd      	b.n	800288e <MenuCalibration_VoltageOut+0x16>
 80028d2:	bf00      	nop
 80028d4:	20000794 	.word	0x20000794
 80028d8:	20000004 	.word	0x20000004
 80028dc:	0800613c 	.word	0x0800613c
 80028e0:	2000084e 	.word	0x2000084e
 80028e4:	0800602c 	.word	0x0800602c

080028e8 <MenuCalibration_VoltageIn>:
	EnterInMenu_Status=1;
 80028e8:	2201      	movs	r2, #1
 80028ea:	4b16      	ldr	r3, [pc, #88]	; (8002944 <MenuCalibration_VoltageIn+0x5c>)
{
 80028ec:	b510      	push	{r4, lr}
	EnterInMenu_Status=1;
 80028ee:	701a      	strb	r2, [r3, #0]
	OUT_ON();
 80028f0:	f7ff ff26 	bl	8002740 <OUT_ON>
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForVoltage2++;
 80028f4:	2802      	cmp	r0, #2
 80028f6:	4c14      	ldr	r4, [pc, #80]	; (8002948 <MenuCalibration_VoltageIn+0x60>)
 80028f8:	d11e      	bne.n	8002938 <MenuCalibration_VoltageIn+0x50>
 80028fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80028fc:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationValueForVoltage2--;
 80028fe:	63a3      	str	r3, [r4, #56]	; 0x38
	lcd_set_xy(0,0);
 8002900:	2100      	movs	r1, #0
 8002902:	4608      	mov	r0, r1
 8002904:	f7fe ffc8 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForVoltage2));
 8002908:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800290a:	f7fe fc63 	bl	80011d4 <itoa>
 800290e:	f7ff f843 	bl	8001998 <PrintToLCD>
	PrintToLCD("   ");
 8002912:	480e      	ldr	r0, [pc, #56]	; (800294c <MenuCalibration_VoltageIn+0x64>)
 8002914:	f7ff f840 	bl	8001998 <PrintToLCD>
	lcd_set_xy(0,1);
 8002918:	2101      	movs	r1, #1
 800291a:	2000      	movs	r0, #0
 800291c:	f7fe ffbc 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa_koma(U_IN,2));
 8002920:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <MenuCalibration_VoltageIn+0x68>)
 8002922:	2102      	movs	r1, #2
 8002924:	8818      	ldrh	r0, [r3, #0]
 8002926:	f7fe fcc9 	bl	80012bc <itoa_koma>
 800292a:	f7ff f835 	bl	8001998 <PrintToLCD>
}
 800292e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PrintToLCD("V  ");
 8002932:	4808      	ldr	r0, [pc, #32]	; (8002954 <MenuCalibration_VoltageIn+0x6c>)
 8002934:	f7ff b830 	b.w	8001998 <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForVoltage2--;
 8002938:	2801      	cmp	r0, #1
 800293a:	d1e1      	bne.n	8002900 <MenuCalibration_VoltageIn+0x18>
 800293c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800293e:	3b01      	subs	r3, #1
 8002940:	e7dd      	b.n	80028fe <MenuCalibration_VoltageIn+0x16>
 8002942:	bf00      	nop
 8002944:	20000794 	.word	0x20000794
 8002948:	20000004 	.word	0x20000004
 800294c:	0800613c 	.word	0x0800613c
 8002950:	2000083c 	.word	0x2000083c
 8002954:	0800602c 	.word	0x0800602c

08002958 <MenuCalibration_Resist_Comp_5V1A>:
		EnterInMenu_Status=1;
 8002958:	2201      	movs	r2, #1
{
 800295a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		EnterInMenu_Status=1;
 800295c:	4b29      	ldr	r3, [pc, #164]	; (8002a04 <MenuCalibration_Resist_Comp_5V1A+0xac>)
 800295e:	4e2a      	ldr	r6, [pc, #168]	; (8002a08 <MenuCalibration_Resist_Comp_5V1A+0xb0>)
 8002960:	701a      	strb	r2, [r3, #0]
		OUT_ON();
 8002962:	f7ff feed 	bl	8002740 <OUT_ON>
		if (key == KEY_NEXT) ResistanceComp_Voltage++;
 8002966:	2802      	cmp	r0, #2
 8002968:	d12e      	bne.n	80029c8 <MenuCalibration_Resist_Comp_5V1A+0x70>
 800296a:	8833      	ldrh	r3, [r6, #0]
 800296c:	3301      	adds	r3, #1
		if (key == KEY_BACK) ResistanceComp_Voltage--;
 800296e:	8033      	strh	r3, [r6, #0]
		lcd_set_xy(0,0);
 8002970:	2100      	movs	r1, #0
 8002972:	4608      	mov	r0, r1
 8002974:	f7fe ff90 	bl	8001898 <lcd_set_xy>
		PrintToLCD(itoa_koma(ResistanceComp_Voltage,2));
 8002978:	2102      	movs	r1, #2
 800297a:	8830      	ldrh	r0, [r6, #0]
 800297c:	f7fe fc9e 	bl	80012bc <itoa_koma>
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 8002980:	4f22      	ldr	r7, [pc, #136]	; (8002a0c <MenuCalibration_Resist_Comp_5V1A+0xb4>)
		if (Current <= 0) CalibrationData.ResistanceComp_Ishunt_Wires = 70;
 8002982:	4c23      	ldr	r4, [pc, #140]	; (8002a10 <MenuCalibration_Resist_Comp_5V1A+0xb8>)
		PrintToLCD(itoa_koma(ResistanceComp_Voltage,2));
 8002984:	f7ff f808 	bl	8001998 <PrintToLCD>
		PrintToLCD("V ");
 8002988:	4822      	ldr	r0, [pc, #136]	; (8002a14 <MenuCalibration_Resist_Comp_5V1A+0xbc>)
 800298a:	f7ff f805 	bl	8001998 <PrintToLCD>
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 800298e:	883b      	ldrh	r3, [r7, #0]
		if (Current <= 0) CalibrationData.ResistanceComp_Ishunt_Wires = 70;
 8002990:	8822      	ldrh	r2, [r4, #0]
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 8002992:	b29b      	uxth	r3, r3
		if (Current <= 0) CalibrationData.ResistanceComp_Ishunt_Wires = 70;
 8002994:	b212      	sxth	r2, r2
 8002996:	2a00      	cmp	r2, #0
 8002998:	4d1f      	ldr	r5, [pc, #124]	; (8002a18 <MenuCalibration_Resist_Comp_5V1A+0xc0>)
 800299a:	dc1a      	bgt.n	80029d2 <MenuCalibration_Resist_Comp_5V1A+0x7a>
 800299c:	2346      	movs	r3, #70	; 0x46
		else CalibrationData.ResistanceComp_Ishunt_Wires = Delta*10000/Current;
 800299e:	642b      	str	r3, [r5, #64]	; 0x40
		PrintToLCD(itoa(CalibrationData.ResistanceComp_Ishunt_Wires));
 80029a0:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80029a2:	f7fe fc17 	bl	80011d4 <itoa>
 80029a6:	f7fe fff7 	bl	8001998 <PrintToLCD>
		PrintToLCD("mOm       ");
 80029aa:	481c      	ldr	r0, [pc, #112]	; (8002a1c <MenuCalibration_Resist_Comp_5V1A+0xc4>)
 80029ac:	f7fe fff4 	bl	8001998 <PrintToLCD>
		Delta = U_PS - U_OUT_ForSetResistance;
 80029b0:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <MenuCalibration_Resist_Comp_5V1A+0xc8>)
 80029b2:	881b      	ldrh	r3, [r3, #0]
 80029b4:	883a      	ldrh	r2, [r7, #0]
		if (Current <= 0) CalibrationData.ResistanceComp_MOSFET = 10;
 80029b6:	8821      	ldrh	r1, [r4, #0]
		Delta = U_PS - U_OUT_ForSetResistance;
 80029b8:	b29b      	uxth	r3, r3
		if (Current <= 0) CalibrationData.ResistanceComp_MOSFET = 10;
 80029ba:	b209      	sxth	r1, r1
 80029bc:	2900      	cmp	r1, #0
		Delta = U_PS - U_OUT_ForSetResistance;
 80029be:	b292      	uxth	r2, r2
		if (Current <= 0) CalibrationData.ResistanceComp_MOSFET = 10;
 80029c0:	dc14      	bgt.n	80029ec <MenuCalibration_Resist_Comp_5V1A+0x94>
 80029c2:	230a      	movs	r3, #10
		else CalibrationData.ResistanceComp_MOSFET = Delta*10000/Current;
 80029c4:	64ab      	str	r3, [r5, #72]	; 0x48
}
 80029c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (key == KEY_BACK) ResistanceComp_Voltage--;
 80029c8:	2801      	cmp	r0, #1
 80029ca:	d1d1      	bne.n	8002970 <MenuCalibration_Resist_Comp_5V1A+0x18>
 80029cc:	8833      	ldrh	r3, [r6, #0]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	e7cd      	b.n	800296e <MenuCalibration_Resist_Comp_5V1A+0x16>
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 80029d2:	8832      	ldrh	r2, [r6, #0]
		else CalibrationData.ResistanceComp_Ishunt_Wires = Delta*10000/Current;
 80029d4:	8821      	ldrh	r1, [r4, #0]
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 80029d6:	1a9b      	subs	r3, r3, r2
		else CalibrationData.ResistanceComp_Ishunt_Wires = Delta*10000/Current;
 80029d8:	f242 7210 	movw	r2, #10000	; 0x2710
		Delta = U_OUT_ForSetResistance - ResistanceComp_Voltage;
 80029dc:	b21b      	sxth	r3, r3
		else CalibrationData.ResistanceComp_Ishunt_Wires = Delta*10000/Current;
 80029de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80029e2:	4353      	muls	r3, r2
 80029e4:	b209      	sxth	r1, r1
 80029e6:	fb93 f3f1 	sdiv	r3, r3, r1
 80029ea:	e7d8      	b.n	800299e <MenuCalibration_Resist_Comp_5V1A+0x46>
		Delta = U_PS - U_OUT_ForSetResistance;
 80029ec:	1a9b      	subs	r3, r3, r2
		else CalibrationData.ResistanceComp_MOSFET = Delta*10000/Current;
 80029ee:	f242 7210 	movw	r2, #10000	; 0x2710
		Delta = U_PS - U_OUT_ForSetResistance;
 80029f2:	b21b      	sxth	r3, r3
		else CalibrationData.ResistanceComp_MOSFET = Delta*10000/Current;
 80029f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80029f8:	4353      	muls	r3, r2
 80029fa:	8821      	ldrh	r1, [r4, #0]
 80029fc:	b209      	sxth	r1, r1
 80029fe:	fb93 f3f1 	sdiv	r3, r3, r1
 8002a02:	e7df      	b.n	80029c4 <MenuCalibration_Resist_Comp_5V1A+0x6c>
 8002a04:	20000794 	.word	0x20000794
 8002a08:	2000027c 	.word	0x2000027c
 8002a0c:	200002c0 	.word	0x200002c0
 8002a10:	2000083e 	.word	0x2000083e
 8002a14:	08006001 	.word	0x08006001
 8002a18:	20000004 	.word	0x20000004
 8002a1c:	08005f5d 	.word	0x08005f5d
 8002a20:	20000854 	.word	0x20000854

08002a24 <LOAD_ON>:
void LOAD_ON()
{
	//GPIOB->BSRR =  GPIO_BSRR_BR0;//Diode 1 OUT ON//OFF
	//GPIOB->BSRR =  GPIO_BSRR_BR0;//ON-OFF OUT
	GPIOB->BSRR =  GPIO_BSRR_BS1; //load1
 8002a24:	2202      	movs	r2, #2
 8002a26:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <LOAD_ON+0x1c>)
 8002a28:	611a      	str	r2, [r3, #16]
	On_off = 1;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	4a05      	ldr	r2, [pc, #20]	; (8002a44 <LOAD_ON+0x20>)
 8002a2e:	7013      	strb	r3, [r2, #0]
	Status_Load = 1;
 8002a30:	4a05      	ldr	r2, [pc, #20]	; (8002a48 <LOAD_ON+0x24>)
 8002a32:	7013      	strb	r3, [r2, #0]
	GPIOA->BSRR =  GPIO_BSRR_BS11;//led load on/off
 8002a34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a38:	4b04      	ldr	r3, [pc, #16]	; (8002a4c <LOAD_ON+0x28>)
 8002a3a:	611a      	str	r2, [r3, #16]
}
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40010c00 	.word	0x40010c00
 8002a44:	20000796 	.word	0x20000796
 8002a48:	20000797 	.word	0x20000797
 8002a4c:	40010800 	.word	0x40010800

08002a50 <discharge>:
{
 8002a50:	b508      	push	{r3, lr}
	OUT_OFF();
 8002a52:	f7ff fe5f 	bl	8002714 <OUT_OFF>
	LOAD_ON();
 8002a56:	f7ff ffe5 	bl	8002a24 <LOAD_ON>
}
 8002a5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_ms(50);
 8002a5e:	2032      	movs	r0, #50	; 0x32
 8002a60:	f7fe ba9c 	b.w	8000f9c <delay_ms>

08002a64 <MenuCalibration_Current_x50>:
{
 8002a64:	b538      	push	{r3, r4, r5, lr}
	EnterInMenu_Status=1;
 8002a66:	2201      	movs	r2, #1
{
 8002a68:	4605      	mov	r5, r0
	EnterInMenu_Status=1;
 8002a6a:	4b15      	ldr	r3, [pc, #84]	; (8002ac0 <MenuCalibration_Current_x50+0x5c>)
 8002a6c:	4c15      	ldr	r4, [pc, #84]	; (8002ac4 <MenuCalibration_Current_x50+0x60>)
 8002a6e:	701a      	strb	r2, [r3, #0]
	discharge();
 8002a70:	f7ff ffee 	bl	8002a50 <discharge>
	if (key == KEY_NEXT) CalibrationData.CalibrationValueForCurrent_x50++;
 8002a74:	2d02      	cmp	r5, #2
 8002a76:	d11e      	bne.n	8002ab6 <MenuCalibration_Current_x50+0x52>
 8002a78:	6a23      	ldr	r3, [r4, #32]
 8002a7a:	3301      	adds	r3, #1
	if (key == KEY_BACK) CalibrationData.CalibrationValueForCurrent_x50--;
 8002a7c:	6223      	str	r3, [r4, #32]
	lcd_set_xy(0,0);
 8002a7e:	2100      	movs	r1, #0
 8002a80:	4608      	mov	r0, r1
 8002a82:	f7fe ff09 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa(CalibrationData.CalibrationValueForCurrent_x50));
 8002a86:	6a20      	ldr	r0, [r4, #32]
 8002a88:	f7fe fba4 	bl	80011d4 <itoa>
 8002a8c:	f7fe ff84 	bl	8001998 <PrintToLCD>
	PrintToLCD("   ");
 8002a90:	480d      	ldr	r0, [pc, #52]	; (8002ac8 <MenuCalibration_Current_x50+0x64>)
 8002a92:	f7fe ff81 	bl	8001998 <PrintToLCD>
	lcd_set_xy(0,1);
 8002a96:	2101      	movs	r1, #1
 8002a98:	2000      	movs	r0, #0
 8002a9a:	f7fe fefd 	bl	8001898 <lcd_set_xy>
	PrintToLCD(itoa(Current_x50));
 8002a9e:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <MenuCalibration_Current_x50+0x68>)
 8002aa0:	8818      	ldrh	r0, [r3, #0]
 8002aa2:	b200      	sxth	r0, r0
 8002aa4:	f7fe fb96 	bl	80011d4 <itoa>
 8002aa8:	f7fe ff76 	bl	8001998 <PrintToLCD>
}
 8002aac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PrintToLCD("mA  ");
 8002ab0:	4807      	ldr	r0, [pc, #28]	; (8002ad0 <MenuCalibration_Current_x50+0x6c>)
 8002ab2:	f7fe bf71 	b.w	8001998 <PrintToLCD>
	if (key == KEY_BACK) CalibrationData.CalibrationValueForCurrent_x50--;
 8002ab6:	2d01      	cmp	r5, #1
 8002ab8:	d1e1      	bne.n	8002a7e <MenuCalibration_Current_x50+0x1a>
 8002aba:	6a23      	ldr	r3, [r4, #32]
 8002abc:	3b01      	subs	r3, #1
 8002abe:	e7dd      	b.n	8002a7c <MenuCalibration_Current_x50+0x18>
 8002ac0:	20000794 	.word	0x20000794
 8002ac4:	20000004 	.word	0x20000004
 8002ac8:	0800613c 	.word	0x0800613c
 8002acc:	200002b8 	.word	0x200002b8
 8002ad0:	08005f49 	.word	0x08005f49

08002ad4 <discharge1>:
{
 8002ad4:	b508      	push	{r3, lr}
	if (ChargeDischargeState !=2)
 8002ad6:	4b0d      	ldr	r3, [pc, #52]	; (8002b0c <discharge1+0x38>)
 8002ad8:	f993 2000 	ldrsb.w	r2, [r3]
 8002adc:	2a02      	cmp	r2, #2
 8002ade:	d013      	beq.n	8002b08 <discharge1+0x34>
		ChargeDischargeState = 2;
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	701a      	strb	r2, [r3, #0]
		OUT_OFF();
 8002ae4:	f7ff fe16 	bl	8002714 <OUT_OFF>
		LOAD_ON();
 8002ae8:	f7ff ff9c 	bl	8002a24 <LOAD_ON>
		TimerForReadyMeasurement_ms = 0;
 8002aec:	2200      	movs	r2, #0
 8002aee:	4b08      	ldr	r3, [pc, #32]	; (8002b10 <discharge1+0x3c>)
		delay_ms(50);
 8002af0:	2032      	movs	r0, #50	; 0x32
		TimerForReadyMeasurement_ms = 0;
 8002af2:	601a      	str	r2, [r3, #0]
		delay_ms(50);
 8002af4:	f7fe fa52 	bl	8000f9c <delay_ms>
		logDebug("DIsCharge");
 8002af8:	4806      	ldr	r0, [pc, #24]	; (8002b14 <discharge1+0x40>)
 8002afa:	f002 fb29 	bl	8005150 <printToBufferWithoutEndUART1>
}
 8002afe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		logDebug("DIsCharge");
 8002b02:	4805      	ldr	r0, [pc, #20]	; (8002b18 <discharge1+0x44>)
 8002b04:	f002 baba 	b.w	800507c <printToBufferUART1>
}
 8002b08:	bd08      	pop	{r3, pc}
 8002b0a:	bf00      	nop
 8002b0c:	2000077e 	.word	0x2000077e
 8002b10:	200007b4 	.word	0x200007b4
 8002b14:	08005c50 	.word	0x08005c50
 8002b18:	08006d51 	.word	0x08006d51

08002b1c <LOAD_OFF>:

void LOAD_OFF()
{
	//GPIOB->BSRR =  GPIO_BSRR_BR0;//Diode 1 OUT ON//OFF
	//GPIOB->BSRR =  GPIO_BSRR_BR0;//ON-OFF OUT
	GPIOB->BSRR =  GPIO_BSRR_BR1; //load1
 8002b1c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b20:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <LOAD_OFF+0x24>)
 8002b22:	611a      	str	r2, [r3, #16]
	On_off = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	4a07      	ldr	r2, [pc, #28]	; (8002b44 <LOAD_OFF+0x28>)
 8002b28:	7013      	strb	r3, [r2, #0]
	Status_Load = 0;
 8002b2a:	4a07      	ldr	r2, [pc, #28]	; (8002b48 <LOAD_OFF+0x2c>)
 8002b2c:	7013      	strb	r3, [r2, #0]
	GPIOA->BSRR =  GPIO_BSRR_BR11;//led load on/off
 8002b2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b32:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b36:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8002b3a:	611a      	str	r2, [r3, #16]
}
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40010c00 	.word	0x40010c00
 8002b44:	20000796 	.word	0x20000796
 8002b48:	20000797 	.word	0x20000797

08002b4c <MenuBatterySimilation>:
	lcd_set_xy(0,0);
 8002b4c:	2100      	movs	r1, #0
{
 8002b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	EnterInMenu_Status = 1;
 8002b52:	2601      	movs	r6, #1
 8002b54:	4b2c      	ldr	r3, [pc, #176]	; (8002c08 <MenuBatterySimilation+0xbc>)
	if (On_off == 0)
 8002b56:	4d2d      	ldr	r5, [pc, #180]	; (8002c0c <MenuBatterySimilation+0xc0>)
{
 8002b58:	4607      	mov	r7, r0
	lcd_set_xy(0,0);
 8002b5a:	4608      	mov	r0, r1
	EnterInMenu_Status = 1;
 8002b5c:	701e      	strb	r6, [r3, #0]
	lcd_set_xy(0,0);
 8002b5e:	f7fe fe9b 	bl	8001898 <lcd_set_xy>
	if (On_off == 0)
 8002b62:	782b      	ldrb	r3, [r5, #0]
 8002b64:	4c2a      	ldr	r4, [pc, #168]	; (8002c10 <MenuBatterySimilation+0xc4>)
 8002b66:	f003 08ff 	and.w	r8, r3, #255	; 0xff
 8002b6a:	bb3b      	cbnz	r3, 8002bbc <MenuBatterySimilation+0x70>
		PrintToLCD(itoa_koma(U_PS,2));
 8002b6c:	4b29      	ldr	r3, [pc, #164]	; (8002c14 <MenuBatterySimilation+0xc8>)
 8002b6e:	2102      	movs	r1, #2
 8002b70:	8818      	ldrh	r0, [r3, #0]
 8002b72:	f7fe fba3 	bl	80012bc <itoa_koma>
 8002b76:	f7fe ff0f 	bl	8001998 <PrintToLCD>
		PrintToLCD("V  ");
 8002b7a:	4827      	ldr	r0, [pc, #156]	; (8002c18 <MenuBatterySimilation+0xcc>)
 8002b7c:	f7fe ff0c 	bl	8001998 <PrintToLCD>
		lcd_set_xy(7,0);
 8002b80:	4641      	mov	r1, r8
 8002b82:	2007      	movs	r0, #7
 8002b84:	f7fe fe88 	bl	8001898 <lcd_set_xy>
		PrintToLCD(itoa(Current));
 8002b88:	8820      	ldrh	r0, [r4, #0]
 8002b8a:	b200      	sxth	r0, r0
 8002b8c:	f7fe fb22 	bl	80011d4 <itoa>
 8002b90:	f7fe ff02 	bl	8001998 <PrintToLCD>
		PrintToLCD("mA   ");
 8002b94:	4821      	ldr	r0, [pc, #132]	; (8002c1c <MenuBatterySimilation+0xd0>)
 8002b96:	f7fe feff 	bl	8001998 <PrintToLCD>
		lcd_set_xy(5,1);
 8002b9a:	2005      	movs	r0, #5
 8002b9c:	4631      	mov	r1, r6
 8002b9e:	f7fe fe7b 	bl	8001898 <lcd_set_xy>
		PrintToLCD("OFF ");
 8002ba2:	481f      	ldr	r0, [pc, #124]	; (8002c20 <MenuBatterySimilation+0xd4>)
		PrintToLCD("ON ");
 8002ba4:	f7fe fef8 	bl	8001998 <PrintToLCD>
    if (key == KEY_NEXT)
 8002ba8:	2f02      	cmp	r7, #2
 8002baa:	d12a      	bne.n	8002c02 <MenuBatterySimilation+0xb6>
    	if (On_off == 0)
 8002bac:	782b      	ldrb	r3, [r5, #0]
 8002bae:	bb13      	cbnz	r3, 8002bf6 <MenuBatterySimilation+0xaa>
    		OUT_ON();
 8002bb0:	f7ff fdc6 	bl	8002740 <OUT_ON>
}
 8002bb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    		LOAD_ON();
 8002bb8:	f7ff bf34 	b.w	8002a24 <LOAD_ON>
		PrintToLCD(itoa_koma(U_OUT,2));
 8002bbc:	4b19      	ldr	r3, [pc, #100]	; (8002c24 <MenuBatterySimilation+0xd8>)
 8002bbe:	2102      	movs	r1, #2
 8002bc0:	8818      	ldrh	r0, [r3, #0]
 8002bc2:	f7fe fb7b 	bl	80012bc <itoa_koma>
 8002bc6:	f7fe fee7 	bl	8001998 <PrintToLCD>
		PrintToLCD("V  ");
 8002bca:	4813      	ldr	r0, [pc, #76]	; (8002c18 <MenuBatterySimilation+0xcc>)
 8002bcc:	f7fe fee4 	bl	8001998 <PrintToLCD>
		lcd_set_xy(7,0);
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	2007      	movs	r0, #7
 8002bd4:	f7fe fe60 	bl	8001898 <lcd_set_xy>
		PrintToLCD(itoa(Current));
 8002bd8:	8820      	ldrh	r0, [r4, #0]
 8002bda:	b200      	sxth	r0, r0
 8002bdc:	f7fe fafa 	bl	80011d4 <itoa>
 8002be0:	f7fe feda 	bl	8001998 <PrintToLCD>
		PrintToLCD("mA    ");
 8002be4:	4810      	ldr	r0, [pc, #64]	; (8002c28 <MenuBatterySimilation+0xdc>)
 8002be6:	f7fe fed7 	bl	8001998 <PrintToLCD>
		lcd_set_xy(6,1);
 8002bea:	2006      	movs	r0, #6
 8002bec:	4631      	mov	r1, r6
 8002bee:	f7fe fe53 	bl	8001898 <lcd_set_xy>
		PrintToLCD("ON ");
 8002bf2:	480e      	ldr	r0, [pc, #56]	; (8002c2c <MenuBatterySimilation+0xe0>)
 8002bf4:	e7d6      	b.n	8002ba4 <MenuBatterySimilation+0x58>
    		OUT_OFF();
 8002bf6:	f7ff fd8d 	bl	8002714 <OUT_OFF>
}
 8002bfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    		LOAD_OFF();
 8002bfe:	f7ff bf8d 	b.w	8002b1c <LOAD_OFF>
}
 8002c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c06:	bf00      	nop
 8002c08:	20000794 	.word	0x20000794
 8002c0c:	20000796 	.word	0x20000796
 8002c10:	2000083e 	.word	0x2000083e
 8002c14:	20000854 	.word	0x20000854
 8002c18:	0800602c 	.word	0x0800602c
 8002c1c:	08006004 	.word	0x08006004
 8002c20:	08005eda 	.word	0x08005eda
 8002c24:	2000084e 	.word	0x2000084e
 8002c28:	08005edf 	.word	0x08005edf
 8002c2c:	08005ee6 	.word	0x08005ee6

08002c30 <charge>:
{
 8002c30:	b508      	push	{r3, lr}
	LOAD_OFF();
 8002c32:	f7ff ff73 	bl	8002b1c <LOAD_OFF>
	OUT_ON();
 8002c36:	f7ff fd83 	bl	8002740 <OUT_ON>
}
 8002c3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_ms(50);
 8002c3e:	2032      	movs	r0, #50	; 0x32
 8002c40:	f7fe b9ac 	b.w	8000f9c <delay_ms>

08002c44 <charge1>:
{
 8002c44:	b508      	push	{r3, lr}
	if (ChargeDischargeState !=1)
 8002c46:	4b0d      	ldr	r3, [pc, #52]	; (8002c7c <charge1+0x38>)
 8002c48:	f993 2000 	ldrsb.w	r2, [r3]
 8002c4c:	2a01      	cmp	r2, #1
 8002c4e:	d013      	beq.n	8002c78 <charge1+0x34>
		ChargeDischargeState = 1;
 8002c50:	2201      	movs	r2, #1
 8002c52:	701a      	strb	r2, [r3, #0]
		LOAD_OFF();
 8002c54:	f7ff ff62 	bl	8002b1c <LOAD_OFF>
		OUT_ON();
 8002c58:	f7ff fd72 	bl	8002740 <OUT_ON>
		TimerForReadyMeasurement_ms = 0;
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <charge1+0x3c>)
		delay_ms(50);
 8002c60:	2032      	movs	r0, #50	; 0x32
		TimerForReadyMeasurement_ms = 0;
 8002c62:	601a      	str	r2, [r3, #0]
		delay_ms(50);
 8002c64:	f7fe f99a 	bl	8000f9c <delay_ms>
		logDebug("Charge");
 8002c68:	4806      	ldr	r0, [pc, #24]	; (8002c84 <charge1+0x40>)
 8002c6a:	f002 fa71 	bl	8005150 <printToBufferWithoutEndUART1>
}
 8002c6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		logDebug("Charge");
 8002c72:	4805      	ldr	r0, [pc, #20]	; (8002c88 <charge1+0x44>)
 8002c74:	f002 ba02 	b.w	800507c <printToBufferUART1>
}
 8002c78:	bd08      	pop	{r3, pc}
 8002c7a:	bf00      	nop
 8002c7c:	2000077e 	.word	0x2000077e
 8002c80:	200007b4 	.word	0x200007b4
 8002c84:	08005c50 	.word	0x08005c50
 8002c88:	08006d54 	.word	0x08006d54

08002c8c <MenuTraining_new>:
{
 8002c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (EnterInMenu_Status == 0)
 8002c90:	4abc      	ldr	r2, [pc, #752]	; (8002f84 <MenuTraining_new+0x2f8>)
{
 8002c92:	b087      	sub	sp, #28
	if (EnterInMenu_Status == 0)
 8002c94:	7813      	ldrb	r3, [r2, #0]
{
 8002c96:	9001      	str	r0, [sp, #4]
	if (EnterInMenu_Status == 0)
 8002c98:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8002c9c:	9202      	str	r2, [sp, #8]
 8002c9e:	f8df a344 	ldr.w	sl, [pc, #836]	; 8002fe4 <MenuTraining_new+0x358>
 8002ca2:	f8df b344 	ldr.w	fp, [pc, #836]	; 8002fe8 <MenuTraining_new+0x35c>
 8002ca6:	f8df 9344 	ldr.w	r9, [pc, #836]	; 8002fec <MenuTraining_new+0x360>
 8002caa:	4fb7      	ldr	r7, [pc, #732]	; (8002f88 <MenuTraining_new+0x2fc>)
 8002cac:	f8df 8340 	ldr.w	r8, [pc, #832]	; 8002ff0 <MenuTraining_new+0x364>
 8002cb0:	4db6      	ldr	r5, [pc, #728]	; (8002f8c <MenuTraining_new+0x300>)
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d13d      	bne.n	8002d32 <MenuTraining_new+0xa6>
		if (U_PS < (SettingsData.MaxVoltage+DELTA_UPS_BAT_MAX))
 8002cb6:	4bb6      	ldr	r3, [pc, #728]	; (8002f90 <MenuTraining_new+0x304>)
 8002cb8:	881a      	ldrh	r2, [r3, #0]
 8002cba:	4bb6      	ldr	r3, [pc, #728]	; (8002f94 <MenuTraining_new+0x308>)
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	3305      	adds	r3, #5
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d915      	bls.n	8002cf0 <MenuTraining_new+0x64>
			lcd_set_xy(0,0);
 8002cc4:	4621      	mov	r1, r4
 8002cc6:	4620      	mov	r0, r4
 8002cc8:	f7fe fde6 	bl	8001898 <lcd_set_xy>
			PrintToLCD("U(ps)<U(bat.max)");
 8002ccc:	48b2      	ldr	r0, [pc, #712]	; (8002f98 <MenuTraining_new+0x30c>)
 8002cce:	f7fe fe63 	bl	8001998 <PrintToLCD>
			delay_ms(2000);
 8002cd2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002cd6:	f7fe f961 	bl	8000f9c <delay_ms>
			lcd_set_xy(0,0);
 8002cda:	4621      	mov	r1, r4
 8002cdc:	4620      	mov	r0, r4
 8002cde:	f7fe fddb 	bl	8001898 <lcd_set_xy>
			PrintToLCD("UP U(ps)        ");
 8002ce2:	48ae      	ldr	r0, [pc, #696]	; (8002f9c <MenuTraining_new+0x310>)
 8002ce4:	f7fe fe58 	bl	8001998 <PrintToLCD>
			delay_ms(3000);
 8002ce8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002cec:	f7fe f956 	bl	8000f9c <delay_ms>
		EnterInMenu_Status = 1;
 8002cf0:	2601      	movs	r6, #1
		ChargeStatusForTimer = 0;
 8002cf2:	2400      	movs	r4, #0
		EnterInMenu_Status = 1;
 8002cf4:	9b02      	ldr	r3, [sp, #8]
 8002cf6:	701e      	strb	r6, [r3, #0]
		DischargeTimeSec_Previous = 0;
 8002cf8:	4ba9      	ldr	r3, [pc, #676]	; (8002fa0 <MenuTraining_new+0x314>)
		ChargeStatusForTimer = 0;
 8002cfa:	f88a 4000 	strb.w	r4, [sl]
		DisChargeStatusForTimer = 0;
 8002cfe:	f88b 4000 	strb.w	r4, [fp]
		ChargeTimeSec = 0;
 8002d02:	f8c9 4000 	str.w	r4, [r9]
		DischargeTimeSec = 0;
 8002d06:	603c      	str	r4, [r7, #0]
		DischargeTimeSec_Previous = 0;
 8002d08:	601c      	str	r4, [r3, #0]
		BatteryCapacityCharge = 0;
 8002d0a:	f8c8 4000 	str.w	r4, [r8]
		BatteryCapacityDischargeCurrent = 0;
 8002d0e:	602c      	str	r4, [r5, #0]
		ChargeStatusForTimer = 1;
 8002d10:	f88a 6000 	strb.w	r6, [sl]
		charge1();
 8002d14:	f7ff ff96 	bl	8002c44 <charge1>
		ChargeDischargeStatus = CHARGEs;
 8002d18:	4ba2      	ldr	r3, [pc, #648]	; (8002fa4 <MenuTraining_new+0x318>)
		lcd_set_xy(0,0);
 8002d1a:	4621      	mov	r1, r4
 8002d1c:	4620      	mov	r0, r4
		ChargeDischargeStatus = CHARGEs;
 8002d1e:	701e      	strb	r6, [r3, #0]
		lcd_set_xy(0,0);
 8002d20:	f7fe fdba 	bl	8001898 <lcd_set_xy>
		PrintToLCD("Testing Battery.");
 8002d24:	48a0      	ldr	r0, [pc, #640]	; (8002fa8 <MenuTraining_new+0x31c>)
 8002d26:	f7fe fe37 	bl	8001998 <PrintToLCD>
		delay_ms(1000);
 8002d2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d2e:	f7fe f935 	bl	8000f9c <delay_ms>
	if (Module16(Current)>5)
 8002d32:	4c9e      	ldr	r4, [pc, #632]	; (8002fac <MenuTraining_new+0x320>)
 8002d34:	8820      	ldrh	r0, [r4, #0]
 8002d36:	b200      	sxth	r0, r0
 8002d38:	f7fe fb28 	bl	800138c <Module16>
 8002d3c:	2805      	cmp	r0, #5
 8002d3e:	9404      	str	r4, [sp, #16]
 8002d40:	f340 81d1 	ble.w	80030e6 <MenuTraining_new+0x45a>
		if (U_OUT < SettingsData.LowVoltage && ChargeDischargeStatus == DISCHARGEs  && TimerForReadyMeasurement_ms>1000)
 8002d44:	4b9a      	ldr	r3, [pc, #616]	; (8002fb0 <MenuTraining_new+0x324>)
 8002d46:	4e93      	ldr	r6, [pc, #588]	; (8002f94 <MenuTraining_new+0x308>)
 8002d48:	881a      	ldrh	r2, [r3, #0]
 8002d4a:	69b1      	ldr	r1, [r6, #24]
 8002d4c:	9303      	str	r3, [sp, #12]
 8002d4e:	4291      	cmp	r1, r2
 8002d50:	d920      	bls.n	8002d94 <MenuTraining_new+0x108>
 8002d52:	4c94      	ldr	r4, [pc, #592]	; (8002fa4 <MenuTraining_new+0x318>)
 8002d54:	7822      	ldrb	r2, [r4, #0]
 8002d56:	2a02      	cmp	r2, #2
 8002d58:	d11c      	bne.n	8002d94 <MenuTraining_new+0x108>
 8002d5a:	4b96      	ldr	r3, [pc, #600]	; (8002fb4 <MenuTraining_new+0x328>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d62:	d917      	bls.n	8002d94 <MenuTraining_new+0x108>
			DisChargeStatusForTimer = 0;
 8002d64:	2300      	movs	r3, #0
 8002d66:	f88b 3000 	strb.w	r3, [fp]
			if (BatteryCapacityDischargeCurrent/3600 > 100)
 8002d6a:	6829      	ldr	r1, [r5, #0]
 8002d6c:	4b92      	ldr	r3, [pc, #584]	; (8002fb8 <MenuTraining_new+0x32c>)
 8002d6e:	4299      	cmp	r1, r3
 8002d70:	d903      	bls.n	8002d7a <MenuTraining_new+0xee>
				MenuTraining_WriteInLOG(BatteryCapacityDischargeCurrent,DischargeTimeSec,DISCHARGE_l);
 8002d72:	6828      	ldr	r0, [r5, #0]
 8002d74:	6839      	ldr	r1, [r7, #0]
 8002d76:	f7ff f92d 	bl	8001fd4 <MenuTraining_WriteInLOG>
			ChargeTimeSec = 0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f8c9 3000 	str.w	r3, [r9]
			BatteryCapacityCharge = 0;
 8002d80:	f8c8 3000 	str.w	r3, [r8]
			ChargeStatusForTimer = 1;
 8002d84:	2301      	movs	r3, #1
 8002d86:	f88a 3000 	strb.w	r3, [sl]
 8002d8a:	9305      	str	r3, [sp, #20]
			charge1();
 8002d8c:	f7ff ff5a 	bl	8002c44 <charge1>
			ChargeDischargeStatus = CHARGEs;
 8002d90:	9b05      	ldr	r3, [sp, #20]
 8002d92:	7023      	strb	r3, [r4, #0]
		if ((U_OUT > SettingsData.MaxVoltage && ChargeDischargeStatus == CHARGEs  && TimerForReadyMeasurement_ms>1000) || (ChargeTimeSec > ChargeDurationSec && ChargeDischargeStatus == CHARGEs))
 8002d94:	9b03      	ldr	r3, [sp, #12]
 8002d96:	6a32      	ldr	r2, [r6, #32]
 8002d98:	881b      	ldrh	r3, [r3, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d208      	bcs.n	8002db0 <MenuTraining_new+0x124>
 8002d9e:	4b81      	ldr	r3, [pc, #516]	; (8002fa4 <MenuTraining_new+0x318>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d104      	bne.n	8002db0 <MenuTraining_new+0x124>
 8002da6:	4b83      	ldr	r3, [pc, #524]	; (8002fb4 <MenuTraining_new+0x328>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dae:	d809      	bhi.n	8002dc4 <MenuTraining_new+0x138>
 8002db0:	4b82      	ldr	r3, [pc, #520]	; (8002fbc <MenuTraining_new+0x330>)
 8002db2:	f8d9 2000 	ldr.w	r2, [r9]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d923      	bls.n	8002e04 <MenuTraining_new+0x178>
 8002dbc:	4b79      	ldr	r3, [pc, #484]	; (8002fa4 <MenuTraining_new+0x318>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d11f      	bne.n	8002e04 <MenuTraining_new+0x178>
			ChargeStatusForTimer = 0;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	f88a 3000 	strb.w	r3, [sl]
			if (BatteryCapacityCharge/3600 > 100)
 8002dca:	f8d8 2000 	ldr.w	r2, [r8]
 8002dce:	4b7a      	ldr	r3, [pc, #488]	; (8002fb8 <MenuTraining_new+0x32c>)
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d906      	bls.n	8002de2 <MenuTraining_new+0x156>
				MenuTraining_WriteInLOG(BatteryCapacityCharge,ChargeTimeSec,CHARGE_H);
 8002dd4:	f8d8 0000 	ldr.w	r0, [r8]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f8d9 1000 	ldr.w	r1, [r9]
 8002dde:	f7ff f8f9 	bl	8001fd4 <MenuTraining_WriteInLOG>
			DischargeTimeSec_Previous = DischargeTimeSec;
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	4b6e      	ldr	r3, [pc, #440]	; (8002fa0 <MenuTraining_new+0x314>)
 8002de6:	601a      	str	r2, [r3, #0]
			SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue = BatteryCapacityDischargeCurrent;
 8002de8:	682a      	ldr	r2, [r5, #0]
 8002dea:	4b75      	ldr	r3, [pc, #468]	; (8002fc0 <MenuTraining_new+0x334>)
 8002dec:	609a      	str	r2, [r3, #8]
			DischargeTimeSec = 0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	603b      	str	r3, [r7, #0]
			BatteryCapacityDischargeCurrent = 0;
 8002df2:	602b      	str	r3, [r5, #0]
			DisChargeStatusForTimer = 1;
 8002df4:	2301      	movs	r3, #1
 8002df6:	f88b 3000 	strb.w	r3, [fp]
			discharge1();
 8002dfa:	f7ff fe6b 	bl	8002ad4 <discharge1>
			ChargeDischargeStatus = DISCHARGEs;
 8002dfe:	2202      	movs	r2, #2
 8002e00:	4b68      	ldr	r3, [pc, #416]	; (8002fa4 <MenuTraining_new+0x318>)
 8002e02:	701a      	strb	r2, [r3, #0]
		if (key == KEY_NEXT)
 8002e04:	9a01      	ldr	r2, [sp, #4]
 8002e06:	4c6f      	ldr	r4, [pc, #444]	; (8002fc4 <MenuTraining_new+0x338>)
 8002e08:	2a02      	cmp	r2, #2
 8002e0a:	f994 3000 	ldrsb.w	r3, [r4]
 8002e0e:	f040 8159 	bne.w	80030c4 <MenuTraining_new+0x438>
			CountShow++;
 8002e12:	3301      	adds	r3, #1
 8002e14:	b25b      	sxtb	r3, r3
			if (CountShow==MAX_SCREENS__MENU_TRAINING) CountShow=0;
 8002e16:	2b05      	cmp	r3, #5
 8002e18:	bf08      	it	eq
 8002e1a:	2300      	moveq	r3, #0
			if (CountShow<0) CountShow=MAX_SCREENS__MENU_TRAINING-1;
 8002e1c:	7023      	strb	r3, [r4, #0]
		if(CountShow == 0)
 8002e1e:	f994 3000 	ldrsb.w	r3, [r4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d132      	bne.n	8002e8c <MenuTraining_new+0x200>
			lcd_set_xy(0,0);
 8002e26:	4619      	mov	r1, r3
 8002e28:	4618      	mov	r0, r3
 8002e2a:	9301      	str	r3, [sp, #4]
 8002e2c:	f7fe fd34 	bl	8001898 <lcd_set_xy>
			PrintToLCD(itoa_koma(U_OUT,2));
 8002e30:	9b03      	ldr	r3, [sp, #12]
 8002e32:	2102      	movs	r1, #2
 8002e34:	8818      	ldrh	r0, [r3, #0]
 8002e36:	f7fe fa41 	bl	80012bc <itoa_koma>
 8002e3a:	f7fe fdad 	bl	8001998 <PrintToLCD>
			PrintToLCD("V ");
 8002e3e:	4862      	ldr	r0, [pc, #392]	; (8002fc8 <MenuTraining_new+0x33c>)
 8002e40:	f7fe fdaa 	bl	8001998 <PrintToLCD>
			PrintToLCD(itoa(Current));
 8002e44:	9b04      	ldr	r3, [sp, #16]
 8002e46:	8818      	ldrh	r0, [r3, #0]
 8002e48:	b200      	sxth	r0, r0
 8002e4a:	f7fe f9c3 	bl	80011d4 <itoa>
 8002e4e:	f7fe fda3 	bl	8001998 <PrintToLCD>
			PrintToLCD("mA     ");
 8002e52:	485e      	ldr	r0, [pc, #376]	; (8002fcc <MenuTraining_new+0x340>)
 8002e54:	f7fe fda0 	bl	8001998 <PrintToLCD>
			lcd_set_xy(6,1);
 8002e58:	2101      	movs	r1, #1
 8002e5a:	2006      	movs	r0, #6
 8002e5c:	f7fe fd1c 	bl	8001898 <lcd_set_xy>
			LcdOutbyNumber(4,1);
 8002e60:	2101      	movs	r1, #1
 8002e62:	2004      	movs	r0, #4
 8002e64:	f7fe fd40 	bl	80018e8 <LcdOutbyNumber>
			if (Status_Out ==1)
 8002e68:	4a59      	ldr	r2, [pc, #356]	; (8002fd0 <MenuTraining_new+0x344>)
 8002e6a:	9b01      	ldr	r3, [sp, #4]
 8002e6c:	7812      	ldrb	r2, [r2, #0]
 8002e6e:	2a01      	cmp	r2, #1
 8002e70:	f040 8132 	bne.w	80030d8 <MenuTraining_new+0x44c>
				lcd_set_xy(7,1);
 8002e74:	4611      	mov	r1, r2
 8002e76:	2007      	movs	r0, #7
 8002e78:	9303      	str	r3, [sp, #12]
 8002e7a:	9201      	str	r2, [sp, #4]
 8002e7c:	f7fe fd0c 	bl	8001898 <lcd_set_xy>
				LcdOutbyNumber(0,1);//charge
 8002e80:	9a01      	ldr	r2, [sp, #4]
 8002e82:	9b03      	ldr	r3, [sp, #12]
 8002e84:	4611      	mov	r1, r2
 8002e86:	4618      	mov	r0, r3
				LcdOutbyNumber(2,1);//discharge
 8002e88:	f7fe fd2e 	bl	80018e8 <LcdOutbyNumber>
		if(CountShow == 1)
 8002e8c:	f994 3000 	ldrsb.w	r3, [r4]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d128      	bne.n	8002ee6 <MenuTraining_new+0x25a>
			lcd_set_xy(0,0);
 8002e94:	2100      	movs	r1, #0
 8002e96:	4608      	mov	r0, r1
 8002e98:	9301      	str	r3, [sp, #4]
 8002e9a:	f7fe fcfd 	bl	8001898 <lcd_set_xy>
			PrintToLCD(itoa(SettingsData.ChargeTime));
 8002e9e:	6930      	ldr	r0, [r6, #16]
 8002ea0:	f7fe f998 	bl	80011d4 <itoa>
 8002ea4:	f7fe fd78 	bl	8001998 <PrintToLCD>
			PrintToLCD("h ");
 8002ea8:	484a      	ldr	r0, [pc, #296]	; (8002fd4 <MenuTraining_new+0x348>)
 8002eaa:	f7fe fd75 	bl	8001998 <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 8002eae:	220a      	movs	r2, #10
 8002eb0:	9b01      	ldr	r3, [sp, #4]
 8002eb2:	69b0      	ldr	r0, [r6, #24]
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	fbb0 f0f2 	udiv	r0, r0, r2
 8002eba:	9303      	str	r3, [sp, #12]
 8002ebc:	9201      	str	r2, [sp, #4]
 8002ebe:	f7fe f9fd 	bl	80012bc <itoa_koma>
 8002ec2:	f7fe fd69 	bl	8001998 <PrintToLCD>
			PrintToLCD("V ");
 8002ec6:	4840      	ldr	r0, [pc, #256]	; (8002fc8 <MenuTraining_new+0x33c>)
 8002ec8:	f7fe fd66 	bl	8001998 <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8002ecc:	9b03      	ldr	r3, [sp, #12]
 8002ece:	9a01      	ldr	r2, [sp, #4]
 8002ed0:	6a30      	ldr	r0, [r6, #32]
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	fbb0 f0f2 	udiv	r0, r0, r2
 8002ed8:	f7fe f9f0 	bl	80012bc <itoa_koma>
 8002edc:	f7fe fd5c 	bl	8001998 <PrintToLCD>
			PrintToLCD("V     ");
 8002ee0:	483d      	ldr	r0, [pc, #244]	; (8002fd8 <MenuTraining_new+0x34c>)
 8002ee2:	f7fe fd59 	bl	8001998 <PrintToLCD>
		if(CountShow == 2)
 8002ee6:	f994 6000 	ldrsb.w	r6, [r4]
 8002eea:	2e02      	cmp	r6, #2
 8002eec:	d121      	bne.n	8002f32 <MenuTraining_new+0x2a6>
			lcd_set_xy(0,0);
 8002eee:	2100      	movs	r1, #0
 8002ef0:	4608      	mov	r0, r1
 8002ef2:	f7fe fcd1 	bl	8001898 <lcd_set_xy>
			LcdOutbyNumber(2,1);//discharge
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	4630      	mov	r0, r6
 8002efa:	f7fe fcf5 	bl	80018e8 <LcdOutbyNumber>
			lcd_set_xy(1,0);
 8002efe:	2100      	movs	r1, #0
 8002f00:	2001      	movs	r0, #1
 8002f02:	f7fe fcc9 	bl	8001898 <lcd_set_xy>
			PrintToLCD(" ");
 8002f06:	4835      	ldr	r0, [pc, #212]	; (8002fdc <MenuTraining_new+0x350>)
 8002f08:	f7fe fd46 	bl	8001998 <PrintToLCD>
			PrintToLCD(itoa(BatteryCapacityDischargeCurrent/3600));
 8002f0c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002f10:	6828      	ldr	r0, [r5, #0]
 8002f12:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f16:	f7fe f95d 	bl	80011d4 <itoa>
 8002f1a:	f7fe fd3d 	bl	8001998 <PrintToLCD>
			PrintToLCD("mAH      ");
 8002f1e:	4830      	ldr	r0, [pc, #192]	; (8002fe0 <MenuTraining_new+0x354>)
 8002f20:	f7fe fd3a 	bl	8001998 <PrintToLCD>
			lcd_set_xy(3,1);
 8002f24:	2003      	movs	r0, #3
 8002f26:	2101      	movs	r1, #1
 8002f28:	f7fe fcb6 	bl	8001898 <lcd_set_xy>
			ClockOnLCD_noSec(DischargeTimeSec);
 8002f2c:	6838      	ldr	r0, [r7, #0]
 8002f2e:	f7ff fbbb 	bl	80026a8 <ClockOnLCD_noSec>
		if(CountShow == 3)
 8002f32:	f994 6000 	ldrsb.w	r6, [r4]
 8002f36:	2e03      	cmp	r6, #3
 8002f38:	d15c      	bne.n	8002ff4 <MenuTraining_new+0x368>
			lcd_set_xy(0,0);
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	4608      	mov	r0, r1
 8002f3e:	f7fe fcab 	bl	8001898 <lcd_set_xy>
			LcdOutbyNumber(0,1);//charge
 8002f42:	2101      	movs	r1, #1
 8002f44:	2000      	movs	r0, #0
 8002f46:	f7fe fccf 	bl	80018e8 <LcdOutbyNumber>
			lcd_set_xy(1,0);
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	f7fe fca3 	bl	8001898 <lcd_set_xy>
			PrintToLCD(" ");
 8002f52:	4822      	ldr	r0, [pc, #136]	; (8002fdc <MenuTraining_new+0x350>)
 8002f54:	f7fe fd20 	bl	8001998 <PrintToLCD>
			PrintToLCD(itoa(BatteryCapacityCharge/3600));
 8002f58:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002f5c:	f8d8 0000 	ldr.w	r0, [r8]
 8002f60:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f64:	f7fe f936 	bl	80011d4 <itoa>
 8002f68:	f7fe fd16 	bl	8001998 <PrintToLCD>
			PrintToLCD("mAH      ");
 8002f6c:	481c      	ldr	r0, [pc, #112]	; (8002fe0 <MenuTraining_new+0x354>)
 8002f6e:	f7fe fd13 	bl	8001998 <PrintToLCD>
			lcd_set_xy(3,1);
 8002f72:	4630      	mov	r0, r6
 8002f74:	2101      	movs	r1, #1
 8002f76:	f7fe fc8f 	bl	8001898 <lcd_set_xy>
			ClockOnLCD_noSec(ChargeTimeSec);
 8002f7a:	f8d9 0000 	ldr.w	r0, [r9]
 8002f7e:	f7ff fb93 	bl	80026a8 <ClockOnLCD_noSec>
 8002f82:	e037      	b.n	8002ff4 <MenuTraining_new+0x368>
 8002f84:	20000794 	.word	0x20000794
 8002f88:	2000078c 	.word	0x2000078c
 8002f8c:	20000774 	.word	0x20000774
 8002f90:	20000854 	.word	0x20000854
 8002f94:	20000154 	.word	0x20000154
 8002f98:	080061d9 	.word	0x080061d9
 8002f9c:	080061ea 	.word	0x080061ea
 8002fa0:	20000790 	.word	0x20000790
 8002fa4:	20000270 	.word	0x20000270
 8002fa8:	080061fb 	.word	0x080061fb
 8002fac:	2000083e 	.word	0x2000083e
 8002fb0:	2000084e 	.word	0x2000084e
 8002fb4:	200007b4 	.word	0x200007b4
 8002fb8:	00058c4f 	.word	0x00058c4f
 8002fbc:	200009fc 	.word	0x200009fc
 8002fc0:	200000f4 	.word	0x200000f4
 8002fc4:	20000785 	.word	0x20000785
 8002fc8:	08006001 	.word	0x08006001
 8002fcc:	0800620c 	.word	0x0800620c
 8002fd0:	20000798 	.word	0x20000798
 8002fd4:	080059ee 	.word	0x080059ee
 8002fd8:	0800610f 	.word	0x0800610f
 8002fdc:	0800613e 	.word	0x0800613e
 8002fe0:	08006214 	.word	0x08006214
 8002fe4:	2000077f 	.word	0x2000077f
 8002fe8:	2000078a 	.word	0x2000078a
 8002fec:	20000780 	.word	0x20000780
 8002ff0:	20000770 	.word	0x20000770
		if(CountShow == 4)
 8002ff4:	f994 3000 	ldrsb.w	r3, [r4]
 8002ff8:	2b04      	cmp	r3, #4
 8002ffa:	d123      	bne.n	8003044 <MenuTraining_new+0x3b8>
			lcd_set_xy(0,0);
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	4608      	mov	r0, r1
 8003000:	f7fe fc4a 	bl	8001898 <lcd_set_xy>
			LcdOutbyNumber(2,1);//discharge
 8003004:	2101      	movs	r1, #1
 8003006:	2002      	movs	r0, #2
 8003008:	f7fe fc6e 	bl	80018e8 <LcdOutbyNumber>
			lcd_set_xy(1,0);
 800300c:	2100      	movs	r1, #0
 800300e:	2001      	movs	r0, #1
 8003010:	f7fe fc42 	bl	8001898 <lcd_set_xy>
			PrintToLCD("P ");
 8003014:	483a      	ldr	r0, [pc, #232]	; (8003100 <MenuTraining_new+0x474>)
 8003016:	f7fe fcbf 	bl	8001998 <PrintToLCD>
			PrintToLCD(itoa(SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue/3600));
 800301a:	4b3a      	ldr	r3, [pc, #232]	; (8003104 <MenuTraining_new+0x478>)
 800301c:	6898      	ldr	r0, [r3, #8]
 800301e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003022:	fbb0 f0f3 	udiv	r0, r0, r3
 8003026:	f7fe f8d5 	bl	80011d4 <itoa>
 800302a:	f7fe fcb5 	bl	8001998 <PrintToLCD>
			PrintToLCD("mAH     ");
 800302e:	4836      	ldr	r0, [pc, #216]	; (8003108 <MenuTraining_new+0x47c>)
 8003030:	f7fe fcb2 	bl	8001998 <PrintToLCD>
			lcd_set_xy(3,1);
 8003034:	2003      	movs	r0, #3
 8003036:	2101      	movs	r1, #1
 8003038:	f7fe fc2e 	bl	8001898 <lcd_set_xy>
			ClockOnLCD_noSec(DischargeTimeSec_Previous);
 800303c:	4b33      	ldr	r3, [pc, #204]	; (800310c <MenuTraining_new+0x480>)
 800303e:	6818      	ldr	r0, [r3, #0]
 8003040:	f7ff fb32 	bl	80026a8 <ClockOnLCD_noSec>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 8003044:	4832      	ldr	r0, [pc, #200]	; (8003110 <MenuTraining_new+0x484>)
 8003046:	f002 f883 	bl	8005150 <printToBufferWithoutEndUART1>
 800304a:	9b02      	ldr	r3, [sp, #8]
 800304c:	2200      	movs	r2, #0
 800304e:	7819      	ldrb	r1, [r3, #0]
 8003050:	4830      	ldr	r0, [pc, #192]	; (8003114 <MenuTraining_new+0x488>)
 8003052:	f002 f8c1 	bl	80051d8 <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 8003056:	482e      	ldr	r0, [pc, #184]	; (8003110 <MenuTraining_new+0x484>)
 8003058:	f002 f87a 	bl	8005150 <printToBufferWithoutEndUART1>
 800305c:	f89a 1000 	ldrb.w	r1, [sl]
 8003060:	2200      	movs	r2, #0
 8003062:	482d      	ldr	r0, [pc, #180]	; (8003118 <MenuTraining_new+0x48c>)
 8003064:	f002 f8b8 	bl	80051d8 <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 8003068:	4829      	ldr	r0, [pc, #164]	; (8003110 <MenuTraining_new+0x484>)
 800306a:	f002 f871 	bl	8005150 <printToBufferWithoutEndUART1>
 800306e:	f8d9 1000 	ldr.w	r1, [r9]
 8003072:	2200      	movs	r2, #0
 8003074:	4829      	ldr	r0, [pc, #164]	; (800311c <MenuTraining_new+0x490>)
 8003076:	f002 f8af 	bl	80051d8 <printToBufferUART1D>
	logDebugD("BatteryCapacityCharge: ",BatteryCapacityCharge,0);
 800307a:	4825      	ldr	r0, [pc, #148]	; (8003110 <MenuTraining_new+0x484>)
 800307c:	f002 f868 	bl	8005150 <printToBufferWithoutEndUART1>
 8003080:	f8d8 1000 	ldr.w	r1, [r8]
 8003084:	2200      	movs	r2, #0
 8003086:	4826      	ldr	r0, [pc, #152]	; (8003120 <MenuTraining_new+0x494>)
 8003088:	f002 f8a6 	bl	80051d8 <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 800308c:	4820      	ldr	r0, [pc, #128]	; (8003110 <MenuTraining_new+0x484>)
 800308e:	f002 f85f 	bl	8005150 <printToBufferWithoutEndUART1>
 8003092:	f89b 1000 	ldrb.w	r1, [fp]
 8003096:	2200      	movs	r2, #0
 8003098:	4822      	ldr	r0, [pc, #136]	; (8003124 <MenuTraining_new+0x498>)
 800309a:	f002 f89d 	bl	80051d8 <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 800309e:	481c      	ldr	r0, [pc, #112]	; (8003110 <MenuTraining_new+0x484>)
 80030a0:	f002 f856 	bl	8005150 <printToBufferWithoutEndUART1>
 80030a4:	6839      	ldr	r1, [r7, #0]
 80030a6:	2200      	movs	r2, #0
 80030a8:	481f      	ldr	r0, [pc, #124]	; (8003128 <MenuTraining_new+0x49c>)
 80030aa:	f002 f895 	bl	80051d8 <printToBufferUART1D>
	logDebugD("BatteryCapacityDischargeCurrent: ",BatteryCapacityDischargeCurrent,0);
 80030ae:	4818      	ldr	r0, [pc, #96]	; (8003110 <MenuTraining_new+0x484>)
 80030b0:	f002 f84e 	bl	8005150 <printToBufferWithoutEndUART1>
 80030b4:	2200      	movs	r2, #0
 80030b6:	6829      	ldr	r1, [r5, #0]
 80030b8:	481c      	ldr	r0, [pc, #112]	; (800312c <MenuTraining_new+0x4a0>)
}
 80030ba:	b007      	add	sp, #28
 80030bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	logDebugD("BatteryCapacityDischargeCurrent: ",BatteryCapacityDischargeCurrent,0);
 80030c0:	f002 b88a 	b.w	80051d8 <printToBufferUART1D>
		if (key == KEY_BACK)
 80030c4:	9a01      	ldr	r2, [sp, #4]
 80030c6:	2a01      	cmp	r2, #1
 80030c8:	f47f aea9 	bne.w	8002e1e <MenuTraining_new+0x192>
			CountShow--;
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b25b      	sxtb	r3, r3
			if (CountShow<0) CountShow=MAX_SCREENS__MENU_TRAINING-1;
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	bfb8      	it	lt
 80030d4:	2304      	movlt	r3, #4
 80030d6:	e6a1      	b.n	8002e1c <MenuTraining_new+0x190>
				lcd_set_xy(7,1);
 80030d8:	2101      	movs	r1, #1
 80030da:	2007      	movs	r0, #7
 80030dc:	f7fe fbdc 	bl	8001898 <lcd_set_xy>
				LcdOutbyNumber(2,1);//discharge
 80030e0:	2101      	movs	r1, #1
 80030e2:	2002      	movs	r0, #2
 80030e4:	e6d0      	b.n	8002e88 <MenuTraining_new+0x1fc>
		if (TimerForReadyMeasurement_ms>1000)
 80030e6:	4b12      	ldr	r3, [pc, #72]	; (8003130 <MenuTraining_new+0x4a4>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030ee:	d9a9      	bls.n	8003044 <MenuTraining_new+0x3b8>
			lcd_set_xy(0,0);
 80030f0:	2100      	movs	r1, #0
 80030f2:	4608      	mov	r0, r1
 80030f4:	f7fe fbd0 	bl	8001898 <lcd_set_xy>
			PrintToLCD("NO/BAD Battery  ");
 80030f8:	480e      	ldr	r0, [pc, #56]	; (8003134 <MenuTraining_new+0x4a8>)
 80030fa:	f7fe fc4d 	bl	8001998 <PrintToLCD>
 80030fe:	e7a1      	b.n	8003044 <MenuTraining_new+0x3b8>
 8003100:	0800621e 	.word	0x0800621e
 8003104:	200000f4 	.word	0x200000f4
 8003108:	08006221 	.word	0x08006221
 800310c:	20000790 	.word	0x20000790
 8003110:	08005c50 	.word	0x08005c50
 8003114:	0800623b 	.word	0x0800623b
 8003118:	08006250 	.word	0x08006250
 800311c:	08006265 	.word	0x08006265
 8003120:	08006275 	.word	0x08006275
 8003124:	0800628d 	.word	0x0800628d
 8003128:	080062a5 	.word	0x080062a5
 800312c:	080062b8 	.word	0x080062b8
 8003130:	200007b4 	.word	0x200007b4
 8003134:	0800622a 	.word	0x0800622a

08003138 <MenuSwing>:
   	lcd_set_xy(0,0);
 8003138:	2100      	movs	r1, #0
{
 800313a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800313c:	4606      	mov	r6, r0
   	lcd_set_xy(0,0);
 800313e:	4608      	mov	r0, r1
 8003140:	f7fe fbaa 	bl	8001898 <lcd_set_xy>
       	EnterInMenu_Status = 1;
 8003144:	2201      	movs	r2, #1
 8003146:	4b66      	ldr	r3, [pc, #408]	; (80032e0 <MenuSwing+0x1a8>)
 8003148:	701a      	strb	r2, [r3, #0]
       	if (InitiStatus==0)
 800314a:	4b66      	ldr	r3, [pc, #408]	; (80032e4 <MenuSwing+0x1ac>)
 800314c:	7819      	ldrb	r1, [r3, #0]
 800314e:	b911      	cbnz	r1, 8003156 <MenuSwing+0x1e>
       		InitiStatus=1;
 8003150:	701a      	strb	r2, [r3, #0]
       		Start_Timer_sec();
 8003152:	f7ff fa9d 	bl	8002690 <Start_Timer_sec>
       if (Timer_Sec<=SettingsData.Swing_Chrg_time)
 8003156:	4d64      	ldr	r5, [pc, #400]	; (80032e8 <MenuSwing+0x1b0>)
 8003158:	4c64      	ldr	r4, [pc, #400]	; (80032ec <MenuSwing+0x1b4>)
 800315a:	682b      	ldr	r3, [r5, #0]
 800315c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800315e:	429a      	cmp	r2, r3
 8003160:	d311      	bcc.n	8003186 <MenuSwing+0x4e>
    	   charge1();
 8003162:	f7ff fd6f 	bl	8002c44 <charge1>
           if (U_OUT>SettingsData.MaxVoltage && TimerForReadyMeasurement_ms>400)
 8003166:	4b62      	ldr	r3, [pc, #392]	; (80032f0 <MenuSwing+0x1b8>)
 8003168:	6a22      	ldr	r2, [r4, #32]
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d20a      	bcs.n	8003186 <MenuSwing+0x4e>
 8003170:	4b60      	ldr	r3, [pc, #384]	; (80032f4 <MenuSwing+0x1bc>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003178:	d905      	bls.n	8003186 <MenuSwing+0x4e>
        	   ReStart_Timer_sec();
 800317a:	f7ff fa89 	bl	8002690 <Start_Timer_sec>
               Timer_Sec  = Timer_Sec+ SettingsData.Swing_Chrg_time;
 800317e:	682b      	ldr	r3, [r5, #0]
 8003180:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003182:	4413      	add	r3, r2
 8003184:	602b      	str	r3, [r5, #0]
       if (Timer_Sec > SettingsData.Swing_Chrg_time)
 8003186:	682b      	ldr	r3, [r5, #0]
 8003188:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800318a:	429a      	cmp	r2, r3
 800318c:	d20d      	bcs.n	80031aa <MenuSwing+0x72>
           discharge1();
 800318e:	f7ff fca1 	bl	8002ad4 <discharge1>
           if (U_OUT<SettingsData.LowVoltage && TimerForReadyMeasurement_ms>400)
 8003192:	4b57      	ldr	r3, [pc, #348]	; (80032f0 <MenuSwing+0x1b8>)
 8003194:	69a2      	ldr	r2, [r4, #24]
 8003196:	881b      	ldrh	r3, [r3, #0]
 8003198:	429a      	cmp	r2, r3
 800319a:	d906      	bls.n	80031aa <MenuSwing+0x72>
 800319c:	4b55      	ldr	r3, [pc, #340]	; (80032f4 <MenuSwing+0x1bc>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80031a4:	d901      	bls.n	80031aa <MenuSwing+0x72>
        	   ReStart_Timer_sec();
 80031a6:	f7ff fa73 	bl	8002690 <Start_Timer_sec>
       if (Timer_Sec > (SettingsData.Swing_Chrg_time+SettingsData.Swing_DChrg_time))
 80031aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80031ac:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80031ae:	682a      	ldr	r2, [r5, #0]
 80031b0:	440b      	add	r3, r1
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d201      	bcs.n	80031ba <MenuSwing+0x82>
    	   ReStart_Timer_sec();
 80031b6:	f7ff fa6b 	bl	8002690 <Start_Timer_sec>
 80031ba:	4d4f      	ldr	r5, [pc, #316]	; (80032f8 <MenuSwing+0x1c0>)
		if (key == KEY_NEXT)
 80031bc:	2e02      	cmp	r6, #2
 80031be:	f995 3000 	ldrsb.w	r3, [r5]
 80031c2:	d17d      	bne.n	80032c0 <MenuSwing+0x188>
			CountShow++;
 80031c4:	3301      	adds	r3, #1
 80031c6:	b25b      	sxtb	r3, r3
			if (CountShow==MAXITEM6) CountShow=0;
 80031c8:	2b03      	cmp	r3, #3
 80031ca:	bf08      	it	eq
 80031cc:	2300      	moveq	r3, #0
			if (CountShow<0) CountShow=MAXITEM6-1;
 80031ce:	702b      	strb	r3, [r5, #0]
		if(CountShow == 0)
 80031d0:	f995 6000 	ldrsb.w	r6, [r5]
 80031d4:	bb5e      	cbnz	r6, 800322e <MenuSwing+0xf6>
			lcd_set_xy(0,0);
 80031d6:	4631      	mov	r1, r6
 80031d8:	4630      	mov	r0, r6
 80031da:	f7fe fb5d 	bl	8001898 <lcd_set_xy>
			PrintToLCD(itoa_koma(U_OUT,2));
 80031de:	4b44      	ldr	r3, [pc, #272]	; (80032f0 <MenuSwing+0x1b8>)
 80031e0:	2102      	movs	r1, #2
 80031e2:	8818      	ldrh	r0, [r3, #0]
 80031e4:	f7fe f86a 	bl	80012bc <itoa_koma>
 80031e8:	f7fe fbd6 	bl	8001998 <PrintToLCD>
			PrintToLCD("V ");
 80031ec:	4843      	ldr	r0, [pc, #268]	; (80032fc <MenuSwing+0x1c4>)
 80031ee:	f7fe fbd3 	bl	8001998 <PrintToLCD>
			PrintToLCD(itoa(Current));
 80031f2:	4b43      	ldr	r3, [pc, #268]	; (8003300 <MenuSwing+0x1c8>)
 80031f4:	8818      	ldrh	r0, [r3, #0]
 80031f6:	b200      	sxth	r0, r0
 80031f8:	f7fd ffec 	bl	80011d4 <itoa>
 80031fc:	f7fe fbcc 	bl	8001998 <PrintToLCD>
			PrintToLCD("mA     ");
 8003200:	4840      	ldr	r0, [pc, #256]	; (8003304 <MenuSwing+0x1cc>)
 8003202:	f7fe fbc9 	bl	8001998 <PrintToLCD>
			lcd_set_xy(6,1);
 8003206:	2101      	movs	r1, #1
 8003208:	2006      	movs	r0, #6
 800320a:	f7fe fb45 	bl	8001898 <lcd_set_xy>
			LcdOutbyNumber(5,1);
 800320e:	2101      	movs	r1, #1
 8003210:	2005      	movs	r0, #5
 8003212:	f7fe fb69 	bl	80018e8 <LcdOutbyNumber>
			if (Status_Out ==1)
 8003216:	4b3c      	ldr	r3, [pc, #240]	; (8003308 <MenuSwing+0x1d0>)
 8003218:	781f      	ldrb	r7, [r3, #0]
 800321a:	2f01      	cmp	r7, #1
 800321c:	d158      	bne.n	80032d0 <MenuSwing+0x198>
				lcd_set_xy(7,1);
 800321e:	4639      	mov	r1, r7
 8003220:	2007      	movs	r0, #7
 8003222:	f7fe fb39 	bl	8001898 <lcd_set_xy>
				LcdOutbyNumber(0,1);//charge
 8003226:	4639      	mov	r1, r7
 8003228:	4630      	mov	r0, r6
				LcdOutbyNumber(2,1);//discharge
 800322a:	f7fe fb5d 	bl	80018e8 <LcdOutbyNumber>
		if(CountShow == 1)
 800322e:	f995 6000 	ldrsb.w	r6, [r5]
 8003232:	2e01      	cmp	r6, #1
 8003234:	d122      	bne.n	800327c <MenuSwing+0x144>
			lcd_set_xy(0,0);
 8003236:	2100      	movs	r1, #0
			PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 8003238:	270a      	movs	r7, #10
			lcd_set_xy(0,0);
 800323a:	4608      	mov	r0, r1
 800323c:	f7fe fb2c 	bl	8001898 <lcd_set_xy>
			PrintToLCD(itoa(SettingsData.ChargeTime));
 8003240:	6920      	ldr	r0, [r4, #16]
 8003242:	f7fd ffc7 	bl	80011d4 <itoa>
 8003246:	f7fe fba7 	bl	8001998 <PrintToLCD>
			PrintToLCD("h ");
 800324a:	4830      	ldr	r0, [pc, #192]	; (800330c <MenuSwing+0x1d4>)
 800324c:	f7fe fba4 	bl	8001998 <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 8003250:	69a0      	ldr	r0, [r4, #24]
 8003252:	4631      	mov	r1, r6
 8003254:	fbb0 f0f7 	udiv	r0, r0, r7
 8003258:	f7fe f830 	bl	80012bc <itoa_koma>
 800325c:	f7fe fb9c 	bl	8001998 <PrintToLCD>
			PrintToLCD("V ");
 8003260:	4826      	ldr	r0, [pc, #152]	; (80032fc <MenuSwing+0x1c4>)
 8003262:	f7fe fb99 	bl	8001998 <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8003266:	6a20      	ldr	r0, [r4, #32]
 8003268:	4631      	mov	r1, r6
 800326a:	fbb0 f0f7 	udiv	r0, r0, r7
 800326e:	f7fe f825 	bl	80012bc <itoa_koma>
 8003272:	f7fe fb91 	bl	8001998 <PrintToLCD>
			PrintToLCD("V     ");
 8003276:	4826      	ldr	r0, [pc, #152]	; (8003310 <MenuSwing+0x1d8>)
 8003278:	f7fe fb8e 	bl	8001998 <PrintToLCD>
		if(CountShow == 2)
 800327c:	f995 3000 	ldrsb.w	r3, [r5]
 8003280:	2b02      	cmp	r3, #2
 8003282:	d12c      	bne.n	80032de <MenuSwing+0x1a6>
			lcd_set_xy(0,0);
 8003284:	2100      	movs	r1, #0
 8003286:	4608      	mov	r0, r1
 8003288:	f7fe fb06 	bl	8001898 <lcd_set_xy>
			PrintToLCD(itoa(SettingsData.Swing_Chrg_time));
 800328c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800328e:	f7fd ffa1 	bl	80011d4 <itoa>
 8003292:	f7fe fb81 	bl	8001998 <PrintToLCD>
			PrintToLCD("s ");
 8003296:	481f      	ldr	r0, [pc, #124]	; (8003314 <MenuSwing+0x1dc>)
 8003298:	f7fe fb7e 	bl	8001998 <PrintToLCD>
			PrintToLCD(itoa(SettingsData.Swing_DChrg_time));
 800329c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800329e:	f7fd ff99 	bl	80011d4 <itoa>
 80032a2:	f7fe fb79 	bl	8001998 <PrintToLCD>
			PrintToLCD("s      ");
 80032a6:	481c      	ldr	r0, [pc, #112]	; (8003318 <MenuSwing+0x1e0>)
 80032a8:	f7fe fb76 	bl	8001998 <PrintToLCD>
			lcd_set_xy(3,1);
 80032ac:	2003      	movs	r0, #3
 80032ae:	2101      	movs	r1, #1
 80032b0:	f7fe faf2 	bl	8001898 <lcd_set_xy>
			ClockOnLCD_noSec(DischargeTimeSec);
 80032b4:	4b19      	ldr	r3, [pc, #100]	; (800331c <MenuSwing+0x1e4>)
 80032b6:	6818      	ldr	r0, [r3, #0]
}
 80032b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			ClockOnLCD_noSec(DischargeTimeSec);
 80032bc:	f7ff b9f4 	b.w	80026a8 <ClockOnLCD_noSec>
		if (key == KEY_BACK)
 80032c0:	2e01      	cmp	r6, #1
 80032c2:	d185      	bne.n	80031d0 <MenuSwing+0x98>
			CountShow--;
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b25b      	sxtb	r3, r3
			if (CountShow<0) CountShow=MAXITEM6-1;
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	bfb8      	it	lt
 80032cc:	2302      	movlt	r3, #2
 80032ce:	e77e      	b.n	80031ce <MenuSwing+0x96>
				lcd_set_xy(7,1);
 80032d0:	2101      	movs	r1, #1
 80032d2:	2007      	movs	r0, #7
 80032d4:	f7fe fae0 	bl	8001898 <lcd_set_xy>
				LcdOutbyNumber(2,1);//discharge
 80032d8:	2101      	movs	r1, #1
 80032da:	2002      	movs	r0, #2
 80032dc:	e7a5      	b.n	800322a <MenuSwing+0xf2>
}
 80032de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032e0:	20000794 	.word	0x20000794
 80032e4:	20000795 	.word	0x20000795
 80032e8:	200007b8 	.word	0x200007b8
 80032ec:	20000154 	.word	0x20000154
 80032f0:	2000084e 	.word	0x2000084e
 80032f4:	200007b4 	.word	0x200007b4
 80032f8:	20000785 	.word	0x20000785
 80032fc:	08006001 	.word	0x08006001
 8003300:	2000083e 	.word	0x2000083e
 8003304:	0800620c 	.word	0x0800620c
 8003308:	20000798 	.word	0x20000798
 800330c:	080059ee 	.word	0x080059ee
 8003310:	0800610f 	.word	0x0800610f
 8003314:	08005fa6 	.word	0x08005fa6
 8003318:	080061d1 	.word	0x080061d1
 800331c:	2000078c 	.word	0x2000078c

08003320 <OFF>:
{
 8003320:	b508      	push	{r3, lr}
	LOAD_OFF();
 8003322:	f7ff fbfb 	bl	8002b1c <LOAD_OFF>
}
 8003326:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	OUT_OFF();
 800332a:	f7ff b9f3 	b.w	8002714 <OUT_OFF>
	...

08003330 <MenuChargeAdapt>:
	EnterInMenu_Status = 1;
 8003330:	2201      	movs	r2, #1
{
 8003332:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (InitiStatus==0)
 8003336:	4eba      	ldr	r6, [pc, #744]	; (8003620 <MenuChargeAdapt+0x2f0>)
	EnterInMenu_Status = 1;
 8003338:	4bba      	ldr	r3, [pc, #744]	; (8003624 <MenuChargeAdapt+0x2f4>)
	if (InitiStatus==0)
 800333a:	7835      	ldrb	r5, [r6, #0]
{
 800333c:	4682      	mov	sl, r0
	EnterInMenu_Status = 1;
 800333e:	701a      	strb	r2, [r3, #0]
 8003340:	4698      	mov	r8, r3
 8003342:	4cb9      	ldr	r4, [pc, #740]	; (8003628 <MenuChargeAdapt+0x2f8>)
 8003344:	f8df 9350 	ldr.w	r9, [pc, #848]	; 8003698 <MenuChargeAdapt+0x368>
 8003348:	4fb8      	ldr	r7, [pc, #736]	; (800362c <MenuChargeAdapt+0x2fc>)
	if (InitiStatus==0)
 800334a:	bb2d      	cbnz	r5, 8003398 <MenuChargeAdapt+0x68>
		if (U_PS < (SettingsData.MaxVoltage+DELTA_UPS_BAT_MAX))
 800334c:	4bb8      	ldr	r3, [pc, #736]	; (8003630 <MenuChargeAdapt+0x300>)
 800334e:	881a      	ldrh	r2, [r3, #0]
 8003350:	4bb8      	ldr	r3, [pc, #736]	; (8003634 <MenuChargeAdapt+0x304>)
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	3305      	adds	r3, #5
 8003356:	4293      	cmp	r3, r2
 8003358:	d915      	bls.n	8003386 <MenuChargeAdapt+0x56>
			lcd_set_xy(0,0);
 800335a:	4629      	mov	r1, r5
 800335c:	4628      	mov	r0, r5
 800335e:	f7fe fa9b 	bl	8001898 <lcd_set_xy>
			PrintToLCD("U(ps)<U(bat.max)");
 8003362:	48b5      	ldr	r0, [pc, #724]	; (8003638 <MenuChargeAdapt+0x308>)
 8003364:	f7fe fb18 	bl	8001998 <PrintToLCD>
			delay_ms(2000);
 8003368:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800336c:	f7fd fe16 	bl	8000f9c <delay_ms>
			lcd_set_xy(0,0);
 8003370:	4629      	mov	r1, r5
 8003372:	4628      	mov	r0, r5
 8003374:	f7fe fa90 	bl	8001898 <lcd_set_xy>
			PrintToLCD("UP U(ps)        ");
 8003378:	48b0      	ldr	r0, [pc, #704]	; (800363c <MenuChargeAdapt+0x30c>)
 800337a:	f7fe fb0d 	bl	8001998 <PrintToLCD>
			delay_ms(3000);
 800337e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003382:	f7fd fe0b 	bl	8000f9c <delay_ms>
		ChargeStatusForTimer = 0;
 8003386:	2300      	movs	r3, #0
		BatteryCapacityCharge = 0;
 8003388:	4aad      	ldr	r2, [pc, #692]	; (8003640 <MenuChargeAdapt+0x310>)
		ChargeStatusForTimer = 0;
 800338a:	7023      	strb	r3, [r4, #0]
		DisChargeStatusForTimer = 0;
 800338c:	f889 3000 	strb.w	r3, [r9]
		BatteryCapacityCharge = 0;
 8003390:	6013      	str	r3, [r2, #0]
		InitiStatus = 1;
 8003392:	2201      	movs	r2, #1
		ChargeTimeSec = 0;
 8003394:	603b      	str	r3, [r7, #0]
		InitiStatus = 1;
 8003396:	7032      	strb	r2, [r6, #0]
	if (ChargeTimeSec > ChargeDurationSec)
 8003398:	4baa      	ldr	r3, [pc, #680]	; (8003644 <MenuChargeAdapt+0x314>)
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	f240 80fb 	bls.w	800359a <MenuChargeAdapt+0x26a>
			OFF();
 80033a4:	f7ff ffbc 	bl	8003320 <OFF>
			ChargeStatusForTimer = 0;
 80033a8:	2300      	movs	r3, #0
				ChargeStatusForTimer = 1;
 80033aa:	7023      	strb	r3, [r4, #0]
    OUTStateAfterPowerUpFunction();
 80033ac:	f7ff f9dc 	bl	8002768 <OUTStateAfterPowerUpFunction>
	if (key == KEY_NEXT)
 80033b0:	f1ba 0f02 	cmp.w	sl, #2
 80033b4:	4da4      	ldr	r5, [pc, #656]	; (8003648 <MenuChargeAdapt+0x318>)
 80033b6:	f040 8109 	bne.w	80035cc <MenuChargeAdapt+0x29c>
		if (On_off == 0)
 80033ba:	4ba4      	ldr	r3, [pc, #656]	; (800364c <MenuChargeAdapt+0x31c>)
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f040 8100 	bne.w	80035c4 <MenuChargeAdapt+0x294>
			charge();
 80033c4:	f7ff fc34 	bl	8002c30 <charge>
			ChargeStatusForTimer = 1;
 80033c8:	2301      	movs	r3, #1
			ChargeStatusForTimer = 0;
 80033ca:	7023      	strb	r3, [r4, #0]
	if(CountShow == 0)
 80033cc:	f995 1000 	ldrsb.w	r1, [r5]
 80033d0:	bba1      	cbnz	r1, 800343c <MenuChargeAdapt+0x10c>
		lcd_set_xy(0,0);
 80033d2:	4608      	mov	r0, r1
 80033d4:	f7fe fa60 	bl	8001898 <lcd_set_xy>
		if (On_off ==0)
 80033d8:	4b9c      	ldr	r3, [pc, #624]	; (800364c <MenuChargeAdapt+0x31c>)
 80033da:	f8df a2b0 	ldr.w	sl, [pc, #688]	; 800368c <MenuChargeAdapt+0x35c>
 80033de:	781a      	ldrb	r2, [r3, #0]
 80033e0:	469b      	mov	fp, r3
 80033e2:	2a00      	cmp	r2, #0
 80033e4:	f040 80fe 	bne.w	80035e4 <MenuChargeAdapt+0x2b4>
			PrintToLCD(itoa_koma(U_PS,2));
 80033e8:	4b91      	ldr	r3, [pc, #580]	; (8003630 <MenuChargeAdapt+0x300>)
 80033ea:	2102      	movs	r1, #2
 80033ec:	8818      	ldrh	r0, [r3, #0]
 80033ee:	f7fd ff65 	bl	80012bc <itoa_koma>
 80033f2:	f7fe fad1 	bl	8001998 <PrintToLCD>
			PrintToLCD("V ");
 80033f6:	4896      	ldr	r0, [pc, #600]	; (8003650 <MenuChargeAdapt+0x320>)
 80033f8:	f7fe face 	bl	8001998 <PrintToLCD>
			PrintToLCD(itoa_koma(U_OUT,2));
 80033fc:	2102      	movs	r1, #2
 80033fe:	f8ba 0000 	ldrh.w	r0, [sl]
 8003402:	f7fd ff5b 	bl	80012bc <itoa_koma>
 8003406:	f7fe fac7 	bl	8001998 <PrintToLCD>
			PrintToLCD("V   ");
 800340a:	4892      	ldr	r0, [pc, #584]	; (8003654 <MenuChargeAdapt+0x324>)
			PrintToLCD("mA      ");
 800340c:	f7fe fac4 	bl	8001998 <PrintToLCD>
		if (On_off ==0)
 8003410:	f89b 3000 	ldrb.w	r3, [fp]
 8003414:	f8df a284 	ldr.w	sl, [pc, #644]	; 800369c <MenuChargeAdapt+0x36c>
			lcd_set_xy(7,1);
 8003418:	2101      	movs	r1, #1
 800341a:	2007      	movs	r0, #7
		if (On_off ==0)
 800341c:	2b00      	cmp	r3, #0
 800341e:	f040 80f4 	bne.w	800360a <MenuChargeAdapt+0x2da>
			lcd_set_xy(7,1);
 8003422:	f7fe fa39 	bl	8001898 <lcd_set_xy>
			LcdOutbyNumber(0,1);
 8003426:	2101      	movs	r1, #1
 8003428:	2000      	movs	r0, #0
					LcdOutbyNumber(1,1);
 800342a:	f7fe fa5d 	bl	80018e8 <LcdOutbyNumber>
		if (Blink_message_counter>10)
 800342e:	f89a 3000 	ldrb.w	r3, [sl]
 8003432:	2b0a      	cmp	r3, #10
			Blink_message_counter = 0;
 8003434:	bf84      	itt	hi
 8003436:	2300      	movhi	r3, #0
 8003438:	f88a 3000 	strbhi.w	r3, [sl]
	if(CountShow == 1)
 800343c:	f995 a000 	ldrsb.w	sl, [r5]
 8003440:	f1ba 0f01 	cmp.w	sl, #1
 8003444:	d11e      	bne.n	8003484 <MenuChargeAdapt+0x154>
		lcd_set_xy(0,0);
 8003446:	2100      	movs	r1, #0
		PrintToLCD(itoa(SettingsData.ChargeTime));
 8003448:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 8003634 <MenuChargeAdapt+0x304>
		lcd_set_xy(0,0);
 800344c:	4608      	mov	r0, r1
 800344e:	f7fe fa23 	bl	8001898 <lcd_set_xy>
		PrintToLCD("T:");
 8003452:	4881      	ldr	r0, [pc, #516]	; (8003658 <MenuChargeAdapt+0x328>)
 8003454:	f7fe faa0 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa(SettingsData.ChargeTime));
 8003458:	f8db 0010 	ldr.w	r0, [fp, #16]
 800345c:	f7fd feba 	bl	80011d4 <itoa>
 8003460:	f7fe fa9a 	bl	8001998 <PrintToLCD>
		PrintToLCD("h MaxV:");
 8003464:	487d      	ldr	r0, [pc, #500]	; (800365c <MenuChargeAdapt+0x32c>)
 8003466:	f7fe fa97 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 800346a:	230a      	movs	r3, #10
 800346c:	f8db 0020 	ldr.w	r0, [fp, #32]
 8003470:	4651      	mov	r1, sl
 8003472:	fbb0 f0f3 	udiv	r0, r0, r3
 8003476:	f7fd ff21 	bl	80012bc <itoa_koma>
 800347a:	f7fe fa8d 	bl	8001998 <PrintToLCD>
		PrintToLCD("V   ");
 800347e:	4875      	ldr	r0, [pc, #468]	; (8003654 <MenuChargeAdapt+0x324>)
 8003480:	f7fe fa8a 	bl	8001998 <PrintToLCD>
	if(CountShow == 2)
 8003484:	f995 3000 	ldrsb.w	r3, [r5]
 8003488:	2b02      	cmp	r3, #2
 800348a:	d12f      	bne.n	80034ec <MenuChargeAdapt+0x1bc>
		lcd_set_xy(0,0);
 800348c:	2100      	movs	r1, #0
		PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 800348e:	f04f 0a0a 	mov.w	sl, #10
		PrintToLCD(itoa(SettingsData.ChargeAdapt));
 8003492:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 8003634 <MenuChargeAdapt+0x304>
		lcd_set_xy(0,0);
 8003496:	4608      	mov	r0, r1
 8003498:	f7fe f9fe 	bl	8001898 <lcd_set_xy>
		PrintToLCD(itoa(SettingsData.ChargeAdapt));
 800349c:	f8db 0038 	ldr.w	r0, [fp, #56]	; 0x38
 80034a0:	f7fd fe98 	bl	80011d4 <itoa>
 80034a4:	f7fe fa78 	bl	8001998 <PrintToLCD>
		PrintToLCD("% ");
 80034a8:	486d      	ldr	r0, [pc, #436]	; (8003660 <MenuChargeAdapt+0x330>)
 80034aa:	f7fe fa75 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 80034ae:	f8db 0020 	ldr.w	r0, [fp, #32]
 80034b2:	2101      	movs	r1, #1
 80034b4:	fbb0 f0fa 	udiv	r0, r0, sl
 80034b8:	f7fd ff00 	bl	80012bc <itoa_koma>
 80034bc:	f7fe fa6c 	bl	8001998 <PrintToLCD>
		PrintToLCD("V ");
 80034c0:	4863      	ldr	r0, [pc, #396]	; (8003650 <MenuChargeAdapt+0x320>)
 80034c2:	f7fe fa69 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa_koma((SettingsData.MaxVoltage-(SettingsData.MaxVoltage*SettingsData.ChargeAdapt/100))/10,1));
 80034c6:	2264      	movs	r2, #100	; 0x64
 80034c8:	f8db 3020 	ldr.w	r3, [fp, #32]
 80034cc:	f8db 0038 	ldr.w	r0, [fp, #56]	; 0x38
 80034d0:	2101      	movs	r1, #1
 80034d2:	4358      	muls	r0, r3
 80034d4:	fbb0 f0f2 	udiv	r0, r0, r2
 80034d8:	1a18      	subs	r0, r3, r0
 80034da:	fbb0 f0fa 	udiv	r0, r0, sl
 80034de:	f7fd feed 	bl	80012bc <itoa_koma>
 80034e2:	f7fe fa59 	bl	8001998 <PrintToLCD>
		PrintToLCD("V   ");
 80034e6:	485b      	ldr	r0, [pc, #364]	; (8003654 <MenuChargeAdapt+0x324>)
 80034e8:	f7fe fa56 	bl	8001998 <PrintToLCD>
	if(CountShow == 3)
 80034ec:	f995 5000 	ldrsb.w	r5, [r5]
 80034f0:	2d03      	cmp	r5, #3
 80034f2:	d11a      	bne.n	800352a <MenuChargeAdapt+0x1fa>
		lcd_set_xy(0,0);
 80034f4:	2100      	movs	r1, #0
 80034f6:	4608      	mov	r0, r1
 80034f8:	f7fe f9ce 	bl	8001898 <lcd_set_xy>
		PrintToLCD("C ");
 80034fc:	4859      	ldr	r0, [pc, #356]	; (8003664 <MenuChargeAdapt+0x334>)
 80034fe:	f7fe fa4b 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa(BatteryCapacityCharge/3600));
 8003502:	4b4f      	ldr	r3, [pc, #316]	; (8003640 <MenuChargeAdapt+0x310>)
 8003504:	6818      	ldr	r0, [r3, #0]
 8003506:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800350a:	fbb0 f0f3 	udiv	r0, r0, r3
 800350e:	f7fd fe61 	bl	80011d4 <itoa>
 8003512:	f7fe fa41 	bl	8001998 <PrintToLCD>
		PrintToLCD("mAH     ");
 8003516:	4854      	ldr	r0, [pc, #336]	; (8003668 <MenuChargeAdapt+0x338>)
 8003518:	f7fe fa3e 	bl	8001998 <PrintToLCD>
		lcd_set_xy(3,1);
 800351c:	4628      	mov	r0, r5
 800351e:	2101      	movs	r1, #1
 8003520:	f7fe f9ba 	bl	8001898 <lcd_set_xy>
		ClockOnLCD_noSec(ChargeTimeSec);
 8003524:	6838      	ldr	r0, [r7, #0]
 8003526:	f7ff f8bf 	bl	80026a8 <ClockOnLCD_noSec>
	delay_ms(MENUDELAY);
 800352a:	2064      	movs	r0, #100	; 0x64
 800352c:	f7fd fd36 	bl	8000f9c <delay_ms>
	logDebugD("Init status: ",InitiStatus,0);
 8003530:	484e      	ldr	r0, [pc, #312]	; (800366c <MenuChargeAdapt+0x33c>)
 8003532:	f001 fe0d 	bl	8005150 <printToBufferWithoutEndUART1>
 8003536:	7831      	ldrb	r1, [r6, #0]
 8003538:	2200      	movs	r2, #0
 800353a:	484d      	ldr	r0, [pc, #308]	; (8003670 <MenuChargeAdapt+0x340>)
 800353c:	f001 fe4c 	bl	80051d8 <printToBufferUART1D>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 8003540:	484a      	ldr	r0, [pc, #296]	; (800366c <MenuChargeAdapt+0x33c>)
 8003542:	f001 fe05 	bl	8005150 <printToBufferWithoutEndUART1>
 8003546:	f898 1000 	ldrb.w	r1, [r8]
 800354a:	2200      	movs	r2, #0
 800354c:	4849      	ldr	r0, [pc, #292]	; (8003674 <MenuChargeAdapt+0x344>)
 800354e:	f001 fe43 	bl	80051d8 <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 8003552:	4846      	ldr	r0, [pc, #280]	; (800366c <MenuChargeAdapt+0x33c>)
 8003554:	f001 fdfc 	bl	8005150 <printToBufferWithoutEndUART1>
 8003558:	7821      	ldrb	r1, [r4, #0]
 800355a:	2200      	movs	r2, #0
 800355c:	4846      	ldr	r0, [pc, #280]	; (8003678 <MenuChargeAdapt+0x348>)
 800355e:	f001 fe3b 	bl	80051d8 <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 8003562:	4842      	ldr	r0, [pc, #264]	; (800366c <MenuChargeAdapt+0x33c>)
 8003564:	f001 fdf4 	bl	8005150 <printToBufferWithoutEndUART1>
 8003568:	6839      	ldr	r1, [r7, #0]
 800356a:	2200      	movs	r2, #0
 800356c:	4843      	ldr	r0, [pc, #268]	; (800367c <MenuChargeAdapt+0x34c>)
 800356e:	f001 fe33 	bl	80051d8 <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 8003572:	483e      	ldr	r0, [pc, #248]	; (800366c <MenuChargeAdapt+0x33c>)
 8003574:	f001 fdec 	bl	8005150 <printToBufferWithoutEndUART1>
 8003578:	f899 1000 	ldrb.w	r1, [r9]
 800357c:	2200      	movs	r2, #0
 800357e:	4840      	ldr	r0, [pc, #256]	; (8003680 <MenuChargeAdapt+0x350>)
 8003580:	f001 fe2a 	bl	80051d8 <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 8003584:	4839      	ldr	r0, [pc, #228]	; (800366c <MenuChargeAdapt+0x33c>)
 8003586:	f001 fde3 	bl	8005150 <printToBufferWithoutEndUART1>
 800358a:	4b3e      	ldr	r3, [pc, #248]	; (8003684 <MenuChargeAdapt+0x354>)
 800358c:	2200      	movs	r2, #0
 800358e:	6819      	ldr	r1, [r3, #0]
 8003590:	483d      	ldr	r0, [pc, #244]	; (8003688 <MenuChargeAdapt+0x358>)
}
 8003592:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 8003596:	f001 be1f 	b.w	80051d8 <printToBufferUART1D>
		if (U_OUT> SettingsData.MaxVoltage)
 800359a:	493c      	ldr	r1, [pc, #240]	; (800368c <MenuChargeAdapt+0x35c>)
 800359c:	4a25      	ldr	r2, [pc, #148]	; (8003634 <MenuChargeAdapt+0x304>)
 800359e:	8808      	ldrh	r0, [r1, #0]
 80035a0:	6a13      	ldr	r3, [r2, #32]
 80035a2:	4283      	cmp	r3, r0
 80035a4:	f4ff aefe 	bcc.w	80033a4 <MenuChargeAdapt+0x74>
			if (U_OUT< (SettingsData.MaxVoltage-(SettingsData.MaxVoltage*SettingsData.ChargeAdapt/100))   )
 80035a8:	2064      	movs	r0, #100	; 0x64
 80035aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035ac:	8809      	ldrh	r1, [r1, #0]
 80035ae:	435a      	muls	r2, r3
 80035b0:	fbb2 f2f0 	udiv	r2, r2, r0
 80035b4:	1a9b      	subs	r3, r3, r2
 80035b6:	428b      	cmp	r3, r1
 80035b8:	f67f aef8 	bls.w	80033ac <MenuChargeAdapt+0x7c>
				charge();
 80035bc:	f7ff fb38 	bl	8002c30 <charge>
				ChargeStatusForTimer = 1;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e6f2      	b.n	80033aa <MenuChargeAdapt+0x7a>
			OFF();
 80035c4:	f7ff feac 	bl	8003320 <OFF>
			ChargeStatusForTimer = 0;
 80035c8:	2300      	movs	r3, #0
 80035ca:	e6fe      	b.n	80033ca <MenuChargeAdapt+0x9a>
	if (key == KEY_BACK)
 80035cc:	f1ba 0f01 	cmp.w	sl, #1
 80035d0:	f47f aefc 	bne.w	80033cc <MenuChargeAdapt+0x9c>
		CountShow--;
 80035d4:	782b      	ldrb	r3, [r5, #0]
 80035d6:	3b01      	subs	r3, #1
 80035d8:	b25b      	sxtb	r3, r3
		if (CountShow<0) CountShow=MAXITEM1-1;
 80035da:	2b00      	cmp	r3, #0
 80035dc:	bfb8      	it	lt
 80035de:	2303      	movlt	r3, #3
 80035e0:	702b      	strb	r3, [r5, #0]
 80035e2:	e6f3      	b.n	80033cc <MenuChargeAdapt+0x9c>
			PrintToLCD(itoa_koma(U_OUT,2));
 80035e4:	2102      	movs	r1, #2
 80035e6:	f8ba 0000 	ldrh.w	r0, [sl]
 80035ea:	f7fd fe67 	bl	80012bc <itoa_koma>
 80035ee:	f7fe f9d3 	bl	8001998 <PrintToLCD>
			PrintToLCD("V ");
 80035f2:	4817      	ldr	r0, [pc, #92]	; (8003650 <MenuChargeAdapt+0x320>)
 80035f4:	f7fe f9d0 	bl	8001998 <PrintToLCD>
			PrintToLCD(itoa(Current));
 80035f8:	4b25      	ldr	r3, [pc, #148]	; (8003690 <MenuChargeAdapt+0x360>)
 80035fa:	8818      	ldrh	r0, [r3, #0]
 80035fc:	b200      	sxth	r0, r0
 80035fe:	f7fd fde9 	bl	80011d4 <itoa>
 8003602:	f7fe f9c9 	bl	8001998 <PrintToLCD>
			PrintToLCD("mA      ");
 8003606:	4823      	ldr	r0, [pc, #140]	; (8003694 <MenuChargeAdapt+0x364>)
 8003608:	e700      	b.n	800340c <MenuChargeAdapt+0xdc>
			if (Blink_message_counter<=5)
 800360a:	f89a 3000 	ldrb.w	r3, [sl]
 800360e:	2b05      	cmp	r3, #5
 8003610:	f67f af07 	bls.w	8003422 <MenuChargeAdapt+0xf2>
					lcd_set_xy(7,1);
 8003614:	f7fe f940 	bl	8001898 <lcd_set_xy>
					LcdOutbyNumber(1,1);
 8003618:	2101      	movs	r1, #1
 800361a:	4608      	mov	r0, r1
 800361c:	e705      	b.n	800342a <MenuChargeAdapt+0xfa>
 800361e:	bf00      	nop
 8003620:	20000795 	.word	0x20000795
 8003624:	20000794 	.word	0x20000794
 8003628:	2000077f 	.word	0x2000077f
 800362c:	20000780 	.word	0x20000780
 8003630:	20000854 	.word	0x20000854
 8003634:	20000154 	.word	0x20000154
 8003638:	080061d9 	.word	0x080061d9
 800363c:	080061ea 	.word	0x080061ea
 8003640:	20000770 	.word	0x20000770
 8003644:	200009fc 	.word	0x200009fc
 8003648:	20000785 	.word	0x20000785
 800364c:	20000796 	.word	0x20000796
 8003650:	08006001 	.word	0x08006001
 8003654:	080060cd 	.word	0x080060cd
 8003658:	08005f71 	.word	0x08005f71
 800365c:	08005f74 	.word	0x08005f74
 8003660:	08006116 	.word	0x08006116
 8003664:	08005f7c 	.word	0x08005f7c
 8003668:	08006221 	.word	0x08006221
 800366c:	08005c50 	.word	0x08005c50
 8003670:	08005f7f 	.word	0x08005f7f
 8003674:	0800623b 	.word	0x0800623b
 8003678:	08006250 	.word	0x08006250
 800367c:	08006265 	.word	0x08006265
 8003680:	0800628d 	.word	0x0800628d
 8003684:	2000078c 	.word	0x2000078c
 8003688:	080062a5 	.word	0x080062a5
 800368c:	2000084e 	.word	0x2000084e
 8003690:	2000083e 	.word	0x2000083e
 8003694:	08005f68 	.word	0x08005f68
 8003698:	2000078a 	.word	0x2000078a
 800369c:	2000077d 	.word	0x2000077d

080036a0 <MenuDisCharge>:
	EnterInMenu_Status = 1;
 80036a0:	2101      	movs	r1, #1
{
 80036a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (InitiStatus==0)
 80036a6:	4d8a      	ldr	r5, [pc, #552]	; (80038d0 <MenuDisCharge+0x230>)
	EnterInMenu_Status = 1;
 80036a8:	4e8a      	ldr	r6, [pc, #552]	; (80038d4 <MenuDisCharge+0x234>)
	if (InitiStatus==0)
 80036aa:	782b      	ldrb	r3, [r5, #0]
	EnterInMenu_Status = 1;
 80036ac:	7031      	strb	r1, [r6, #0]
 80036ae:	4a8a      	ldr	r2, [pc, #552]	; (80038d8 <MenuDisCharge+0x238>)
	if (InitiStatus==0)
 80036b0:	b94b      	cbnz	r3, 80036c6 <MenuDisCharge+0x26>
		InitiStatus = 1;
 80036b2:	7029      	strb	r1, [r5, #0]
		ChargeStatusForTimer = 0;
 80036b4:	4989      	ldr	r1, [pc, #548]	; (80038dc <MenuDisCharge+0x23c>)
		BatteryLow=0;
 80036b6:	7013      	strb	r3, [r2, #0]
		ChargeStatusForTimer = 0;
 80036b8:	700b      	strb	r3, [r1, #0]
		DisChargeStatusForTimer = 0;
 80036ba:	4989      	ldr	r1, [pc, #548]	; (80038e0 <MenuDisCharge+0x240>)
 80036bc:	700b      	strb	r3, [r1, #0]
		BatteryCapacityDischargeCurrent = 0;
 80036be:	4989      	ldr	r1, [pc, #548]	; (80038e4 <MenuDisCharge+0x244>)
 80036c0:	600b      	str	r3, [r1, #0]
		DischargeTimeSec = 0;
 80036c2:	4989      	ldr	r1, [pc, #548]	; (80038e8 <MenuDisCharge+0x248>)
 80036c4:	600b      	str	r3, [r1, #0]
	U_BatteryTmp = U_OUT;
 80036c6:	4f89      	ldr	r7, [pc, #548]	; (80038ec <MenuDisCharge+0x24c>)
 80036c8:	4989      	ldr	r1, [pc, #548]	; (80038f0 <MenuDisCharge+0x250>)
 80036ca:	883b      	ldrh	r3, [r7, #0]
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	800b      	strh	r3, [r1, #0]
	if (U_BatteryTmp >=SettingsData.LowVoltage) BatteryLow=0;
 80036d0:	4988      	ldr	r1, [pc, #544]	; (80038f4 <MenuDisCharge+0x254>)
 80036d2:	698c      	ldr	r4, [r1, #24]
 80036d4:	4688      	mov	r8, r1
 80036d6:	42a3      	cmp	r3, r4
 80036d8:	f0c0 80f1 	bcc.w	80038be <MenuDisCharge+0x21e>
 80036dc:	2300      	movs	r3, #0
		BatteryLow = 1;
 80036de:	7013      	strb	r3, [r2, #0]
	if ((time_sec - U_Battery_Timer)>3 && BatteryLow !=0)//was 10
 80036e0:	4985      	ldr	r1, [pc, #532]	; (80038f8 <MenuDisCharge+0x258>)
 80036e2:	4b86      	ldr	r3, [pc, #536]	; (80038fc <MenuDisCharge+0x25c>)
 80036e4:	6809      	ldr	r1, [r1, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 80038e0 <MenuDisCharge+0x240>
 80036ec:	1a5b      	subs	r3, r3, r1
 80036ee:	2b03      	cmp	r3, #3
 80036f0:	d906      	bls.n	8003700 <MenuDisCharge+0x60>
 80036f2:	7813      	ldrb	r3, [r2, #0]
 80036f4:	b123      	cbz	r3, 8003700 <MenuDisCharge+0x60>
		OFF();
 80036f6:	f7ff fe13 	bl	8003320 <OFF>
		DisChargeStatusForTimer = 0;
 80036fa:	2300      	movs	r3, #0
 80036fc:	f889 3000 	strb.w	r3, [r9]
	if (key == KEY_NEXT)
 8003700:	2802      	cmp	r0, #2
 8003702:	4c7f      	ldr	r4, [pc, #508]	; (8003900 <MenuDisCharge+0x260>)
 8003704:	f040 80c7 	bne.w	8003896 <MenuDisCharge+0x1f6>
    	if (On_off == 0)
 8003708:	4b7e      	ldr	r3, [pc, #504]	; (8003904 <MenuDisCharge+0x264>)
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	f040 80be 	bne.w	800388e <MenuDisCharge+0x1ee>
    		discharge();
 8003712:	f7ff f99d 	bl	8002a50 <discharge>
    		DisChargeStatusForTimer = 1;
 8003716:	2301      	movs	r3, #1
    		DisChargeStatusForTimer = 0;
 8003718:	f889 3000 	strb.w	r3, [r9]
	if(CountShow == 0)
 800371c:	f994 1000 	ldrsb.w	r1, [r4]
 8003720:	bb41      	cbnz	r1, 8003774 <MenuDisCharge+0xd4>
		lcd_set_xy(0,0);
 8003722:	4608      	mov	r0, r1
 8003724:	f7fe f8b8 	bl	8001898 <lcd_set_xy>
		PrintToLCD(itoa_koma(U_OUT ,2));
 8003728:	2102      	movs	r1, #2
 800372a:	8838      	ldrh	r0, [r7, #0]
 800372c:	f7fd fdc6 	bl	80012bc <itoa_koma>
 8003730:	f7fe f932 	bl	8001998 <PrintToLCD>
		PrintToLCD("V ");
 8003734:	4874      	ldr	r0, [pc, #464]	; (8003908 <MenuDisCharge+0x268>)
 8003736:	f7fe f92f 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa(Current ));
 800373a:	4b74      	ldr	r3, [pc, #464]	; (800390c <MenuDisCharge+0x26c>)
 800373c:	4f74      	ldr	r7, [pc, #464]	; (8003910 <MenuDisCharge+0x270>)
 800373e:	8818      	ldrh	r0, [r3, #0]
 8003740:	b200      	sxth	r0, r0
 8003742:	f7fd fd47 	bl	80011d4 <itoa>
 8003746:	f7fe f927 	bl	8001998 <PrintToLCD>
		PrintToLCD("mA      ");
 800374a:	4872      	ldr	r0, [pc, #456]	; (8003914 <MenuDisCharge+0x274>)
 800374c:	f7fe f924 	bl	8001998 <PrintToLCD>
		if (On_off ==0)
 8003750:	4b6c      	ldr	r3, [pc, #432]	; (8003904 <MenuDisCharge+0x264>)
				lcd_set_xy(7,1);
 8003752:	2101      	movs	r1, #1
		if (On_off ==0)
 8003754:	781b      	ldrb	r3, [r3, #0]
				lcd_set_xy(7,1);
 8003756:	2007      	movs	r0, #7
		if (On_off ==0)
 8003758:	2b00      	cmp	r3, #0
 800375a:	f040 80a7 	bne.w	80038ac <MenuDisCharge+0x20c>
				lcd_set_xy(7,1);
 800375e:	f7fe f89b 	bl	8001898 <lcd_set_xy>
				LcdOutbyNumber(2,1);
 8003762:	2101      	movs	r1, #1
 8003764:	2002      	movs	r0, #2
						LcdOutbyNumber(3,1);
 8003766:	f7fe f8bf 	bl	80018e8 <LcdOutbyNumber>
			if (Blink_message_counter>10)
 800376a:	783b      	ldrb	r3, [r7, #0]
 800376c:	2b0a      	cmp	r3, #10
				Blink_message_counter = 0;
 800376e:	bf84      	itt	hi
 8003770:	2300      	movhi	r3, #0
 8003772:	703b      	strbhi	r3, [r7, #0]
	if(CountShow == 1)
 8003774:	f994 7000 	ldrsb.w	r7, [r4]
 8003778:	2f01      	cmp	r7, #1
 800377a:	d113      	bne.n	80037a4 <MenuDisCharge+0x104>
		lcd_set_xy(0,0);
 800377c:	2100      	movs	r1, #0
 800377e:	4608      	mov	r0, r1
 8003780:	f7fe f88a 	bl	8001898 <lcd_set_xy>
		PrintToLCD("OffWhen Vb<");
 8003784:	4864      	ldr	r0, [pc, #400]	; (8003918 <MenuDisCharge+0x278>)
 8003786:	f7fe f907 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa_koma(SettingsData.LowVoltage/10 ,1));
 800378a:	230a      	movs	r3, #10
 800378c:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8003790:	4639      	mov	r1, r7
 8003792:	fbb0 f0f3 	udiv	r0, r0, r3
 8003796:	f7fd fd91 	bl	80012bc <itoa_koma>
 800379a:	f7fe f8fd 	bl	8001998 <PrintToLCD>
		PrintToLCD("V   ");
 800379e:	485f      	ldr	r0, [pc, #380]	; (800391c <MenuDisCharge+0x27c>)
 80037a0:	f7fe f8fa 	bl	8001998 <PrintToLCD>
	if(CountShow == 2)
 80037a4:	f994 3000 	ldrsb.w	r3, [r4]
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d11b      	bne.n	80037e4 <MenuDisCharge+0x144>
		lcd_set_xy(0,0);
 80037ac:	2100      	movs	r1, #0
 80037ae:	4608      	mov	r0, r1
 80037b0:	f7fe f872 	bl	8001898 <lcd_set_xy>
		PrintToLCD("P ");
 80037b4:	485a      	ldr	r0, [pc, #360]	; (8003920 <MenuDisCharge+0x280>)
 80037b6:	f7fe f8ef 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa(SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue/3600 ));
 80037ba:	4b5a      	ldr	r3, [pc, #360]	; (8003924 <MenuDisCharge+0x284>)
 80037bc:	6898      	ldr	r0, [r3, #8]
 80037be:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80037c2:	fbb0 f0f3 	udiv	r0, r0, r3
 80037c6:	f7fd fd05 	bl	80011d4 <itoa>
 80037ca:	f7fe f8e5 	bl	8001998 <PrintToLCD>
		PrintToLCD("mAh     ");
 80037ce:	4856      	ldr	r0, [pc, #344]	; (8003928 <MenuDisCharge+0x288>)
 80037d0:	f7fe f8e2 	bl	8001998 <PrintToLCD>
		lcd_set_xy(3,1);
 80037d4:	2003      	movs	r0, #3
 80037d6:	2101      	movs	r1, #1
 80037d8:	f7fe f85e 	bl	8001898 <lcd_set_xy>
		ClockOnLCD_noSec(DischargeTimeSec_Previous);
 80037dc:	4b53      	ldr	r3, [pc, #332]	; (800392c <MenuDisCharge+0x28c>)
 80037de:	6818      	ldr	r0, [r3, #0]
 80037e0:	f7fe ff62 	bl	80026a8 <ClockOnLCD_noSec>
	if(CountShow == 3)
 80037e4:	f994 7000 	ldrsb.w	r7, [r4]
 80037e8:	4c3f      	ldr	r4, [pc, #252]	; (80038e8 <MenuDisCharge+0x248>)
 80037ea:	2f03      	cmp	r7, #3
 80037ec:	d11a      	bne.n	8003824 <MenuDisCharge+0x184>
		lcd_set_xy(0,0);
 80037ee:	2100      	movs	r1, #0
 80037f0:	4608      	mov	r0, r1
 80037f2:	f7fe f851 	bl	8001898 <lcd_set_xy>
		PrintToLCD("N ");
 80037f6:	484e      	ldr	r0, [pc, #312]	; (8003930 <MenuDisCharge+0x290>)
 80037f8:	f7fe f8ce 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa(BatteryCapacityDischargeCurrent/3600 ));
 80037fc:	4b39      	ldr	r3, [pc, #228]	; (80038e4 <MenuDisCharge+0x244>)
 80037fe:	6818      	ldr	r0, [r3, #0]
 8003800:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003804:	fbb0 f0f3 	udiv	r0, r0, r3
 8003808:	f7fd fce4 	bl	80011d4 <itoa>
 800380c:	f7fe f8c4 	bl	8001998 <PrintToLCD>
		PrintToLCD("mAH     ");
 8003810:	4848      	ldr	r0, [pc, #288]	; (8003934 <MenuDisCharge+0x294>)
 8003812:	f7fe f8c1 	bl	8001998 <PrintToLCD>
		lcd_set_xy(3,1);
 8003816:	4638      	mov	r0, r7
 8003818:	2101      	movs	r1, #1
 800381a:	f7fe f83d 	bl	8001898 <lcd_set_xy>
		ClockOnLCD_noSec(DischargeTimeSec);
 800381e:	6820      	ldr	r0, [r4, #0]
 8003820:	f7fe ff42 	bl	80026a8 <ClockOnLCD_noSec>
	logDebugD("Init status: ",InitiStatus,0);
 8003824:	4844      	ldr	r0, [pc, #272]	; (8003938 <MenuDisCharge+0x298>)
 8003826:	f001 fc93 	bl	8005150 <printToBufferWithoutEndUART1>
 800382a:	7829      	ldrb	r1, [r5, #0]
 800382c:	2200      	movs	r2, #0
 800382e:	4843      	ldr	r0, [pc, #268]	; (800393c <MenuDisCharge+0x29c>)
 8003830:	f001 fcd2 	bl	80051d8 <printToBufferUART1D>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 8003834:	4840      	ldr	r0, [pc, #256]	; (8003938 <MenuDisCharge+0x298>)
 8003836:	f001 fc8b 	bl	8005150 <printToBufferWithoutEndUART1>
 800383a:	7831      	ldrb	r1, [r6, #0]
 800383c:	2200      	movs	r2, #0
 800383e:	4840      	ldr	r0, [pc, #256]	; (8003940 <MenuDisCharge+0x2a0>)
 8003840:	f001 fcca 	bl	80051d8 <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 8003844:	483c      	ldr	r0, [pc, #240]	; (8003938 <MenuDisCharge+0x298>)
 8003846:	f001 fc83 	bl	8005150 <printToBufferWithoutEndUART1>
 800384a:	4b24      	ldr	r3, [pc, #144]	; (80038dc <MenuDisCharge+0x23c>)
 800384c:	2200      	movs	r2, #0
 800384e:	7819      	ldrb	r1, [r3, #0]
 8003850:	483c      	ldr	r0, [pc, #240]	; (8003944 <MenuDisCharge+0x2a4>)
 8003852:	f001 fcc1 	bl	80051d8 <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 8003856:	4838      	ldr	r0, [pc, #224]	; (8003938 <MenuDisCharge+0x298>)
 8003858:	f001 fc7a 	bl	8005150 <printToBufferWithoutEndUART1>
 800385c:	4b3a      	ldr	r3, [pc, #232]	; (8003948 <MenuDisCharge+0x2a8>)
 800385e:	2200      	movs	r2, #0
 8003860:	6819      	ldr	r1, [r3, #0]
 8003862:	483a      	ldr	r0, [pc, #232]	; (800394c <MenuDisCharge+0x2ac>)
 8003864:	f001 fcb8 	bl	80051d8 <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 8003868:	4833      	ldr	r0, [pc, #204]	; (8003938 <MenuDisCharge+0x298>)
 800386a:	f001 fc71 	bl	8005150 <printToBufferWithoutEndUART1>
 800386e:	f899 1000 	ldrb.w	r1, [r9]
 8003872:	2200      	movs	r2, #0
 8003874:	4836      	ldr	r0, [pc, #216]	; (8003950 <MenuDisCharge+0x2b0>)
 8003876:	f001 fcaf 	bl	80051d8 <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 800387a:	482f      	ldr	r0, [pc, #188]	; (8003938 <MenuDisCharge+0x298>)
 800387c:	f001 fc68 	bl	8005150 <printToBufferWithoutEndUART1>
 8003880:	6821      	ldr	r1, [r4, #0]
 8003882:	2200      	movs	r2, #0
}
 8003884:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 8003888:	4832      	ldr	r0, [pc, #200]	; (8003954 <MenuDisCharge+0x2b4>)
 800388a:	f001 bca5 	b.w	80051d8 <printToBufferUART1D>
    		OFF();
 800388e:	f7ff fd47 	bl	8003320 <OFF>
    		DisChargeStatusForTimer = 0;
 8003892:	2300      	movs	r3, #0
 8003894:	e740      	b.n	8003718 <MenuDisCharge+0x78>
	if (key == KEY_BACK)
 8003896:	2801      	cmp	r0, #1
 8003898:	f47f af40 	bne.w	800371c <MenuDisCharge+0x7c>
		CountShow--;
 800389c:	7823      	ldrb	r3, [r4, #0]
 800389e:	3b01      	subs	r3, #1
 80038a0:	b25b      	sxtb	r3, r3
		if (CountShow<0) CountShow=MAXITEM2-1;
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	bfb8      	it	lt
 80038a6:	2303      	movlt	r3, #3
 80038a8:	7023      	strb	r3, [r4, #0]
 80038aa:	e737      	b.n	800371c <MenuDisCharge+0x7c>
				if (Blink_message_counter<=5)
 80038ac:	783b      	ldrb	r3, [r7, #0]
 80038ae:	2b05      	cmp	r3, #5
 80038b0:	f67f af55 	bls.w	800375e <MenuDisCharge+0xbe>
						lcd_set_xy(7,1);
 80038b4:	f7fd fff0 	bl	8001898 <lcd_set_xy>
						LcdOutbyNumber(3,1);
 80038b8:	2101      	movs	r1, #1
 80038ba:	2003      	movs	r0, #3
 80038bc:	e753      	b.n	8003766 <MenuDisCharge+0xc6>
		if (BatteryLow == 0) U_Battery_Timer = time_sec;
 80038be:	7813      	ldrb	r3, [r2, #0]
 80038c0:	b91b      	cbnz	r3, 80038ca <MenuDisCharge+0x22a>
 80038c2:	4b0e      	ldr	r3, [pc, #56]	; (80038fc <MenuDisCharge+0x25c>)
 80038c4:	6819      	ldr	r1, [r3, #0]
 80038c6:	4b0c      	ldr	r3, [pc, #48]	; (80038f8 <MenuDisCharge+0x258>)
 80038c8:	6019      	str	r1, [r3, #0]
		BatteryLow = 1;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e707      	b.n	80036de <MenuDisCharge+0x3e>
 80038ce:	bf00      	nop
 80038d0:	20000795 	.word	0x20000795
 80038d4:	20000794 	.word	0x20000794
 80038d8:	2000077c 	.word	0x2000077c
 80038dc:	2000077f 	.word	0x2000077f
 80038e0:	2000078a 	.word	0x2000078a
 80038e4:	20000774 	.word	0x20000774
 80038e8:	2000078c 	.word	0x2000078c
 80038ec:	2000084e 	.word	0x2000084e
 80038f0:	200007bc 	.word	0x200007bc
 80038f4:	20000154 	.word	0x20000154
 80038f8:	200007c0 	.word	0x200007c0
 80038fc:	200007cc 	.word	0x200007cc
 8003900:	20000785 	.word	0x20000785
 8003904:	20000796 	.word	0x20000796
 8003908:	08006001 	.word	0x08006001
 800390c:	2000083e 	.word	0x2000083e
 8003910:	2000077d 	.word	0x2000077d
 8003914:	08005f68 	.word	0x08005f68
 8003918:	08005fe8 	.word	0x08005fe8
 800391c:	080060cd 	.word	0x080060cd
 8003920:	0800621e 	.word	0x0800621e
 8003924:	200000f4 	.word	0x200000f4
 8003928:	08005ff4 	.word	0x08005ff4
 800392c:	20000790 	.word	0x20000790
 8003930:	08005ee7 	.word	0x08005ee7
 8003934:	08006221 	.word	0x08006221
 8003938:	08005c50 	.word	0x08005c50
 800393c:	08005f7f 	.word	0x08005f7f
 8003940:	0800623b 	.word	0x0800623b
 8003944:	08006250 	.word	0x08006250
 8003948:	20000780 	.word	0x20000780
 800394c:	08006265 	.word	0x08006265
 8003950:	0800628d 	.word	0x0800628d
 8003954:	080062a5 	.word	0x080062a5

08003958 <MenuCheckingCapacity>:
{
 8003958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (EnterInMenu_Status == 0)
 800395c:	4a86      	ldr	r2, [pc, #536]	; (8003b78 <MenuCheckingCapacity+0x220>)
{
 800395e:	b085      	sub	sp, #20
	if (EnterInMenu_Status == 0)
 8003960:	7813      	ldrb	r3, [r2, #0]
{
 8003962:	4683      	mov	fp, r0
	if (EnterInMenu_Status == 0)
 8003964:	f003 08ff 	and.w	r8, r3, #255	; 0xff
 8003968:	9200      	str	r2, [sp, #0]
 800396a:	f8df a258 	ldr.w	sl, [pc, #600]	; 8003bc4 <MenuCheckingCapacity+0x26c>
 800396e:	4e83      	ldr	r6, [pc, #524]	; (8003b7c <MenuCheckingCapacity+0x224>)
 8003970:	f8df 9254 	ldr.w	r9, [pc, #596]	; 8003bc8 <MenuCheckingCapacity+0x270>
 8003974:	4d82      	ldr	r5, [pc, #520]	; (8003b80 <MenuCheckingCapacity+0x228>)
 8003976:	4f83      	ldr	r7, [pc, #524]	; (8003b84 <MenuCheckingCapacity+0x22c>)
 8003978:	4c83      	ldr	r4, [pc, #524]	; (8003b88 <MenuCheckingCapacity+0x230>)
 800397a:	2b00      	cmp	r3, #0
 800397c:	d146      	bne.n	8003a0c <MenuCheckingCapacity+0xb4>
		if (U_PS < (SettingsData.MaxVoltage+DELTA_UPS_BAT_MAX))
 800397e:	4b83      	ldr	r3, [pc, #524]	; (8003b8c <MenuCheckingCapacity+0x234>)
 8003980:	881a      	ldrh	r2, [r3, #0]
 8003982:	4b83      	ldr	r3, [pc, #524]	; (8003b90 <MenuCheckingCapacity+0x238>)
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	3305      	adds	r3, #5
 8003988:	4293      	cmp	r3, r2
 800398a:	d915      	bls.n	80039b8 <MenuCheckingCapacity+0x60>
			lcd_set_xy(0,0);
 800398c:	4641      	mov	r1, r8
 800398e:	4640      	mov	r0, r8
 8003990:	f7fd ff82 	bl	8001898 <lcd_set_xy>
			PrintToLCD("U(ps)<U(bat.max)");
 8003994:	487f      	ldr	r0, [pc, #508]	; (8003b94 <MenuCheckingCapacity+0x23c>)
 8003996:	f7fd ffff 	bl	8001998 <PrintToLCD>
			delay_ms(2000);
 800399a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800399e:	f7fd fafd 	bl	8000f9c <delay_ms>
			lcd_set_xy(0,0);
 80039a2:	4641      	mov	r1, r8
 80039a4:	4640      	mov	r0, r8
 80039a6:	f7fd ff77 	bl	8001898 <lcd_set_xy>
			PrintToLCD("UP U(ps)        ");
 80039aa:	487b      	ldr	r0, [pc, #492]	; (8003b98 <MenuCheckingCapacity+0x240>)
 80039ac:	f7fd fff4 	bl	8001998 <PrintToLCD>
			delay_ms(3000);
 80039b0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80039b4:	f7fd faf2 	bl	8000f9c <delay_ms>
		EnterInMenu_Status = 1;
 80039b8:	2301      	movs	r3, #1
		ChargeStatusForTimer = 0;
 80039ba:	f04f 0800 	mov.w	r8, #0
		EnterInMenu_Status = 1;
 80039be:	9a00      	ldr	r2, [sp, #0]
		ChargeStatusForTimer = 1;
 80039c0:	9301      	str	r3, [sp, #4]
		EnterInMenu_Status = 1;
 80039c2:	7013      	strb	r3, [r2, #0]
		DisChargeStatusForTimer = 0;
 80039c4:	4a75      	ldr	r2, [pc, #468]	; (8003b9c <MenuCheckingCapacity+0x244>)
		ChargeStatusForTimer = 0;
 80039c6:	f88a 8000 	strb.w	r8, [sl]
		DisChargeStatusForTimer = 0;
 80039ca:	f882 8000 	strb.w	r8, [r2]
		DischargeTimeSec_Previous = 0;
 80039ce:	4a74      	ldr	r2, [pc, #464]	; (8003ba0 <MenuCheckingCapacity+0x248>)
		ChargeTimeSec = 0;
 80039d0:	f8c6 8000 	str.w	r8, [r6]
		DischargeTimeSec = 0;
 80039d4:	f8c9 8000 	str.w	r8, [r9]
		DischargeTimeSec_Previous = 0;
 80039d8:	f8c2 8000 	str.w	r8, [r2]
		BatteryCapacityCharge = 0;
 80039dc:	f8c5 8000 	str.w	r8, [r5]
		BatteryCapacityDischargeCurrent = 0;
 80039e0:	f8c7 8000 	str.w	r8, [r7]
		ChargeStatusForTimer = 1;
 80039e4:	f88a 3000 	strb.w	r3, [sl]
		charge1();
 80039e8:	f7ff f92c 	bl	8002c44 <charge1>
		ChargeDischargeStatus = CHARGEs;
 80039ec:	9b01      	ldr	r3, [sp, #4]
 80039ee:	4a6d      	ldr	r2, [pc, #436]	; (8003ba4 <MenuCheckingCapacity+0x24c>)
		lcd_set_xy(0,0);
 80039f0:	4641      	mov	r1, r8
 80039f2:	4640      	mov	r0, r8
		ChargeDischargeStatus = CHARGEs;
 80039f4:	7013      	strb	r3, [r2, #0]
		lcd_set_xy(0,0);
 80039f6:	f7fd ff4f 	bl	8001898 <lcd_set_xy>
		PrintToLCD("Testing Battery.");
 80039fa:	486b      	ldr	r0, [pc, #428]	; (8003ba8 <MenuCheckingCapacity+0x250>)
 80039fc:	f7fd ffcc 	bl	8001998 <PrintToLCD>
		delay_ms(1000);
 8003a00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a04:	f7fd faca 	bl	8000f9c <delay_ms>
		CheckingCapacityCounter = 1;
 8003a08:	9b01      	ldr	r3, [sp, #4]
 8003a0a:	7023      	strb	r3, [r4, #0]
	if (CheckingCapacityCounter<=3)
 8003a0c:	f994 3000 	ldrsb.w	r3, [r4]
 8003a10:	2b03      	cmp	r3, #3
 8003a12:	f300 81f9 	bgt.w	8003e08 <MenuCheckingCapacity+0x4b0>
		if (Module16(Current)>5)
 8003a16:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8003bcc <MenuCheckingCapacity+0x274>
 8003a1a:	f8b8 0000 	ldrh.w	r0, [r8]
 8003a1e:	b200      	sxth	r0, r0
 8003a20:	f7fd fcb4 	bl	800138c <Module16>
 8003a24:	2805      	cmp	r0, #5
 8003a26:	f8cd 8004 	str.w	r8, [sp, #4]
 8003a2a:	f340 81a2 	ble.w	8003d72 <MenuCheckingCapacity+0x41a>
			if (U_OUT < SettingsData.LowVoltage && ChargeDischargeStatus == DISCHARGEs  && TimerForReadyMeasurement_ms>1000)
 8003a2e:	4b5f      	ldr	r3, [pc, #380]	; (8003bac <MenuCheckingCapacity+0x254>)
 8003a30:	4a57      	ldr	r2, [pc, #348]	; (8003b90 <MenuCheckingCapacity+0x238>)
 8003a32:	8819      	ldrh	r1, [r3, #0]
 8003a34:	6990      	ldr	r0, [r2, #24]
 8003a36:	4690      	mov	r8, r2
 8003a38:	4288      	cmp	r0, r1
 8003a3a:	9302      	str	r3, [sp, #8]
 8003a3c:	d92a      	bls.n	8003a94 <MenuCheckingCapacity+0x13c>
 8003a3e:	4b59      	ldr	r3, [pc, #356]	; (8003ba4 <MenuCheckingCapacity+0x24c>)
 8003a40:	781a      	ldrb	r2, [r3, #0]
 8003a42:	2a02      	cmp	r2, #2
 8003a44:	d126      	bne.n	8003a94 <MenuCheckingCapacity+0x13c>
 8003a46:	4b5a      	ldr	r3, [pc, #360]	; (8003bb0 <MenuCheckingCapacity+0x258>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a4e:	d921      	bls.n	8003a94 <MenuCheckingCapacity+0x13c>
				DisChargeStatusForTimer = 0;
 8003a50:	2300      	movs	r3, #0
 8003a52:	4952      	ldr	r1, [pc, #328]	; (8003b9c <MenuCheckingCapacity+0x244>)
 8003a54:	700b      	strb	r3, [r1, #0]
				if (BatteryCapacityDischargeCurrent/3600 > 100)
 8003a56:	6839      	ldr	r1, [r7, #0]
 8003a58:	4b56      	ldr	r3, [pc, #344]	; (8003bb4 <MenuCheckingCapacity+0x25c>)
 8003a5a:	4299      	cmp	r1, r3
 8003a5c:	d904      	bls.n	8003a68 <MenuCheckingCapacity+0x110>
					MenuTraining_WriteInLOG(BatteryCapacityDischargeCurrent,DischargeTimeSec,DISCHARGE_l);
 8003a5e:	6838      	ldr	r0, [r7, #0]
 8003a60:	f8d9 1000 	ldr.w	r1, [r9]
 8003a64:	f7fe fab6 	bl	8001fd4 <MenuTraining_WriteInLOG>
				DischargeTimeSec_Previous = DischargeTimeSec;
 8003a68:	f8d9 2000 	ldr.w	r2, [r9]
 8003a6c:	4b4c      	ldr	r3, [pc, #304]	; (8003ba0 <MenuCheckingCapacity+0x248>)
 8003a6e:	601a      	str	r2, [r3, #0]
				SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue = BatteryCapacityDischargeCurrent;
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	4b51      	ldr	r3, [pc, #324]	; (8003bb8 <MenuCheckingCapacity+0x260>)
 8003a74:	609a      	str	r2, [r3, #8]
				ChargeStatusForTimer = 1;
 8003a76:	2201      	movs	r2, #1
				BatteryCapacityCharge = 0;
 8003a78:	2300      	movs	r3, #0
				ChargeStatusForTimer = 1;
 8003a7a:	f88a 2000 	strb.w	r2, [sl]
 8003a7e:	9203      	str	r2, [sp, #12]
				BatteryCapacityCharge = 0;
 8003a80:	602b      	str	r3, [r5, #0]
				ChargeTimeSec = 0;
 8003a82:	6033      	str	r3, [r6, #0]
				charge1();
 8003a84:	f7ff f8de 	bl	8002c44 <charge1>
				CheckingCapacityCounter ++;
 8003a88:	7823      	ldrb	r3, [r4, #0]
				ChargeDischargeStatus = CHARGEs;
 8003a8a:	9a03      	ldr	r2, [sp, #12]
				CheckingCapacityCounter ++;
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	7023      	strb	r3, [r4, #0]
				ChargeDischargeStatus = CHARGEs;
 8003a90:	4b44      	ldr	r3, [pc, #272]	; (8003ba4 <MenuCheckingCapacity+0x24c>)
 8003a92:	701a      	strb	r2, [r3, #0]
			if (((U_OUT > SettingsData.MaxVoltage && ChargeDischargeStatus == CHARGEs  && TimerForReadyMeasurement_ms>1000) || (ChargeTimeSec > ChargeDurationSec && ChargeDischargeStatus == CHARGEs))&&CheckingCapacityCounter<3)
 8003a94:	4b45      	ldr	r3, [pc, #276]	; (8003bac <MenuCheckingCapacity+0x254>)
 8003a96:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8003a9a:	881b      	ldrh	r3, [r3, #0]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d208      	bcs.n	8003ab2 <MenuCheckingCapacity+0x15a>
 8003aa0:	4b40      	ldr	r3, [pc, #256]	; (8003ba4 <MenuCheckingCapacity+0x24c>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d104      	bne.n	8003ab2 <MenuCheckingCapacity+0x15a>
 8003aa8:	4b41      	ldr	r3, [pc, #260]	; (8003bb0 <MenuCheckingCapacity+0x258>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ab0:	d808      	bhi.n	8003ac4 <MenuCheckingCapacity+0x16c>
 8003ab2:	4b42      	ldr	r3, [pc, #264]	; (8003bbc <MenuCheckingCapacity+0x264>)
 8003ab4:	6832      	ldr	r2, [r6, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d922      	bls.n	8003b02 <MenuCheckingCapacity+0x1aa>
 8003abc:	4b39      	ldr	r3, [pc, #228]	; (8003ba4 <MenuCheckingCapacity+0x24c>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d11e      	bne.n	8003b02 <MenuCheckingCapacity+0x1aa>
 8003ac4:	f994 3000 	ldrsb.w	r3, [r4]
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	dc1a      	bgt.n	8003b02 <MenuCheckingCapacity+0x1aa>
				ChargeStatusForTimer = 0;
 8003acc:	2300      	movs	r3, #0
 8003ace:	f88a 3000 	strb.w	r3, [sl]
				if (BatteryCapacityCharge/3600 > 100)
 8003ad2:	682a      	ldr	r2, [r5, #0]
 8003ad4:	4b37      	ldr	r3, [pc, #220]	; (8003bb4 <MenuCheckingCapacity+0x25c>)
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d904      	bls.n	8003ae4 <MenuCheckingCapacity+0x18c>
					MenuTraining_WriteInLOG(BatteryCapacityCharge,ChargeTimeSec,CHARGE_H);
 8003ada:	6828      	ldr	r0, [r5, #0]
 8003adc:	2201      	movs	r2, #1
 8003ade:	6831      	ldr	r1, [r6, #0]
 8003ae0:	f7fe fa78 	bl	8001fd4 <MenuTraining_WriteInLOG>
				DisChargeStatusForTimer = 1;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	4a2d      	ldr	r2, [pc, #180]	; (8003b9c <MenuCheckingCapacity+0x244>)
 8003ae8:	7013      	strb	r3, [r2, #0]
				BatteryCapacityDischargeCurrent = 0;
 8003aea:	2300      	movs	r3, #0
 8003aec:	603b      	str	r3, [r7, #0]
				DischargeTimeSec = 0;
 8003aee:	f8c9 3000 	str.w	r3, [r9]
				discharge1();
 8003af2:	f7fe ffef 	bl	8002ad4 <discharge1>
				ChargeDischargeStatus = DISCHARGEs;
 8003af6:	2202      	movs	r2, #2
				CheckingCapacityCounter ++;
 8003af8:	7823      	ldrb	r3, [r4, #0]
 8003afa:	3301      	adds	r3, #1
 8003afc:	7023      	strb	r3, [r4, #0]
				ChargeDischargeStatus = DISCHARGEs;
 8003afe:	4b29      	ldr	r3, [pc, #164]	; (8003ba4 <MenuCheckingCapacity+0x24c>)
 8003b00:	701a      	strb	r2, [r3, #0]
			if (((U_OUT > SettingsData.MaxVoltage && ChargeDischargeStatus == CHARGEs  && TimerForReadyMeasurement_ms>1000) || (ChargeTimeSec > ChargeDurationSec && ChargeDischargeStatus == CHARGEs))&&CheckingCapacityCounter>=3)
 8003b02:	4b2a      	ldr	r3, [pc, #168]	; (8003bac <MenuCheckingCapacity+0x254>)
 8003b04:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d208      	bcs.n	8003b20 <MenuCheckingCapacity+0x1c8>
 8003b0e:	4b25      	ldr	r3, [pc, #148]	; (8003ba4 <MenuCheckingCapacity+0x24c>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d104      	bne.n	8003b20 <MenuCheckingCapacity+0x1c8>
 8003b16:	4b26      	ldr	r3, [pc, #152]	; (8003bb0 <MenuCheckingCapacity+0x258>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b1e:	d808      	bhi.n	8003b32 <MenuCheckingCapacity+0x1da>
 8003b20:	4b26      	ldr	r3, [pc, #152]	; (8003bbc <MenuCheckingCapacity+0x264>)
 8003b22:	6832      	ldr	r2, [r6, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d952      	bls.n	8003bd0 <MenuCheckingCapacity+0x278>
 8003b2a:	4b1e      	ldr	r3, [pc, #120]	; (8003ba4 <MenuCheckingCapacity+0x24c>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d14e      	bne.n	8003bd0 <MenuCheckingCapacity+0x278>
 8003b32:	f994 3000 	ldrsb.w	r3, [r4]
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	dd4a      	ble.n	8003bd0 <MenuCheckingCapacity+0x278>
				OFF();
 8003b3a:	f7ff fbf1 	bl	8003320 <OFF>
				ChargeStatusForTimer = 0;
 8003b3e:	2300      	movs	r3, #0
				DisChargeStatusForTimer = 0;
 8003b40:	4a16      	ldr	r2, [pc, #88]	; (8003b9c <MenuCheckingCapacity+0x244>)
				ChargeStatusForTimer = 0;
 8003b42:	f88a 3000 	strb.w	r3, [sl]
				DisChargeStatusForTimer = 0;
 8003b46:	7013      	strb	r3, [r2, #0]
				if (BatteryCapacityCharge/3600 > 100)
 8003b48:	682a      	ldr	r2, [r5, #0]
 8003b4a:	4b1a      	ldr	r3, [pc, #104]	; (8003bb4 <MenuCheckingCapacity+0x25c>)
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d904      	bls.n	8003b5a <MenuCheckingCapacity+0x202>
					MenuTraining_WriteInLOG(BatteryCapacityCharge,ChargeTimeSec,CHARGE_H);
 8003b50:	6828      	ldr	r0, [r5, #0]
 8003b52:	2201      	movs	r2, #1
 8003b54:	6831      	ldr	r1, [r6, #0]
 8003b56:	f7fe fa3d 	bl	8001fd4 <MenuTraining_WriteInLOG>
				CountShow = 2;
 8003b5a:	2202      	movs	r2, #2
				CheckingCapacityCounter ++;
 8003b5c:	7823      	ldrb	r3, [r4, #0]
			if (key == KEY_NEXT)
 8003b5e:	4593      	cmp	fp, r2
				CheckingCapacityCounter ++;
 8003b60:	f103 0301 	add.w	r3, r3, #1
 8003b64:	7023      	strb	r3, [r4, #0]
				CountShow = 2;
 8003b66:	4b16      	ldr	r3, [pc, #88]	; (8003bc0 <MenuCheckingCapacity+0x268>)
 8003b68:	701a      	strb	r2, [r3, #0]
			if (key == KEY_NEXT)
 8003b6a:	f040 80ee 	bne.w	8003d4a <MenuCheckingCapacity+0x3f2>
				if (CountShow<0) CountShow=MAX_SCREENS__MENU_CAPACITY-1;
 8003b6e:	2203      	movs	r2, #3
 8003b70:	4b13      	ldr	r3, [pc, #76]	; (8003bc0 <MenuCheckingCapacity+0x268>)
 8003b72:	701a      	strb	r2, [r3, #0]
 8003b74:	e038      	b.n	8003be8 <MenuCheckingCapacity+0x290>
 8003b76:	bf00      	nop
 8003b78:	20000794 	.word	0x20000794
 8003b7c:	20000780 	.word	0x20000780
 8003b80:	20000770 	.word	0x20000770
 8003b84:	20000774 	.word	0x20000774
 8003b88:	20000784 	.word	0x20000784
 8003b8c:	20000854 	.word	0x20000854
 8003b90:	20000154 	.word	0x20000154
 8003b94:	080061d9 	.word	0x080061d9
 8003b98:	080061ea 	.word	0x080061ea
 8003b9c:	2000078a 	.word	0x2000078a
 8003ba0:	20000790 	.word	0x20000790
 8003ba4:	20000270 	.word	0x20000270
 8003ba8:	080061fb 	.word	0x080061fb
 8003bac:	2000084e 	.word	0x2000084e
 8003bb0:	200007b4 	.word	0x200007b4
 8003bb4:	00058c4f 	.word	0x00058c4f
 8003bb8:	200000f4 	.word	0x200000f4
 8003bbc:	200009fc 	.word	0x200009fc
 8003bc0:	20000785 	.word	0x20000785
 8003bc4:	2000077f 	.word	0x2000077f
 8003bc8:	2000078c 	.word	0x2000078c
 8003bcc:	2000083e 	.word	0x2000083e
			if (key == KEY_NEXT)
 8003bd0:	f1bb 0f02 	cmp.w	fp, #2
 8003bd4:	f040 80b9 	bne.w	8003d4a <MenuCheckingCapacity+0x3f2>
				CountShow++;
 8003bd8:	4ac6      	ldr	r2, [pc, #792]	; (8003ef4 <MenuCheckingCapacity+0x59c>)
 8003bda:	7813      	ldrb	r3, [r2, #0]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	b25b      	sxtb	r3, r3
				if (CountShow==MAX_SCREENS__MENU_CAPACITY) CountShow=0;
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	bf08      	it	eq
 8003be4:	2300      	moveq	r3, #0
 8003be6:	7013      	strb	r3, [r2, #0]
			if(CountShow == 0)
 8003be8:	4cc2      	ldr	r4, [pc, #776]	; (8003ef4 <MenuCheckingCapacity+0x59c>)
 8003bea:	f994 b000 	ldrsb.w	fp, [r4]
 8003bee:	f1bb 0f00 	cmp.w	fp, #0
 8003bf2:	d12e      	bne.n	8003c52 <MenuCheckingCapacity+0x2fa>
				lcd_set_xy(0,0);
 8003bf4:	4659      	mov	r1, fp
 8003bf6:	4658      	mov	r0, fp
 8003bf8:	f7fd fe4e 	bl	8001898 <lcd_set_xy>
				PrintToLCD(itoa_koma(U_OUT,2));
 8003bfc:	9b02      	ldr	r3, [sp, #8]
 8003bfe:	2102      	movs	r1, #2
 8003c00:	8818      	ldrh	r0, [r3, #0]
 8003c02:	f7fd fb5b 	bl	80012bc <itoa_koma>
 8003c06:	f7fd fec7 	bl	8001998 <PrintToLCD>
				PrintToLCD("V ");
 8003c0a:	48bb      	ldr	r0, [pc, #748]	; (8003ef8 <MenuCheckingCapacity+0x5a0>)
 8003c0c:	f7fd fec4 	bl	8001998 <PrintToLCD>
				PrintToLCD(itoa(Current));
 8003c10:	9b01      	ldr	r3, [sp, #4]
 8003c12:	8818      	ldrh	r0, [r3, #0]
 8003c14:	b200      	sxth	r0, r0
 8003c16:	f7fd fadd 	bl	80011d4 <itoa>
 8003c1a:	f7fd febd 	bl	8001998 <PrintToLCD>
				PrintToLCD("mA     ");
 8003c1e:	48b7      	ldr	r0, [pc, #732]	; (8003efc <MenuCheckingCapacity+0x5a4>)
 8003c20:	f7fd feba 	bl	8001998 <PrintToLCD>
				lcd_set_xy(6,1);
 8003c24:	2101      	movs	r1, #1
 8003c26:	2006      	movs	r0, #6
 8003c28:	f7fd fe36 	bl	8001898 <lcd_set_xy>
				LcdOutbyNumber(4,1);
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	2004      	movs	r0, #4
 8003c30:	f7fd fe5a 	bl	80018e8 <LcdOutbyNumber>
				if (Status_Out ==1)
 8003c34:	4bb2      	ldr	r3, [pc, #712]	; (8003f00 <MenuCheckingCapacity+0x5a8>)
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	f040 8093 	bne.w	8003d64 <MenuCheckingCapacity+0x40c>
					lcd_set_xy(7,1);
 8003c3e:	4619      	mov	r1, r3
 8003c40:	2007      	movs	r0, #7
 8003c42:	9301      	str	r3, [sp, #4]
 8003c44:	f7fd fe28 	bl	8001898 <lcd_set_xy>
					LcdOutbyNumber(0,1);//charge
 8003c48:	9b01      	ldr	r3, [sp, #4]
 8003c4a:	4658      	mov	r0, fp
 8003c4c:	4619      	mov	r1, r3
					LcdOutbyNumber(2,1);//discharge
 8003c4e:	f7fd fe4b 	bl	80018e8 <LcdOutbyNumber>
			if(CountShow == 1)
 8003c52:	f994 b000 	ldrsb.w	fp, [r4]
 8003c56:	f1bb 0f01 	cmp.w	fp, #1
 8003c5a:	d127      	bne.n	8003cac <MenuCheckingCapacity+0x354>
				lcd_set_xy(0,0);
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	4608      	mov	r0, r1
 8003c60:	f7fd fe1a 	bl	8001898 <lcd_set_xy>
				PrintToLCD(itoa(SettingsData.ChargeTime));
 8003c64:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8003c68:	f7fd fab4 	bl	80011d4 <itoa>
 8003c6c:	f7fd fe94 	bl	8001998 <PrintToLCD>
				PrintToLCD("h ");
 8003c70:	48a4      	ldr	r0, [pc, #656]	; (8003f04 <MenuCheckingCapacity+0x5ac>)
 8003c72:	f7fd fe91 	bl	8001998 <PrintToLCD>
				PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 8003c76:	230a      	movs	r3, #10
 8003c78:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8003c7c:	4659      	mov	r1, fp
 8003c7e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003c82:	9301      	str	r3, [sp, #4]
 8003c84:	f7fd fb1a 	bl	80012bc <itoa_koma>
 8003c88:	f7fd fe86 	bl	8001998 <PrintToLCD>
				PrintToLCD("V ");
 8003c8c:	489a      	ldr	r0, [pc, #616]	; (8003ef8 <MenuCheckingCapacity+0x5a0>)
 8003c8e:	f7fd fe83 	bl	8001998 <PrintToLCD>
				PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8003c92:	4659      	mov	r1, fp
 8003c94:	f8d8 0020 	ldr.w	r0, [r8, #32]
			PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8003c98:	9b01      	ldr	r3, [sp, #4]
 8003c9a:	fbb0 f0f3 	udiv	r0, r0, r3
 8003c9e:	f7fd fb0d 	bl	80012bc <itoa_koma>
 8003ca2:	f7fd fe79 	bl	8001998 <PrintToLCD>
			PrintToLCD("V     ");
 8003ca6:	4898      	ldr	r0, [pc, #608]	; (8003f08 <MenuCheckingCapacity+0x5b0>)
 8003ca8:	f7fd fe76 	bl	8001998 <PrintToLCD>
		if(CountShow == 2)
 8003cac:	f994 8000 	ldrsb.w	r8, [r4]
 8003cb0:	f1b8 0f02 	cmp.w	r8, #2
 8003cb4:	d122      	bne.n	8003cfc <MenuCheckingCapacity+0x3a4>
			lcd_set_xy(0,0);
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	4608      	mov	r0, r1
 8003cba:	f7fd fded 	bl	8001898 <lcd_set_xy>
			LcdOutbyNumber(2,1);//discharge
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	4640      	mov	r0, r8
 8003cc2:	f7fd fe11 	bl	80018e8 <LcdOutbyNumber>
			lcd_set_xy(1,0);
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	2001      	movs	r0, #1
 8003cca:	f7fd fde5 	bl	8001898 <lcd_set_xy>
			PrintToLCD(" ");
 8003cce:	488f      	ldr	r0, [pc, #572]	; (8003f0c <MenuCheckingCapacity+0x5b4>)
 8003cd0:	f7fd fe62 	bl	8001998 <PrintToLCD>
			PrintToLCD(itoa(BatteryCapacityDischargeCurrent/3600));
 8003cd4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003cd8:	6838      	ldr	r0, [r7, #0]
 8003cda:	fbb0 f0f3 	udiv	r0, r0, r3
 8003cde:	f7fd fa79 	bl	80011d4 <itoa>
 8003ce2:	f7fd fe59 	bl	8001998 <PrintToLCD>
			PrintToLCD("mAH      ");
 8003ce6:	488a      	ldr	r0, [pc, #552]	; (8003f10 <MenuCheckingCapacity+0x5b8>)
 8003ce8:	f7fd fe56 	bl	8001998 <PrintToLCD>
			lcd_set_xy(3,1);
 8003cec:	2003      	movs	r0, #3
 8003cee:	2101      	movs	r1, #1
 8003cf0:	f7fd fdd2 	bl	8001898 <lcd_set_xy>
			ClockOnLCD_noSec(DischargeTimeSec);
 8003cf4:	f8d9 0000 	ldr.w	r0, [r9]
 8003cf8:	f7fe fcd6 	bl	80026a8 <ClockOnLCD_noSec>
		if(CountShow == 3)
 8003cfc:	f994 4000 	ldrsb.w	r4, [r4]
 8003d00:	2c03      	cmp	r4, #3
 8003d02:	d142      	bne.n	8003d8a <MenuCheckingCapacity+0x432>
			lcd_set_xy(0,0);
 8003d04:	2100      	movs	r1, #0
 8003d06:	4608      	mov	r0, r1
 8003d08:	f7fd fdc6 	bl	8001898 <lcd_set_xy>
			LcdOutbyNumber(0,1);//charge
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	2000      	movs	r0, #0
 8003d10:	f7fd fdea 	bl	80018e8 <LcdOutbyNumber>
			lcd_set_xy(1,0);
 8003d14:	2100      	movs	r1, #0
 8003d16:	2001      	movs	r0, #1
 8003d18:	f7fd fdbe 	bl	8001898 <lcd_set_xy>
			PrintToLCD(" ");
 8003d1c:	487b      	ldr	r0, [pc, #492]	; (8003f0c <MenuCheckingCapacity+0x5b4>)
 8003d1e:	f7fd fe3b 	bl	8001998 <PrintToLCD>
			PrintToLCD(itoa(BatteryCapacityCharge/3600));
 8003d22:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003d26:	6828      	ldr	r0, [r5, #0]
 8003d28:	fbb0 f0f3 	udiv	r0, r0, r3
 8003d2c:	f7fd fa52 	bl	80011d4 <itoa>
 8003d30:	f7fd fe32 	bl	8001998 <PrintToLCD>
			PrintToLCD("mAH      ");
 8003d34:	4876      	ldr	r0, [pc, #472]	; (8003f10 <MenuCheckingCapacity+0x5b8>)
 8003d36:	f7fd fe2f 	bl	8001998 <PrintToLCD>
			lcd_set_xy(3,1);
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	f7fd fdab 	bl	8001898 <lcd_set_xy>
			ClockOnLCD_noSec(ChargeTimeSec);
 8003d42:	6830      	ldr	r0, [r6, #0]
 8003d44:	f7fe fcb0 	bl	80026a8 <ClockOnLCD_noSec>
 8003d48:	e01f      	b.n	8003d8a <MenuCheckingCapacity+0x432>
			if (key == KEY_BACK)
 8003d4a:	f1bb 0f01 	cmp.w	fp, #1
 8003d4e:	f47f af4b 	bne.w	8003be8 <MenuCheckingCapacity+0x290>
				CountShow--;
 8003d52:	4a68      	ldr	r2, [pc, #416]	; (8003ef4 <MenuCheckingCapacity+0x59c>)
 8003d54:	7813      	ldrb	r3, [r2, #0]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	b25b      	sxtb	r3, r3
				if (CountShow<0) CountShow=MAX_SCREENS__MENU_CAPACITY-1;
 8003d5a:	2b00      	cmp	r3, #0
				CountShow--;
 8003d5c:	7013      	strb	r3, [r2, #0]
				if (CountShow<0) CountShow=MAX_SCREENS__MENU_CAPACITY-1;
 8003d5e:	f6bf af43 	bge.w	8003be8 <MenuCheckingCapacity+0x290>
 8003d62:	e704      	b.n	8003b6e <MenuCheckingCapacity+0x216>
					lcd_set_xy(7,1);
 8003d64:	2101      	movs	r1, #1
 8003d66:	2007      	movs	r0, #7
 8003d68:	f7fd fd96 	bl	8001898 <lcd_set_xy>
					LcdOutbyNumber(2,1);//discharge
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	2002      	movs	r0, #2
 8003d70:	e76d      	b.n	8003c4e <MenuCheckingCapacity+0x2f6>
			if (TimerForReadyMeasurement_ms>1000)
 8003d72:	4b68      	ldr	r3, [pc, #416]	; (8003f14 <MenuCheckingCapacity+0x5bc>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d7a:	d906      	bls.n	8003d8a <MenuCheckingCapacity+0x432>
				lcd_set_xy(0,0);
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	4608      	mov	r0, r1
 8003d80:	f7fd fd8a 	bl	8001898 <lcd_set_xy>
				PrintToLCD("NO/BAD Battery  ");
 8003d84:	4864      	ldr	r0, [pc, #400]	; (8003f18 <MenuCheckingCapacity+0x5c0>)
 8003d86:	f7fd fe07 	bl	8001998 <PrintToLCD>
	logDebugD("EnterInMenu_Status: ",EnterInMenu_Status,0);
 8003d8a:	4864      	ldr	r0, [pc, #400]	; (8003f1c <MenuCheckingCapacity+0x5c4>)
 8003d8c:	f001 f9e0 	bl	8005150 <printToBufferWithoutEndUART1>
 8003d90:	9b00      	ldr	r3, [sp, #0]
 8003d92:	2200      	movs	r2, #0
 8003d94:	7819      	ldrb	r1, [r3, #0]
 8003d96:	4862      	ldr	r0, [pc, #392]	; (8003f20 <MenuCheckingCapacity+0x5c8>)
 8003d98:	f001 fa1e 	bl	80051d8 <printToBufferUART1D>
	logDebugD("Chargestatus timer: ",ChargeStatusForTimer,0);
 8003d9c:	485f      	ldr	r0, [pc, #380]	; (8003f1c <MenuCheckingCapacity+0x5c4>)
 8003d9e:	f001 f9d7 	bl	8005150 <printToBufferWithoutEndUART1>
 8003da2:	f89a 1000 	ldrb.w	r1, [sl]
 8003da6:	2200      	movs	r2, #0
 8003da8:	485e      	ldr	r0, [pc, #376]	; (8003f24 <MenuCheckingCapacity+0x5cc>)
 8003daa:	f001 fa15 	bl	80051d8 <printToBufferUART1D>
	logDebugD("ChargeTimeSec: ",ChargeTimeSec,0);
 8003dae:	485b      	ldr	r0, [pc, #364]	; (8003f1c <MenuCheckingCapacity+0x5c4>)
 8003db0:	f001 f9ce 	bl	8005150 <printToBufferWithoutEndUART1>
 8003db4:	6831      	ldr	r1, [r6, #0]
 8003db6:	2200      	movs	r2, #0
 8003db8:	485b      	ldr	r0, [pc, #364]	; (8003f28 <MenuCheckingCapacity+0x5d0>)
 8003dba:	f001 fa0d 	bl	80051d8 <printToBufferUART1D>
	logDebugD("BatteryCapacityCharge: ",BatteryCapacityCharge,0);
 8003dbe:	4857      	ldr	r0, [pc, #348]	; (8003f1c <MenuCheckingCapacity+0x5c4>)
 8003dc0:	f001 f9c6 	bl	8005150 <printToBufferWithoutEndUART1>
 8003dc4:	6829      	ldr	r1, [r5, #0]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	4858      	ldr	r0, [pc, #352]	; (8003f2c <MenuCheckingCapacity+0x5d4>)
 8003dca:	f001 fa05 	bl	80051d8 <printToBufferUART1D>
	logDebugD("Dischargestatus timer: ",DisChargeStatusForTimer,0);
 8003dce:	4853      	ldr	r0, [pc, #332]	; (8003f1c <MenuCheckingCapacity+0x5c4>)
 8003dd0:	f001 f9be 	bl	8005150 <printToBufferWithoutEndUART1>
 8003dd4:	4b56      	ldr	r3, [pc, #344]	; (8003f30 <MenuCheckingCapacity+0x5d8>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	7819      	ldrb	r1, [r3, #0]
 8003dda:	4856      	ldr	r0, [pc, #344]	; (8003f34 <MenuCheckingCapacity+0x5dc>)
 8003ddc:	f001 f9fc 	bl	80051d8 <printToBufferUART1D>
	logDebugD("DischargeTimeSec: ",DischargeTimeSec,0);
 8003de0:	484e      	ldr	r0, [pc, #312]	; (8003f1c <MenuCheckingCapacity+0x5c4>)
 8003de2:	f001 f9b5 	bl	8005150 <printToBufferWithoutEndUART1>
 8003de6:	f8d9 1000 	ldr.w	r1, [r9]
 8003dea:	2200      	movs	r2, #0
 8003dec:	4852      	ldr	r0, [pc, #328]	; (8003f38 <MenuCheckingCapacity+0x5e0>)
 8003dee:	f001 f9f3 	bl	80051d8 <printToBufferUART1D>
	logDebugD("BatteryCapacityDischargeCurrent: ",BatteryCapacityDischargeCurrent,0);
 8003df2:	484a      	ldr	r0, [pc, #296]	; (8003f1c <MenuCheckingCapacity+0x5c4>)
 8003df4:	f001 f9ac 	bl	8005150 <printToBufferWithoutEndUART1>
 8003df8:	2200      	movs	r2, #0
 8003dfa:	6839      	ldr	r1, [r7, #0]
 8003dfc:	484f      	ldr	r0, [pc, #316]	; (8003f3c <MenuCheckingCapacity+0x5e4>)
}
 8003dfe:	b005      	add	sp, #20
 8003e00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	logDebugD("BatteryCapacityDischargeCurrent: ",BatteryCapacityDischargeCurrent,0);
 8003e04:	f001 b9e8 	b.w	80051d8 <printToBufferUART1D>
 8003e08:	4c3a      	ldr	r4, [pc, #232]	; (8003ef4 <MenuCheckingCapacity+0x59c>)
		if (key == KEY_NEXT)
 8003e0a:	f1bb 0f02 	cmp.w	fp, #2
 8003e0e:	f994 3000 	ldrsb.w	r3, [r4]
 8003e12:	d15f      	bne.n	8003ed4 <MenuCheckingCapacity+0x57c>
			CountShow++;
 8003e14:	3301      	adds	r3, #1
 8003e16:	b25b      	sxtb	r3, r3
			if (CountShow==MAX_SCREENS__MENU_CAPACITY1) CountShow=0;
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	bf08      	it	eq
 8003e1c:	2300      	moveq	r3, #0
			if (CountShow<0) CountShow=MAX_SCREENS__MENU_CAPACITY1-1;
 8003e1e:	7023      	strb	r3, [r4, #0]
		if(CountShow == 0)
 8003e20:	f994 8000 	ldrsb.w	r8, [r4]
 8003e24:	f1b8 0f00 	cmp.w	r8, #0
 8003e28:	d12d      	bne.n	8003e86 <MenuCheckingCapacity+0x52e>
			lcd_set_xy(0,0);
 8003e2a:	4641      	mov	r1, r8
 8003e2c:	4640      	mov	r0, r8
 8003e2e:	f7fd fd33 	bl	8001898 <lcd_set_xy>
			PrintToLCD(itoa_koma(U_OUT,2));
 8003e32:	4b43      	ldr	r3, [pc, #268]	; (8003f40 <MenuCheckingCapacity+0x5e8>)
 8003e34:	2102      	movs	r1, #2
 8003e36:	8818      	ldrh	r0, [r3, #0]
 8003e38:	f7fd fa40 	bl	80012bc <itoa_koma>
 8003e3c:	f7fd fdac 	bl	8001998 <PrintToLCD>
			PrintToLCD("V ");
 8003e40:	482d      	ldr	r0, [pc, #180]	; (8003ef8 <MenuCheckingCapacity+0x5a0>)
 8003e42:	f7fd fda9 	bl	8001998 <PrintToLCD>
			PrintToLCD(itoa(Current));
 8003e46:	4b3f      	ldr	r3, [pc, #252]	; (8003f44 <MenuCheckingCapacity+0x5ec>)
 8003e48:	8818      	ldrh	r0, [r3, #0]
 8003e4a:	b200      	sxth	r0, r0
 8003e4c:	f7fd f9c2 	bl	80011d4 <itoa>
 8003e50:	f7fd fda2 	bl	8001998 <PrintToLCD>
			PrintToLCD("mA     ");
 8003e54:	4829      	ldr	r0, [pc, #164]	; (8003efc <MenuCheckingCapacity+0x5a4>)
 8003e56:	f7fd fd9f 	bl	8001998 <PrintToLCD>
			lcd_set_xy(6,1);
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	2006      	movs	r0, #6
 8003e5e:	f7fd fd1b 	bl	8001898 <lcd_set_xy>
			LcdOutbyNumber(4,1);
 8003e62:	2101      	movs	r1, #1
 8003e64:	2004      	movs	r0, #4
 8003e66:	f7fd fd3f 	bl	80018e8 <LcdOutbyNumber>
			if (Status_Out ==1)
 8003e6a:	4b25      	ldr	r3, [pc, #148]	; (8003f00 <MenuCheckingCapacity+0x5a8>)
 8003e6c:	f893 b000 	ldrb.w	fp, [r3]
 8003e70:	f1bb 0f01 	cmp.w	fp, #1
 8003e74:	d137      	bne.n	8003ee6 <MenuCheckingCapacity+0x58e>
				lcd_set_xy(7,1);
 8003e76:	4659      	mov	r1, fp
 8003e78:	2007      	movs	r0, #7
 8003e7a:	f7fd fd0d 	bl	8001898 <lcd_set_xy>
				LcdOutbyNumber(0,1);//charge
 8003e7e:	4659      	mov	r1, fp
 8003e80:	4640      	mov	r0, r8
				LcdOutbyNumber(2,1);//discharge
 8003e82:	f7fd fd31 	bl	80018e8 <LcdOutbyNumber>
		if(CountShow == 1)
 8003e86:	f994 8000 	ldrsb.w	r8, [r4]
 8003e8a:	f1b8 0f01 	cmp.w	r8, #1
 8003e8e:	f47f af0d 	bne.w	8003cac <MenuCheckingCapacity+0x354>
			lcd_set_xy(0,0);
 8003e92:	2100      	movs	r1, #0
			PrintToLCD(itoa(SettingsData.ChargeTime));
 8003e94:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8003f48 <MenuCheckingCapacity+0x5f0>
			lcd_set_xy(0,0);
 8003e98:	4608      	mov	r0, r1
 8003e9a:	f7fd fcfd 	bl	8001898 <lcd_set_xy>
			PrintToLCD(itoa(SettingsData.ChargeTime));
 8003e9e:	f8db 0010 	ldr.w	r0, [fp, #16]
 8003ea2:	f7fd f997 	bl	80011d4 <itoa>
 8003ea6:	f7fd fd77 	bl	8001998 <PrintToLCD>
			PrintToLCD("h ");
 8003eaa:	4816      	ldr	r0, [pc, #88]	; (8003f04 <MenuCheckingCapacity+0x5ac>)
 8003eac:	f7fd fd74 	bl	8001998 <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.LowVoltage/10,1));
 8003eb0:	230a      	movs	r3, #10
 8003eb2:	f8db 0018 	ldr.w	r0, [fp, #24]
 8003eb6:	4641      	mov	r1, r8
 8003eb8:	fbb0 f0f3 	udiv	r0, r0, r3
 8003ebc:	9301      	str	r3, [sp, #4]
 8003ebe:	f7fd f9fd 	bl	80012bc <itoa_koma>
 8003ec2:	f7fd fd69 	bl	8001998 <PrintToLCD>
			PrintToLCD("V ");
 8003ec6:	480c      	ldr	r0, [pc, #48]	; (8003ef8 <MenuCheckingCapacity+0x5a0>)
 8003ec8:	f7fd fd66 	bl	8001998 <PrintToLCD>
			PrintToLCD(itoa_koma(SettingsData.MaxVoltage/10,1));
 8003ecc:	f8db 0020 	ldr.w	r0, [fp, #32]
 8003ed0:	4641      	mov	r1, r8
 8003ed2:	e6e1      	b.n	8003c98 <MenuCheckingCapacity+0x340>
		if (key == KEY_BACK)
 8003ed4:	f1bb 0f01 	cmp.w	fp, #1
 8003ed8:	d1a2      	bne.n	8003e20 <MenuCheckingCapacity+0x4c8>
			CountShow--;
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b25b      	sxtb	r3, r3
			if (CountShow<0) CountShow=MAX_SCREENS__MENU_CAPACITY1-1;
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	bfb8      	it	lt
 8003ee2:	2303      	movlt	r3, #3
 8003ee4:	e79b      	b.n	8003e1e <MenuCheckingCapacity+0x4c6>
				lcd_set_xy(7,1);
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	2007      	movs	r0, #7
 8003eea:	f7fd fcd5 	bl	8001898 <lcd_set_xy>
				LcdOutbyNumber(2,1);//discharge
 8003eee:	2101      	movs	r1, #1
 8003ef0:	2002      	movs	r0, #2
 8003ef2:	e7c6      	b.n	8003e82 <MenuCheckingCapacity+0x52a>
 8003ef4:	20000785 	.word	0x20000785
 8003ef8:	08006001 	.word	0x08006001
 8003efc:	0800620c 	.word	0x0800620c
 8003f00:	20000798 	.word	0x20000798
 8003f04:	080059ee 	.word	0x080059ee
 8003f08:	0800610f 	.word	0x0800610f
 8003f0c:	0800613e 	.word	0x0800613e
 8003f10:	08006214 	.word	0x08006214
 8003f14:	200007b4 	.word	0x200007b4
 8003f18:	0800622a 	.word	0x0800622a
 8003f1c:	08005c50 	.word	0x08005c50
 8003f20:	0800623b 	.word	0x0800623b
 8003f24:	08006250 	.word	0x08006250
 8003f28:	08006265 	.word	0x08006265
 8003f2c:	08006275 	.word	0x08006275
 8003f30:	2000078a 	.word	0x2000078a
 8003f34:	0800628d 	.word	0x0800628d
 8003f38:	080062a5 	.word	0x080062a5
 8003f3c:	080062b8 	.word	0x080062b8
 8003f40:	2000084e 	.word	0x2000084e
 8003f44:	2000083e 	.word	0x2000083e
 8003f48:	20000154 	.word	0x20000154

08003f4c <MenuDIAGNOSTIC>:
	EnterInMenu_Status=1;
 8003f4c:	2201      	movs	r2, #1
{
 8003f4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	EnterInMenu_Status=1;
 8003f52:	4b97      	ldr	r3, [pc, #604]	; (80041b0 <MenuDIAGNOSTIC+0x264>)
 8003f54:	4c97      	ldr	r4, [pc, #604]	; (80041b4 <MenuDIAGNOSTIC+0x268>)
	if (key == KEY_NEXT)
 8003f56:	2802      	cmp	r0, #2
	EnterInMenu_Status=1;
 8003f58:	701a      	strb	r2, [r3, #0]
{
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	f994 3000 	ldrsb.w	r3, [r4]
	if (key == KEY_NEXT)
 8003f60:	f040 811c 	bne.w	800419c <MenuDIAGNOSTIC+0x250>
		CountShow1++;
 8003f64:	4413      	add	r3, r2
 8003f66:	b25b      	sxtb	r3, r3
		if (CountShow1==MAXITEM) CountShow1=0;
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	bf08      	it	eq
 8003f6c:	2300      	moveq	r3, #0
		if (CountShow1<0) CountShow1=MAXITEM-1;
 8003f6e:	7023      	strb	r3, [r4, #0]
	if(CountShow1 == 0)
 8003f70:	f994 1000 	ldrsb.w	r1, [r4]
 8003f74:	b9f1      	cbnz	r1, 8003fb4 <MenuDIAGNOSTIC+0x68>
		OFF();
 8003f76:	f7ff f9d3 	bl	8003320 <OFF>
		lcd_set_xy(0,0);
 8003f7a:	4608      	mov	r0, r1
 8003f7c:	f7fd fc8c 	bl	8001898 <lcd_set_xy>
		PrintToLCD("Uin=");
 8003f80:	488d      	ldr	r0, [pc, #564]	; (80041b8 <MenuDIAGNOSTIC+0x26c>)
 8003f82:	f7fd fd09 	bl	8001998 <PrintToLCD>
		PrintToLCD(		itoa_koma(U_IN/10,1));
 8003f86:	4b8d      	ldr	r3, [pc, #564]	; (80041bc <MenuDIAGNOSTIC+0x270>)
 8003f88:	2101      	movs	r1, #1
 8003f8a:	8818      	ldrh	r0, [r3, #0]
 8003f8c:	230a      	movs	r3, #10
 8003f8e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003f92:	f7fd f993 	bl	80012bc <itoa_koma>
 8003f96:	f7fd fcff 	bl	8001998 <PrintToLCD>
		PrintToLCD(" Uc=");
 8003f9a:	4889      	ldr	r0, [pc, #548]	; (80041c0 <MenuDIAGNOSTIC+0x274>)
 8003f9c:	f7fd fcfc 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa_koma(U_Controller,2));
 8003fa0:	4b88      	ldr	r3, [pc, #544]	; (80041c4 <MenuDIAGNOSTIC+0x278>)
 8003fa2:	2102      	movs	r1, #2
 8003fa4:	8818      	ldrh	r0, [r3, #0]
 8003fa6:	f7fd f989 	bl	80012bc <itoa_koma>
 8003faa:	f7fd fcf5 	bl	8001998 <PrintToLCD>
		PrintToLCD("    ");
 8003fae:	4886      	ldr	r0, [pc, #536]	; (80041c8 <MenuDIAGNOSTIC+0x27c>)
 8003fb0:	f7fd fcf2 	bl	8001998 <PrintToLCD>
	if(CountShow1 == 1)
 8003fb4:	f994 3000 	ldrsb.w	r3, [r4]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d11b      	bne.n	8003ff4 <MenuDIAGNOSTIC+0xa8>
		OFF();
 8003fbc:	f7ff f9b0 	bl	8003320 <OFF>
		lcd_set_xy(0,0);
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	4608      	mov	r0, r1
 8003fc4:	f7fd fc68 	bl	8001898 <lcd_set_xy>
		PrintToLCD("Ups ");
 8003fc8:	4880      	ldr	r0, [pc, #512]	; (80041cc <MenuDIAGNOSTIC+0x280>)
 8003fca:	f7fd fce5 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa_koma(U_PS,2));
 8003fce:	4b80      	ldr	r3, [pc, #512]	; (80041d0 <MenuDIAGNOSTIC+0x284>)
 8003fd0:	2102      	movs	r1, #2
 8003fd2:	8818      	ldrh	r0, [r3, #0]
 8003fd4:	f7fd f972 	bl	80012bc <itoa_koma>
 8003fd8:	f7fd fcde 	bl	8001998 <PrintToLCD>
		PrintToLCD("V ");
 8003fdc:	487d      	ldr	r0, [pc, #500]	; (80041d4 <MenuDIAGNOSTIC+0x288>)
 8003fde:	f7fd fcdb 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa((RegularConvData[3])));
 8003fe2:	4b7d      	ldr	r3, [pc, #500]	; (80041d8 <MenuDIAGNOSTIC+0x28c>)
 8003fe4:	88d8      	ldrh	r0, [r3, #6]
 8003fe6:	f7fd f8f5 	bl	80011d4 <itoa>
 8003fea:	f7fd fcd5 	bl	8001998 <PrintToLCD>
		PrintToLCD("      ");
 8003fee:	487b      	ldr	r0, [pc, #492]	; (80041dc <MenuDIAGNOSTIC+0x290>)
 8003ff0:	f7fd fcd2 	bl	8001998 <PrintToLCD>
	if(CountShow1 == 2)
 8003ff4:	f994 5000 	ldrsb.w	r5, [r4]
 8003ff8:	2d02      	cmp	r5, #2
 8003ffa:	d11b      	bne.n	8004034 <MenuDIAGNOSTIC+0xe8>
		OUT_ON();
 8003ffc:	f7fe fba0 	bl	8002740 <OUT_ON>
		lcd_set_xy(0,0);
 8004000:	2100      	movs	r1, #0
 8004002:	4608      	mov	r0, r1
 8004004:	f7fd fc48 	bl	8001898 <lcd_set_xy>
		PrintToLCD("Uout ");
 8004008:	4875      	ldr	r0, [pc, #468]	; (80041e0 <MenuDIAGNOSTIC+0x294>)
 800400a:	f7fd fcc5 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa_koma(U_OUT,2));
 800400e:	4b75      	ldr	r3, [pc, #468]	; (80041e4 <MenuDIAGNOSTIC+0x298>)
 8004010:	4629      	mov	r1, r5
 8004012:	8818      	ldrh	r0, [r3, #0]
 8004014:	f7fd f952 	bl	80012bc <itoa_koma>
 8004018:	f7fd fcbe 	bl	8001998 <PrintToLCD>
		PrintToLCD("V ");
 800401c:	486d      	ldr	r0, [pc, #436]	; (80041d4 <MenuDIAGNOSTIC+0x288>)
 800401e:	f7fd fcbb 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa((RegularConvData[2])));
 8004022:	4b6d      	ldr	r3, [pc, #436]	; (80041d8 <MenuDIAGNOSTIC+0x28c>)
 8004024:	8898      	ldrh	r0, [r3, #4]
 8004026:	f7fd f8d5 	bl	80011d4 <itoa>
 800402a:	f7fd fcb5 	bl	8001998 <PrintToLCD>
		PrintToLCD("      ");
 800402e:	486b      	ldr	r0, [pc, #428]	; (80041dc <MenuDIAGNOSTIC+0x290>)
 8004030:	f7fd fcb2 	bl	8001998 <PrintToLCD>
	if(CountShow1 == 3)
 8004034:	f994 3000 	ldrsb.w	r3, [r4]
 8004038:	2b03      	cmp	r3, #3
 800403a:	d11b      	bne.n	8004074 <MenuDIAGNOSTIC+0x128>
		OUT_ON();
 800403c:	f7fe fb80 	bl	8002740 <OUT_ON>
		lcd_set_xy(0,0);
 8004040:	2100      	movs	r1, #0
 8004042:	4608      	mov	r0, r1
 8004044:	f7fd fc28 	bl	8001898 <lcd_set_xy>
		PrintToLCD("I(1)");
 8004048:	4867      	ldr	r0, [pc, #412]	; (80041e8 <MenuDIAGNOSTIC+0x29c>)
 800404a:	f7fd fca5 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa(Current));
 800404e:	4b67      	ldr	r3, [pc, #412]	; (80041ec <MenuDIAGNOSTIC+0x2a0>)
 8004050:	8818      	ldrh	r0, [r3, #0]
 8004052:	b200      	sxth	r0, r0
 8004054:	f7fd f8be 	bl	80011d4 <itoa>
 8004058:	f7fd fc9e 	bl	8001998 <PrintToLCD>
		PrintToLCD("mA ");
 800405c:	4864      	ldr	r0, [pc, #400]	; (80041f0 <MenuDIAGNOSTIC+0x2a4>)
 800405e:	f7fd fc9b 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa((RegularConvData[1])));
 8004062:	4b5d      	ldr	r3, [pc, #372]	; (80041d8 <MenuDIAGNOSTIC+0x28c>)
 8004064:	8858      	ldrh	r0, [r3, #2]
 8004066:	f7fd f8b5 	bl	80011d4 <itoa>
 800406a:	f7fd fc95 	bl	8001998 <PrintToLCD>
		PrintToLCD("      ");
 800406e:	485b      	ldr	r0, [pc, #364]	; (80041dc <MenuDIAGNOSTIC+0x290>)
 8004070:	f7fd fc92 	bl	8001998 <PrintToLCD>
	if(CountShow1 == 4)
 8004074:	f994 3000 	ldrsb.w	r3, [r4]
 8004078:	2b04      	cmp	r3, #4
 800407a:	d11b      	bne.n	80040b4 <MenuDIAGNOSTIC+0x168>
		OUT_ON();
 800407c:	f7fe fb60 	bl	8002740 <OUT_ON>
		lcd_set_xy(0,0);
 8004080:	2100      	movs	r1, #0
 8004082:	4608      	mov	r0, r1
 8004084:	f7fd fc08 	bl	8001898 <lcd_set_xy>
		PrintToLCD("I(50)");
 8004088:	485a      	ldr	r0, [pc, #360]	; (80041f4 <MenuDIAGNOSTIC+0x2a8>)
 800408a:	f7fd fc85 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa(Current_x50));
 800408e:	4b5a      	ldr	r3, [pc, #360]	; (80041f8 <MenuDIAGNOSTIC+0x2ac>)
 8004090:	8818      	ldrh	r0, [r3, #0]
 8004092:	b200      	sxth	r0, r0
 8004094:	f7fd f89e 	bl	80011d4 <itoa>
 8004098:	f7fd fc7e 	bl	8001998 <PrintToLCD>
		PrintToLCD("mA ");
 800409c:	4854      	ldr	r0, [pc, #336]	; (80041f0 <MenuDIAGNOSTIC+0x2a4>)
 800409e:	f7fd fc7b 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa(RegularConvData[0]));
 80040a2:	4b4d      	ldr	r3, [pc, #308]	; (80041d8 <MenuDIAGNOSTIC+0x28c>)
 80040a4:	8818      	ldrh	r0, [r3, #0]
 80040a6:	f7fd f895 	bl	80011d4 <itoa>
 80040aa:	f7fd fc75 	bl	8001998 <PrintToLCD>
		PrintToLCD("       ");
 80040ae:	4853      	ldr	r0, [pc, #332]	; (80041fc <MenuDIAGNOSTIC+0x2b0>)
 80040b0:	f7fd fc72 	bl	8001998 <PrintToLCD>
	if(CountShow1 == 5)
 80040b4:	f994 3000 	ldrsb.w	r3, [r4]
 80040b8:	2b05      	cmp	r3, #5
 80040ba:	d13c      	bne.n	8004136 <MenuDIAGNOSTIC+0x1ea>
		CalibrationData.ResistanceComp_MOSFET= (int32_t)(U_PS-U_OUT_ForSetResistance)*10000/Current;
 80040bc:	4f44      	ldr	r7, [pc, #272]	; (80041d0 <MenuDIAGNOSTIC+0x284>)
 80040be:	4e50      	ldr	r6, [pc, #320]	; (8004200 <MenuDIAGNOSTIC+0x2b4>)
		LOAD_OFF();
 80040c0:	f7fe fd2c 	bl	8002b1c <LOAD_OFF>
		OUT_ON();
 80040c4:	f7fe fb3c 	bl	8002740 <OUT_ON>
		CalibrationData.ResistanceComp_MOSFET= (int32_t)(U_PS-U_OUT_ForSetResistance)*10000/Current;
 80040c8:	883b      	ldrh	r3, [r7, #0]
 80040ca:	8831      	ldrh	r1, [r6, #0]
 80040cc:	f8df 811c 	ldr.w	r8, [pc, #284]	; 80041ec <MenuDIAGNOSTIC+0x2a0>
 80040d0:	1a59      	subs	r1, r3, r1
 80040d2:	f242 7310 	movw	r3, #10000	; 0x2710
 80040d6:	434b      	muls	r3, r1
 80040d8:	f8b8 2000 	ldrh.w	r2, [r8]
		lcd_set_xy(0,0);
 80040dc:	2100      	movs	r1, #0
		CalibrationData.ResistanceComp_MOSFET= (int32_t)(U_PS-U_OUT_ForSetResistance)*10000/Current;
 80040de:	b212      	sxth	r2, r2
 80040e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80040e4:	4d47      	ldr	r5, [pc, #284]	; (8004204 <MenuDIAGNOSTIC+0x2b8>)
		lcd_set_xy(0,0);
 80040e6:	4608      	mov	r0, r1
		CalibrationData.ResistanceComp_MOSFET= (int32_t)(U_PS-U_OUT_ForSetResistance)*10000/Current;
 80040e8:	64ab      	str	r3, [r5, #72]	; 0x48
		lcd_set_xy(0,0);
 80040ea:	f7fd fbd5 	bl	8001898 <lcd_set_xy>
		PrintToLCD("R=");
 80040ee:	4846      	ldr	r0, [pc, #280]	; (8004208 <MenuDIAGNOSTIC+0x2bc>)
 80040f0:	f7fd fc52 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa(CalibrationData.ResistanceComp_Ishunt_Wires));
 80040f4:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80040f6:	f7fd f86d 	bl	80011d4 <itoa>
 80040fa:	f7fd fc4d 	bl	8001998 <PrintToLCD>
		PrintToLCD("mOm ");
 80040fe:	4843      	ldr	r0, [pc, #268]	; (800420c <MenuDIAGNOSTIC+0x2c0>)
 8004100:	f7fd fc4a 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa(CalibrationData.ResistanceComp_MOSFET));
 8004104:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8004106:	f7fd f865 	bl	80011d4 <itoa>
 800410a:	f7fd fc45 	bl	8001998 <PrintToLCD>
		PrintToLCD("mOm    ");
 800410e:	4840      	ldr	r0, [pc, #256]	; (8004210 <MenuDIAGNOSTIC+0x2c4>)
 8004110:	f7fd fc42 	bl	8001998 <PrintToLCD>
		Print_to_USART1_d(Current,"I: ",0);
 8004114:	f8b8 0000 	ldrh.w	r0, [r8]
 8004118:	2200      	movs	r2, #0
 800411a:	493e      	ldr	r1, [pc, #248]	; (8004214 <MenuDIAGNOSTIC+0x2c8>)
 800411c:	b200      	sxth	r0, r0
 800411e:	f001 f911 	bl	8005344 <Print_to_USART1_d>
		Print_to_USART1_d(U_PS,"U_PS: ",2);
 8004122:	8838      	ldrh	r0, [r7, #0]
 8004124:	2202      	movs	r2, #2
 8004126:	493c      	ldr	r1, [pc, #240]	; (8004218 <MenuDIAGNOSTIC+0x2cc>)
 8004128:	f001 f90c 	bl	8005344 <Print_to_USART1_d>
		Print_to_USART1_d(U_OUT_ForSetResistance,"U out: ",2);
 800412c:	8830      	ldrh	r0, [r6, #0]
 800412e:	2202      	movs	r2, #2
 8004130:	493a      	ldr	r1, [pc, #232]	; (800421c <MenuDIAGNOSTIC+0x2d0>)
 8004132:	f001 f907 	bl	8005344 <Print_to_USART1_d>
	if(CountShow1 == 6)
 8004136:	f994 3000 	ldrsb.w	r3, [r4]
 800413a:	2b06      	cmp	r3, #6
 800413c:	d10f      	bne.n	800415e <MenuDIAGNOSTIC+0x212>
		OFF();
 800413e:	f7ff f8ef 	bl	8003320 <OFF>
		lcd_set_xy(0,0);
 8004142:	2100      	movs	r1, #0
 8004144:	4608      	mov	r0, r1
 8004146:	f7fd fba7 	bl	8001898 <lcd_set_xy>
		PrintToLCD(ClockStringWithSec(time_sec,s));
 800414a:	4b35      	ldr	r3, [pc, #212]	; (8004220 <MenuDIAGNOSTIC+0x2d4>)
 800414c:	a901      	add	r1, sp, #4
 800414e:	6818      	ldr	r0, [r3, #0]
 8004150:	f7fd f95e 	bl	8001410 <ClockStringWithSec>
 8004154:	f7fd fc20 	bl	8001998 <PrintToLCD>
		PrintToLCD("        ");
 8004158:	4832      	ldr	r0, [pc, #200]	; (8004224 <MenuDIAGNOSTIC+0x2d8>)
 800415a:	f7fd fc1d 	bl	8001998 <PrintToLCD>
	if(CountShow1 == 7)
 800415e:	f994 3000 	ldrsb.w	r3, [r4]
 8004162:	2b07      	cmp	r3, #7
 8004164:	d117      	bne.n	8004196 <MenuDIAGNOSTIC+0x24a>
		OUT_ON();
 8004166:	f7fe faeb 	bl	8002740 <OUT_ON>
		lcd_set_xy(0,0);
 800416a:	2100      	movs	r1, #0
 800416c:	4608      	mov	r0, r1
 800416e:	f7fd fb93 	bl	8001898 <lcd_set_xy>
		PrintToLCD("T=");
 8004172:	482d      	ldr	r0, [pc, #180]	; (8004228 <MenuDIAGNOSTIC+0x2dc>)
 8004174:	f7fd fc10 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa(Temperature_Out));
 8004178:	4b2c      	ldr	r3, [pc, #176]	; (800422c <MenuDIAGNOSTIC+0x2e0>)
 800417a:	6818      	ldr	r0, [r3, #0]
 800417c:	f7fd f82a 	bl	80011d4 <itoa>
 8004180:	f7fd fc0a 	bl	8001998 <PrintToLCD>
		PrintToLCD("C  ");
 8004184:	482a      	ldr	r0, [pc, #168]	; (8004230 <MenuDIAGNOSTIC+0x2e4>)
 8004186:	f7fd fc07 	bl	8001998 <PrintToLCD>
		PrintToLCD(itoa(RegularConvData[3]));
 800418a:	4b13      	ldr	r3, [pc, #76]	; (80041d8 <MenuDIAGNOSTIC+0x28c>)
 800418c:	88d8      	ldrh	r0, [r3, #6]
 800418e:	f7fd f821 	bl	80011d4 <itoa>
 8004192:	f7fd fc01 	bl	8001998 <PrintToLCD>
}
 8004196:	b006      	add	sp, #24
 8004198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (key == KEY_BACK)
 800419c:	2801      	cmp	r0, #1
 800419e:	f47f aee7 	bne.w	8003f70 <MenuDIAGNOSTIC+0x24>
		CountShow1--;
 80041a2:	3b01      	subs	r3, #1
 80041a4:	b25b      	sxtb	r3, r3
		if (CountShow1<0) CountShow1=MAXITEM-1;
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	bfb8      	it	lt
 80041aa:	2307      	movlt	r3, #7
 80041ac:	e6df      	b.n	8003f6e <MenuDIAGNOSTIC+0x22>
 80041ae:	bf00      	nop
 80041b0:	20000794 	.word	0x20000794
 80041b4:	20000786 	.word	0x20000786
 80041b8:	08005f9a 	.word	0x08005f9a
 80041bc:	2000083c 	.word	0x2000083c
 80041c0:	08005f9f 	.word	0x08005f9f
 80041c4:	2000084c 	.word	0x2000084c
 80041c8:	0800613b 	.word	0x0800613b
 80041cc:	08005fa4 	.word	0x08005fa4
 80041d0:	20000854 	.word	0x20000854
 80041d4:	08006001 	.word	0x08006001
 80041d8:	20000840 	.word	0x20000840
 80041dc:	08006139 	.word	0x08006139
 80041e0:	08005fa9 	.word	0x08005fa9
 80041e4:	2000084e 	.word	0x2000084e
 80041e8:	08005faf 	.word	0x08005faf
 80041ec:	2000083e 	.word	0x2000083e
 80041f0:	08005fb4 	.word	0x08005fb4
 80041f4:	08005fb8 	.word	0x08005fb8
 80041f8:	200002b8 	.word	0x200002b8
 80041fc:	08006138 	.word	0x08006138
 8004200:	200002c0 	.word	0x200002c0
 8004204:	20000004 	.word	0x20000004
 8004208:	08005fbe 	.word	0x08005fbe
 800420c:	08005fc1 	.word	0x08005fc1
 8004210:	08005fc6 	.word	0x08005fc6
 8004214:	08005fce 	.word	0x08005fce
 8004218:	08005fd2 	.word	0x08005fd2
 800421c:	08005fd9 	.word	0x08005fd9
 8004220:	200007cc 	.word	0x200007cc
 8004224:	08006137 	.word	0x08006137
 8004228:	08005fe1 	.word	0x08005fe1
 800422c:	200002bc 	.word	0x200002bc
 8004230:	08005fe4 	.word	0x08005fe4

08004234 <adc_func>:
	Count1000mSecond++;
}


void adc_func()
{
 8004234:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	//6 3  T
	//  4 temp
	//  5 vref


	volatile int32_t Ut = 0;
 8004236:	2500      	movs	r5, #0
	volatile int32_t It_m = 0;
	#define NUM_READ 32
	//LL_DMA_DisableChannel(DMA1,LL_DMA_CHANNEL_1);


	U_Controller = 491520 / RegularConvData[5];// Uref V/10;  1200 * 4096/ChVref
 8004238:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
 800423c:	4c49      	ldr	r4, [pc, #292]	; (8004364 <adc_func+0x130>)
	volatile int32_t Ut = 0;
 800423e:	9500      	str	r5, [sp, #0]
	volatile int32_t It = 0;
 8004240:	9501      	str	r5, [sp, #4]
	volatile int32_t Ut_m = 0;
 8004242:	9502      	str	r5, [sp, #8]
	volatile int32_t It_m = 0;
 8004244:	9503      	str	r5, [sp, #12]
	U_Controller = 491520 / RegularConvData[5];// Uref V/10;  1200 * 4096/ChVref
 8004246:	8962      	ldrh	r2, [r4, #10]
	//Rt= (RegularConvData[5] *2050 )/ RegularConvData[7];
	Ut = (RegularConvData[2] * CalibrationData.CalibrationValueForU_OUT) / RegularConvData[5];
 8004248:	4e47      	ldr	r6, [pc, #284]	; (8004368 <adc_func+0x134>)
	U_Controller = 491520 / RegularConvData[5];// Uref V/10;  1200 * 4096/ChVref
 800424a:	fb93 f3f2 	sdiv	r3, r3, r2
 800424e:	4a47      	ldr	r2, [pc, #284]	; (800436c <adc_func+0x138>)
 8004250:	b29b      	uxth	r3, r3
 8004252:	8013      	strh	r3, [r2, #0]
	Ut = (RegularConvData[2] * CalibrationData.CalibrationValueForU_OUT) / RegularConvData[5];
 8004254:	88a1      	ldrh	r1, [r4, #4]
 8004256:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8004258:	8962      	ldrh	r2, [r4, #10]
 800425a:	434b      	muls	r3, r1
 800425c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004260:	9300      	str	r3, [sp, #0]
	Ut_m = middle_of_3Umax1(Ut);
 8004262:	9800      	ldr	r0, [sp, #0]
 8004264:	f7fd f9ca 	bl	80015fc <middle_of_3Umax1>
 8004268:	9002      	str	r0, [sp, #8]
	SumU1 =SumU1 + RunningAverageU1(Ut_m);
 800426a:	9802      	ldr	r0, [sp, #8]
 800426c:	f7fd f9e6 	bl	800163c <RunningAverageU1>
 8004270:	4a3f      	ldr	r2, [pc, #252]	; (8004370 <adc_func+0x13c>)
	SumU1Counter ++;
 8004272:	4940      	ldr	r1, [pc, #256]	; (8004374 <adc_func+0x140>)
	SumU1 =SumU1 + RunningAverageU1(Ut_m);
 8004274:	6813      	ldr	r3, [r2, #0]
 8004276:	4418      	add	r0, r3
 8004278:	6010      	str	r0, [r2, #0]
	SumU1Counter ++;
 800427a:	880b      	ldrh	r3, [r1, #0]
 800427c:	3301      	adds	r3, #1
 800427e:	b21b      	sxth	r3, r3
 8004280:	800b      	strh	r3, [r1, #0]
	if (SumU1Counter >= NUM_READ)
 8004282:	880b      	ldrh	r3, [r1, #0]
 8004284:	b21b      	sxth	r3, r3
 8004286:	2b1f      	cmp	r3, #31
 8004288:	dd0d      	ble.n	80042a6 <adc_func+0x72>
	{
		U_OUT = SumU1/NUM_READ;
 800428a:	2020      	movs	r0, #32
 800428c:	6813      	ldr	r3, [r2, #0]
 800428e:	fb93 f3f0 	sdiv	r3, r3, r0
 8004292:	4839      	ldr	r0, [pc, #228]	; (8004378 <adc_func+0x144>)
 8004294:	b29b      	uxth	r3, r3
 8004296:	8003      	strh	r3, [r0, #0]
		SumU1Counter = 0;
		SumU1 = 0;
		if (U_PS < 3) U_PS = 0;
 8004298:	4b38      	ldr	r3, [pc, #224]	; (800437c <adc_func+0x148>)
		SumU1Counter = 0;
 800429a:	800d      	strh	r5, [r1, #0]
		SumU1 = 0;
 800429c:	6015      	str	r5, [r2, #0]
		if (U_PS < 3) U_PS = 0;
 800429e:	881a      	ldrh	r2, [r3, #0]
 80042a0:	2a02      	cmp	r2, #2
 80042a2:	bf98      	it	ls
 80042a4:	801d      	strhls	r5, [r3, #0]
	}

	It = (RegularConvData[1] * CalibrationData.CalibrationValueForCurrent_x1*10) / RegularConvData[5] ;//  Current A/10
 80042a6:	230a      	movs	r3, #10
 80042a8:	69b0      	ldr	r0, [r6, #24]
 80042aa:	8861      	ldrh	r1, [r4, #2]
 80042ac:	4343      	muls	r3, r0
 80042ae:	434b      	muls	r3, r1
 80042b0:	8962      	ldrh	r2, [r4, #10]
 80042b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80042b6:	9301      	str	r3, [sp, #4]
	It_m = middle_of_3Imax1(It);
 80042b8:	9801      	ldr	r0, [sp, #4]
 80042ba:	f7fd f963 	bl	8001584 <middle_of_3Imax1>
 80042be:	9003      	str	r0, [sp, #12]
	SumI1 =SumI1 + RunningAverageI1(It_m);
 80042c0:	9803      	ldr	r0, [sp, #12]
 80042c2:	f7fd f9b9 	bl	8001638 <RunningAverageI1>
 80042c6:	4a2e      	ldr	r2, [pc, #184]	; (8004380 <adc_func+0x14c>)
	SumI1Counter ++;
 80042c8:	492e      	ldr	r1, [pc, #184]	; (8004384 <adc_func+0x150>)
	SumI1 =SumI1 + RunningAverageI1(It_m);
 80042ca:	6813      	ldr	r3, [r2, #0]
 80042cc:	4418      	add	r0, r3
 80042ce:	6010      	str	r0, [r2, #0]
	SumI1Counter ++;
 80042d0:	880b      	ldrh	r3, [r1, #0]
 80042d2:	3301      	adds	r3, #1
 80042d4:	b21b      	sxth	r3, r3
 80042d6:	800b      	strh	r3, [r1, #0]
	if (SumI1Counter >= NUM_READ)
 80042d8:	880b      	ldrh	r3, [r1, #0]
 80042da:	b21b      	sxth	r3, r3
 80042dc:	2b1f      	cmp	r3, #31
 80042de:	dd09      	ble.n	80042f4 <adc_func+0xc0>
	{
		Current_x1 = SumI1/NUM_READ;
 80042e0:	2020      	movs	r0, #32
 80042e2:	6813      	ldr	r3, [r2, #0]
 80042e4:	fb93 f3f0 	sdiv	r3, r3, r0
 80042e8:	4827      	ldr	r0, [pc, #156]	; (8004388 <adc_func+0x154>)
 80042ea:	b21b      	sxth	r3, r3
 80042ec:	8003      	strh	r3, [r0, #0]
		SumI1Counter = 0;
 80042ee:	2300      	movs	r3, #0
 80042f0:	800b      	strh	r3, [r1, #0]
		SumI1 = 0;
 80042f2:	6013      	str	r3, [r2, #0]
	}

	It= (RegularConvData[0] * CalibrationData.CalibrationValueForCurrent_x50*10) / RegularConvData[5] ;//  Current A/10
 80042f4:	230a      	movs	r3, #10
 80042f6:	6a30      	ldr	r0, [r6, #32]
 80042f8:	8821      	ldrh	r1, [r4, #0]
 80042fa:	4343      	muls	r3, r0
 80042fc:	434b      	muls	r3, r1
 80042fe:	8962      	ldrh	r2, [r4, #10]
 8004300:	fbb3 f3f2 	udiv	r3, r3, r2
 8004304:	9301      	str	r3, [sp, #4]
	It_m = middle_of_3Imax2(It);
 8004306:	9801      	ldr	r0, [sp, #4]
 8004308:	f7fd f95a 	bl	80015c0 <middle_of_3Imax2>
 800430c:	9003      	str	r0, [sp, #12]
	SumI2 =SumI2 + RunningAverageI2(It_m);
 800430e:	9803      	ldr	r0, [sp, #12]
 8004310:	f7fd f993 	bl	800163a <RunningAverageI2>
 8004314:	4a1d      	ldr	r2, [pc, #116]	; (800438c <adc_func+0x158>)
	SumI2Counter ++;
 8004316:	491e      	ldr	r1, [pc, #120]	; (8004390 <adc_func+0x15c>)
	SumI2 =SumI2 + RunningAverageI2(It_m);
 8004318:	6813      	ldr	r3, [r2, #0]
 800431a:	4418      	add	r0, r3
 800431c:	6010      	str	r0, [r2, #0]
	SumI2Counter ++;
 800431e:	880b      	ldrh	r3, [r1, #0]
 8004320:	481c      	ldr	r0, [pc, #112]	; (8004394 <adc_func+0x160>)
 8004322:	3301      	adds	r3, #1
 8004324:	b21b      	sxth	r3, r3
 8004326:	800b      	strh	r3, [r1, #0]
	if (SumI2Counter >= NUM_READ)
 8004328:	880b      	ldrh	r3, [r1, #0]
 800432a:	b21b      	sxth	r3, r3
 800432c:	2b1f      	cmp	r3, #31
 800432e:	dd08      	ble.n	8004342 <adc_func+0x10e>
	{
		Current_x50 = SumI2/NUM_READ;
 8004330:	2420      	movs	r4, #32
 8004332:	6813      	ldr	r3, [r2, #0]
 8004334:	fb93 f3f4 	sdiv	r3, r3, r4
 8004338:	b21b      	sxth	r3, r3
 800433a:	8003      	strh	r3, [r0, #0]
		SumI2Counter = 0;
 800433c:	2300      	movs	r3, #0
 800433e:	800b      	strh	r3, [r1, #0]
		SumI2 = 0;
 8004340:	6013      	str	r3, [r2, #0]
	}

	if (Current_x50<=1000)
 8004342:	8803      	ldrh	r3, [r0, #0]
 8004344:	4a14      	ldr	r2, [pc, #80]	; (8004398 <adc_func+0x164>)
 8004346:	b21b      	sxth	r3, r3
 8004348:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		Current = Current_x50;
	else
		Current = 10*Current_x1;
 800434c:	bfc9      	itett	gt
 800434e:	4b0e      	ldrgt	r3, [pc, #56]	; (8004388 <adc_func+0x154>)
		Current = Current_x50;
 8004350:	8803      	ldrhle	r3, [r0, #0]
		Current = 10*Current_x1;
 8004352:	881b      	ldrhgt	r3, [r3, #0]
 8004354:	eb03 0383 	addgt.w	r3, r3, r3, lsl #2
 8004358:	bfc4      	itt	gt
 800435a:	005b      	lslgt	r3, r3, #1
 800435c:	b21b      	sxthgt	r3, r3
 800435e:	8013      	strh	r3, [r2, #0]


	 //LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_1);
}
 8004360:	b004      	add	sp, #16
 8004362:	bd70      	pop	{r4, r5, r6, pc}
 8004364:	20000840 	.word	0x20000840
 8004368:	20000004 	.word	0x20000004
 800436c:	2000084c 	.word	0x2000084c
 8004370:	200007ac 	.word	0x200007ac
 8004374:	200007b0 	.word	0x200007b0
 8004378:	2000084e 	.word	0x2000084e
 800437c:	20000854 	.word	0x20000854
 8004380:	2000079c 	.word	0x2000079c
 8004384:	200007a0 	.word	0x200007a0
 8004388:	200002b6 	.word	0x200002b6
 800438c:	200007a4 	.word	0x200007a4
 8004390:	200007a8 	.word	0x200007a8
 8004394:	200002b8 	.word	0x200002b8
 8004398:	2000083e 	.word	0x2000083e

0800439c <SysTick_Callback>:
{
 800439c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ENC_PollEncoder();
 800439e:	f7fe f91d 	bl	80025dc <ENC_PollEncoder>
	TimerForReadyMeasurement_ms++;
 80043a2:	4a35      	ldr	r2, [pc, #212]	; (8004478 <SysTick_Callback+0xdc>)
	if (Count10mSecond >= 10)
 80043a4:	4e35      	ldr	r6, [pc, #212]	; (800447c <SysTick_Callback+0xe0>)
	TimerForReadyMeasurement_ms++;
 80043a6:	6813      	ldr	r3, [r2, #0]
 80043a8:	3301      	adds	r3, #1
 80043aa:	6013      	str	r3, [r2, #0]
    if (U_OUT > 1000) GPIOB->BSRR =  GPIO_BSRR_BS0;
 80043ac:	4b34      	ldr	r3, [pc, #208]	; (8004480 <SysTick_Callback+0xe4>)
 80043ae:	881a      	ldrh	r2, [r3, #0]
 80043b0:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80043b4:	bf82      	ittt	hi
 80043b6:	2101      	movhi	r1, #1
 80043b8:	4a32      	ldrhi	r2, [pc, #200]	; (8004484 <SysTick_Callback+0xe8>)
 80043ba:	6111      	strhi	r1, [r2, #16]
    if (U_OUT < 900)  GPIOB->BSRR =  GPIO_BSRR_BR0;
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80043c2:	bf3e      	ittt	cc
 80043c4:	f44f 3280 	movcc.w	r2, #65536	; 0x10000
 80043c8:	4b2e      	ldrcc	r3, [pc, #184]	; (8004484 <SysTick_Callback+0xe8>)
 80043ca:	611a      	strcc	r2, [r3, #16]
	if (Count10mSecond >= 10)
 80043cc:	8833      	ldrh	r3, [r6, #0]
 80043ce:	2b09      	cmp	r3, #9
 80043d0:	d903      	bls.n	80043da <SysTick_Callback+0x3e>
		Count10mSecond = 0;
 80043d2:	2300      	movs	r3, #0
 80043d4:	8033      	strh	r3, [r6, #0]
		adc_func();
 80043d6:	f7ff ff2d 	bl	8004234 <adc_func>
	if (Count100mSecond >= 100)
 80043da:	4d2b      	ldr	r5, [pc, #172]	; (8004488 <SysTick_Callback+0xec>)
	if (Count1000mSecond >= 1000)
 80043dc:	4c2b      	ldr	r4, [pc, #172]	; (800448c <SysTick_Callback+0xf0>)
	if (Count100mSecond >= 100)
 80043de:	882b      	ldrh	r3, [r5, #0]
 80043e0:	2b63      	cmp	r3, #99	; 0x63
		Count100mSecond = 0;
 80043e2:	bf84      	itt	hi
 80043e4:	2300      	movhi	r3, #0
 80043e6:	802b      	strhhi	r3, [r5, #0]
	if (Count1000mSecond >= 1000)
 80043e8:	8823      	ldrh	r3, [r4, #0]
 80043ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043ee:	d336      	bcc.n	800445e <SysTick_Callback+0xc2>
		Count1000mSecond = 0;
 80043f0:	2300      	movs	r3, #0
		if (Current < 2)
 80043f2:	4f27      	ldr	r7, [pc, #156]	; (8004490 <SysTick_Callback+0xf4>)
		Count1000mSecond = 0;
 80043f4:	8023      	strh	r3, [r4, #0]
		if (Current < 2)
 80043f6:	883b      	ldrh	r3, [r7, #0]
 80043f8:	b21b      	sxth	r3, r3
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	dc07      	bgt.n	800440e <SysTick_Callback+0x72>
			BatteryCapacityDischargeCurrent = BatteryCapacityDischargeCurrent + Module16(Current);
 80043fe:	8838      	ldrh	r0, [r7, #0]
 8004400:	b200      	sxth	r0, r0
 8004402:	f7fc ffc3 	bl	800138c <Module16>
 8004406:	4a23      	ldr	r2, [pc, #140]	; (8004494 <SysTick_Callback+0xf8>)
 8004408:	6813      	ldr	r3, [r2, #0]
 800440a:	4418      	add	r0, r3
 800440c:	6010      	str	r0, [r2, #0]
		if (Current > 2)
 800440e:	883b      	ldrh	r3, [r7, #0]
 8004410:	b21b      	sxth	r3, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	dd07      	ble.n	8004426 <SysTick_Callback+0x8a>
			BatteryCapacityCharge = BatteryCapacityCharge + Module16(Current);
 8004416:	8838      	ldrh	r0, [r7, #0]
 8004418:	b200      	sxth	r0, r0
 800441a:	f7fc ffb7 	bl	800138c <Module16>
 800441e:	4a1e      	ldr	r2, [pc, #120]	; (8004498 <SysTick_Callback+0xfc>)
 8004420:	6813      	ldr	r3, [r2, #0]
 8004422:	4418      	add	r0, r3
 8004424:	6010      	str	r0, [r2, #0]
		if (ChargeStatusForTimer == 1)
 8004426:	4b1d      	ldr	r3, [pc, #116]	; (800449c <SysTick_Callback+0x100>)
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	2b01      	cmp	r3, #1
			ChargeTimeSec++;
 800442c:	bf01      	itttt	eq
 800442e:	4a1c      	ldreq	r2, [pc, #112]	; (80044a0 <SysTick_Callback+0x104>)
 8004430:	6813      	ldreq	r3, [r2, #0]
 8004432:	3301      	addeq	r3, #1
 8004434:	6013      	streq	r3, [r2, #0]
		if (DisChargeStatusForTimer == 1)
 8004436:	4b1b      	ldr	r3, [pc, #108]	; (80044a4 <SysTick_Callback+0x108>)
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b01      	cmp	r3, #1
			DischargeTimeSec++;
 800443c:	bf01      	itttt	eq
 800443e:	4a1a      	ldreq	r2, [pc, #104]	; (80044a8 <SysTick_Callback+0x10c>)
 8004440:	6813      	ldreq	r3, [r2, #0]
 8004442:	3301      	addeq	r3, #1
 8004444:	6013      	streq	r3, [r2, #0]
		if (Status_Timer_Sec == 1)
 8004446:	4b19      	ldr	r3, [pc, #100]	; (80044ac <SysTick_Callback+0x110>)
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	2b01      	cmp	r3, #1
			Timer_Sec++;
 800444c:	bf01      	itttt	eq
 800444e:	4a18      	ldreq	r2, [pc, #96]	; (80044b0 <SysTick_Callback+0x114>)
 8004450:	6813      	ldreq	r3, [r2, #0]
 8004452:	3301      	addeq	r3, #1
 8004454:	6013      	streq	r3, [r2, #0]
		time_sec++;
 8004456:	4a17      	ldr	r2, [pc, #92]	; (80044b4 <SysTick_Callback+0x118>)
 8004458:	6813      	ldr	r3, [r2, #0]
 800445a:	3301      	adds	r3, #1
 800445c:	6013      	str	r3, [r2, #0]
	Count10mSecond++;
 800445e:	8833      	ldrh	r3, [r6, #0]
 8004460:	3301      	adds	r3, #1
 8004462:	b29b      	uxth	r3, r3
 8004464:	8033      	strh	r3, [r6, #0]
	Count100mSecond++;
 8004466:	882b      	ldrh	r3, [r5, #0]
 8004468:	3301      	adds	r3, #1
 800446a:	b29b      	uxth	r3, r3
 800446c:	802b      	strh	r3, [r5, #0]
	Count1000mSecond++;
 800446e:	8823      	ldrh	r3, [r4, #0]
 8004470:	3301      	adds	r3, #1
 8004472:	b29b      	uxth	r3, r3
 8004474:	8023      	strh	r3, [r4, #0]
}
 8004476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004478:	200007b4 	.word	0x200007b4
 800447c:	200002b4 	.word	0x200002b4
 8004480:	2000084e 	.word	0x2000084e
 8004484:	40010c00 	.word	0x40010c00
 8004488:	200002b2 	.word	0x200002b2
 800448c:	200002b0 	.word	0x200002b0
 8004490:	2000083e 	.word	0x2000083e
 8004494:	20000774 	.word	0x20000774
 8004498:	20000770 	.word	0x20000770
 800449c:	2000077f 	.word	0x2000077f
 80044a0:	20000780 	.word	0x20000780
 80044a4:	2000078a 	.word	0x2000078a
 80044a8:	2000078c 	.word	0x2000078c
 80044ac:	20000799 	.word	0x20000799
 80044b0:	200007b8 	.word	0x200007b8
 80044b4:	200007cc 	.word	0x200007cc

080044b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80044b8:	b510      	push	{r4, lr}
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80044ba:	4c1d      	ldr	r4, [pc, #116]	; (8004530 <SystemClock_Config+0x78>)
 80044bc:	6823      	ldr	r3, [r4, #0]
 80044be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c2:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80044c4:	6823      	ldr	r3, [r4, #0]
  LL_RCC_HSE_Enable();

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80044c6:	039a      	lsls	r2, r3, #14
 80044c8:	d5fc      	bpl.n	80044c4 <SystemClock_Config+0xc>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80044ca:	6863      	ldr	r3, [r4, #4]
 80044cc:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80044d0:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80044d4:	6063      	str	r3, [r4, #4]
#if defined(RCC_CFGR2_PREDIV1)
#if defined(RCC_CFGR2_PREDIV1SRC)
  MODIFY_REG(RCC->CFGR2, (RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC),
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
 80044d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80044d8:	f023 030f 	bic.w	r3, r3, #15
 80044dc:	62e3      	str	r3, [r4, #44]	; 0x2c
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80044de:	6823      	ldr	r3, [r4, #0]
 80044e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044e4:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80044e6:	6823      	ldr	r3, [r4, #0]
  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_3);
  LL_RCC_PLL_Enable();

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80044e8:	019b      	lsls	r3, r3, #6
 80044ea:	d5fc      	bpl.n	80044e6 <SystemClock_Config+0x2e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80044ec:	6863      	ldr	r3, [r4, #4]
 80044ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044f2:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80044f4:	6863      	ldr	r3, [r4, #4]
 80044f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80044fa:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80044fc:	6863      	ldr	r3, [r4, #4]
 80044fe:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004502:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004504:	6863      	ldr	r3, [r4, #4]
 8004506:	f023 0303 	bic.w	r3, r3, #3
 800450a:	f043 0302 	orr.w	r3, r3, #2
 800450e:	6063      	str	r3, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004510:	6863      	ldr	r3, [r4, #4]
 8004512:	f003 030c 	and.w	r3, r3, #12
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004516:	2b08      	cmp	r3, #8
 8004518:	d1fa      	bne.n	8004510 <SystemClock_Config+0x58>
  {

  }
  LL_Init1msTick(24000000);
 800451a:	4806      	ldr	r0, [pc, #24]	; (8004534 <SystemClock_Config+0x7c>)
 800451c:	f001 f946 	bl	80057ac <LL_Init1msTick>
  LL_SetSystemCoreClock(24000000);
 8004520:	4804      	ldr	r0, [pc, #16]	; (8004534 <SystemClock_Config+0x7c>)
 8004522:	f001 f951 	bl	80057c8 <LL_SetSystemCoreClock>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 8004526:	6863      	ldr	r3, [r4, #4]
 8004528:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800452c:	6063      	str	r3, [r4, #4]
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_2);
}
 800452e:	bd10      	pop	{r4, pc}
 8004530:	40021000 	.word	0x40021000
 8004534:	016e3600 	.word	0x016e3600

08004538 <main>:
{
 8004538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 800453c:	2001      	movs	r0, #1
{
 800453e:	b095      	sub	sp, #84	; 0x54
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004540:	f8df 9388 	ldr.w	r9, [pc, #904]	; 80048cc <main+0x394>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8004544:	f7fd fa50 	bl	80019e8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8004548:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800454c:	f7fd fa3e 	bl	80019cc <LL_APB1_GRP1_EnableClock>
 8004550:	f8d9 200c 	ldr.w	r2, [r9, #12]
  reg_value  =  (reg_value                                   |
 8004554:	4bc9      	ldr	r3, [pc, #804]	; (800487c <main+0x344>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004556:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800455a:	0412      	lsls	r2, r2, #16
 800455c:	0c12      	lsrs	r2, r2, #16
  reg_value  =  (reg_value                                   |
 800455e:	4313      	orrs	r3, r2
  SCB->AIRCR =  reg_value;
 8004560:	f8c9 300c 	str.w	r3, [r9, #12]
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8004564:	4bc6      	ldr	r3, [pc, #792]	; (8004880 <main+0x348>)
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8004566:	4ec7      	ldr	r6, [pc, #796]	; (8004884 <main+0x34c>)
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8004568:	685a      	ldr	r2, [r3, #4]

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_15;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800456a:	2400      	movs	r4, #0
 800456c:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8004570:	605a      	str	r2, [r3, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8004572:	685a      	ldr	r2, [r3, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004574:	2501      	movs	r5, #1
 8004576:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800457a:	605a      	str	r2, [r3, #4]
  SystemClock_Config();
 800457c:	f7ff ff9c 	bl	80044b8 <SystemClock_Config>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004580:	2214      	movs	r2, #20
 8004582:	2100      	movs	r1, #0
 8004584:	a80d      	add	r0, sp, #52	; 0x34
 8004586:	f001 f954 	bl	8005832 <memset>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 800458a:	2020      	movs	r0, #32
 800458c:	f7fd fa2c 	bl	80019e8 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8004590:	2004      	movs	r0, #4
 8004592:	f7fd fa29 	bl	80019e8 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8004596:	2008      	movs	r0, #8
 8004598:	f7fd fa26 	bl	80019e8 <LL_APB2_GRP1_EnableClock>
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800459c:	f248 0301 	movw	r3, #32769	; 0x8001
 80045a0:	6173      	str	r3, [r6, #20]
 80045a2:	f64f 5303 	movw	r3, #64771	; 0xfd03
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80045a6:	2702      	movs	r7, #2
  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12|LL_GPIO_PIN_13
                          |LL_GPIO_PIN_14|LL_GPIO_PIN_15;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80045a8:	f04f 0804 	mov.w	r8, #4
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80045ac:	f04f 0b08 	mov.w	fp, #8
 80045b0:	f8df a31c 	ldr.w	sl, [pc, #796]	; 80048d0 <main+0x398>
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045b4:	a90d      	add	r1, sp, #52	; 0x34
 80045b6:	f8ca 3014 	str.w	r3, [sl, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80045ba:	4bb3      	ldr	r3, [pc, #716]	; (8004888 <main+0x350>)
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045bc:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80045be:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80045c2:	e9cd 740f 	strd	r7, r4, [sp, #60]	; 0x3c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045c6:	f000 ff5a 	bl	800547e <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_8;
 80045ca:	4bb0      	ldr	r3, [pc, #704]	; (800488c <main+0x354>)
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045cc:	a90d      	add	r1, sp, #52	; 0x34
 80045ce:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80045d0:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80045d4:	e9cd 740f 	strd	r7, r4, [sp, #60]	; 0x3c
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045d8:	f000 ff51 	bl	800547e <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12|LL_GPIO_PIN_13
 80045dc:	4bac      	ldr	r3, [pc, #688]	; (8004890 <main+0x358>)
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045de:	a90d      	add	r1, sp, #52	; 0x34
 80045e0:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80045e2:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80045e6:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80045ea:	970f      	str	r7, [sp, #60]	; 0x3c
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045ec:	f000 ff47 	bl	800547e <LL_GPIO_Init>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80045f0:	4ba8      	ldr	r3, [pc, #672]	; (8004894 <main+0x35c>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045f2:	a90d      	add	r1, sp, #52	; 0x34
 80045f4:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80045f6:	e9cd 3b0d 	strd	r3, fp, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80045fa:	9511      	str	r5, [sp, #68]	; 0x44
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045fc:	f000 ff3f 	bl	800547e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8004600:	f24f 03f0 	movw	r3, #61680	; 0xf0f0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004604:	a90d      	add	r1, sp, #52	; 0x34
 8004606:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004608:	e9cd 3b0d 	strd	r3, fp, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800460c:	9511      	str	r5, [sp, #68]	; 0x44
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800460e:	f000 ff36 	bl	800547e <LL_GPIO_Init>
  SET_BIT(RCC->AHBENR, Periphs);
 8004612:	4ba1      	ldr	r3, [pc, #644]	; (8004898 <main+0x360>)
 8004614:	695a      	ldr	r2, [r3, #20]
 8004616:	432a      	orrs	r2, r5
 8004618:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	402b      	ands	r3, r5
 800461e:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8004620:	9b05      	ldr	r3, [sp, #20]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004622:	f8d9 000c 	ldr.w	r0, [r9, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004626:	4d9d      	ldr	r5, [pc, #628]	; (800489c <main+0x364>)
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004628:	f3c0 2002 	ubfx	r0, r0, #8, #3
 800462c:	f7fd fb6a 	bl	8001d04 <NVIC_EncodePriority.constprop.33>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004630:	f44f 6300 	mov.w	r3, #2048	; 0x800
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004634:	fa00 f008 	lsl.w	r0, r0, r8
 8004638:	b2c0      	uxtb	r0, r0
 800463a:	f885 030b 	strb.w	r0, [r5, #779]	; 0x30b
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800463e:	221c      	movs	r2, #28
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004640:	602b      	str	r3, [r5, #0]
 8004642:	4621      	mov	r1, r4
 8004644:	a80d      	add	r0, sp, #52	; 0x34
 8004646:	f001 f8f4 	bl	8005832 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800464a:	2214      	movs	r2, #20
 800464c:	4621      	mov	r1, r4
 800464e:	a808      	add	r0, sp, #32
 8004650:	f001 f8ef 	bl	8005832 <memset>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8004654:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004658:	f7fd f9c6 	bl	80019e8 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800465c:	4640      	mov	r0, r8
 800465e:	f7fd f9c3 	bl	80019e8 <LL_APB2_GRP1_EnableClock>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004662:	2309      	movs	r3, #9
 8004664:	4a8e      	ldr	r2, [pc, #568]	; (80048a0 <main+0x368>)
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004666:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004668:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800466c:	2303      	movs	r3, #3
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800466e:	4630      	mov	r0, r6
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004670:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004674:	f000 ff03 	bl	800547e <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8004678:	4b8a      	ldr	r3, [pc, #552]	; (80048a4 <main+0x36c>)
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800467a:	a908      	add	r1, sp, #32
 800467c:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 800467e:	e9cd 3808 	strd	r3, r8, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004682:	f000 fefc 	bl	800547e <LL_GPIO_Init>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004686:	f8d9 000c 	ldr.w	r0, [r9, #12]
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 800468a:	f44f 7980 	mov.w	r9, #256	; 0x100
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800468e:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8004692:	f7fd fb37 	bl	8001d04 <NVIC_EncodePriority.constprop.33>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004696:	2320      	movs	r3, #32
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004698:	fa00 f008 	lsl.w	r0, r0, r8
 800469c:	b2c0      	uxtb	r0, r0
 800469e:	f885 0325 	strb.w	r0, [r5, #805]	; 0x325
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046a2:	606b      	str	r3, [r5, #4]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80046a4:	4d80      	ldr	r5, [pc, #512]	; (80048a8 <main+0x370>)
  LL_USART_Init(USART1, &USART_InitStruct);
 80046a6:	a90d      	add	r1, sp, #52	; 0x34
 80046a8:	68eb      	ldr	r3, [r5, #12]
 80046aa:	4628      	mov	r0, r5
 80046ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046b0:	60eb      	str	r3, [r5, #12]
  USART_InitStruct.BaudRate = 38400;
 80046b2:	f44f 4316 	mov.w	r3, #38400	; 0x9600
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80046b6:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80046ba:	230c      	movs	r3, #12
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80046bc:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80046c0:	e9cd 3411 	strd	r3, r4, [sp, #68]	; 0x44
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80046c4:	9413      	str	r4, [sp, #76]	; 0x4c
  LL_USART_Init(USART1, &USART_InitStruct);
 80046c6:	f001 f803 	bl	80056d0 <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046ca:	692b      	ldr	r3, [r5, #16]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80046cc:	2214      	movs	r2, #20
 80046ce:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80046d2:	612b      	str	r3, [r5, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80046d4:	696b      	ldr	r3, [r5, #20]
 80046d6:	4621      	mov	r1, r4
 80046d8:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80046dc:	616b      	str	r3, [r5, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80046de:	68eb      	ldr	r3, [r5, #12]
 80046e0:	a808      	add	r0, sp, #32
 80046e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80046e6:	60eb      	str	r3, [r5, #12]
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80046e8:	e9cd 4406 	strd	r4, r4, [sp, #24]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80046ec:	f001 f8a1 	bl	8005832 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046f0:	2214      	movs	r2, #20
 80046f2:	4621      	mov	r1, r4
 80046f4:	a80d      	add	r0, sp, #52	; 0x34
 80046f6:	f001 f89c 	bl	8005832 <memset>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 80046fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80046fe:	f7fd f973 	bl	80019e8 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8004702:	4640      	mov	r0, r8
 8004704:	f7fd f970 	bl	80019e8 <LL_APB2_GRP1_EnableClock>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_6;
 8004708:	f644 634e 	movw	r3, #20046	; 0x4e4e
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800470c:	a90d      	add	r1, sp, #52	; 0x34
 800470e:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004710:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004714:	f000 feb3 	bl	800547e <LL_GPIO_Init>
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8004718:	4b64      	ldr	r3, [pc, #400]	; (80048ac <main+0x374>)
  LL_DMA_ConfigAddresses(DMA1,
 800471a:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 80048d4 <main+0x39c>
 800471e:	681a      	ldr	r2, [r3, #0]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8004720:	f5a5 55a0 	sub.w	r5, r5, #5120	; 0x1400
 8004724:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004728:	f022 0210 	bic.w	r2, r2, #16
 800472c:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	a906      	add	r1, sp, #24
 8004732:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004736:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800473a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	4628      	mov	r0, r5
 8004740:	f042 0220 	orr.w	r2, r2, #32
 8004744:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800474c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004754:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800475c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004760:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004768:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800476c:	601a      	str	r2, [r3, #0]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
  }
  /* Direction Periph to Memory and Memory to Memory */
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 800476e:	4a50      	ldr	r2, [pc, #320]	; (80048b0 <main+0x378>)
 8004770:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8004772:	f8c3 800c 	str.w	r8, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	0c12      	lsrs	r2, r2, #16
 800477a:	0412      	lsls	r2, r2, #16
 800477c:	f042 0206 	orr.w	r2, r2, #6
 8004780:	605a      	str	r2, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	f042 0201 	orr.w	r2, r2, #1
 8004788:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800478a:	9406      	str	r4, [sp, #24]
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 800478c:	f8cd 901c 	str.w	r9, [sp, #28]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8004790:	f000 fe15 	bl	80053be <LL_ADC_Init>
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS;
 8004794:	f44f 03a0 	mov.w	r3, #5242880	; 0x500000
 8004798:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 800479c:	4628      	mov	r0, r5
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS;
 800479e:	e9cd 1308 	strd	r1, r3, [sp, #32]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80047a2:	a908      	add	r1, sp, #32
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 80047a4:	e9cd 470a 	strd	r4, r7, [sp, #40]	; 0x28
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 80047a8:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80047ac:	f000 fe1c 	bl	80053e8 <LL_ADC_REG_Init>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 80047b0:	4940      	ldr	r1, [pc, #256]	; (80048b4 <main+0x37c>)
 80047b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80047b6:	f7fd fa89 	bl	8001ccc <LL_ADC_REG_SetSequencerRanks.constprop.32>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 80047ba:	483e      	ldr	r0, [pc, #248]	; (80048b4 <main+0x37c>)
 80047bc:	f7fd fa5c 	bl	8001c78 <LL_ADC_SetChannelSamplingTime.constprop.31>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_2);
 80047c0:	493d      	ldr	r1, [pc, #244]	; (80048b8 <main+0x380>)
 80047c2:	f240 2005 	movw	r0, #517	; 0x205
 80047c6:	f7fd fa81 	bl	8001ccc <LL_ADC_REG_SetSequencerRanks.constprop.32>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 80047ca:	483b      	ldr	r0, [pc, #236]	; (80048b8 <main+0x380>)
 80047cc:	f7fd fa54 	bl	8001c78 <LL_ADC_SetChannelSamplingTime.constprop.31>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_3);
 80047d0:	493a      	ldr	r1, [pc, #232]	; (80048bc <main+0x384>)
 80047d2:	f240 200a 	movw	r0, #522	; 0x20a
 80047d6:	f7fd fa79 	bl	8001ccc <LL_ADC_REG_SetSequencerRanks.constprop.32>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 80047da:	4838      	ldr	r0, [pc, #224]	; (80048bc <main+0x384>)
 80047dc:	f7fd fa4c 	bl	8001c78 <LL_ADC_SetChannelSamplingTime.constprop.31>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_6);
 80047e0:	4937      	ldr	r1, [pc, #220]	; (80048c0 <main+0x388>)
 80047e2:	f240 200f 	movw	r0, #527	; 0x20f
 80047e6:	f7fd fa71 	bl	8001ccc <LL_ADC_REG_SetSequencerRanks.constprop.32>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 80047ea:	4835      	ldr	r0, [pc, #212]	; (80048c0 <main+0x388>)
 80047ec:	f7fd fa44 	bl	8001c78 <LL_ADC_SetChannelSamplingTime.constprop.31>
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_TEMPSENSOR);
 80047f0:	4934      	ldr	r1, [pc, #208]	; (80048c4 <main+0x38c>)
 80047f2:	f44f 7005 	mov.w	r0, #532	; 0x214
 80047f6:	f7fd fa69 	bl	8001ccc <LL_ADC_REG_SetSequencerRanks.constprop.32>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_TEMPSENSOR, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 80047fa:	4832      	ldr	r0, [pc, #200]	; (80048c4 <main+0x38c>)
 80047fc:	f7fd fa3c 	bl	8001c78 <LL_ADC_SetChannelSamplingTime.constprop.31>
  MODIFY_REG(ADCxy_COMMON->CR2, (ADC_CR2_TSVREFE), PathInternal);
 8004800:	68ab      	ldr	r3, [r5, #8]
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_VREFINT);
 8004802:	4931      	ldr	r1, [pc, #196]	; (80048c8 <main+0x390>)
 8004804:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004808:	60ab      	str	r3, [r5, #8]
 800480a:	f240 2019 	movw	r0, #537	; 0x219
 800480e:	f7fd fa5d 	bl	8001ccc <LL_ADC_REG_SetSequencerRanks.constprop.32>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8004812:	482d      	ldr	r0, [pc, #180]	; (80048c8 <main+0x390>)
 8004814:	f7fd fa30 	bl	8001c78 <LL_ADC_SetChannelSamplingTime.constprop.31>
 8004818:	68ab      	ldr	r3, [r5, #8]
	  delay_ms(100);
 800481a:	2064      	movs	r0, #100	; 0x64
 800481c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004820:	60ab      	str	r3, [r5, #8]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8004822:	68ab      	ldr	r3, [r5, #8]
 8004824:	f043 0301 	orr.w	r3, r3, #1
 8004828:	60ab      	str	r3, [r5, #8]
 800482a:	f7fc fbb7 	bl	8000f9c <delay_ms>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 800482e:	68ab      	ldr	r3, [r5, #8]
 8004830:	f043 0304 	orr.w	r3, r3, #4
 8004834:	60ab      	str	r3, [r5, #8]
 8004836:	e9cd 6800 	strd	r6, r8, [sp]
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 800483a:	68ac      	ldr	r4, [r5, #8]
	  while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0) {}
 800483c:	f014 0404 	ands.w	r4, r4, #4
 8004840:	d1fb      	bne.n	800483a <main+0x302>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004842:	68ab      	ldr	r3, [r5, #8]
  LL_DAC_InitTypeDef DAC_InitStruct = {0};
 8004844:	2210      	movs	r2, #16
 8004846:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 800484a:	60ab      	str	r3, [r5, #8]
 800484c:	4621      	mov	r1, r4
 800484e:	a808      	add	r0, sp, #32
 8004850:	f000 ffef 	bl	8005832 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004854:	2214      	movs	r2, #20
 8004856:	4621      	mov	r1, r4
 8004858:	a80d      	add	r0, sp, #52	; 0x34
 800485a:	f000 ffea 	bl	8005832 <memset>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_DAC1);
 800485e:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8004862:	f7fd f8b3 	bl	80019cc <LL_APB1_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8004866:	2004      	movs	r0, #4
 8004868:	f7fd f8be 	bl	80019e8 <LL_APB2_GRP1_EnableClock>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 800486c:	f243 0330 	movw	r3, #12336	; 0x3030
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004870:	4e16      	ldr	r6, [pc, #88]	; (80048cc <main+0x394>)
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004872:	a90d      	add	r1, sp, #52	; 0x34
 8004874:	4803      	ldr	r0, [pc, #12]	; (8004884 <main+0x34c>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004876:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800487a:	e02d      	b.n	80048d8 <main+0x3a0>
 800487c:	05fa0300 	.word	0x05fa0300
 8004880:	40010000 	.word	0x40010000
 8004884:	40010800 	.word	0x40010800
 8004888:	04800181 	.word	0x04800181
 800488c:	04010303 	.word	0x04010303
 8004890:	04fc00fc 	.word	0x04fc00fc
 8004894:	04190019 	.word	0x04190019
 8004898:	40021000 	.word	0x40021000
 800489c:	e000e100 	.word	0xe000e100
 80048a0:	04020002 	.word	0x04020002
 80048a4:	04040004 	.word	0x04040004
 80048a8:	40013800 	.word	0x40013800
 80048ac:	40020008 	.word	0x40020008
 80048b0:	4001244c 	.word	0x4001244c
 80048b4:	02300001 	.word	0x02300001
 80048b8:	02600002 	.word	0x02600002
 80048bc:	02900003 	.word	0x02900003
 80048c0:	03200006 	.word	0x03200006
 80048c4:	81200010 	.word	0x81200010
 80048c8:	81500011 	.word	0x81500011
 80048cc:	e000ed00 	.word	0xe000ed00
 80048d0:	40010c00 	.word	0x40010c00
 80048d4:	20000840 	.word	0x20000840
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048d8:	f000 fdd1 	bl	800547e <LL_GPIO_Init>
 80048dc:	68f0      	ldr	r0, [r6, #12]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048de:	f44f 0880 	mov.w	r8, #4194304	; 0x400000
  NVIC_SetPriority(TIM6_DAC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80048e2:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80048e6:	f7fd fa0d 	bl	8001d04 <NVIC_EncodePriority.constprop.33>
  DAC_InitStruct.TriggerSource = LL_DAC_TRIG_SOFTWARE;
 80048ea:	2338      	movs	r3, #56	; 0x38
  LL_DAC_Init(DAC, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 80048ec:	4db4      	ldr	r5, [pc, #720]	; (8004bc0 <main+0x688>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048ee:	4fb5      	ldr	r7, [pc, #724]	; (8004bc4 <main+0x68c>)
 80048f0:	0100      	lsls	r0, r0, #4
 80048f2:	b2c0      	uxtb	r0, r0
 80048f4:	f887 0336 	strb.w	r0, [r7, #822]	; 0x336
 80048f8:	aa08      	add	r2, sp, #32
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048fa:	f8c7 8004 	str.w	r8, [r7, #4]
 80048fe:	49b2      	ldr	r1, [pc, #712]	; (8004bc8 <main+0x690>)
 8004900:	4628      	mov	r0, r5
  DAC_InitStruct.WaveAutoGeneration = LL_DAC_WAVE_AUTO_GENERATION_NONE;
 8004902:	e9cd 3408 	strd	r3, r4, [sp, #32]
  DAC_InitStruct.OutputBuffer = LL_DAC_OUTPUT_BUFFER_ENABLE;
 8004906:	940b      	str	r4, [sp, #44]	; 0x2c
  LL_DAC_Init(DAC, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8004908:	f000 fd90 	bl	800542c <LL_DAC_Init>
  *         @arg @ref LL_DAC_CHANNEL_2
  * @retval None
  */
__STATIC_INLINE void LL_DAC_DisableTrigger(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
  CLEAR_BIT(DACx->CR,
 800490c:	682b      	ldr	r3, [r5, #0]
  LL_DAC_Init(DAC, LL_DAC_CHANNEL_2, &DAC_InitStruct);
 800490e:	aa08      	add	r2, sp, #32
 8004910:	f023 0304 	bic.w	r3, r3, #4
 8004914:	602b      	str	r3, [r5, #0]
 8004916:	49ad      	ldr	r1, [pc, #692]	; (8004bcc <main+0x694>)
 8004918:	4628      	mov	r0, r5
 800491a:	f000 fd87 	bl	800542c <LL_DAC_Init>
 800491e:	682b      	ldr	r3, [r5, #0]
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004920:	2214      	movs	r2, #20
 8004922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004926:	602b      	str	r3, [r5, #0]
	 DAC->CR |= DAC_CR_EN1;
 8004928:	682b      	ldr	r3, [r5, #0]
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800492a:	4621      	mov	r1, r4
	 DAC->CR |= DAC_CR_EN1;
 800492c:	f043 0301 	orr.w	r3, r3, #1
 8004930:	602b      	str	r3, [r5, #0]
	 DAC->CR |= DAC_CR_EN2;
 8004932:	682b      	ldr	r3, [r5, #0]
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004934:	a80d      	add	r0, sp, #52	; 0x34
	 DAC->CR |= DAC_CR_EN2;
 8004936:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800493a:	602b      	str	r3, [r5, #0]
	 DAC->DHR12R1 = 0;
 800493c:	60ac      	str	r4, [r5, #8]
	 DAC->DHR12R2 = 0;
 800493e:	616c      	str	r4, [r5, #20]
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004940:	f000 ff77 	bl	8005832 <memset>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8004944:	2010      	movs	r0, #16
 8004946:	f7fd f841 	bl	80019cc <LL_APB1_GRP1_EnableClock>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800494a:	68f0      	ldr	r0, [r6, #12]
  TIM_InitStruct.Prescaler = 2400;
 800494c:	f44f 6916 	mov.w	r9, #2400	; 0x960
  NVIC_SetPriority(TIM6_DAC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004950:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8004954:	f7fd f9d6 	bl	8001d04 <NVIC_EncodePriority.constprop.33>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004958:	0100      	lsls	r0, r0, #4
 800495a:	b2c0      	uxtb	r0, r0
 800495c:	f887 0336 	strb.w	r0, [r7, #822]	; 0x336
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004960:	f8c7 8004 	str.w	r8, [r7, #4]
  TIM_InitStruct.Autoreload = 10;
 8004964:	f04f 080a 	mov.w	r8, #10
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8004968:	f5a5 45c8 	sub.w	r5, r5, #25600	; 0x6400
 800496c:	4628      	mov	r0, r5
 800496e:	a90d      	add	r1, sp, #52	; 0x34
  TIM_InitStruct.Prescaler = 2400;
 8004970:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004974:	940e      	str	r4, [sp, #56]	; 0x38
  TIM_InitStruct.Autoreload = 10;
 8004976:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 800497a:	f000 fe59 	bl	8005630 <LL_TIM_Init>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800497e:	682b      	ldr	r3, [r5, #0]
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004980:	2214      	movs	r2, #20
 8004982:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004986:	602b      	str	r3, [r5, #0]
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004988:	686b      	ldr	r3, [r5, #4]
 800498a:	4621      	mov	r1, r4
 800498c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004990:	606b      	str	r3, [r5, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8004992:	68ab      	ldr	r3, [r5, #8]
 8004994:	a80d      	add	r0, sp, #52	; 0x34
 8004996:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800499a:	60ab      	str	r3, [r5, #8]
 800499c:	f000 ff49 	bl	8005832 <memset>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 80049a0:	2020      	movs	r0, #32
 80049a2:	f7fd f813 	bl	80019cc <LL_APB1_GRP1_EnableClock>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049a6:	68f0      	ldr	r0, [r6, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 80049a8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
  NVIC_SetPriority(TIM7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80049ac:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80049b0:	f7fd f9a8 	bl	8001d04 <NVIC_EncodePriority.constprop.33>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049b4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049b8:	0100      	lsls	r0, r0, #4
 80049ba:	b2c0      	uxtb	r0, r0
 80049bc:	f887 0337 	strb.w	r0, [r7, #823]	; 0x337
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 80049c0:	a90d      	add	r1, sp, #52	; 0x34
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049c2:	607b      	str	r3, [r7, #4]
 80049c4:	4628      	mov	r0, r5
  TIM_InitStruct.Prescaler = 2400;
 80049c6:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
  TIM_InitStruct.Autoreload = 10;
 80049ca:	e9cd 480e 	strd	r4, r8, [sp, #56]	; 0x38
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 80049ce:	f000 fe2f 	bl	8005630 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80049d2:	682b      	ldr	r3, [r5, #0]
 80049d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049d8:	602b      	str	r3, [r5, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80049da:	686b      	ldr	r3, [r5, #4]
 80049dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e0:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80049e2:	68ab      	ldr	r3, [r5, #8]
 80049e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049e8:	60ab      	str	r3, [r5, #8]
  InitLCD();
 80049ea:	f7fc ffe4 	bl	80019b6 <InitLCD>
  SystemCoreClockUpdate();
 80049ee:	f000 fb15 	bl	800501c <SystemCoreClockUpdate>
  SysTick_Config(SystemCoreClock/1000);//SystemCoreClock/1000 - 1mc
 80049f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80049f6:	4b76      	ldr	r3, [pc, #472]	; (8004bd0 <main+0x698>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	fbb3 f3f2 	udiv	r3, r3, r2
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049fe:	3b01      	subs	r3, #1
 8004a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a04:	d207      	bcs.n	8004a16 <main+0x4de>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a06:	4a73      	ldr	r2, [pc, #460]	; (8004bd4 <main+0x69c>)
 8004a08:	6053      	str	r3, [r2, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a0a:	23f0      	movs	r3, #240	; 0xf0
 8004a0c:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a10:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a12:	6094      	str	r4, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a14:	6013      	str	r3, [r2, #0]
	LoggingData.RecordsQuantity= 0;
 8004a16:	2400      	movs	r4, #0
 8004a18:	4d6f      	ldr	r5, [pc, #444]	; (8004bd8 <main+0x6a0>)
	PrintToLCD(Version);
 8004a1a:	4870      	ldr	r0, [pc, #448]	; (8004bdc <main+0x6a4>)
	LoggingData.RecordsQuantity= 0;
 8004a1c:	602c      	str	r4, [r5, #0]
	PrintToLCD(Version);
 8004a1e:	f7fc ffbb 	bl	8001998 <PrintToLCD>
	InfoToUARTBeforeStart();
 8004a22:	f7fc facb 	bl	8000fbc <InfoToUARTBeforeStart>
	logInfo(Version);
 8004a26:	486e      	ldr	r0, [pc, #440]	; (8004be0 <main+0x6a8>)
 8004a28:	f000 fb92 	bl	8005150 <printToBufferWithoutEndUART1>
 8004a2c:	486b      	ldr	r0, [pc, #428]	; (8004bdc <main+0x6a4>)
 8004a2e:	f000 fb25 	bl	800507c <printToBufferUART1>
	SetSymbols();
 8004a32:	f7fc fed9 	bl	80017e8 <SetSymbols>
	lcd_set_xy(0,0);
 8004a36:	4621      	mov	r1, r4
 8004a38:	4620      	mov	r0, r4
 8004a3a:	f7fc ff2d 	bl	8001898 <lcd_set_xy>
	delay_ms(1000);
 8004a3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a42:	f7fc faab 	bl	8000f9c <delay_ms>
	flash_read_block();
 8004a46:	f7fb fc73 	bl	8000330 <flash_read_block>
	if (LoggingData.RecordsQuantity>=MAX_LOG_ITEMS) LoggingData.RecordsQuantity = 0;
 8004a4a:	682b      	ldr	r3, [r5, #0]
 8004a4c:	2b17      	cmp	r3, #23
 8004a4e:	bf88      	it	hi
 8004a50:	602c      	strhi	r4, [r5, #0]
	EEpromReadStatus = ReadFromFlash();
 8004a52:	f7fb ff4b 	bl	80008ec <ReadFromFlash>
	if (EEpromReadStatus==0)
 8004a56:	4604      	mov	r4, r0
 8004a58:	2800      	cmp	r0, #0
 8004a5a:	f040 8091 	bne.w	8004b80 <main+0x648>
		delay_ms(1000);
 8004a5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a62:	f7fc fa9b 	bl	8000f9c <delay_ms>
		EEpromReadStatus = ReadFromFlash();
 8004a66:	f7fb ff41 	bl	80008ec <ReadFromFlash>
 8004a6a:	4604      	mov	r4, r0
		logInfo("Read from EEprom - FAIL");
 8004a6c:	485c      	ldr	r0, [pc, #368]	; (8004be0 <main+0x6a8>)
 8004a6e:	f000 fb6f 	bl	8005150 <printToBufferWithoutEndUART1>
 8004a72:	485c      	ldr	r0, [pc, #368]	; (8004be4 <main+0x6ac>)
 8004a74:	f000 fb02 	bl	800507c <printToBufferUART1>
	if (EEpromReadStatus == 0)
 8004a78:	2c00      	cmp	r4, #0
 8004a7a:	f040 8081 	bne.w	8004b80 <main+0x648>
		PrintToLCD("EEprom Read FAIL");
 8004a7e:	485a      	ldr	r0, [pc, #360]	; (8004be8 <main+0x6b0>)
 8004a80:	f7fc ff8a 	bl	8001998 <PrintToLCD>
		delay_ms(4000);
 8004a84:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8004a88:	f7fc fa88 	bl	8000f9c <delay_ms>
		WriteInLOG("EEprmReadFAIL");
 8004a8c:	4857      	ldr	r0, [pc, #348]	; (8004bec <main+0x6b4>)
 8004a8e:	f7fc f8eb 	bl	8000c68 <WriteInLOG>
		logInfo("Read from EEprom - FAIL");
 8004a92:	4853      	ldr	r0, [pc, #332]	; (8004be0 <main+0x6a8>)
 8004a94:	f000 fb5c 	bl	8005150 <printToBufferWithoutEndUART1>
 8004a98:	4852      	ldr	r0, [pc, #328]	; (8004be4 <main+0x6ac>)
		logInfo("Read from EEprom - SUCCESS");
 8004a9a:	f000 faef 	bl	800507c <printToBufferUART1>
  BatteryCapacityDischargeCurrentAfterPOwerUp = SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent;
 8004a9e:	4e54      	ldr	r6, [pc, #336]	; (8004bf0 <main+0x6b8>)
 8004aa0:	4b54      	ldr	r3, [pc, #336]	; (8004bf4 <main+0x6bc>)
 8004aa2:	6932      	ldr	r2, [r6, #16]
  ChargeDurationSec = SettingsData.ChargeTime*3600;
 8004aa4:	4c54      	ldr	r4, [pc, #336]	; (8004bf8 <main+0x6c0>)
  BatteryCapacityDischargeCurrentAfterPOwerUp = SaveDataWhenPowerOff.BatteryCapacityDischargeCurrent;
 8004aa6:	601a      	str	r2, [r3, #0]
  ChargeDurationSec = SettingsData.ChargeTime*3600;
 8004aa8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004aac:	6922      	ldr	r2, [r4, #16]
  OutStateAfterPowerUp = SettingsData.Option2;
 8004aae:	4d53      	ldr	r5, [pc, #332]	; (8004bfc <main+0x6c4>)
  ChargeDurationSec = SettingsData.ChargeTime*3600;
 8004ab0:	4353      	muls	r3, r2
 8004ab2:	4a53      	ldr	r2, [pc, #332]	; (8004c00 <main+0x6c8>)
 8004ab4:	6013      	str	r3, [r2, #0]
  SelectedOptionValue = SettingsData.Option1;
 8004ab6:	68a2      	ldr	r2, [r4, #8]
 8004ab8:	4b52      	ldr	r3, [pc, #328]	; (8004c04 <main+0x6cc>)
 8004aba:	601a      	str	r2, [r3, #0]
  SelectedOptionValue1 = SettingsData.Option2;
 8004abc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004abe:	4a52      	ldr	r2, [pc, #328]	; (8004c08 <main+0x6d0>)
  OutStateAfterPowerUp = SettingsData.Option2;
 8004ac0:	602b      	str	r3, [r5, #0]
  SelectedOptionValue1 = SettingsData.Option2;
 8004ac2:	6013      	str	r3, [r2, #0]
	Generation_Coefficients_R_A_B();
 8004ac4:	f7fc f89c 	bl	8000c00 <Generation_Coefficients_R_A_B>
	delay_ms(1000);
 8004ac8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004acc:	f7fc fa66 	bl	8000f9c <delay_ms>
  lcd_clear();
 8004ad0:	f7fc ff50 	bl	8001974 <lcd_clear>
	Menu_SetGenericWriteCallback(Generic_Write);
 8004ad4:	484d      	ldr	r0, [pc, #308]	; (8004c0c <main+0x6d4>)
 8004ad6:	f7fc fdd3 	bl	8001680 <Menu_SetGenericWriteCallback>
	if (SettingsData.Option1 == 1)
 8004ada:	68a3      	ldr	r3, [r4, #8]
 8004adc:	e9cd 6502 	strd	r6, r5, [sp, #8]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d154      	bne.n	8004b8e <main+0x656>
		Menu_Navigate(&Menu_2_1);
 8004ae4:	484a      	ldr	r0, [pc, #296]	; (8004c10 <main+0x6d8>)
		Menu_Navigate(&Menu_8_1);
 8004ae6:	f7fc fdb1 	bl	800164c <Menu_Navigate>
	FineKeyState = FINE_KEY_ON;
 8004aea:	2301      	movs	r3, #1
 8004aec:	4d49      	ldr	r5, [pc, #292]	; (8004c14 <main+0x6dc>)
	GPIOB->BSRR =  GPIO_BSRR_BS8;// ON (fine)
 8004aee:	f44f 7280 	mov.w	r2, #256	; 0x100
	FineKeyState = FINE_KEY_ON;
 8004af2:	702b      	strb	r3, [r5, #0]
	DAC_step = DAC_STEP_FINE;
 8004af4:	2314      	movs	r3, #20
 8004af6:	4e48      	ldr	r6, [pc, #288]	; (8004c18 <main+0x6e0>)
	bufEnc = 0;
 8004af8:	2700      	movs	r7, #0
	DAC_step = DAC_STEP_FINE;
 8004afa:	8033      	strh	r3, [r6, #0]
	GPIOB->BSRR =  GPIO_BSRR_BS8;// ON (fine)
 8004afc:	4b47      	ldr	r3, [pc, #284]	; (8004c1c <main+0x6e4>)
	bufEnc = 0;
 8004afe:	46bb      	mov	fp, r7
	GPIOB->BSRR =  GPIO_BSRR_BS8;// ON (fine)
 8004b00:	611a      	str	r2, [r3, #16]
	DAC_CurrentCounter = 3000;
 8004b02:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004b06:	4b46      	ldr	r3, [pc, #280]	; (8004c20 <main+0x6e8>)
	DAC_VoltageCounter = 1020;
 8004b08:	4946      	ldr	r1, [pc, #280]	; (8004c24 <main+0x6ec>)
	DAC_CurrentCounter = 3000;
 8004b0a:	801a      	strh	r2, [r3, #0]
	DAC_VoltageCounter = 1020;
 8004b0c:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8004b10:	800a      	strh	r2, [r1, #0]
	DAC->DHR12R2 = DAC_CurrentCounter;
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	4a2a      	ldr	r2, [pc, #168]	; (8004bc0 <main+0x688>)
 8004b16:	b21b      	sxth	r3, r3
 8004b18:	6153      	str	r3, [r2, #20]
	DAC->DHR12R1 = DAC_VoltageCounter;
 8004b1a:	880b      	ldrh	r3, [r1, #0]
	Key_Pressed_t tmp = bufEnc;
 8004b1c:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8004c54 <main+0x71c>
	DAC->DHR12R1 = DAC_VoltageCounter;
 8004b20:	b21b      	sxth	r3, r3
	if (!LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_11)) logDebug("Encoder");
 8004b22:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8004c58 <main+0x720>
	DAC->DHR12R1 = DAC_VoltageCounter;
 8004b26:	6093      	str	r3, [r2, #8]
  	Blink_message_counter++;
 8004b28:	4a3f      	ldr	r2, [pc, #252]	; (8004c28 <main+0x6f0>)
	Key_Pressed_t tmp = bufEnc;
 8004b2a:	f899 4000 	ldrb.w	r4, [r9]
  	Blink_message_counter++;
 8004b2e:	7813      	ldrb	r3, [r2, #0]
	bufEnc = 0;
 8004b30:	f889 b000 	strb.w	fp, [r9]
  	Blink_message_counter++;
 8004b34:	3301      	adds	r3, #1
 8004b36:	7013      	strb	r3, [r2, #0]
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8004b38:	9b00      	ldr	r3, [sp, #0]
 8004b3a:	689b      	ldr	r3, [r3, #8]
	if (!LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_11)) logDebug("Encoder");
 8004b3c:	051b      	lsls	r3, r3, #20
 8004b3e:	d405      	bmi.n	8004b4c <main+0x614>
 8004b40:	4640      	mov	r0, r8
 8004b42:	f000 fb05 	bl	8005150 <printToBufferWithoutEndUART1>
 8004b46:	4839      	ldr	r0, [pc, #228]	; (8004c2c <main+0x6f4>)
 8004b48:	f000 fa98 	bl	800507c <printToBufferUART1>
	logDebugD("ch3 ", RegularConvData[2],0);
 8004b4c:	4640      	mov	r0, r8
 8004b4e:	f000 faff 	bl	8005150 <printToBufferWithoutEndUART1>
 8004b52:	9b01      	ldr	r3, [sp, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	8899      	ldrh	r1, [r3, #4]
 8004b58:	4835      	ldr	r0, [pc, #212]	; (8004c30 <main+0x6f8>)
 8004b5a:	f000 fb3d 	bl	80051d8 <printToBufferUART1D>
	logDebugD("Button: ",Button,0);
 8004b5e:	4640      	mov	r0, r8
 8004b60:	f000 faf6 	bl	8005150 <printToBufferWithoutEndUART1>
 8004b64:	2200      	movs	r2, #0
 8004b66:	4621      	mov	r1, r4
 8004b68:	4832      	ldr	r0, [pc, #200]	; (8004c34 <main+0x6fc>)
 8004b6a:	f000 fb35 	bl	80051d8 <printToBufferUART1D>
		switch (Button)
 8004b6e:	1e63      	subs	r3, r4, #1
 8004b70:	2b06      	cmp	r3, #6
 8004b72:	d878      	bhi.n	8004c66 <main+0x72e>
 8004b74:	e8df f003 	tbb	[pc, r3]
 8004b78:	afa8a472 	.word	0xafa8a472
 8004b7c:	7777      	.short	0x7777
 8004b7e:	b3          	.byte	0xb3
 8004b7f:	00          	.byte	0x00
	if (EEpromReadStatus == 1)
 8004b80:	2c01      	cmp	r4, #1
 8004b82:	d18c      	bne.n	8004a9e <main+0x566>
		logInfo("Read from EEprom - SUCCESS");
 8004b84:	4816      	ldr	r0, [pc, #88]	; (8004be0 <main+0x6a8>)
 8004b86:	f000 fae3 	bl	8005150 <printToBufferWithoutEndUART1>
 8004b8a:	482b      	ldr	r0, [pc, #172]	; (8004c38 <main+0x700>)
 8004b8c:	e785      	b.n	8004a9a <main+0x562>
	else if (SettingsData.Option1 == 2)
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d101      	bne.n	8004b96 <main+0x65e>
		Menu_Navigate(&Menu_3_1);
 8004b92:	482a      	ldr	r0, [pc, #168]	; (8004c3c <main+0x704>)
 8004b94:	e7a7      	b.n	8004ae6 <main+0x5ae>
	else if (SettingsData.Option1 == 3)
 8004b96:	2b03      	cmp	r3, #3
 8004b98:	d101      	bne.n	8004b9e <main+0x666>
		Menu_Navigate(&Menu_4_1);
 8004b9a:	4829      	ldr	r0, [pc, #164]	; (8004c40 <main+0x708>)
 8004b9c:	e7a3      	b.n	8004ae6 <main+0x5ae>
	else if (SettingsData.Option1 == 4)
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	d101      	bne.n	8004ba6 <main+0x66e>
		Menu_Navigate(&Menu_5_1);
 8004ba2:	4828      	ldr	r0, [pc, #160]	; (8004c44 <main+0x70c>)
 8004ba4:	e79f      	b.n	8004ae6 <main+0x5ae>
	else if (SettingsData.Option1 == 5)
 8004ba6:	2b05      	cmp	r3, #5
 8004ba8:	d101      	bne.n	8004bae <main+0x676>
		Menu_Navigate(&Menu_6_1);
 8004baa:	4827      	ldr	r0, [pc, #156]	; (8004c48 <main+0x710>)
 8004bac:	e79b      	b.n	8004ae6 <main+0x5ae>
	else if (SettingsData.Option1 == 6)
 8004bae:	2b06      	cmp	r3, #6
 8004bb0:	d101      	bne.n	8004bb6 <main+0x67e>
		Menu_Navigate(&Menu_7_1);
 8004bb2:	4826      	ldr	r0, [pc, #152]	; (8004c4c <main+0x714>)
 8004bb4:	e797      	b.n	8004ae6 <main+0x5ae>
	else if (SettingsData.Option1 == 7)
 8004bb6:	2b07      	cmp	r3, #7
 8004bb8:	d194      	bne.n	8004ae4 <main+0x5ac>
		Menu_Navigate(&Menu_8_1);
 8004bba:	4825      	ldr	r0, [pc, #148]	; (8004c50 <main+0x718>)
 8004bbc:	e793      	b.n	8004ae6 <main+0x5ae>
 8004bbe:	bf00      	nop
 8004bc0:	40007400 	.word	0x40007400
 8004bc4:	e000e100 	.word	0xe000e100
 8004bc8:	02100001 	.word	0x02100001
 8004bcc:	15430012 	.word	0x15430012
 8004bd0:	20000290 	.word	0x20000290
 8004bd4:	e000e010 	.word	0xe000e010
 8004bd8:	20000858 	.word	0x20000858
 8004bdc:	2000027e 	.word	0x2000027e
 8004be0:	08005c65 	.word	0x08005c65
 8004be4:	08006d5b 	.word	0x08006d5b
 8004be8:	08006d73 	.word	0x08006d73
 8004bec:	08006d84 	.word	0x08006d84
 8004bf0:	200000f4 	.word	0x200000f4
 8004bf4:	20000778 	.word	0x20000778
 8004bf8:	20000154 	.word	0x20000154
 8004bfc:	20000278 	.word	0x20000278
 8004c00:	200009fc 	.word	0x200009fc
 8004c04:	20000a00 	.word	0x20000a00
 8004c08:	200009f8 	.word	0x200009f8
 8004c0c:	08001b99 	.word	0x08001b99
 8004c10:	08006a10 	.word	0x08006a10
 8004c14:	200009f4 	.word	0x200009f4
 8004c18:	20000274 	.word	0x20000274
 8004c1c:	40010c00 	.word	0x40010c00
 8004c20:	20000272 	.word	0x20000272
 8004c24:	20000788 	.word	0x20000788
 8004c28:	2000077d 	.word	0x2000077d
 8004c2c:	08006d92 	.word	0x08006d92
 8004c30:	08006d9a 	.word	0x08006d9a
 8004c34:	08006d9f 	.word	0x08006d9f
 8004c38:	08005b8b 	.word	0x08005b8b
 8004c3c:	08006a68 	.word	0x08006a68
 8004c40:	08006ac0 	.word	0x08006ac0
 8004c44:	08006b18 	.word	0x08006b18
 8004c48:	08006b70 	.word	0x08006b70
 8004c4c:	08006c20 	.word	0x08006c20
 8004c50:	08006c78 	.word	0x08006c78
 8004c54:	200007c4 	.word	0x200007c4
 8004c58:	08005c50 	.word	0x08005c50
				Menu_Navigate(MENU_PREVIOUS);
 8004c5c:	f7fc fcf0 	bl	8001640 <Menu_GetCurrentMenu>
 8004c60:	6840      	ldr	r0, [r0, #4]
				Menu_Navigate(MENU_NEXT);
 8004c62:	f7fc fcf3 	bl	800164c <Menu_Navigate>
		if (Menu_GetCurrentMenu() == &Menu_2_1)
 8004c66:	f7fc fceb 	bl	8001640 <Menu_GetCurrentMenu>
 8004c6a:	4ba7      	ldr	r3, [pc, #668]	; (8004f08 <main+0x9d0>)
 8004c6c:	f8df a32c 	ldr.w	sl, [pc, #812]	; 8004f9c <main+0xa64>
 8004c70:	4283      	cmp	r3, r0
 8004c72:	d146      	bne.n	8004d02 <main+0x7ca>
			MenuPowerSupply(Button);
 8004c74:	4620      	mov	r0, r4
 8004c76:	f7fd f847 	bl	8001d08 <MenuPowerSupply>
		if (Button == KEY_OUT)
 8004c7a:	2c08      	cmp	r4, #8
 8004c7c:	d106      	bne.n	8004c8c <main+0x754>
	    	if (On_off == 0)
 8004c7e:	4ba3      	ldr	r3, [pc, #652]	; (8004f0c <main+0x9d4>)
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f040 813c 	bne.w	8004f00 <main+0x9c8>
	    		OUT_ON();
 8004c88:	f7fd fd5a 	bl	8002740 <OUT_ON>
		if (EnterInMenu_Status == 0)
 8004c8c:	f89a 2000 	ldrb.w	r2, [sl]
 8004c90:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8004c94:	b982      	cbnz	r2, 8004cb8 <main+0x780>
			InitiStatus = 0;
 8004c96:	4a9e      	ldr	r2, [pc, #632]	; (8004f10 <main+0x9d8>)
			SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue = BatteryCapacityDischargeCurrent;
 8004c98:	9902      	ldr	r1, [sp, #8]
			InitiStatus = 0;
 8004c9a:	7013      	strb	r3, [r2, #0]
			CountShow = 0;
 8004c9c:	4a9d      	ldr	r2, [pc, #628]	; (8004f14 <main+0x9dc>)
 8004c9e:	7013      	strb	r3, [r2, #0]
			SaveDataWhenPowerOff.BatteryCapacityDischargePreviousValue = BatteryCapacityDischargeCurrent;
 8004ca0:	4a9d      	ldr	r2, [pc, #628]	; (8004f18 <main+0x9e0>)
 8004ca2:	6812      	ldr	r2, [r2, #0]
 8004ca4:	608a      	str	r2, [r1, #8]
			DischargeTimeSec_Previous = DischargeTimeSec;
 8004ca6:	4a9d      	ldr	r2, [pc, #628]	; (8004f1c <main+0x9e4>)
 8004ca8:	6811      	ldr	r1, [r2, #0]
 8004caa:	4a9d      	ldr	r2, [pc, #628]	; (8004f20 <main+0x9e8>)
 8004cac:	6011      	str	r1, [r2, #0]
			ChargeDischargeState = 0;
 8004cae:	4a9d      	ldr	r2, [pc, #628]	; (8004f24 <main+0x9ec>)
 8004cb0:	7013      	strb	r3, [r2, #0]
			OutStateAfterPowerUp = 1;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	9a03      	ldr	r2, [sp, #12]
 8004cb6:	6013      	str	r3, [r2, #0]
      delay_ms(100);
 8004cb8:	2064      	movs	r0, #100	; 0x64
 8004cba:	f7fc f96f 	bl	8000f9c <delay_ms>
  {
 8004cbe:	e733      	b.n	8004b28 <main+0x5f0>
				Menu_Navigate(MENU_NEXT);
 8004cc0:	f7fc fcbe 	bl	8001640 <Menu_GetCurrentMenu>
 8004cc4:	6800      	ldr	r0, [r0, #0]
 8004cc6:	e7cc      	b.n	8004c62 <main+0x72a>
				Menu_SelectItem(KEY_NEXT);
 8004cc8:	2002      	movs	r0, #2
 8004cca:	f7fc fce3 	bl	8001694 <Menu_SelectItem>
				Menu_Navigate(MENU_CHILD);
 8004cce:	f7fc fcb7 	bl	8001640 <Menu_GetCurrentMenu>
 8004cd2:	68c0      	ldr	r0, [r0, #12]
 8004cd4:	e7c5      	b.n	8004c62 <main+0x72a>
				Menu_Navigate(MENU_PARENT);
 8004cd6:	f7fc fcb3 	bl	8001640 <Menu_GetCurrentMenu>
 8004cda:	6880      	ldr	r0, [r0, #8]
 8004cdc:	e7c1      	b.n	8004c62 <main+0x72a>
				if (FineKeyState == FINE_KEY_OFF)
 8004cde:	782a      	ldrb	r2, [r5, #0]
 8004ce0:	4b91      	ldr	r3, [pc, #580]	; (8004f28 <main+0x9f0>)
 8004ce2:	b93a      	cbnz	r2, 8004cf4 <main+0x7bc>
					DAC_step = DAC_STEP_FINE;
 8004ce4:	2214      	movs	r2, #20
 8004ce6:	8032      	strh	r2, [r6, #0]
					GPIOB->BSRR =  GPIO_BSRR_BS8;// ON
 8004ce8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004cec:	611a      	str	r2, [r3, #16]
					FineKeyState = FINE_KEY_ON;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	702b      	strb	r3, [r5, #0]
 8004cf2:	e7b8      	b.n	8004c66 <main+0x72e>
					DAC_step = DAC_STEP_NORMAL;
 8004cf4:	22c8      	movs	r2, #200	; 0xc8
 8004cf6:	8032      	strh	r2, [r6, #0]
					GPIOB->BSRR =  GPIO_BSRR_BR8;//Off
 8004cf8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
					FineKeyState = FINE_KEY_OFF;
 8004cfc:	702f      	strb	r7, [r5, #0]
					GPIOB->BSRR =  GPIO_BSRR_BR8;//Off
 8004cfe:	611a      	str	r2, [r3, #16]
 8004d00:	e7b1      	b.n	8004c66 <main+0x72e>
		else if (Menu_GetCurrentMenu() == &Menu_3_1)
 8004d02:	f7fc fc9d 	bl	8001640 <Menu_GetCurrentMenu>
 8004d06:	4b89      	ldr	r3, [pc, #548]	; (8004f2c <main+0x9f4>)
 8004d08:	4283      	cmp	r3, r0
 8004d0a:	d103      	bne.n	8004d14 <main+0x7dc>
			MenuLoad(Button);
 8004d0c:	4620      	mov	r0, r4
 8004d0e:	f7fd f865 	bl	8001ddc <MenuLoad>
 8004d12:	e7b2      	b.n	8004c7a <main+0x742>
		else if (Menu_GetCurrentMenu() == &Menu_4_1)
 8004d14:	f7fc fc94 	bl	8001640 <Menu_GetCurrentMenu>
 8004d18:	4b85      	ldr	r3, [pc, #532]	; (8004f30 <main+0x9f8>)
 8004d1a:	4283      	cmp	r3, r0
 8004d1c:	d103      	bne.n	8004d26 <main+0x7ee>
			MenuChargeCC_CV(Button);
 8004d1e:	4620      	mov	r0, r4
 8004d20:	f7fd f8d8 	bl	8001ed4 <MenuChargeCC_CV>
 8004d24:	e7a9      	b.n	8004c7a <main+0x742>
		else if (Menu_GetCurrentMenu() == &Menu_5_1)
 8004d26:	f7fc fc8b 	bl	8001640 <Menu_GetCurrentMenu>
 8004d2a:	4b82      	ldr	r3, [pc, #520]	; (8004f34 <main+0x9fc>)
 8004d2c:	4283      	cmp	r3, r0
 8004d2e:	d103      	bne.n	8004d38 <main+0x800>
			MenuChargeAdapt(Button);
 8004d30:	4620      	mov	r0, r4
 8004d32:	f7fe fafd 	bl	8003330 <MenuChargeAdapt>
 8004d36:	e7a0      	b.n	8004c7a <main+0x742>
		else if (Menu_GetCurrentMenu() == &Menu_6_1)
 8004d38:	f7fc fc82 	bl	8001640 <Menu_GetCurrentMenu>
 8004d3c:	4b7e      	ldr	r3, [pc, #504]	; (8004f38 <main+0xa00>)
 8004d3e:	4283      	cmp	r3, r0
 8004d40:	d103      	bne.n	8004d4a <main+0x812>
			MenuDisCharge(Button);
 8004d42:	4620      	mov	r0, r4
 8004d44:	f7fe fcac 	bl	80036a0 <MenuDisCharge>
 8004d48:	e797      	b.n	8004c7a <main+0x742>
		else if (Menu_GetCurrentMenu() == &Menu_6_1a)
 8004d4a:	f7fc fc79 	bl	8001640 <Menu_GetCurrentMenu>
 8004d4e:	4b7b      	ldr	r3, [pc, #492]	; (8004f3c <main+0xa04>)
 8004d50:	4283      	cmp	r3, r0
 8004d52:	d103      	bne.n	8004d5c <main+0x824>
			MenuCheckingCapacity(Button);
 8004d54:	4620      	mov	r0, r4
 8004d56:	f7fe fdff 	bl	8003958 <MenuCheckingCapacity>
 8004d5a:	e78e      	b.n	8004c7a <main+0x742>
		else if (Menu_GetCurrentMenu() == &Menu_7_1)
 8004d5c:	f7fc fc70 	bl	8001640 <Menu_GetCurrentMenu>
 8004d60:	4b77      	ldr	r3, [pc, #476]	; (8004f40 <main+0xa08>)
 8004d62:	4283      	cmp	r3, r0
 8004d64:	d103      	bne.n	8004d6e <main+0x836>
			MenuTraining_new(Button);
 8004d66:	4620      	mov	r0, r4
 8004d68:	f7fd ff90 	bl	8002c8c <MenuTraining_new>
 8004d6c:	e785      	b.n	8004c7a <main+0x742>
		else if (Menu_GetCurrentMenu() == &Menu_8_1)
 8004d6e:	f7fc fc67 	bl	8001640 <Menu_GetCurrentMenu>
 8004d72:	4b74      	ldr	r3, [pc, #464]	; (8004f44 <main+0xa0c>)
 8004d74:	4283      	cmp	r3, r0
 8004d76:	d103      	bne.n	8004d80 <main+0x848>
			MenuSwing(Button);
 8004d78:	4620      	mov	r0, r4
 8004d7a:	f7fe f9dd 	bl	8003138 <MenuSwing>
 8004d7e:	e77c      	b.n	8004c7a <main+0x742>
		else if (Menu_GetCurrentMenu() == &Menu_8a_1)
 8004d80:	f7fc fc5e 	bl	8001640 <Menu_GetCurrentMenu>
 8004d84:	4b70      	ldr	r3, [pc, #448]	; (8004f48 <main+0xa10>)
 8004d86:	4283      	cmp	r3, r0
 8004d88:	d103      	bne.n	8004d92 <main+0x85a>
					MenuBatterySimilation(Button);
 8004d8a:	4620      	mov	r0, r4
 8004d8c:	f7fd fede 	bl	8002b4c <MenuBatterySimilation>
 8004d90:	e773      	b.n	8004c7a <main+0x742>
		else if (Menu_GetCurrentMenu() == &Menu_9_1)
 8004d92:	f7fc fc55 	bl	8001640 <Menu_GetCurrentMenu>
 8004d96:	4b6d      	ldr	r3, [pc, #436]	; (8004f4c <main+0xa14>)
 8004d98:	4283      	cmp	r3, r0
 8004d9a:	d103      	bne.n	8004da4 <main+0x86c>
			MenuDIAGNOSTIC(Button);
 8004d9c:	4620      	mov	r0, r4
 8004d9e:	f7ff f8d5 	bl	8003f4c <MenuDIAGNOSTIC>
 8004da2:	e76a      	b.n	8004c7a <main+0x742>
		else if (Menu_GetCurrentMenu() == &Menu_11_1)
 8004da4:	f7fc fc4c 	bl	8001640 <Menu_GetCurrentMenu>
 8004da8:	4b69      	ldr	r3, [pc, #420]	; (8004f50 <main+0xa18>)
 8004daa:	4283      	cmp	r3, r0
 8004dac:	d103      	bne.n	8004db6 <main+0x87e>
			MenuLog(Button);
 8004dae:	4620      	mov	r0, r4
 8004db0:	f7fd f936 	bl	8002020 <MenuLog>
 8004db4:	e761      	b.n	8004c7a <main+0x742>
		else if (Menu_GetCurrentMenu() == &Menu_10_2_1)
 8004db6:	f7fc fc43 	bl	8001640 <Menu_GetCurrentMenu>
 8004dba:	4b66      	ldr	r3, [pc, #408]	; (8004f54 <main+0xa1c>)
 8004dbc:	4283      	cmp	r3, r0
 8004dbe:	d103      	bne.n	8004dc8 <main+0x890>
				MenuCalibration_Current_x50_to_0(Button);
 8004dc0:	4620      	mov	r0, r4
 8004dc2:	f7fd f99d 	bl	8002100 <MenuCalibration_Current_x50_to_0>
 8004dc6:	e758      	b.n	8004c7a <main+0x742>
			else if (Menu_GetCurrentMenu() == &Menu_10_1_1)
 8004dc8:	f7fc fc3a 	bl	8001640 <Menu_GetCurrentMenu>
 8004dcc:	4b62      	ldr	r3, [pc, #392]	; (8004f58 <main+0xa20>)
 8004dce:	4283      	cmp	r3, r0
 8004dd0:	d103      	bne.n	8004dda <main+0x8a2>
				MenuCalibration_Current_x1_to_0(Button);
 8004dd2:	4620      	mov	r0, r4
 8004dd4:	f7fd f970 	bl	80020b8 <MenuCalibration_Current_x1_to_0>
 8004dd8:	e74f      	b.n	8004c7a <main+0x742>
			else if (Menu_GetCurrentMenu() == &Menu_10_4_1)
 8004dda:	f7fc fc31 	bl	8001640 <Menu_GetCurrentMenu>
 8004dde:	4b5f      	ldr	r3, [pc, #380]	; (8004f5c <main+0xa24>)
 8004de0:	4283      	cmp	r3, r0
 8004de2:	d103      	bne.n	8004dec <main+0x8b4>
				MenuCalibration_Current_x50(Button);
 8004de4:	4620      	mov	r0, r4
 8004de6:	f7fd fe3d 	bl	8002a64 <MenuCalibration_Current_x50>
 8004dea:	e746      	b.n	8004c7a <main+0x742>
			else if (Menu_GetCurrentMenu() == &Menu_10_3_1)
 8004dec:	f7fc fc28 	bl	8001640 <Menu_GetCurrentMenu>
 8004df0:	4b5b      	ldr	r3, [pc, #364]	; (8004f60 <main+0xa28>)
 8004df2:	4283      	cmp	r3, r0
 8004df4:	d103      	bne.n	8004dfe <main+0x8c6>
				MenuCalibration_Current_x1(Button);
 8004df6:	4620      	mov	r0, r4
 8004df8:	f7fd fcce 	bl	8002798 <MenuCalibration_Current_x1>
 8004dfc:	e73d      	b.n	8004c7a <main+0x742>
			else if (Menu_GetCurrentMenu() == &Menu_10_7_1)
 8004dfe:	f7fc fc1f 	bl	8001640 <Menu_GetCurrentMenu>
 8004e02:	4b58      	ldr	r3, [pc, #352]	; (8004f64 <main+0xa2c>)
 8004e04:	4283      	cmp	r3, r0
 8004e06:	d103      	bne.n	8004e10 <main+0x8d8>
			MenuCalibration_VoltageIn(Button);
 8004e08:	4620      	mov	r0, r4
 8004e0a:	f7fd fd6d 	bl	80028e8 <MenuCalibration_VoltageIn>
 8004e0e:	e734      	b.n	8004c7a <main+0x742>
		else if (Menu_GetCurrentMenu() == &Menu_10_6_1)
 8004e10:	f7fc fc16 	bl	8001640 <Menu_GetCurrentMenu>
 8004e14:	4b54      	ldr	r3, [pc, #336]	; (8004f68 <main+0xa30>)
 8004e16:	4283      	cmp	r3, r0
 8004e18:	d103      	bne.n	8004e22 <main+0x8ea>
			MenuCalibration_VoltageOut(Button);
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	f7fd fd2c 	bl	8002878 <MenuCalibration_VoltageOut>
 8004e20:	e72b      	b.n	8004c7a <main+0x742>
		else if (Menu_GetCurrentMenu() == &Menu_10_5_1)
 8004e22:	f7fc fc0d 	bl	8001640 <Menu_GetCurrentMenu>
 8004e26:	4b51      	ldr	r3, [pc, #324]	; (8004f6c <main+0xa34>)
 8004e28:	4283      	cmp	r3, r0
 8004e2a:	d103      	bne.n	8004e34 <main+0x8fc>
			MenuCalibration_VoltagePS(Button);
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	f7fd fceb 	bl	8002808 <MenuCalibration_VoltagePS>
 8004e32:	e722      	b.n	8004c7a <main+0x742>
		else if (Menu_GetCurrentMenu() == &Menu_10_8_1)
 8004e34:	f7fc fc04 	bl	8001640 <Menu_GetCurrentMenu>
 8004e38:	4b4d      	ldr	r3, [pc, #308]	; (8004f70 <main+0xa38>)
 8004e3a:	4283      	cmp	r3, r0
 8004e3c:	d103      	bne.n	8004e46 <main+0x90e>
			MenuCalibration_Resist_Comp_5V1A(Button);
 8004e3e:	4620      	mov	r0, r4
 8004e40:	f7fd fd8a 	bl	8002958 <MenuCalibration_Resist_Comp_5V1A>
 8004e44:	e719      	b.n	8004c7a <main+0x742>
		else if (Menu_GetCurrentMenu() == &Menu_10_9_1)
 8004e46:	f7fc fbfb 	bl	8001640 <Menu_GetCurrentMenu>
 8004e4a:	4b4a      	ldr	r3, [pc, #296]	; (8004f74 <main+0xa3c>)
 8004e4c:	4283      	cmp	r3, r0
 8004e4e:	d103      	bne.n	8004e58 <main+0x920>
			MenuCalibration_BackToFactory(Button);
 8004e50:	4620      	mov	r0, r4
 8004e52:	f7fd f979 	bl	8002148 <MenuCalibration_BackToFactory>
 8004e56:	e710      	b.n	8004c7a <main+0x742>
		else if (Menu_GetCurrentMenu() == &Menu_1_1_1)
 8004e58:	f7fc fbf2 	bl	8001640 <Menu_GetCurrentMenu>
 8004e5c:	4b46      	ldr	r3, [pc, #280]	; (8004f78 <main+0xa40>)
 8004e5e:	4283      	cmp	r3, r0
 8004e60:	d103      	bne.n	8004e6a <main+0x932>
			MenuSettingsChargeTime(Button);
 8004e62:	4620      	mov	r0, r4
 8004e64:	f7fd f9cc 	bl	8002200 <MenuSettingsChargeTime>
 8004e68:	e707      	b.n	8004c7a <main+0x742>
		else if (Menu_GetCurrentMenu() == &Menu_1_1_1a)
 8004e6a:	f7fc fbe9 	bl	8001640 <Menu_GetCurrentMenu>
 8004e6e:	4b43      	ldr	r3, [pc, #268]	; (8004f7c <main+0xa44>)
 8004e70:	4283      	cmp	r3, r0
 8004e72:	d103      	bne.n	8004e7c <main+0x944>
			MenuSettingsBatteryType(Button);
 8004e74:	4620      	mov	r0, r4
 8004e76:	f7fd f9e9 	bl	800224c <MenuSettingsBatteryType>
 8004e7a:	e6fe      	b.n	8004c7a <main+0x742>
		else if (Menu_GetCurrentMenu() == &Menu_1_2_1)
 8004e7c:	f7fc fbe0 	bl	8001640 <Menu_GetCurrentMenu>
 8004e80:	4b3f      	ldr	r3, [pc, #252]	; (8004f80 <main+0xa48>)
 8004e82:	4283      	cmp	r3, r0
 8004e84:	d103      	bne.n	8004e8e <main+0x956>
			MenuSettingsLowVolt(Button);
 8004e86:	4620      	mov	r0, r4
 8004e88:	f7fd fa52 	bl	8002330 <MenuSettingsLowVolt>
 8004e8c:	e6f5      	b.n	8004c7a <main+0x742>
		else if (Menu_GetCurrentMenu() == &Menu_1_3_1)
 8004e8e:	f7fc fbd7 	bl	8001640 <Menu_GetCurrentMenu>
 8004e92:	4b3c      	ldr	r3, [pc, #240]	; (8004f84 <main+0xa4c>)
 8004e94:	4283      	cmp	r3, r0
 8004e96:	d103      	bne.n	8004ea0 <main+0x968>
			MenuSettingsMaxVolt(Button);
 8004e98:	4620      	mov	r0, r4
 8004e9a:	f7fd fa6b 	bl	8002374 <MenuSettingsMaxVolt>
 8004e9e:	e6ec      	b.n	8004c7a <main+0x742>
		else if (Menu_GetCurrentMenu() == &Menu_1_4_1)
 8004ea0:	f7fc fbce 	bl	8001640 <Menu_GetCurrentMenu>
 8004ea4:	4b38      	ldr	r3, [pc, #224]	; (8004f88 <main+0xa50>)
 8004ea6:	4283      	cmp	r3, r0
 8004ea8:	d103      	bne.n	8004eb2 <main+0x97a>
			MenuSettingsSwngChrgTime(Button);
 8004eaa:	4620      	mov	r0, r4
 8004eac:	f7fd fa84 	bl	80023b8 <MenuSettingsSwngChrgTime>
 8004eb0:	e6e3      	b.n	8004c7a <main+0x742>
		else if (Menu_GetCurrentMenu() == &Menu_1_5_1)
 8004eb2:	f7fc fbc5 	bl	8001640 <Menu_GetCurrentMenu>
 8004eb6:	4b35      	ldr	r3, [pc, #212]	; (8004f8c <main+0xa54>)
 8004eb8:	4283      	cmp	r3, r0
 8004eba:	d103      	bne.n	8004ec4 <main+0x98c>
			MenuSettingsSwngDChrgTime(Button);
 8004ebc:	4620      	mov	r0, r4
 8004ebe:	f7fd fa99 	bl	80023f4 <MenuSettingsSwngDChrgTime>
 8004ec2:	e6da      	b.n	8004c7a <main+0x742>
		else if (Menu_GetCurrentMenu() == &Menu_1_6_1)
 8004ec4:	f7fc fbbc 	bl	8001640 <Menu_GetCurrentMenu>
 8004ec8:	4b31      	ldr	r3, [pc, #196]	; (8004f90 <main+0xa58>)
 8004eca:	4283      	cmp	r3, r0
 8004ecc:	d103      	bne.n	8004ed6 <main+0x99e>
			MenuSettingsChargeAddapt(Button);
 8004ece:	4620      	mov	r0, r4
 8004ed0:	f7fd faae 	bl	8002430 <MenuSettingsChargeAddapt>
 8004ed4:	e6d1      	b.n	8004c7a <main+0x742>
		else if (Menu_GetCurrentMenu() == &Menu_1_S_1)
 8004ed6:	f7fc fbb3 	bl	8001640 <Menu_GetCurrentMenu>
 8004eda:	4b2e      	ldr	r3, [pc, #184]	; (8004f94 <main+0xa5c>)
 8004edc:	4283      	cmp	r3, r0
 8004ede:	d103      	bne.n	8004ee8 <main+0x9b0>
			MenuSettingsSaveMenuPosWhenOFF(Button);
 8004ee0:	4620      	mov	r0, r4
 8004ee2:	f7fd fb01 	bl	80024e8 <MenuSettingsSaveMenuPosWhenOFF>
 8004ee6:	e6c8      	b.n	8004c7a <main+0x742>
		else if (Menu_GetCurrentMenu() == &Menu_1_SO_1)
 8004ee8:	f7fc fbaa 	bl	8001640 <Menu_GetCurrentMenu>
 8004eec:	4b2a      	ldr	r3, [pc, #168]	; (8004f98 <main+0xa60>)
 8004eee:	4283      	cmp	r3, r0
 8004ef0:	d103      	bne.n	8004efa <main+0x9c2>
			MenuSettingsOutAfterPowerUp(Button);
 8004ef2:	4620      	mov	r0, r4
 8004ef4:	f7fd fb3e 	bl	8002574 <MenuSettingsOutAfterPowerUp>
 8004ef8:	e6bf      	b.n	8004c7a <main+0x742>
		else EnterInMenu_Status = 0;
 8004efa:	f88a 7000 	strb.w	r7, [sl]
 8004efe:	e6bc      	b.n	8004c7a <main+0x742>
	    		OUT_OFF();
 8004f00:	f7fd fc08 	bl	8002714 <OUT_OFF>
 8004f04:	e6c2      	b.n	8004c8c <main+0x754>
 8004f06:	bf00      	nop
 8004f08:	08006a10 	.word	0x08006a10
 8004f0c:	20000796 	.word	0x20000796
 8004f10:	20000795 	.word	0x20000795
 8004f14:	20000785 	.word	0x20000785
 8004f18:	20000774 	.word	0x20000774
 8004f1c:	2000078c 	.word	0x2000078c
 8004f20:	20000790 	.word	0x20000790
 8004f24:	2000077e 	.word	0x2000077e
 8004f28:	40010c00 	.word	0x40010c00
 8004f2c:	08006a68 	.word	0x08006a68
 8004f30:	08006ac0 	.word	0x08006ac0
 8004f34:	08006b18 	.word	0x08006b18
 8004f38:	08006b70 	.word	0x08006b70
 8004f3c:	08006b9c 	.word	0x08006b9c
 8004f40:	08006c20 	.word	0x08006c20
 8004f44:	08006c78 	.word	0x08006c78
 8004f48:	08006cd0 	.word	0x08006cd0
 8004f4c:	08006d28 	.word	0x08006d28
 8004f50:	08006674 	.word	0x08006674
 8004f54:	080063e4 	.word	0x080063e4
 8004f58:	0800638c 	.word	0x0800638c
 8004f5c:	08006494 	.word	0x08006494
 8004f60:	0800643c 	.word	0x0800643c
 8004f64:	0800659c 	.word	0x0800659c
 8004f68:	08006544 	.word	0x08006544
 8004f6c:	080064ec 	.word	0x080064ec
 8004f70:	080065e4 	.word	0x080065e4
 8004f74:	0800662c 	.word	0x0800662c
 8004f78:	080066cc 	.word	0x080066cc
 8004f7c:	080066f8 	.word	0x080066f8
 8004f80:	0800677c 	.word	0x0800677c
 8004f84:	080067d4 	.word	0x080067d4
 8004f88:	0800682c 	.word	0x0800682c
 8004f8c:	08006884 	.word	0x08006884
 8004f90:	080068dc 	.word	0x080068dc
 8004f94:	080069b8 	.word	0x080069b8
 8004f98:	0800698c 	.word	0x0800698c
 8004f9c:	20000794 	.word	0x20000794

08004fa0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004fa0:	4770      	bx	lr

08004fa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004fa2:	e7fe      	b.n	8004fa2 <HardFault_Handler>

08004fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004fa4:	e7fe      	b.n	8004fa4 <MemManage_Handler>

08004fa6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004fa6:	e7fe      	b.n	8004fa6 <BusFault_Handler>

08004fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004fa8:	e7fe      	b.n	8004fa8 <UsageFault_Handler>

08004faa <SVC_Handler>:
 8004faa:	4770      	bx	lr

08004fac <DebugMon_Handler>:
 8004fac:	4770      	bx	lr

08004fae <PendSV_Handler>:
 8004fae:	4770      	bx	lr

08004fb0 <SysTick_Handler>:
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
	//Delay_us(990);
	SysTick_Callback();
 8004fb0:	f7ff b9f4 	b.w	800439c <SysTick_Callback>

08004fb4 <DMA1_Channel1_IRQHandler>:
 8004fb4:	4770      	bx	lr
	...

08004fb8 <USART1_IRQHandler>:
  */
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

	if ( (USART1->SR & USART_SR_TXE) != 0 ) //if(LL_USART_IsActiveFlag_TXE(USART1)) //прерывание по передачи
 8004fb8:	4914      	ldr	r1, [pc, #80]	; (800500c <USART1_IRQHandler+0x54>)
 8004fba:	680b      	ldr	r3, [r1, #0]
 8004fbc:	061b      	lsls	r3, r3, #24
 8004fbe:	d524      	bpl.n	800500a <USART1_IRQHandler+0x52>
	{
		if (bufferUart1.tx_counter > 0) //если есть что передать
 8004fc0:	4b13      	ldr	r3, [pc, #76]	; (8005010 <USART1_IRQHandler+0x58>)
 8004fc2:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8004fc6:	b292      	uxth	r2, r2
 8004fc8:	b1da      	cbz	r2, 8005002 <USART1_IRQHandler+0x4a>
	    {
	      --bufferUart1.tx_counter; // уменьшаем количество не переданных данных
 8004fca:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8004fce:	3a01      	subs	r2, #1
 8004fd0:	b292      	uxth	r2, r2
 8004fd2:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	      //LL_USART_TransmitData8(USART1,tx_buffer[tx_rd_index++]);
	      USART1->DR = bufferUart1.tx_buffer[bufferUart1.tx_rd_index++]; //передаем данные инкрементируя хвост буфера
 8004fd6:	f8b3 2456 	ldrh.w	r2, [r3, #1110]	; 0x456
 8004fda:	b292      	uxth	r2, r2
 8004fdc:	1c50      	adds	r0, r2, #1
 8004fde:	b280      	uxth	r0, r0
 8004fe0:	f8a3 0456 	strh.w	r0, [r3, #1110]	; 0x456
 8004fe4:	441a      	add	r2, r3
 8004fe6:	f892 206c 	ldrb.w	r2, [r2, #108]	; 0x6c
 8004fea:	b2d2      	uxtb	r2, r2
 8004fec:	604a      	str	r2, [r1, #4]
	      if (bufferUart1.tx_rd_index == TX_BUFFER_SIZE) bufferUart1.tx_rd_index=0; //идем по кругу
 8004fee:	f8b3 2456 	ldrh.w	r2, [r3, #1110]	; 0x456
 8004ff2:	b292      	uxth	r2, r2
 8004ff4:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8004ff8:	d107      	bne.n	800500a <USART1_IRQHandler+0x52>
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f8a3 2456 	strh.w	r2, [r3, #1110]	; 0x456
 8005000:	4770      	bx	lr
	    }
	    else //если нечего передать, запрещаем прерывание по передачи
	    {
	    	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 8005002:	68cb      	ldr	r3, [r1, #12]
 8005004:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005008:	60cb      	str	r3, [r1, #12]

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800500a:	4770      	bx	lr
 800500c:	40013800 	.word	0x40013800
 8005010:	200002c2 	.word	0x200002c2

08005014 <TIM6_DAC_IRQHandler>:
 8005014:	4770      	bx	lr

08005016 <TIM7_IRQHandler>:
 8005016:	4770      	bx	lr

08005018 <SystemInit>:
 8005018:	4770      	bx	lr
	...

0800501c <SystemCoreClockUpdate>:
 800501c:	4a12      	ldr	r2, [pc, #72]	; (8005068 <SystemCoreClockUpdate+0x4c>)
 800501e:	b510      	push	{r4, lr}
 8005020:	6853      	ldr	r3, [r2, #4]
 8005022:	4912      	ldr	r1, [pc, #72]	; (800506c <SystemCoreClockUpdate+0x50>)
 8005024:	f003 030c 	and.w	r3, r3, #12
 8005028:	2b08      	cmp	r3, #8
 800502a:	d00a      	beq.n	8005042 <SystemCoreClockUpdate+0x26>
 800502c:	4b10      	ldr	r3, [pc, #64]	; (8005070 <SystemCoreClockUpdate+0x54>)
 800502e:	600b      	str	r3, [r1, #0]
 8005030:	6853      	ldr	r3, [r2, #4]
 8005032:	4a10      	ldr	r2, [pc, #64]	; (8005074 <SystemCoreClockUpdate+0x58>)
 8005034:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005038:	5cd2      	ldrb	r2, [r2, r3]
 800503a:	680b      	ldr	r3, [r1, #0]
 800503c:	40d3      	lsrs	r3, r2
 800503e:	600b      	str	r3, [r1, #0]
 8005040:	bd10      	pop	{r4, pc}
 8005042:	6853      	ldr	r3, [r2, #4]
 8005044:	6850      	ldr	r0, [r2, #4]
 8005046:	f3c3 4383 	ubfx	r3, r3, #18, #4
 800504a:	03c0      	lsls	r0, r0, #15
 800504c:	bf41      	itttt	mi
 800504e:	6ad0      	ldrmi	r0, [r2, #44]	; 0x2c
 8005050:	4c07      	ldrmi	r4, [pc, #28]	; (8005070 <SystemCoreClockUpdate+0x54>)
 8005052:	f000 000f 	andmi.w	r0, r0, #15
 8005056:	3001      	addmi	r0, #1
 8005058:	bf4c      	ite	mi
 800505a:	fbb4 f0f0 	udivmi	r0, r4, r0
 800505e:	4806      	ldrpl	r0, [pc, #24]	; (8005078 <SystemCoreClockUpdate+0x5c>)
 8005060:	3302      	adds	r3, #2
 8005062:	4343      	muls	r3, r0
 8005064:	e7e3      	b.n	800502e <SystemCoreClockUpdate+0x12>
 8005066:	bf00      	nop
 8005068:	40021000 	.word	0x40021000
 800506c:	20000290 	.word	0x20000290
 8005070:	007a1200 	.word	0x007a1200
 8005074:	08006da8 	.word	0x08006da8
 8005078:	003d0900 	.word	0x003d0900

0800507c <printToBufferUART1>:



void printToBufferUART1(volatile char* str)//10us for one char 24Mgz
{
	while (bufferUart1.tx_counter >= TX_BUFFER_SIZE-30); //если буфер переполнен, ждем
 800507c:	4a32      	ldr	r2, [pc, #200]	; (8005148 <printToBufferUART1+0xcc>)
{
 800507e:	b530      	push	{r4, r5, lr}
 8005080:	4613      	mov	r3, r2
	while (bufferUart1.tx_counter >= TX_BUFFER_SIZE-30); //если буфер переполнен, ждем
 8005082:	f240 34c9 	movw	r4, #969	; 0x3c9
 8005086:	f8b2 1458 	ldrh.w	r1, [r2, #1112]	; 0x458
 800508a:	428c      	cmp	r4, r1
 800508c:	d3fb      	bcc.n	8005086 <printToBufferUART1+0xa>

	//LL_USART_DisableIT_TXE(USART1); //запрещаем прерывание, чтобы оно не мешало менять переменную
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 800508e:	492f      	ldr	r1, [pc, #188]	; (800514c <printToBufferUART1+0xd0>)
 8005090:	68ca      	ldr	r2, [r1, #12]
 8005092:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005096:	60ca      	str	r2, [r1, #12]

	while (*str != 0)
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8005098:	2100      	movs	r1, #0
	while (*str != 0)
 800509a:	7802      	ldrb	r2, [r0, #0]
 800509c:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 80050a0:	bb4a      	cbnz	r2, 80050f6 <printToBufferUART1+0x7a>
		#if DEBUG_LEVEL
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
		#endif
	}
	bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]='\n'; //то кладем данные в буфер
 80050a2:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 80050a6:	b292      	uxth	r2, r2
 80050a8:	1c51      	adds	r1, r2, #1
 80050aa:	b289      	uxth	r1, r1
 80050ac:	f8a3 1454 	strh.w	r1, [r3, #1108]	; 0x454
 80050b0:	210a      	movs	r1, #10
 80050b2:	441a      	add	r2, r3
 80050b4:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
	if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 80050b8:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 80050bc:	b292      	uxth	r2, r2
 80050be:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80050c2:	bf08      	it	eq
 80050c4:	f8a3 4454 	strheq.w	r4, [r3, #1108]	; 0x454
	++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 80050c8:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 80050cc:	3201      	adds	r2, #1
 80050ce:	b292      	uxth	r2, r2
 80050d0:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	#if DEBUG_LEVEL
		if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 80050d4:	f8b3 245a 	ldrh.w	r2, [r3, #1114]	; 0x45a
 80050d8:	f8b3 1458 	ldrh.w	r1, [r3, #1112]	; 0x458
 80050dc:	4291      	cmp	r1, r2
			bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 80050de:	bf82      	ittt	hi
 80050e0:	f8b3 2458 	ldrhhi.w	r2, [r3, #1112]	; 0x458
 80050e4:	b292      	uxthhi	r2, r2
 80050e6:	f8a3 245a 	strhhi.w	r2, [r3, #1114]	; 0x45a
	#endif

	//LL_USART_EnableIT_TXE(USART1); //разрешаем прерывание
	USART1->CR1 |= USART_CR1_TXEIE;// Interrupt enable
 80050ea:	4a18      	ldr	r2, [pc, #96]	; (800514c <printToBufferUART1+0xd0>)
 80050ec:	68d3      	ldr	r3, [r2, #12]
 80050ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f2:	60d3      	str	r3, [r2, #12]
}
 80050f4:	bd30      	pop	{r4, r5, pc}
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
 80050f6:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 80050fa:	1c44      	adds	r4, r0, #1
 80050fc:	b292      	uxth	r2, r2
 80050fe:	1c55      	adds	r5, r2, #1
 8005100:	b2ad      	uxth	r5, r5
 8005102:	f8a3 5454 	strh.w	r5, [r3, #1108]	; 0x454
 8005106:	7800      	ldrb	r0, [r0, #0]
 8005108:	441a      	add	r2, r3
 800510a:	b2c0      	uxtb	r0, r0
 800510c:	f882 006c 	strb.w	r0, [r2, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8005110:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 8005114:	b292      	uxth	r2, r2
 8005116:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800511a:	bf08      	it	eq
 800511c:	f8a3 1454 	strheq.w	r1, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 8005120:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 8005124:	3201      	adds	r2, #1
 8005126:	b292      	uxth	r2, r2
 8005128:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 800512c:	f8b3 245a 	ldrh.w	r2, [r3, #1114]	; 0x45a
 8005130:	f8b3 0458 	ldrh.w	r0, [r3, #1112]	; 0x458
 8005134:	4290      	cmp	r0, r2
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 8005136:	bf88      	it	hi
 8005138:	f8b3 2458 	ldrhhi.w	r2, [r3, #1112]	; 0x458
{
 800513c:	4620      	mov	r0, r4
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 800513e:	bf84      	itt	hi
 8005140:	b292      	uxthhi	r2, r2
 8005142:	f8a3 245a 	strhhi.w	r2, [r3, #1114]	; 0x45a
 8005146:	e7a8      	b.n	800509a <printToBufferUART1+0x1e>
 8005148:	200002c2 	.word	0x200002c2
 800514c:	40013800 	.word	0x40013800

08005150 <printToBufferWithoutEndUART1>:


void printToBufferWithoutEndUART1(volatile char* str)//10us for one char 24Mgz
{
	while (bufferUart1.tx_counter >= TX_BUFFER_SIZE-30); //если буфер переполнен, ждем
 8005150:	4a1f      	ldr	r2, [pc, #124]	; (80051d0 <printToBufferWithoutEndUART1+0x80>)
{
 8005152:	b530      	push	{r4, r5, lr}
 8005154:	4613      	mov	r3, r2
	while (bufferUart1.tx_counter >= TX_BUFFER_SIZE-30); //если буфер переполнен, ждем
 8005156:	f240 34c9 	movw	r4, #969	; 0x3c9
 800515a:	f8b2 1458 	ldrh.w	r1, [r2, #1112]	; 0x458
 800515e:	428c      	cmp	r4, r1
 8005160:	d3fb      	bcc.n	800515a <printToBufferWithoutEndUART1+0xa>

	//LL_USART_DisableIT_TXE(USART1); //запрещаем прерывание, чтобы оно не мешало менять переменную
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 8005162:	491c      	ldr	r1, [pc, #112]	; (80051d4 <printToBufferWithoutEndUART1+0x84>)
 8005164:	68ca      	ldr	r2, [r1, #12]
 8005166:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800516a:	60ca      	str	r2, [r1, #12]

	while (*str != 0)
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 800516c:	2100      	movs	r1, #0
	while (*str != 0)
 800516e:	7802      	ldrb	r2, [r0, #0]
 8005170:	b92a      	cbnz	r2, 800517e <printToBufferWithoutEndUART1+0x2e>
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
		#endif

	}
	USART1->CR1 |= USART_CR1_TXEIE;// Interrupt enable
 8005172:	4a18      	ldr	r2, [pc, #96]	; (80051d4 <printToBufferWithoutEndUART1+0x84>)
 8005174:	68d3      	ldr	r3, [r2, #12]
 8005176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800517a:	60d3      	str	r3, [r2, #12]
}
 800517c:	bd30      	pop	{r4, r5, pc}
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
 800517e:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 8005182:	1c44      	adds	r4, r0, #1
 8005184:	b292      	uxth	r2, r2
 8005186:	1c55      	adds	r5, r2, #1
 8005188:	b2ad      	uxth	r5, r5
 800518a:	f8a3 5454 	strh.w	r5, [r3, #1108]	; 0x454
 800518e:	7800      	ldrb	r0, [r0, #0]
 8005190:	441a      	add	r2, r3
 8005192:	b2c0      	uxtb	r0, r0
 8005194:	f882 006c 	strb.w	r0, [r2, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8005198:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 800519c:	b292      	uxth	r2, r2
 800519e:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80051a2:	bf08      	it	eq
 80051a4:	f8a3 1454 	strheq.w	r1, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 80051a8:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 80051ac:	3201      	adds	r2, #1
 80051ae:	b292      	uxth	r2, r2
 80051b0:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 80051b4:	f8b3 245a 	ldrh.w	r2, [r3, #1114]	; 0x45a
 80051b8:	f8b3 0458 	ldrh.w	r0, [r3, #1112]	; 0x458
 80051bc:	4290      	cmp	r0, r2
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 80051be:	bf88      	it	hi
 80051c0:	f8b3 2458 	ldrhhi.w	r2, [r3, #1112]	; 0x458
{
 80051c4:	4620      	mov	r0, r4
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 80051c6:	bf84      	itt	hi
 80051c8:	b292      	uxthhi	r2, r2
 80051ca:	f8a3 245a 	strhhi.w	r2, [r3, #1114]	; 0x45a
 80051ce:	e7ce      	b.n	800516e <printToBufferWithoutEndUART1+0x1e>
 80051d0:	200002c2 	.word	0x200002c2
 80051d4:	40013800 	.word	0x40013800

080051d8 <printToBufferUART1D>:

void printToBufferUART1D(volatile char* str, volatile int32_t value, volatile uint8_t koma) //10us for one char + 6us for one digit 24Mgz
{
 80051d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80051da:	9101      	str	r1, [sp, #4]
 80051dc:	f88d 2003 	strb.w	r2, [sp, #3]
	char *str1;
	if (koma == 0)
 80051e0:	f89d 3003 	ldrb.w	r3, [sp, #3]
{
 80051e4:	4604      	mov	r4, r0
		str1 = itoa(value);
 80051e6:	9801      	ldr	r0, [sp, #4]
	if (koma == 0)
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d144      	bne.n	8005276 <printToBufferUART1D+0x9e>
		str1 = itoa(value);
 80051ec:	f7fb fff2 	bl	80011d4 <itoa>
	else
		str1 = itoa_koma(value,koma);

	while (bufferUart1.tx_counter >= TX_BUFFER_SIZE-30); //если буфер переполнен, ждем
 80051f0:	4a49      	ldr	r2, [pc, #292]	; (8005318 <printToBufferUART1D+0x140>)
 80051f2:	f240 35c9 	movw	r5, #969	; 0x3c9
 80051f6:	4613      	mov	r3, r2
 80051f8:	f8b2 1458 	ldrh.w	r1, [r2, #1112]	; 0x458
 80051fc:	428d      	cmp	r5, r1
 80051fe:	d3fb      	bcc.n	80051f8 <printToBufferUART1D+0x20>
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable

	while (*str != 0)
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8005200:	2500      	movs	r5, #0
	USART1->CR1 &= ~USART_CR1_TXEIE;  // Interrupt Disable
 8005202:	4946      	ldr	r1, [pc, #280]	; (800531c <printToBufferUART1D+0x144>)
 8005204:	68ca      	ldr	r2, [r1, #12]
 8005206:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800520a:	60ca      	str	r2, [r1, #12]
	while (*str != 0)
 800520c:	7822      	ldrb	r2, [r4, #0]
 800520e:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8005212:	2a00      	cmp	r2, #0
 8005214:	d134      	bne.n	8005280 <printToBufferUART1D+0xa8>
 8005216:	3801      	subs	r0, #1

	}

	while (*str1 != 0)
	{
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str1++; //то кладем данные в буфер
 8005218:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
	while (*str1 != 0)
 800521c:	f810 4f01 	ldrb.w	r4, [r0, #1]!
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str1++; //то кладем данные в буфер
 8005220:	b292      	uxth	r2, r2
	while (*str1 != 0)
 8005222:	2c00      	cmp	r4, #0
 8005224:	d155      	bne.n	80052d2 <printToBufferUART1D+0xfa>
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
		#endif

	}

	bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]='\n'; //то кладем данные в буфер
 8005226:	1c51      	adds	r1, r2, #1
 8005228:	b289      	uxth	r1, r1
 800522a:	f8a3 1454 	strh.w	r1, [r3, #1108]	; 0x454
 800522e:	210a      	movs	r1, #10
 8005230:	441a      	add	r2, r3
 8005232:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
	if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 8005236:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 800523a:	b292      	uxth	r2, r2
 800523c:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8005240:	bf08      	it	eq
 8005242:	f8a3 4454 	strheq.w	r4, [r3, #1108]	; 0x454
	++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 8005246:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 800524a:	3201      	adds	r2, #1
 800524c:	b292      	uxth	r2, r2
 800524e:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
	#if DEBUG_LEVEL
		if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 8005252:	f8b3 245a 	ldrh.w	r2, [r3, #1114]	; 0x45a
 8005256:	f8b3 1458 	ldrh.w	r1, [r3, #1112]	; 0x458
 800525a:	4291      	cmp	r1, r2
			bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 800525c:	bf82      	ittt	hi
 800525e:	f8b3 2458 	ldrhhi.w	r2, [r3, #1112]	; 0x458
 8005262:	b292      	uxthhi	r2, r2
 8005264:	f8a3 245a 	strhhi.w	r2, [r3, #1114]	; 0x45a
	#endif

	//LL_USART_EnableIT_TXE(USART1); //разрешаем прерывание
	USART1->CR1 |= USART_CR1_TXEIE;// Interrupt enable
 8005268:	4a2c      	ldr	r2, [pc, #176]	; (800531c <printToBufferUART1D+0x144>)
 800526a:	68d3      	ldr	r3, [r2, #12]
 800526c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005270:	60d3      	str	r3, [r2, #12]
}
 8005272:	b002      	add	sp, #8
 8005274:	bd70      	pop	{r4, r5, r6, pc}
		str1 = itoa_koma(value,koma);
 8005276:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800527a:	f7fc f81f 	bl	80012bc <itoa_koma>
 800527e:	e7b7      	b.n	80051f0 <printToBufferUART1D+0x18>
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str++; //то кладем данные в буфер
 8005280:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 8005284:	1c61      	adds	r1, r4, #1
 8005286:	b292      	uxth	r2, r2
 8005288:	1c56      	adds	r6, r2, #1
 800528a:	b2b6      	uxth	r6, r6
 800528c:	f8a3 6454 	strh.w	r6, [r3, #1108]	; 0x454
 8005290:	7824      	ldrb	r4, [r4, #0]
 8005292:	441a      	add	r2, r3
 8005294:	b2e4      	uxtb	r4, r4
 8005296:	f882 406c 	strb.w	r4, [r2, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 800529a:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 800529e:	b292      	uxth	r2, r2
 80052a0:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80052a4:	bf08      	it	eq
 80052a6:	f8a3 5454 	strheq.w	r5, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 80052aa:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 80052ae:	3201      	adds	r2, #1
 80052b0:	b292      	uxth	r2, r2
 80052b2:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 80052b6:	f8b3 245a 	ldrh.w	r2, [r3, #1114]	; 0x45a
 80052ba:	f8b3 4458 	ldrh.w	r4, [r3, #1112]	; 0x458
 80052be:	4294      	cmp	r4, r2
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 80052c0:	bf88      	it	hi
 80052c2:	f8b3 2458 	ldrhhi.w	r2, [r3, #1112]	; 0x458
{
 80052c6:	460c      	mov	r4, r1
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 80052c8:	bf84      	itt	hi
 80052ca:	b292      	uxthhi	r2, r2
 80052cc:	f8a3 245a 	strhhi.w	r2, [r3, #1114]	; 0x45a
 80052d0:	e79c      	b.n	800520c <printToBufferUART1D+0x34>
		bufferUart1.tx_buffer[bufferUart1.tx_wr_index++]=*str1++; //то кладем данные в буфер
 80052d2:	1c54      	adds	r4, r2, #1
 80052d4:	b2a4      	uxth	r4, r4
 80052d6:	f8a3 4454 	strh.w	r4, [r3, #1108]	; 0x454
 80052da:	7804      	ldrb	r4, [r0, #0]
 80052dc:	441a      	add	r2, r3
 80052de:	f882 406c 	strb.w	r4, [r2, #108]	; 0x6c
		if (bufferUart1.tx_wr_index == TX_BUFFER_SIZE) bufferUart1.tx_wr_index=0; //идем по кругу
 80052e2:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	; 0x454
 80052e6:	b292      	uxth	r2, r2
 80052e8:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80052ec:	bf08      	it	eq
 80052ee:	f8a3 1454 	strheq.w	r1, [r3, #1108]	; 0x454
		++bufferUart1.tx_counter; //увеличиваем счетчик количества данных в буфере
 80052f2:	f8b3 2458 	ldrh.w	r2, [r3, #1112]	; 0x458
 80052f6:	3201      	adds	r2, #1
 80052f8:	b292      	uxth	r2, r2
 80052fa:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
			if (bufferUart1.tx_buffer_overflow < bufferUart1.tx_counter)
 80052fe:	f8b3 245a 	ldrh.w	r2, [r3, #1114]	; 0x45a
 8005302:	f8b3 4458 	ldrh.w	r4, [r3, #1112]	; 0x458
 8005306:	4294      	cmp	r4, r2
				bufferUart1.tx_buffer_overflow = bufferUart1.tx_counter;
 8005308:	bf82      	ittt	hi
 800530a:	f8b3 2458 	ldrhhi.w	r2, [r3, #1112]	; 0x458
 800530e:	b292      	uxthhi	r2, r2
 8005310:	f8a3 245a 	strhhi.w	r2, [r3, #1114]	; 0x45a
 8005314:	e780      	b.n	8005218 <printToBufferUART1D+0x40>
 8005316:	bf00      	nop
 8005318:	200002c2 	.word	0x200002c2
 800531c:	40013800 	.word	0x40013800

08005320 <putCharDirectToUart1>:
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8005320:	4b02      	ldr	r3, [pc, #8]	; (800532c <putCharDirectToUart1+0xc>)
 8005322:	681a      	ldr	r2, [r3, #0]
	  putCharInBufferUart1(*s++);
}

void putCharDirectToUart1(uint8_t c)
{
	while (!LL_USART_IsActiveFlag_TXE(USART1));
 8005324:	0612      	lsls	r2, r2, #24
 8005326:	d5fc      	bpl.n	8005322 <putCharDirectToUart1+0x2>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8005328:	6058      	str	r0, [r3, #4]
	LL_USART_TransmitData8(USART1, c);
	c++;
}
 800532a:	4770      	bx	lr
 800532c:	40013800 	.word	0x40013800

08005330 <putStringDirectToUart1>:

void putStringDirectToUart1(volatile char *s)
{
 8005330:	b508      	push	{r3, lr}
  while (*s != 0)
 8005332:	7803      	ldrb	r3, [r0, #0]
 8005334:	b903      	cbnz	r3, 8005338 <putStringDirectToUart1+0x8>
	  putCharDirectToUart1(*s++);
}
 8005336:	bd08      	pop	{r3, pc}
	  putCharDirectToUart1(*s++);
 8005338:	1c41      	adds	r1, r0, #1
 800533a:	7800      	ldrb	r0, [r0, #0]
 800533c:	f7ff fff0 	bl	8005320 <putCharDirectToUart1>
 8005340:	4608      	mov	r0, r1
 8005342:	e7f6      	b.n	8005332 <putStringDirectToUart1+0x2>

08005344 <Print_to_USART1_d>:
{
 8005344:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005346:	9001      	str	r0, [sp, #4]
 8005348:	460d      	mov	r5, r1
		str = itoa(value);
 800534a:	9801      	ldr	r0, [sp, #4]
	if (koma == 0)
 800534c:	b972      	cbnz	r2, 800536c <Print_to_USART1_d+0x28>
		str = itoa(value);
 800534e:	f7fb ff41 	bl	80011d4 <itoa>
		str = itoa_koma(value,koma);
 8005352:	4604      	mov	r4, r0
	putStringDirectToUart1(string);
 8005354:	4628      	mov	r0, r5
 8005356:	f7ff ffeb 	bl	8005330 <putStringDirectToUart1>
	putStringDirectToUart1(str);
 800535a:	4620      	mov	r0, r4
 800535c:	f7ff ffe8 	bl	8005330 <putStringDirectToUart1>
	putCharDirectToUart1('\n');
 8005360:	200a      	movs	r0, #10
}
 8005362:	b003      	add	sp, #12
 8005364:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	putCharDirectToUart1('\n');
 8005368:	f7ff bfda 	b.w	8005320 <putCharDirectToUart1>
		str = itoa_koma(value,koma);
 800536c:	4611      	mov	r1, r2
 800536e:	f7fb ffa5 	bl	80012bc <itoa_koma>
 8005372:	e7ee      	b.n	8005352 <Print_to_USART1_d+0xe>

08005374 <Reset_Handler>:
 8005374:	2100      	movs	r1, #0
 8005376:	e003      	b.n	8005380 <LoopCopyDataInit>

08005378 <CopyDataInit>:
 8005378:	4b0b      	ldr	r3, [pc, #44]	; (80053a8 <LoopFillZerobss+0x14>)
 800537a:	585b      	ldr	r3, [r3, r1]
 800537c:	5043      	str	r3, [r0, r1]
 800537e:	3104      	adds	r1, #4

08005380 <LoopCopyDataInit>:
 8005380:	480a      	ldr	r0, [pc, #40]	; (80053ac <LoopFillZerobss+0x18>)
 8005382:	4b0b      	ldr	r3, [pc, #44]	; (80053b0 <LoopFillZerobss+0x1c>)
 8005384:	1842      	adds	r2, r0, r1
 8005386:	429a      	cmp	r2, r3
 8005388:	d3f6      	bcc.n	8005378 <CopyDataInit>
 800538a:	4a0a      	ldr	r2, [pc, #40]	; (80053b4 <LoopFillZerobss+0x20>)
 800538c:	e002      	b.n	8005394 <LoopFillZerobss>

0800538e <FillZerobss>:
 800538e:	2300      	movs	r3, #0
 8005390:	f842 3b04 	str.w	r3, [r2], #4

08005394 <LoopFillZerobss>:
 8005394:	4b08      	ldr	r3, [pc, #32]	; (80053b8 <LoopFillZerobss+0x24>)
 8005396:	429a      	cmp	r2, r3
 8005398:	d3f9      	bcc.n	800538e <FillZerobss>
 800539a:	f7ff fe3d 	bl	8005018 <SystemInit>
 800539e:	f000 fa19 	bl	80057d4 <__libc_init_array>
 80053a2:	f7ff f8c9 	bl	8004538 <main>
 80053a6:	4770      	bx	lr
 80053a8:	08006dc8 	.word	0x08006dc8
 80053ac:	20000000 	.word	0x20000000
 80053b0:	20000294 	.word	0x20000294
 80053b4:	20000294 	.word	0x20000294
 80053b8:	20000a04 	.word	0x20000a04

080053bc <ADC1_IRQHandler>:
 80053bc:	e7fe      	b.n	80053bc <ADC1_IRQHandler>

080053be <LL_ADC_Init>:
 80053be:	6883      	ldr	r3, [r0, #8]
 80053c0:	b510      	push	{r4, lr}
 80053c2:	f013 0301 	ands.w	r3, r3, #1
 80053c6:	d10d      	bne.n	80053e4 <LL_ADC_Init+0x26>
 80053c8:	6842      	ldr	r2, [r0, #4]
 80053ca:	684c      	ldr	r4, [r1, #4]
 80053cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053d0:	4322      	orrs	r2, r4
 80053d2:	6042      	str	r2, [r0, #4]
 80053d4:	6882      	ldr	r2, [r0, #8]
 80053d6:	6809      	ldr	r1, [r1, #0]
 80053d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053dc:	430a      	orrs	r2, r1
 80053de:	6082      	str	r2, [r0, #8]
 80053e0:	4618      	mov	r0, r3
 80053e2:	bd10      	pop	{r4, pc}
 80053e4:	2001      	movs	r0, #1
 80053e6:	e7fc      	b.n	80053e2 <LL_ADC_Init+0x24>

080053e8 <LL_ADC_REG_Init>:
 80053e8:	6883      	ldr	r3, [r0, #8]
 80053ea:	b510      	push	{r4, lr}
 80053ec:	07db      	lsls	r3, r3, #31
 80053ee:	d41b      	bmi.n	8005428 <LL_ADC_REG_Init+0x40>
 80053f0:	6843      	ldr	r3, [r0, #4]
 80053f2:	684a      	ldr	r2, [r1, #4]
 80053f4:	f423 4368 	bic.w	r3, r3, #59392	; 0xe800
 80053f8:	b112      	cbz	r2, 8005400 <LL_ADC_REG_Init+0x18>
 80053fa:	688c      	ldr	r4, [r1, #8]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	4323      	orrs	r3, r4
 8005400:	6043      	str	r3, [r0, #4]
 8005402:	6883      	ldr	r3, [r0, #8]
 8005404:	680c      	ldr	r4, [r1, #0]
 8005406:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 800540a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800540e:	4323      	orrs	r3, r4
 8005410:	68cc      	ldr	r4, [r1, #12]
 8005412:	6909      	ldr	r1, [r1, #16]
 8005414:	4323      	orrs	r3, r4
 8005416:	430b      	orrs	r3, r1
 8005418:	6083      	str	r3, [r0, #8]
 800541a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800541c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005420:	4313      	orrs	r3, r2
 8005422:	62c3      	str	r3, [r0, #44]	; 0x2c
 8005424:	2000      	movs	r0, #0
 8005426:	bd10      	pop	{r4, pc}
 8005428:	2001      	movs	r0, #1
 800542a:	e7fc      	b.n	8005426 <LL_ADC_REG_Init+0x3e>

0800542c <LL_DAC_Init>:
 800542c:	2301      	movs	r3, #1
 800542e:	b570      	push	{r4, r5, r6, lr}
 8005430:	f001 0110 	and.w	r1, r1, #16
 8005434:	6805      	ldr	r5, [r0, #0]
 8005436:	fa03 f401 	lsl.w	r4, r3, r1
 800543a:	43ac      	bics	r4, r5
 800543c:	d01d      	beq.n	800547a <LL_DAC_Init+0x4e>
 800543e:	e9d2 4300 	ldrd	r4, r3, [r2]
 8005442:	68d6      	ldr	r6, [r2, #12]
 8005444:	b17b      	cbz	r3, 8005466 <LL_DAC_Init+0x3a>
 8005446:	4323      	orrs	r3, r4
 8005448:	f640 74fa 	movw	r4, #4090	; 0xffa
 800544c:	6892      	ldr	r2, [r2, #8]
 800544e:	4333      	orrs	r3, r6
 8005450:	6805      	ldr	r5, [r0, #0]
 8005452:	4313      	orrs	r3, r2
 8005454:	408b      	lsls	r3, r1
 8005456:	fa04 f101 	lsl.w	r1, r4, r1
 800545a:	ea25 0101 	bic.w	r1, r5, r1
 800545e:	4319      	orrs	r1, r3
 8005460:	6001      	str	r1, [r0, #0]
 8005462:	2000      	movs	r0, #0
 8005464:	bd70      	pop	{r4, r5, r6, pc}
 8005466:	25fa      	movs	r5, #250	; 0xfa
 8005468:	6802      	ldr	r2, [r0, #0]
 800546a:	408d      	lsls	r5, r1
 800546c:	4334      	orrs	r4, r6
 800546e:	ea22 0205 	bic.w	r2, r2, r5
 8005472:	fa04 f101 	lsl.w	r1, r4, r1
 8005476:	4311      	orrs	r1, r2
 8005478:	e7f2      	b.n	8005460 <LL_DAC_Init+0x34>
 800547a:	4618      	mov	r0, r3
 800547c:	e7f2      	b.n	8005464 <LL_DAC_Init+0x38>

0800547e <LL_GPIO_Init>:
 800547e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005482:	680c      	ldr	r4, [r1, #0]
 8005484:	f3c4 240f 	ubfx	r4, r4, #8, #16
 8005488:	fa94 f2a4 	rbit	r2, r4
 800548c:	f04f 0a0f 	mov.w	sl, #15
 8005490:	fab2 f282 	clz	r2, r2
 8005494:	f04f 0903 	mov.w	r9, #3
 8005498:	2704      	movs	r7, #4
 800549a:	f04f 1c01 	mov.w	ip, #65537	; 0x10001
 800549e:	f240 1e01 	movw	lr, #257	; 0x101
 80054a2:	fa34 f302 	lsrs.w	r3, r4, r2
 80054a6:	d102      	bne.n	80054ae <LL_GPIO_Init+0x30>
 80054a8:	4618      	mov	r0, r3
 80054aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ae:	2301      	movs	r3, #1
 80054b0:	4093      	lsls	r3, r2
 80054b2:	4223      	tst	r3, r4
 80054b4:	d05e      	beq.n	8005574 <LL_GPIO_Init+0xf6>
 80054b6:	2a07      	cmp	r2, #7
 80054b8:	bf85      	ittet	hi
 80054ba:	f1a2 0308 	subhi.w	r3, r2, #8
 80054be:	fa0c f303 	lslhi.w	r3, ip, r3
 80054c2:	fa0e f302 	lslls.w	r3, lr, r2
 80054c6:	f043 6380 	orrhi.w	r3, r3, #67108864	; 0x4000000
 80054ca:	68c5      	ldr	r5, [r0, #12]
 80054cc:	0a1e      	lsrs	r6, r3, #8
 80054ce:	fa96 f8a6 	rbit	r8, r6
 80054d2:	fab8 f888 	clz	r8, r8
 80054d6:	ea25 0606 	bic.w	r6, r5, r6
 80054da:	690d      	ldr	r5, [r1, #16]
 80054dc:	fa05 f508 	lsl.w	r5, r5, r8
 80054e0:	4335      	orrs	r5, r6
 80054e2:	60c5      	str	r5, [r0, #12]
 80054e4:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80054e8:	fa93 f6a3 	rbit	r6, r3
 80054ec:	fab6 f686 	clz	r6, r6
 80054f0:	fa93 fba3 	rbit	fp, r3
 80054f4:	fabb fb8b 	clz	fp, fp
 80054f8:	00b6      	lsls	r6, r6, #2
 80054fa:	fa0a f506 	lsl.w	r5, sl, r6
 80054fe:	f850 6008 	ldr.w	r6, [r0, r8]
 8005502:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8005506:	ea26 0605 	bic.w	r6, r6, r5
 800550a:	684d      	ldr	r5, [r1, #4]
 800550c:	fa05 fb0b 	lsl.w	fp, r5, fp
 8005510:	ea46 060b 	orr.w	r6, r6, fp
 8005514:	f840 6008 	str.w	r6, [r0, r8]
 8005518:	684d      	ldr	r5, [r1, #4]
 800551a:	f025 0508 	bic.w	r5, r5, #8
 800551e:	2d01      	cmp	r5, #1
 8005520:	d128      	bne.n	8005574 <LL_GPIO_Init+0xf6>
 8005522:	fa93 f5a3 	rbit	r5, r3
 8005526:	fab5 f585 	clz	r5, r5
 800552a:	fa93 fba3 	rbit	fp, r3
 800552e:	fabb fb8b 	clz	fp, fp
 8005532:	00ad      	lsls	r5, r5, #2
 8005534:	fa09 f505 	lsl.w	r5, r9, r5
 8005538:	ea26 0605 	bic.w	r6, r6, r5
 800553c:	688d      	ldr	r5, [r1, #8]
 800553e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8005542:	fa05 fb0b 	lsl.w	fp, r5, fp
 8005546:	ea46 060b 	orr.w	r6, r6, fp
 800554a:	f840 6008 	str.w	r6, [r0, r8]
 800554e:	fa93 f5a3 	rbit	r5, r3
 8005552:	fab5 f585 	clz	r5, r5
 8005556:	fa93 f3a3 	rbit	r3, r3
 800555a:	fab3 f383 	clz	r3, r3
 800555e:	00ad      	lsls	r5, r5, #2
 8005560:	fa07 f505 	lsl.w	r5, r7, r5
 8005564:	ea26 0505 	bic.w	r5, r6, r5
 8005568:	68ce      	ldr	r6, [r1, #12]
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	409e      	lsls	r6, r3
 800556e:	432e      	orrs	r6, r5
 8005570:	f840 6008 	str.w	r6, [r0, r8]
 8005574:	3201      	adds	r2, #1
 8005576:	e794      	b.n	80054a2 <LL_GPIO_Init+0x24>

08005578 <RCC_GetHCLKClockFreq>:
 8005578:	4b03      	ldr	r3, [pc, #12]	; (8005588 <RCC_GetHCLKClockFreq+0x10>)
 800557a:	4a04      	ldr	r2, [pc, #16]	; (800558c <RCC_GetHCLKClockFreq+0x14>)
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005582:	5cd3      	ldrb	r3, [r2, r3]
 8005584:	40d8      	lsrs	r0, r3
 8005586:	4770      	bx	lr
 8005588:	40021000 	.word	0x40021000
 800558c:	08006da8 	.word	0x08006da8

08005590 <RCC_GetPCLK1ClockFreq>:
 8005590:	4b03      	ldr	r3, [pc, #12]	; (80055a0 <RCC_GetPCLK1ClockFreq+0x10>)
 8005592:	4a04      	ldr	r2, [pc, #16]	; (80055a4 <RCC_GetPCLK1ClockFreq+0x14>)
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800559a:	5cd3      	ldrb	r3, [r2, r3]
 800559c:	40d8      	lsrs	r0, r3
 800559e:	4770      	bx	lr
 80055a0:	40021000 	.word	0x40021000
 80055a4:	08006db8 	.word	0x08006db8

080055a8 <RCC_GetPCLK2ClockFreq>:
 80055a8:	4b03      	ldr	r3, [pc, #12]	; (80055b8 <RCC_GetPCLK2ClockFreq+0x10>)
 80055aa:	4a04      	ldr	r2, [pc, #16]	; (80055bc <RCC_GetPCLK2ClockFreq+0x14>)
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80055b2:	5cd3      	ldrb	r3, [r2, r3]
 80055b4:	40d8      	lsrs	r0, r3
 80055b6:	4770      	bx	lr
 80055b8:	40021000 	.word	0x40021000
 80055bc:	08006db8 	.word	0x08006db8

080055c0 <RCC_PLL_GetFreqDomain_SYS>:
 80055c0:	4b09      	ldr	r3, [pc, #36]	; (80055e8 <RCC_PLL_GetFreqDomain_SYS+0x28>)
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80055c8:	b162      	cbz	r2, 80055e4 <RCC_PLL_GetFreqDomain_SYS+0x24>
 80055ca:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80055cc:	4a07      	ldr	r2, [pc, #28]	; (80055ec <RCC_PLL_GetFreqDomain_SYS+0x2c>)
 80055ce:	f000 000f 	and.w	r0, r0, #15
 80055d2:	3001      	adds	r0, #1
 80055d4:	fbb2 f0f0 	udiv	r0, r2, r0
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f3c3 4383 	ubfx	r3, r3, #18, #4
 80055de:	3302      	adds	r3, #2
 80055e0:	4358      	muls	r0, r3
 80055e2:	4770      	bx	lr
 80055e4:	4802      	ldr	r0, [pc, #8]	; (80055f0 <RCC_PLL_GetFreqDomain_SYS+0x30>)
 80055e6:	e7f7      	b.n	80055d8 <RCC_PLL_GetFreqDomain_SYS+0x18>
 80055e8:	40021000 	.word	0x40021000
 80055ec:	007a1200 	.word	0x007a1200
 80055f0:	003d0900 	.word	0x003d0900

080055f4 <RCC_GetSystemClockFreq>:
 80055f4:	4b04      	ldr	r3, [pc, #16]	; (8005608 <RCC_GetSystemClockFreq+0x14>)
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f003 030c 	and.w	r3, r3, #12
 80055fc:	2b08      	cmp	r3, #8
 80055fe:	d101      	bne.n	8005604 <RCC_GetSystemClockFreq+0x10>
 8005600:	f7ff bfde 	b.w	80055c0 <RCC_PLL_GetFreqDomain_SYS>
 8005604:	4801      	ldr	r0, [pc, #4]	; (800560c <RCC_GetSystemClockFreq+0x18>)
 8005606:	4770      	bx	lr
 8005608:	40021000 	.word	0x40021000
 800560c:	007a1200 	.word	0x007a1200

08005610 <LL_RCC_GetSystemClocksFreq>:
 8005610:	b508      	push	{r3, lr}
 8005612:	4601      	mov	r1, r0
 8005614:	f7ff ffee 	bl	80055f4 <RCC_GetSystemClockFreq>
 8005618:	6008      	str	r0, [r1, #0]
 800561a:	f7ff ffad 	bl	8005578 <RCC_GetHCLKClockFreq>
 800561e:	6048      	str	r0, [r1, #4]
 8005620:	f7ff ffb6 	bl	8005590 <RCC_GetPCLK1ClockFreq>
 8005624:	6088      	str	r0, [r1, #8]
 8005626:	6848      	ldr	r0, [r1, #4]
 8005628:	f7ff ffbe 	bl	80055a8 <RCC_GetPCLK2ClockFreq>
 800562c:	60c8      	str	r0, [r1, #12]
 800562e:	bd08      	pop	{r3, pc}

08005630 <LL_TIM_Init>:
 8005630:	4a25      	ldr	r2, [pc, #148]	; (80056c8 <LL_TIM_Init+0x98>)
 8005632:	6803      	ldr	r3, [r0, #0]
 8005634:	4290      	cmp	r0, r2
 8005636:	d00a      	beq.n	800564e <LL_TIM_Init+0x1e>
 8005638:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800563c:	d007      	beq.n	800564e <LL_TIM_Init+0x1e>
 800563e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005642:	4290      	cmp	r0, r2
 8005644:	d003      	beq.n	800564e <LL_TIM_Init+0x1e>
 8005646:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800564a:	4290      	cmp	r0, r2
 800564c:	d111      	bne.n	8005672 <LL_TIM_Init+0x42>
 800564e:	684a      	ldr	r2, [r1, #4]
 8005650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005654:	4313      	orrs	r3, r2
 8005656:	4a1c      	ldr	r2, [pc, #112]	; (80056c8 <LL_TIM_Init+0x98>)
 8005658:	4290      	cmp	r0, r2
 800565a:	d015      	beq.n	8005688 <LL_TIM_Init+0x58>
 800565c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005660:	d012      	beq.n	8005688 <LL_TIM_Init+0x58>
 8005662:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005666:	4290      	cmp	r0, r2
 8005668:	d00e      	beq.n	8005688 <LL_TIM_Init+0x58>
 800566a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800566e:	4290      	cmp	r0, r2
 8005670:	d00a      	beq.n	8005688 <LL_TIM_Init+0x58>
 8005672:	4a16      	ldr	r2, [pc, #88]	; (80056cc <LL_TIM_Init+0x9c>)
 8005674:	4290      	cmp	r0, r2
 8005676:	d007      	beq.n	8005688 <LL_TIM_Init+0x58>
 8005678:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800567c:	4290      	cmp	r0, r2
 800567e:	d003      	beq.n	8005688 <LL_TIM_Init+0x58>
 8005680:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005684:	4290      	cmp	r0, r2
 8005686:	d103      	bne.n	8005690 <LL_TIM_Init+0x60>
 8005688:	68ca      	ldr	r2, [r1, #12]
 800568a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800568e:	4313      	orrs	r3, r2
 8005690:	6003      	str	r3, [r0, #0]
 8005692:	688b      	ldr	r3, [r1, #8]
 8005694:	62c3      	str	r3, [r0, #44]	; 0x2c
 8005696:	880b      	ldrh	r3, [r1, #0]
 8005698:	6283      	str	r3, [r0, #40]	; 0x28
 800569a:	4b0b      	ldr	r3, [pc, #44]	; (80056c8 <LL_TIM_Init+0x98>)
 800569c:	4298      	cmp	r0, r3
 800569e:	d00b      	beq.n	80056b8 <LL_TIM_Init+0x88>
 80056a0:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80056a4:	4298      	cmp	r0, r3
 80056a6:	d007      	beq.n	80056b8 <LL_TIM_Init+0x88>
 80056a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056ac:	4298      	cmp	r0, r3
 80056ae:	d003      	beq.n	80056b8 <LL_TIM_Init+0x88>
 80056b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056b4:	4298      	cmp	r0, r3
 80056b6:	d101      	bne.n	80056bc <LL_TIM_Init+0x8c>
 80056b8:	690b      	ldr	r3, [r1, #16]
 80056ba:	6303      	str	r3, [r0, #48]	; 0x30
 80056bc:	6943      	ldr	r3, [r0, #20]
 80056be:	f043 0301 	orr.w	r3, r3, #1
 80056c2:	6143      	str	r3, [r0, #20]
 80056c4:	2000      	movs	r0, #0
 80056c6:	4770      	bx	lr
 80056c8:	40012c00 	.word	0x40012c00
 80056cc:	40014000 	.word	0x40014000

080056d0 <LL_USART_Init>:
 80056d0:	b530      	push	{r4, r5, lr}
 80056d2:	68c3      	ldr	r3, [r0, #12]
 80056d4:	b085      	sub	sp, #20
 80056d6:	049b      	lsls	r3, r3, #18
 80056d8:	4604      	mov	r4, r0
 80056da:	460d      	mov	r5, r1
 80056dc:	d502      	bpl.n	80056e4 <LL_USART_Init+0x14>
 80056de:	2001      	movs	r0, #1
 80056e0:	b005      	add	sp, #20
 80056e2:	bd30      	pop	{r4, r5, pc}
 80056e4:	684b      	ldr	r3, [r1, #4]
 80056e6:	68c9      	ldr	r1, [r1, #12]
 80056e8:	68c2      	ldr	r2, [r0, #12]
 80056ea:	430b      	orrs	r3, r1
 80056ec:	6929      	ldr	r1, [r5, #16]
 80056ee:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 80056f2:	430b      	orrs	r3, r1
 80056f4:	69a9      	ldr	r1, [r5, #24]
 80056f6:	f022 020c 	bic.w	r2, r2, #12
 80056fa:	430b      	orrs	r3, r1
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60c3      	str	r3, [r0, #12]
 8005700:	6903      	ldr	r3, [r0, #16]
 8005702:	68aa      	ldr	r2, [r5, #8]
 8005704:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005708:	4313      	orrs	r3, r2
 800570a:	6103      	str	r3, [r0, #16]
 800570c:	6943      	ldr	r3, [r0, #20]
 800570e:	696a      	ldr	r2, [r5, #20]
 8005710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005714:	4313      	orrs	r3, r2
 8005716:	6143      	str	r3, [r0, #20]
 8005718:	4668      	mov	r0, sp
 800571a:	f7ff ff79 	bl	8005610 <LL_RCC_GetSystemClocksFreq>
 800571e:	4b20      	ldr	r3, [pc, #128]	; (80057a0 <LL_USART_Init+0xd0>)
 8005720:	429c      	cmp	r4, r3
 8005722:	d125      	bne.n	8005770 <LL_USART_Init+0xa0>
 8005724:	9903      	ldr	r1, [sp, #12]
 8005726:	2900      	cmp	r1, #0
 8005728:	d0d9      	beq.n	80056de <LL_USART_Init+0xe>
 800572a:	682a      	ldr	r2, [r5, #0]
 800572c:	2a00      	cmp	r2, #0
 800572e:	d0d6      	beq.n	80056de <LL_USART_Init+0xe>
 8005730:	2319      	movs	r3, #25
 8005732:	434b      	muls	r3, r1
 8005734:	69a9      	ldr	r1, [r5, #24]
 8005736:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800573a:	f04f 0164 	mov.w	r1, #100	; 0x64
 800573e:	d120      	bne.n	8005782 <LL_USART_Init+0xb2>
 8005740:	0052      	lsls	r2, r2, #1
 8005742:	fbb3 f3f2 	udiv	r3, r3, r2
 8005746:	fbb3 f0f1 	udiv	r0, r3, r1
 800574a:	fb01 3310 	mls	r3, r1, r0, r3
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	3332      	adds	r3, #50	; 0x32
 8005752:	fbb3 f3f1 	udiv	r3, r3, r1
 8005756:	b29b      	uxth	r3, r3
 8005758:	f003 0207 	and.w	r2, r3, #7
 800575c:	005b      	lsls	r3, r3, #1
 800575e:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8005762:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005766:	4413      	add	r3, r2
 8005768:	b29b      	uxth	r3, r3
 800576a:	60a3      	str	r3, [r4, #8]
 800576c:	2000      	movs	r0, #0
 800576e:	e7b7      	b.n	80056e0 <LL_USART_Init+0x10>
 8005770:	4b0c      	ldr	r3, [pc, #48]	; (80057a4 <LL_USART_Init+0xd4>)
 8005772:	429c      	cmp	r4, r3
 8005774:	d101      	bne.n	800577a <LL_USART_Init+0xaa>
 8005776:	9902      	ldr	r1, [sp, #8]
 8005778:	e7d5      	b.n	8005726 <LL_USART_Init+0x56>
 800577a:	4b0b      	ldr	r3, [pc, #44]	; (80057a8 <LL_USART_Init+0xd8>)
 800577c:	429c      	cmp	r4, r3
 800577e:	d1ae      	bne.n	80056de <LL_USART_Init+0xe>
 8005780:	e7f9      	b.n	8005776 <LL_USART_Init+0xa6>
 8005782:	0092      	lsls	r2, r2, #2
 8005784:	fbb3 f3f2 	udiv	r3, r3, r2
 8005788:	fbb3 f2f1 	udiv	r2, r3, r1
 800578c:	fb01 3312 	mls	r3, r1, r2, r3
 8005790:	011b      	lsls	r3, r3, #4
 8005792:	3332      	adds	r3, #50	; 0x32
 8005794:	fbb3 f3f1 	udiv	r3, r3, r1
 8005798:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800579c:	e7e4      	b.n	8005768 <LL_USART_Init+0x98>
 800579e:	bf00      	nop
 80057a0:	40013800 	.word	0x40013800
 80057a4:	40004400 	.word	0x40004400
 80057a8:	40004800 	.word	0x40004800

080057ac <LL_Init1msTick>:
 80057ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057b0:	fbb0 f0f3 	udiv	r0, r0, r3
 80057b4:	2200      	movs	r2, #0
 80057b6:	4b03      	ldr	r3, [pc, #12]	; (80057c4 <LL_Init1msTick+0x18>)
 80057b8:	3801      	subs	r0, #1
 80057ba:	6058      	str	r0, [r3, #4]
 80057bc:	609a      	str	r2, [r3, #8]
 80057be:	2205      	movs	r2, #5
 80057c0:	601a      	str	r2, [r3, #0]
 80057c2:	4770      	bx	lr
 80057c4:	e000e010 	.word	0xe000e010

080057c8 <LL_SetSystemCoreClock>:
 80057c8:	4b01      	ldr	r3, [pc, #4]	; (80057d0 <LL_SetSystemCoreClock+0x8>)
 80057ca:	6018      	str	r0, [r3, #0]
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	20000290 	.word	0x20000290

080057d4 <__libc_init_array>:
 80057d4:	b570      	push	{r4, r5, r6, lr}
 80057d6:	2500      	movs	r5, #0
 80057d8:	4e0c      	ldr	r6, [pc, #48]	; (800580c <__libc_init_array+0x38>)
 80057da:	4c0d      	ldr	r4, [pc, #52]	; (8005810 <__libc_init_array+0x3c>)
 80057dc:	1ba4      	subs	r4, r4, r6
 80057de:	10a4      	asrs	r4, r4, #2
 80057e0:	42a5      	cmp	r5, r4
 80057e2:	d109      	bne.n	80057f8 <__libc_init_array+0x24>
 80057e4:	f000 f82e 	bl	8005844 <_init>
 80057e8:	2500      	movs	r5, #0
 80057ea:	4e0a      	ldr	r6, [pc, #40]	; (8005814 <__libc_init_array+0x40>)
 80057ec:	4c0a      	ldr	r4, [pc, #40]	; (8005818 <__libc_init_array+0x44>)
 80057ee:	1ba4      	subs	r4, r4, r6
 80057f0:	10a4      	asrs	r4, r4, #2
 80057f2:	42a5      	cmp	r5, r4
 80057f4:	d105      	bne.n	8005802 <__libc_init_array+0x2e>
 80057f6:	bd70      	pop	{r4, r5, r6, pc}
 80057f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057fc:	4798      	blx	r3
 80057fe:	3501      	adds	r5, #1
 8005800:	e7ee      	b.n	80057e0 <__libc_init_array+0xc>
 8005802:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005806:	4798      	blx	r3
 8005808:	3501      	adds	r5, #1
 800580a:	e7f2      	b.n	80057f2 <__libc_init_array+0x1e>
 800580c:	08006dc0 	.word	0x08006dc0
 8005810:	08006dc0 	.word	0x08006dc0
 8005814:	08006dc0 	.word	0x08006dc0
 8005818:	08006dc4 	.word	0x08006dc4

0800581c <memcpy>:
 800581c:	b510      	push	{r4, lr}
 800581e:	1e43      	subs	r3, r0, #1
 8005820:	440a      	add	r2, r1
 8005822:	4291      	cmp	r1, r2
 8005824:	d100      	bne.n	8005828 <memcpy+0xc>
 8005826:	bd10      	pop	{r4, pc}
 8005828:	f811 4b01 	ldrb.w	r4, [r1], #1
 800582c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005830:	e7f7      	b.n	8005822 <memcpy+0x6>

08005832 <memset>:
 8005832:	4603      	mov	r3, r0
 8005834:	4402      	add	r2, r0
 8005836:	4293      	cmp	r3, r2
 8005838:	d100      	bne.n	800583c <memset+0xa>
 800583a:	4770      	bx	lr
 800583c:	f803 1b01 	strb.w	r1, [r3], #1
 8005840:	e7f9      	b.n	8005836 <memset+0x4>
	...

08005844 <_init>:
 8005844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005846:	bf00      	nop
 8005848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800584a:	bc08      	pop	{r3}
 800584c:	469e      	mov	lr, r3
 800584e:	4770      	bx	lr

08005850 <_fini>:
 8005850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005852:	bf00      	nop
 8005854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005856:	bc08      	pop	{r3}
 8005858:	469e      	mov	lr, r3
 800585a:	4770      	bx	lr
